# name: test/sql/optimizer/test_no_pushdown_cast_into_cte.test
# description: No Pushdown cast into cte
# group: [optimizer]

statement ok
pragma explain_output='optimized_only';

query II
WITH t(a, b) AS (
  SELECT a :: int, b :: int
  FROM (VALUES
    ('1', '4'),
    ('5', '3'),
    ('2', '*'),
    ('3', '8'),
    ('7', '*')) AS _(a, b)
  WHERE position('*' in b) = 0
)
SELECT a, b
FROM   t
WHERE  a < b;
----
1	4
3	8


# check filter is above projection that casts the varchar to int
query II
EXPLAIN WITH t(a, b) AS (
  SELECT a :: int, b :: int
  FROM (VALUES
    ('1', '4'),
    ('5', '3'),
    ('2', '*'),
    ('3', '8'),
    ('7', '*')) AS _(a, b)
  WHERE position('*' in b) = 0
)
SELECT a, b
FROM   t
WHERE  a < b;
----
logical_opt	<REGEX>:.*FILTER.*CAST\(a AS INTEGER.*<.*b AS INTEGER\).*PROJECTION.*FILTER.*position.*


# INT can always be cast to varchar, so the filter a[1] = '1'
# can be pushed down
query II
with t(a, b) as  (
	select a :: varchar, b :: varchar
	FROM VALUES
	(1, 2),
	(3, 3),
	(5, 6),
	(7, 6) as
	_(a, b) where a <= b
) select a, b from t where a[1] = '1';
----
1	2


# we should not see two filters, since the filter can be pushed to just above the column data scan
query II
explain with t(a, b) as  (
	select a :: varchar, b :: varchar
	FROM VALUES
	(1, 2),
	(3, 3),
	(5, 6),
	(7, 6) as
	_(a, b) where a <= b
) select a, b from t where a[1] = '1';
----
logical_opt	<!REGEX>:.*FILTER.*PROJECTION.*FILTER.*


statement ok
create or replace table mytablename2 as
from (values
    ('a0'),
    ('a1'),
    ('a2'),
    ('xxx-0'),
    ('xxx-1'),
    ('xxx-2'),
    ('xxx-3'),
    ('xxxx'),
    ('xxx0'),
    ('xxx1'),
    ('xxx2'),
    ('xxx3')
) t(mycolname),
range(4300) b(someothercolname)


query I
select
    mycolname[2:]::int as mycolname2
from mytablename2
where mycolname[1:3] != 'xxx' AND mycolname2 = 0 limit 5;
----
0
0
0
0
0
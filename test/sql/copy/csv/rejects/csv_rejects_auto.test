# name: test/sql/copy/csv/rejects/csv_rejects_auto.test
# group: [rejects]

require skip_reload

# FIXME: https://github.com/duckdb/duckdb/issues/7755
require vector_size 2048

# Test invalid arguments
statement error
SELECT * FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/bad.csv', 
    ignore_errors=false,
    rejects_table='csv_rejects_table'
)
----
only supported when IGNORE_ERRORS is set to true

statement error
SELECT * FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/bad.csv', 
    ignore_errors=true,
    rejects_table='')
----
REJECTS_TABLE option cannot be empty

statement error
SELECT * FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/bad.csv', 
    ignore_errors=true,
    rejects_table='csv_rejects_table',
    union_by_name=true)
----
UNION_BY_NAME is set to true

statement error
SELECT * FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/bad.csv', 
    ignore_errors=true,
    rejects_limit=10)
----
REJECTS_LIMIT option is only supported when REJECTS_TABLE is set to a table name

statement error
SELECT * FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/bad.csv', 
    ignore_errors=true,
    rejects_table='csv_rejects_table',
    rejects_limit=-1)
----
REJECTS_LIMIT: cannot be negative

foreach PARALLEL true false

query III
SELECT typeof(first(column0)), typeof(first(column1)), COUNT(*) FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/big_bad*.csv',
    sample_size=3000,
    rejects_table='csv_rejects_table',
    ignore_errors=true, 
	parallel=${PARALLEL});
----
VARCHAR	VARCHAR	8192

statement ok
DROP TABLE csv_rejects_table;

# Ensure that we can get the schema if we reduce the sample size and ignore errors
query IIIII
SELECT typeof(first(column0)), typeof(first(column1)), COUNT(*), SUM(column0), MAX(len(column1)) FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/big_bad*.csv',
    sample_size=100,
    rejects_table='csv_rejects_table',
    ignore_errors=true,
	parallel=${PARALLEL});
----
BIGINT	VARCHAR	8188	8188	2

query IIIIII rowsort
SELECT regexp_replace("file", '\\', '/', 'g') , "line", "column", "column_name", "parsed_value", "error"
FROM csv_rejects_table;
----
test/sql/copy/csv/data/error/mismatch/big_bad.csv	2000	0	"column0"	B	Could not convert string 'B' to 'BIGINT'
test/sql/copy/csv/data/error/mismatch/big_bad.csv	4000	0	"column0"	C	Could not convert string 'C' to 'BIGINT'
test/sql/copy/csv/data/error/mismatch/big_bad2.csv	1000	0	"column0"	B	Could not convert string 'B' to 'BIGINT'
test/sql/copy/csv/data/error/mismatch/big_bad2.csv	3000	0	"column0"	C	Could not convert string 'C' to 'BIGINT'

statement ok
DROP TABLE csv_rejects_table;

# Test with recovery columns
query I
SELECT SUM(COL1) FROM read_csv_auto(
    'test/sql/copy/csv/data/error/mismatch/part*.csv',
    header=true,
    ignore_errors=true,
	sample_size=10,
    rejects_table='csv_rejects_table',
    rejects_recovery_columns=['COL2'],
	parallel=${PARALLEL});
----
12282

query IIIIIII rowsort
SELECT "line", "column", "column_name", "parsed_value", "recovery_columns", "error", regexp_replace("file", '\\', '/', 'g') 
FROM csv_rejects_table;
----
1001	0	"COL1"	B	{'COL2': BAD2B}	Could not convert string 'B' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part2.csv
2001	0	"COL1"	B	{'COL2': BAD1B}	Could not convert string 'B' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part1.csv
2001	0	"COL1"	B	{'COL2': BAD1B}	Could not convert string 'B' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part3.csv
3001	0	"COL1"	C	{'COL2': BAD2C}	Could not convert string 'C' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part2.csv
4001	0	"COL1"	C	{'COL2': BAD1C}	Could not convert string 'C' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part1.csv
4001	0	"COL1"	C	{'COL2': BAD1C}	Could not convert string 'C' to 'BIGINT'	test/sql/copy/csv/data/error/mismatch/part3.csv

statement ok
DROP TABLE csv_rejects_table;

# Test with lots of errors 
query I
SELECT SUM(num) FROM read_csv_auto(
	'test/sql/copy/csv/data/error/mismatch/half1.csv',
	header=true,
	ignore_errors=true,
	sample_size=1000,
	rejects_table='csv_rejects_table',
	parallel=${PARALLEL});
----
1024

query I
SELECT COUNT(*) FROM csv_rejects_table;
----
1024

statement ok
DROP TABLE csv_rejects_table;

# Test same with COPY
statement ok
CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);

statement ok
COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half1.csv' 
WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table');

query I
SELECT SUM(col1) FROM tbl1;
----
1024

query I
SELECT COUNT(*) FROM csv_rejects_table;
----
1024

statement ok
DROP TABLE csv_rejects_table;

statement ok
DROP TABLE tbl1;

# Test with more errors than STANDARD_VECTOR_SIZE
query I
SELECT SUM(num) FROM read_csv_auto(
	'test/sql/copy/csv/data/error/mismatch/half2.csv',
	header=true,
	ignore_errors=true,
	sample_size=1000,
	rejects_table='csv_rejects_table',
	parallel=${PARALLEL});
----
1024

query I
SELECT COUNT(*) FROM csv_rejects_table;
----
3072

statement ok
DROP TABLE csv_rejects_table;

statement ok
CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);

statement ok
COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half2.csv' 
WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table');

query I
SELECT SUM(col1) FROM tbl1;
----
1024

query I
SELECT COUNT(*) FROM csv_rejects_table;
----
3072

statement ok
DROP TABLE csv_rejects_table;

statement ok
DROP TABLE tbl1;

# Test with more errors than STANDARD_VECTOR_SIZE and limit
statement ok
CREATE TABLE tbl1 (col1 BIGINT, col2 VARCHAR);

statement ok
COPY tbl1 FROM 'test/sql/copy/csv/data/error/mismatch/half2.csv' 
WITH (HEADER, IGNORE_ERRORS TRUE, PARALLEL ${PARALLEL}, SAMPLE_SIZE 1000, REJECTS_TABLE 'csv_rejects_table', REJECTS_LIMIT 1337);

query I
SELECT SUM(col1) FROM tbl1;
----
1024

query I
SELECT COUNT(*) FROM csv_rejects_table;
----
1337

statement ok
DROP TABLE csv_rejects_table;

statement ok
DROP TABLE tbl1;


endloop PARALLEL
# name: test/sql/copy/csv/auto/test_csv_auto.test
# description: Test csv dialect detection
# group: [auto]

statement ok
PRAGMA enable_verification

statement ok 
PRAGMA verify_parallelism

query I
select columns FROM sniff_csv('data/csv/auto/mock_duckdb_test_data.csv', ignore_errors = true);
----
[{'name': id, 'type': BIGINT}, {'name': name, 'type': VARCHAR}, {'name': age, 'type': BIGINT}, {'name': sex, 'type': VARCHAR}, {'name': state, 'type': VARCHAR}]

query IIIII
FROM read_csv('data/csv/auto/mock_duckdb_test_data.csv', ignore_errors = true)
----
1	James	30	M	AL
2	Jill	32	F	CO
4	John	34	M	AS
5	Matthew	31	M	NULL
7	Olivia	36	F	OR
8	James	37	M	AZ
9	Titus	38	M	WY

statement error
select * from read_csv_auto('data/csv/dates.csv', auto_detect=false, delim=',', quote='"', columns={'a': 'VARCHAR'})
----
Expected Number of Columns: 1 Found: 2

query II
select * from read_csv_auto('data/csv/dates.csv')
----
919 304 6161	2008-08-10

query II
select * from read_csv_auto('data/csv/from_df.csv', quote='''')
----
'a,b,c'	45
NULL	234
hello	234
bye	2

# CSV file with RFC-conform dialect
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/rfc_conform.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST1	one space
345	TEST1	trailing_space 
567	TEST1	no_space

statement ok
DROP TABLE test;

# CSV file with RFC-conform dialect quote
# read_csv is an alias to read_csv_auto when no extra parameters are supplied
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/rfc_conform_quote.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST2	one space
345	TEST2	trailing_space, 
567	TEST2	no"space

statement ok
DROP TABLE test;

# CSV file with RFC-conform dialect quote/leading space of numerics
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/leading_space_numerics.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST3	text1
345	TEST3	text2
567	TEST3	text3

statement ok
DROP TABLE test;

# CSV file with bar delimiter
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/pipe_delim.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST4	text1
345	TEST4	text2
567	TEST4	text3

statement ok
DROP TABLE test;

# CSV file with bar delimiter and double quotes
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/pipe_delim_quote.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST5	text1
345	TEST5	text2|
567	TEST5	text3

statement ok
DROP TABLE test;

# CSV file with bar delimiter and double quotes and double escape
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/quote_escape.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST6	text1
345	TEST6	text"2"text
567	TEST6	text3

statement ok
DROP TABLE test;

# CSV file with bar delimiter and double quotes and backslash escape
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/backslash_escape.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST7	text1
345	TEST7	text"2"
567	TEST7	text3

statement ok
DROP TABLE test;

# CSV file with bar delimiter and single quotes and backslash escape
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/single_quote_backslash.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST8	text1
345	TEST8	text'2'text
567	TEST8	text3

statement ok
DROP TABLE test;

# CSV file with semicolon delimiter
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/semicolon_delim.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST9	text1
345	TEST9	text2
567	TEST9	text3

statement ok
DROP TABLE test;

# CSV file with semicolon delimiter and double quotes
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/semicolon_quote.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST10	text1
345	TEST10	text2
567	TEST10	te;xt3

statement ok
DROP TABLE test;

# CSV file with semicolon delimiter, double quotes and RFC escape
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/semicolon_escape.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST11	text1
345	TEST11	text2
567	TEST11	te"xt3

statement ok
DROP TABLE test;

# CSV file with tab delimiter
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/tab.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123	TEST12	text1
345	TEST12	text2
567	TEST12	text3

statement ok
DROP TABLE test;

# CSV file with tab delimiter and single quotes
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/tab_single_quote.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123
TEST13
text1
345
TEST13
te	xt2
567
TEST13
text3

statement ok
DROP TABLE test;

# CSV file with tab delimiter and single quotes without type-hint
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/tab_single_quote_varchar.csv');

query ITT
SELECT * FROM test ORDER BY column0;
----
123
TEST14
text1
345
TEST14
te	xt2
567
TEST14
text3

statement ok
DROP TABLE test;


# CSV file with trailing empty lines 
statement ok
CREATE TABLE test AS SELECT * FROM read_csv_auto ('data/csv/auto/issue_1254.csv');

query II
SELECT a, b FROM test;
----
1	2
1	2

statement ok
DROP TABLE test;
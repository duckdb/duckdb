# name: test/sql/copy/parquet/writer/write_stats_null_count.test
# description: Write null_count stats to Parquet files
# group: [writer]

require parquet

statement ok
PRAGMA enable_verification;

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

# null count
statement ok
COPY (SELECT 42 i) TO '__TEST_DIR__/stats.parquet' (FORMAT PARQUET);

query I
SELECT stats_null_count FROM parquet_metadata('__TEST_DIR__/stats.parquet')
----
0

# we can filter out the IS NULL clause
query II
EXPLAIN SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL
----
logical_opt	<!REGEX>:.*IS.*NULL.*

query I
SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL
----
0

statement ok
COPY (SELECT NULL i) TO '__TEST_DIR__/stats.parquet' (FORMAT PARQUET);

query I
SELECT stats_null_count FROM parquet_metadata('__TEST_DIR__/stats.parquet')
----
1

# we cannot filter out the IS NULL clause
query II
EXPLAIN SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL
----
logical_opt	<REGEX>:.*IS.*NULL.*

query I
SELECT COUNT(*) FROM '__TEST_DIR__/stats.parquet' WHERE i IS NULL
----
1

# list null count not supported (i.e. we don't write the null count in this case)
statement ok
COPY (SELECT [42, NULL, 43] i) TO '__TEST_DIR__/stats.parquet' (FORMAT PARQUET);

query I
SELECT stats_null_count FROM parquet_metadata('__TEST_DIR__/stats.parquet')
----
NULL

statement ok
COPY (SELECT {'a': NULL, 'b': 42} i) TO '__TEST_DIR__/stats.parquet' (FORMAT PARQUET);

query I
SELECT stats_null_count FROM parquet_metadata('__TEST_DIR__/stats.parquet')
----
1
0

# struct null count is propagated to the children
# i.e. if a struct itself is null, this counts as NULL for the children
statement ok
CREATE TABLE structs AS SELECT {'a': NULL, 'b': 'hello'} i UNION ALL SELECT NULL UNION ALL SELECT {'a': 84, 'b': 'world'};

statement ok
COPY structs TO '__TEST_DIR__/stats.parquet' (FORMAT PARQUET);

query I
SELECT stats_null_count FROM parquet_metadata('__TEST_DIR__/stats.parquet')
----
2
1

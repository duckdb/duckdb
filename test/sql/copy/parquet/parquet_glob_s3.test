# name: test/sql/copy/parquet/parquet_glob_s3.test
# description: Test basic globbing of parquet files over s3
# group: [parquet]

require parquet

require httpfs

require-env S3_TEST_SERVER_AVAILABLE 1

# Require that these environment variables are also set

require-env AWS_DEFAULT_REGION

require-env AWS_ACCESS_KEY_ID

require-env AWS_SECRET_ACCESS_KEY

require-env DUCKDB_S3_ENDPOINT

require-env DUCKDB_S3_USE_SSL

# override the default behaviour of skipping HTTP errors and connection failures: this test fails on connection issues
set ignore_error_messages

# Copy files to S3 before beginning tests
statement ok
COPY (select * from 'data/parquet-testing/glob/t1.parquet') to 's3://test-bucket/parquet_glob_s3/glob/t1.parquet';
COPY (select * from 'data/parquet-testing/glob/t2.parquet') to 's3://test-bucket/parquet_glob_s3/glob/t2.parquet';
COPY (select * from 'data/parquet-testing/glob2/t1.parquet') to 's3://test-bucket/parquet_glob_s3/glob2/t1.parquet';
COPY (select * from 'data/parquet-testing/glob/t1.parquet') to 's3://test-bucket/parquet_glob_s3/with+plus/t1.parquet';
COPY (select * from 'data/parquet-testing/glob/t1.parquet') to 's3://test-bucket/parquet_glob_s3/with space/t1.parquet';

# parquet glob with COPY FROM
statement ok
CREATE TABLE vals (i INTEGER, j BLOB)

statement ok
COPY vals FROM 's3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet' (FORMAT PARQUET);

query II
SELECT * FROM vals ORDER BY 1, 2
----
1	a
2	b

# failed to copy: incorrect types found in parquet file
statement ok
CREATE TABLE vals2 (i INTEGER, j INTEGER)

statement error
COPY vals2 FROM 's3://test-bucket/parquet_glob_s3/nonexistentfolderblablabla/t*.parquet' (FORMAT PARQUET);

# Test variety of urls with both url styles
foreach urlstyle path vhost

statement ok
SET s3_url_style='${urlstyle}'

# Begin tests
query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/t[0-9].parquet')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*.parquet')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/*.parquet')
----
3

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/t1.parquet')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/with*/*.parquet')
----
2

# schema mismatch in parquet glob
statement error
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/notglob/*.parquet')

# parallel testing
statement ok
PRAGMA threads=4

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/*.parquet')
----
2

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/*.parquet')
----
3

query I
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/g*/t1.parquet')
----
2

# Question mark is not supported for S3 due to our use of query parameters
statement error
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/glob/t?.parquet')
----
IO Error: Invalid query parameters found.

statement error
select count(*) from parquet_scan('s3://test-bucket/parquet_glob_s3/?lob/t?.parquet')
----
IO Error: Invalid query parameters found.

# Finally, enabling url compatibility mode will disable globs allowing a user to query files with special chars
statement ok
SET s3_url_compatibility_mode=true;

# Note that this is actually a file called '?.*[1-0]parquet??' which S3 should theoretically accept;
statement ok
COPY vals TO 's3://test-bucket/the_horror/?.*[1-0]parquetta??' (FORMAT parquet);

query I
select count(*) from parquet_scan('s3://test-bucket/the_horror/?.*[1-0]parquetta??');
----
2

statement ok
SET s3_url_compatibility_mode=false;

endloop

# sanity check for request count
# we expect 1 HEAD request per file for the open call, then 1 GET for the list call
# then for each file 1 for the metadata offset and 1 for the metadata
query II
EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';
----
analyzed_plan	<REGEX>:.*HTTP Stats.*\#HEAD\: 3.*GET\: 7.*PUT\: 0.*\#POST\: 0.*

statement ok
SET enable_http_metadata_cache=true;

# metadata cache was just enabled, its still cold
query II
EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';
----
analyzed_plan	<REGEX>:.*HTTP Stats.*\#HEAD\: 3.*GET\: 7.*PUT\: 0.*\#POST\: 0.*

# now head request count should be 0
query II
EXPLAIN ANALYZE SELECT COUNT(*) FROM 's3://test-bucket/parquet_glob_s3/g*/*.parquet';
----
analyzed_plan	<REGEX>:.*HTTP Stats.*\#HEAD\: 0.*GET\: 7.*PUT\: 0.*\#POST\: 0.*

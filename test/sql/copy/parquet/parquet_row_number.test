# name: test/sql/copy/parquet/parquet_row_number.test
# description: Test the file_row_number option of the parquet reader
# group: [parquet]

#
statement ok
PRAGMA enable_verification

require parquet

query IIII
select min(file_row_number), max(file_row_number), avg(file_row_number),  count(*) from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1);
----
0	9999	4999.5	10000


query III
select sum(row_number_lag), min(row_number_lag), max(row_number_lag)  from (select file_row_number - LAG(file_row_number) OVER (ORDER BY file_row_number) as row_number_lag from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1));
----
9999	1	1

query IIII
select min(file_row_number), max(file_row_number), avg(file_row_number), count(*) from parquet_scan('data/parquet-testing/manyrowgroups.parquet', file_row_number=1);
----
0	1000	500.0	1001


query III
select sum(row_number_lag), min(row_number_lag), max(row_number_lag)  from (select file_row_number - LAG(file_row_number) OVER (ORDER BY file_row_number) as row_number_lag from parquet_scan('data/parquet-testing/manyrowgroups.parquet', file_row_number=1));
----
1000	1	1


statement ok
PRAGMA disable_verification


# lets eliminate some row groups using parquet stats and see what happens
query IIII
select row_group_id, row_group_num_rows, stats_min, stats_max from parquet_metadata('data/parquet-testing/file_row_number.parquet') order by row_group_id
----
0	1000	0	999
1	1000	1000	1999
2	1000	2000	2999
3	1000	3000	3999
4	1000	4000	4999
5	1000	5000	5999
6	1000	6000	6999
7	1000	7000	7999
8	1000	8000	8999
9	1000	9000	9999

query I
select stats(seq) from parquet_scan('data/parquet-testing/file_row_number.parquet') limit 1
----
[Min: 0, Max: 9999][Has Null: false, Has No Null: true]

query III
select min(file_row_number), max(file_row_number), count(*) from parquet_scan('data/parquet-testing/file_row_number.parquet', file_row_number=1) where seq > 6500;
----
6501	9999	3499


# stats tests
query I
select first(stats(file_row_number)) from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1);
----
[Min: 0, Max: 10000][Has Null: false, Has No Null: true]

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

query II nosort empty_result
explain select 1 from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1) where file_row_number > 10000;
----
logical_opt	<REGEX>:.*EMPTY_RESULT.*

query II nosort empty_result
explain select 1 from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1) where file_row_number < 0;
----
logical_opt	<REGEX>:.*EMPTY_RESULT.*

query II nosort empty_result
explain select 1 from parquet_scan('data/parquet-testing/lineitem-top10000.gzip.parquet', file_row_number=1) where file_row_number is null;
----
logical_opt	<REGEX>:.*EMPTY_RESULT.*

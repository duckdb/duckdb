# name: test/sql/types/map/map_const_and_col_combination.test
# description: Test MAP creation if one list is a constant and the other list contains columnar data
# group: [map]

statement ok
PRAGMA enable_verification;

statement ok
CREATE TABLE ints (i INT);

statement ok
INSERT INTO ints VALUES (1), (2), (3);

query I
SELECT MAP(['name'], [i]) FROM ints;
----
{name=1}
{name=2}
{name=3}

statement error
SELECT MAP(['x', 'y'], [i] ) FROM ints;
----
The map key list does not align with the map value list

query I
SELECT MAP([i], ['name'] ) FROM ints;
----
{1=name}
{2=name}
{3=name}

query I
SELECT MAP([i, i+1], ['x', 'y']) FROM ints;
----
{1=x, 2=y}
{2=x, 3=y}
{3=x, 4=y}

query I
SELECT MAP([i, i+1], ['x', 'y']) FROM ints WHERE i > 1;
----
{2=x, 3=y}
{3=x, 4=y}

query I
SELECT MAP(['x'], [m]) FROM (SELECT MAP([i], ['y']) m FROM ints WHERE i <> 1);
----
{x={2=y}}
{x={3=y}}

query I
SELECT MAP(['key'], [range]) FROM range(5) WHERE range > 2;
----
{key=3}
{key=4}

query I
SELECT MAP(['ü¶Ü', 'ü¶§', 'üêì'], [i, i+1, i+2]) FROM ints;
----
{ü¶Ü=1, ü¶§=2, üêì=3}
{ü¶Ü=2, ü¶§=3, üêì=4}
{ü¶Ü=3, ü¶§=4, üêì=5}

query I
SELECT MAP([10, i, i+1, 9], [i, 3.14, 0.12, 8.0]) FROM ints;
----
{10=1.00, 1=3.14, 2=0.12, 9=8.00}
{10=2.00, 2=3.14, 3=0.12, 9=8.00}
{10=3.00, 3=3.14, 4=0.12, 9=8.00}

statement ok
CREATE TABLE tbl (v VARCHAR[]);

statement ok
INSERT INTO tbl VALUES (ARRAY['test', 'string']), (ARRAY['foo', 'bar']);

query I
SELECT MAP(['x', 'y'], v ) FROM tbl;
----
{x=test, y=string}
{x=foo, y=bar}

# test mismatching lists of the same total length

statement ok
CREATE TABLE MAP_input (keys INT[], values INT[]);

statement ok
INSERT INTO MAP_input VALUES ([1, 0], [2]), ([3], [4, 9]);

statement error
SELECT MAP(keys, values) FROM MAP_input;
----
The map key list does not align with the map value list

statement ok
CREATE TABLE groups (category INT, score INT);

statement ok
INSERT INTO groups VALUES (1,2), (1,8), (1,3), (2,3), (2,4), (2,5), (3,6), (3,1), (3,9)

query I
SELECT MAP(['category', 'min', 'max'], [category, MIN(score), MAX(score)]) FROM groups GROUP BY category ORDER BY ALL;
----
{category=1, min=2, max=8}
{category=2, min=3, max=5}
{category=3, min=1, max=9}

# test a MAP with larger-than-vector-size cardinalities

query I
SELECT MAP([range], ['a']) FROM range(10000) WHERE range = 9999;
----
{9999=a}

# the constant list has to align

statement ok
CREATE TABLE align_tbl (i INT[]);

statement ok
INSERT INTO align_tbl VALUES ([1, 2]), ([100, 200]);

query I
SELECT MAP(['x', 'y'], i) FROM align_tbl;
----
{x=1, y=2}
{x=100, y=200}

statement ok
INSERT INTO align_tbl VALUES ([1, 2, 3, 4, 5, 6]), ([20, 30, 40, 50]);

statement error
SELECT MAP(['x', 'y'], i) FROM align_tbl;
----
The map key list does not align with the map value list

statement error
SELECT MAP(['x', 'y', '1', '2', '3', '4'], i) FROM align_tbl;
----
The map key list does not align with the map value list

statement error
SELECT MAP(i, ['x', 'y']) FROM align_tbl;
----
The map key list does not align with the map value list

# test all const

statement ok
CREATE TABLE allconst (i INT);

statement ok
INSERT INTO allconst VALUES (1), (2), (3);

query I
SELECT MAP(['name'], [2]) FROM allconst;
----
{name=2}
{name=2}
{name=2}

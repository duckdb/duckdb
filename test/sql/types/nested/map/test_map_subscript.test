# name: test/sql/types/nested/map/test_map_subscript.test
# description: Test cardinality function for maps
# group: [map]

statement ok
pragma enable_verification

# Single element on map
query I
select m[1] from (select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----
[10]

#Element not present on MAP
query I
select m[0] from (select MAP(LIST_VALUE(1, 2, 3, 4,5),LIST_VALUE(10, 9, 8, 7,11)) as m) as T
----
[]

# Keys of a MAP can not be NULL
statement error
select m[NULL] from (select MAP(LIST_VALUE(1, 2, 3, 4,5, NULL),LIST_VALUE(10, 9, 8, 7,11,42)) as m) as T
----

# Null not present on map
query I
select m[NULL] from (select MAP(LIST_VALUE(1, 2, 3, 4,5),LIST_VALUE(10, 9, 8, 7,11)) as m) as T
----
[]

# Keys of a MAP have to be unique
statement error
select m[2] from (select MAP(LIST_VALUE(1, 2, 3, 4,2),LIST_VALUE(10, 9, 8, 7,11)) as m) as T
----

# Empty maps
query I
select m[2] from (select MAP(LIST_VALUE(),LIST_VALUE()) as m) as T
----
[]

query I
select m[2] from (select MAP() as m) as T
----
[]

# Check autocast
query I
select m[2::TINYINT] from (select MAP(LIST_VALUE(1, 2, 3, 4,5),LIST_VALUE(10, 9, 8, 7,11)) as m) as T
----
[9]


# Keys of a MAP have to be unique
statement error
select m['Jon Lajoie'] from (select MAP(LIST_VALUE('Jon Lajoie', 'Backstreet Boys', 'Tenacious D','Jon Lajoie' ),LIST_VALUE(10,9,10,11)) as m) as T
----

query I
select m['Spice Girls'] from (select MAP(LIST_VALUE('Jon Lajoie', 'Backstreet Boys', 'Tenacious D' ),LIST_VALUE(10,9,10)) as m) as T
----
[]

query I
select m[NULL] from (select MAP(LIST_VALUE('Jon Lajoie', 'Backstreet Boys', 'Tenacious D' ),LIST_VALUE(10,9,10)) as m) as T
----
[]

query I
select m['Tenacious D'] from (select MAP(LIST_VALUE('Jon Lajoie', 'Backstreet Boys', 'Tenacious D'),LIST_VALUE(10,9,1)) as m) as T
----
[1]

query I
select m[0] from (select MAP(LIST_VALUE('Jon Lajoie', 'Backstreet Boys', 'Tenacious D' ),LIST_VALUE(10,9,10)) as m) as T
----
[]

query I
select map_extract(m,1) from (select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----
[10]

query I
select map_extract(m,3) from (select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----
[8]

query I
select element_at(m,1) from (select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----
[10]

query I
select element_at(m,3) from (select MAP(LIST_VALUE(1, 2, 3, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----
[8]

#Map with larger-than-vector-size cardinalities
query I
select m[10] from (select MAP(lst,lst) as m from (SELECT LIST(i) as lst FROM range(10000) tbl(i)) as lst_tbl) as T
----
[10]

#Duplicate keys in a map
statement error
select m[1] from (select MAP(LIST_VALUE(1, 1, 1, 4),LIST_VALUE(10, 9, 8, 7)) as m) as T
----

#String search with a bunch of NULL values in the map
statement error
select m[NULL] from (select MAP(LIST_VALUE('Jon Lajoie', NULL, 'Tenacious D',NULL,NULL ),LIST_VALUE(10,9,10,11,13)) as m) as T
----

query I
select m['Jon Lajoie'] from (select MAP(LIST_VALUE('Jon Lajoie', 'Tenacious D'),LIST_VALUE(10,1)) as m) as T
----
[10]

#A map with only NULL values as key or value (or both)
query I
select m[10] from (select MAP(LIST_VALUE(10,9,1,11,13),LIST_VALUE(NULL, NULL, NULL,NULL,NULL)) as m) as T
----
[NULL]

statement error
select m[NULL] from (select MAP(LIST_VALUE(NULL, NULL, NULL,NULL,NULL ),LIST_VALUE(10,9,10,11,13)) as m) as T
----

statement error
select m[NULL] from (select MAP(LIST_VALUE(NULL, NULL, NULL,NULL, NULL),LIST_VALUE(NULL, NULL, NULL,NULL,NULL )) as m) as T
----

#Searching using a non-constant value (e.g. select m[a] from ...)
statement ok
create table ints (a integer, b integer)

statement ok
insert into ints values (1,1), (2,2),(3,3),(4,4)

query I
select m from (select MAP(lsta,lstb) as m from (SELECT list(a) as lsta, list(b) as lstb FROM ints where a < 4 and b > 1) as lst_tbl) as T
----
{2=2, 3=3}

query I
select m[2] from (select MAP(lsta,lstb) as m from (SELECT list(a) as lsta, list(b) as lstb FROM ints where a < 4 and b > 1) as lst_tbl) as T
----
[2]

#What about multiple rows each with a map, instead of just a single row?
statement ok
insert into ints values (5,1), (1,2),(2,3),(6,4)

query I
select m from (select MAP(lsta,lstb) as m from (SELECT list(a) as lsta, list(b) as lstb FROM ints group by b) as lst_tbl) as T ORDER BY ALL
----
{1=1, 5=1}
{2=2, 1=2}
{3=3, 2=3}
{4=4, 6=4}

query I
select m[1] from (select MAP(lsta,lstb) as m from (SELECT list(a) as lsta, list(b) as lstb FROM ints group by b) as lst_tbl) as T ORDER BY ALL
----
[]
[]
[1]
[2]

#What about multiple rows each with a map, with a selection vector on top of them (e.g. because of a WHERE clause)?
statement ok
insert into ints values (1,4)

query I
select m[1] from (select MAP(lsta,lstb) as m from (SELECT list(a) as lsta, list(b) as lstb FROM ints where b <4 group by b) as lst_tbl) as T ORDER BY ALL
----
[]
[1]
[2]

#map_extract directly on a constant map (SELECT map_extract(MAP(..)), i.e. no FROM clause).
query I
SELECT map_extract(MAP(LIST_VALUE(10,9,12,11,13),LIST_VALUE(10,9,10,11,13)),10)
----
[10]

#Multiple constants
query I
select m[1] from (select MAP(list_value(1), list_value(2)) from range(5) tbl(i)) tbl(m);
----
[2]
[2]
[2]
[2]
[2]

#Test dictionary vectors
query III rowsort
select grp, m, case when grp>1 then m[0] else list_value(null) end
from (select grp, MAP(lsta,lstb) as m
from (SELECT a%4 as grp, list(a) as lsta, list(a) as lstb FROM range(7) tbl(a) group by grp) as lst_tbl) as T;
----
0	{0=0, 4=4}	[NULL]
1	{1=1, 5=5}	[NULL]
2	{2=2, 6=6}	[]
3	{3=3}	[]

query I
select MAP_EXTRACT(MAP([],[]), NULL)
----
[]

query I
select MAP_EXTRACT(MAP(NULL, NULL), NULL)
----
[]

query I
select MAP_EXTRACT(NULL, NULL)
----
[]

query I
select MAP_EXTRACT(NULL::MAP("NULL", "NULL"), NULL)
----
[]

query I
select MAP_EXTRACT(NULL::MAP(INT, BIGINT), NULL)
----
[]

# name: test/sql/types/nested/map/test_map_keys.test
# group: [map]

statement ok
pragma enable_verification;

# Empty
query I
select map_keys(MAP([],[]));
----
[]

# Single entry
query I
select map_keys(MAP(['a'],[5]));
----
[a]

# Multiple entries
query I
select map_keys(MAP(['a', 'b', 'c', 'd'], [5,1,8,3]))
----
[a, b, c, d]

# Null
query I
select map_keys(NULL)
----
NULL

# Map keys can not be NULL, so more extensive tests for NULL are not possible
statement ok
CREATE TABLE t1 (list STRUCT(a INT, b VARCHAR)[]);

statement ok
INSERT INTO t1 VALUES (ARRAY[(1, 'x'), (2, 'y'), (4, 's')]);

# Single row
query I
SELECT map_keys(MAP_FROM_ENTRIES(list)) FROM t1;
----
[1, 2, 4]

statement ok
INSERT INTO t1 VALUES (ARRAY[(2, 'a'), (3,'b')])

statement ok
INSERT INTO t1 VALUES (ARRAY[(6, 'h'), (7,'g')])

# Three rows
query I
SELECT map_keys(MAP_FROM_ENTRIES(list)) FROM t1;
----
[1, 2, 4]
[2, 3]
[6, 7]

statement ok
INSERT INTO t1 VALUES (NULL)

query I
SELECT map_keys(MAP_FROM_ENTRIES(list)) FROM t1;
----
[1, 2, 4]
[2, 3]
[6, 7]
NULL

# Used in lambdas
statement ok
create table tbl (
	maps MAP(integer, text)[]
);

statement ok
insert into tbl VALUES (
	[
		MAP([5,3,2],['a','c','b']),
		MAP([1], [NULL]),
		MAP([7,9,1,3,5,6], ['ab','c','d','ef','ba','he'])
	]
);

query I
select list_apply(maps, x -> map_keys(x)) from tbl;
----
[[5, 3, 2], [1], [7, 9, 1, 3, 5, 6]]

# Used in macros
statement ok
CREATE MACRO map_keys_macro(x) AS (map_keys(x))

query I
select map_keys_macro(map_from_entries(list)) from t1;
----
[1, 2, 4]
[2, 3]
[6, 7]
NULL

# Select the map, and the map_keys sorted, to show that the sort does not impact the original map
query II
select maps, list_apply(maps, x -> list_sort(map_keys(x))) from tbl;
----
[{5=a, 3=c, 2=b}, {1=NULL}, {7=ab, 9=c, 1=d, 3=ef, 5=ba, 6=he}]	[[2, 3, 5], [1], [1, 3, 5, 6, 7, 9]]

query II
select maps, list_apply(maps, x -> map(list_sort(map_keys(x)), list_sort(map_values(x)))) from tbl;
----
[{5=a, 3=c, 2=b}, {1=NULL}, {7=ab, 9=c, 1=d, 3=ef, 5=ba, 6=he}]	[{2=a, 3=b, 5=c}, {1=NULL}, {1=ab, 3=ba, 5=c, 6=d, 7=ef, 9=he}]

# Filters

statement ok
create table filtered (
	col map(integer, integer),
	idx integer
);

statement ok
insert into filtered VALUES (
	map([7,4,9,1],[NULL,4,7,5]),
	0
), (
	map([6,3,87,2],[0,NULL,5,NULL]),
	1
), (
	map([7,4,9],[8,3,4]),
	2
), (
	map([9,2,7,5,8,1],[NULL,NULL,4,5,6,7]),
	3
);

# Dictionary vector as input
query I
select map_keys(col) from filtered where idx % 2 != 0;
----
[6, 3, 87, 2]
[9, 2, 7, 5, 8, 1]

# name: test/sql/types/nested/array/array_try_cast.test
# group: [array]

statement ok
PRAGMA enable_verification

query I
SELECT TRY_CAST(array_value(1,2) as INTEGER[3]);
----
NULL

statement error
SELECT CAST(array_value(1,2) as INTEGER[3]);
----
Conversion Error: Cannot cast array of size 2 to array of size 3

# Nested array try cast
query I
SELECT TRY_CAST(x as INT[2][2]) FROM (VALUES ([[1,2],[3,4]]), ([[5,6],[7,8]])) AS t(x)
----
[[1, 2], [3, 4]]
[[5, 6], [7, 8]]

query I
SELECT TRY_CAST(x as INT[2][2]) FROM (VALUES ([[1,2],[3,4]]), ([[5,6],[7,8,9]])) AS t(x)
----
[[1, 2], [3, 4]]
[[5, 6], NULL]

statement error
SELECT CAST(x as INT[2][2]) FROM (VALUES ([[1,2],[3,4]]), ([[5,6],[7,8,9]])) AS t(x)
----
Cannot cast list with length 3 to array with length 2

query I
SELECT TRY_CAST(x as INT[2][2]) FROM (VALUES ([[1,2],[3,4]]), ([[5,6],[7,8],[9,10]])) AS t(x)
----
[[1, 2], [3, 4]]
NULL

statement error
SELECT CAST(x as INT[2][2]) FROM (VALUES ([[1,2],[3,4]]), ([[5,6],[7,8],[9,10]])) AS t(x)
----
Conversion Error: Cannot cast list with length 3 to array with length 2

# VARCHAR -> ARRAY
query I
SELECT TRY_CAST('[1,2]' as INTEGER[3]);
----
NULL

statement error
SELECT CAST('[1,2]' as INTEGER[3]);
----
Conversion Error: Type VARCHAR with value '[1,2]' can't be cast to the destination type ARRAY[3], the size of the array must match the destination type

query I
SELECT CAST('[NULL, [1], [NULL]]' as INTEGER[1][3]);
----
[NULL, [1], [NULL]]

query I
SELECT TRY_CAST('[NULL, [1], [abc]]' as INTEGER[1][3])
----
[NULL, [1], [NULL]]

query I
SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2,3]]' as INTEGER[3][3]);
----
[NULL, [1, NULL, 3], [1, 2, 3]]

query I
SELECT CAST('[NULL, [1,NULL,3], [1,2,3]]' as INTEGER[3][3]);
----
[NULL, [1, NULL, 3], [1, 2, 3]]

statement error
SELECT CAST('[NULL, [1,NULL,3], [1,2]]' as INTEGER[3][3]);
----
Conversion Error: Type VARCHAR with value '[1,2]' can't be cast to the destination type ARRAY[3], the size of the array must match the destination type

query I
SELECT TRY_CAST('[NULL, [1,NULL,3], [1,2]]' as INTEGER[3][3]);
----
[NULL, [1, NULL, 3], NULL]

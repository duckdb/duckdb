# name: test/sql/types/nested/list/test_nested_list.test
# description: Test filter and projection of nested lists
# group: [list]

statement ok
SET default_null_order='nulls_first';

statement ok
PRAGMA enable_verification

# otherwise sorting order of lists is undefined
statement ok
PRAGMA threads=1

# scalar nested lists
query I
SELECT [{'i': 1,'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}];
----
[{'i': 1, 'j': [2, 3]}, NULL, {'i': 1, 'j': [2, 3]}]

statement ok
CREATE TABLE list_data (g INTEGER, e INTEGER)

statement ok
INSERT INTO list_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL)

query T
SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)
----
[1, 2, 3]

query I
SELECT UNNEST(l1) FROM (SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)) t1
----
1
2
3

query TT
SELECT * FROM (SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)) t1, (SELECT LIST(b) l2 FROM (VALUES (4), (5), (6), (7)) AS t2 (b)) t2
----
[1, 2, 3]	[4, 5, 6, 7]

query II
SELECT UNNEST(l1) u1, UNNEST(l2) u2 FROM (SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)) t1, (SELECT LIST(b) l2 FROM (VALUES (4), (5), (6), (7)) AS t2 (b)) t2
----
1	4
2	5
3	6
NULL	7

query IT
SELECT UNNEST(l1), l2 FROM (SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)) t1, 	(SELECT LIST(b) l2 FROM (VALUES (4), (5), (6), (7)) AS t2 (b)) t2
----
1	[4, 5, 6, 7]
2	[4, 5, 6, 7]
3	[4, 5, 6, 7]

query TI
SELECT l1, UNNEST(l2) FROM (SELECT LIST(a) l1 FROM (VALUES (1), (2), (3)) AS t1 (a)) t1, (SELECT LIST(b) l2 FROM (VALUES (4), (5), (6), (7)) AS t2 (b)) t2
----
[1, 2, 3]	4
[1, 2, 3]	5
[1, 2, 3]	6
[1, 2, 3]	7

query IT
SELECT UNNEST(LIST(e)) ue, LIST(g) from list_data ORDER BY 1 NULLS LAST
----
1	[1, 1, 2, 2, 2, 3, 5]
2	[1, 1, 2, 2, 2, 3, 5]
3	[1, 1, 2, 2, 2, 3, 5]
4	[1, 1, 2, 2, 2, 3, 5]
5	[1, 1, 2, 2, 2, 3, 5]
6	[1, 1, 2, 2, 2, 3, 5]
NULL	[1, 1, 2, 2, 2, 3, 5]

query IT
SELECT g, LIST(e) from list_data GROUP BY g ORDER BY g
----
1	[1, 2]
2	[3, 4, 5]
3	[6]
5	[NULL]

query ITT
SELECT g, LIST(e) l1, LIST(e) l2 from list_data GROUP BY g ORDER BY g
----
1	[1, 2]	[1, 2]
2	[3, 4, 5]	[3, 4, 5]
3	[6]	[6]
5	[NULL]	[NULL]

query IT
SELECT g, LIST(e/2.0) from list_data GROUP BY g order by g
----
1	[0.5, 1.0]
2	[1.5, 2.0, 2.5]
3	[3.0]
5	[NULL]

query IT
SELECT g, LIST(CAST(e AS VARCHAR)) from list_data GROUP BY g order by g
----
1	[1, 2]
2	[3, 4, 5]
3	[6]
5	[NULL]

query T
SELECT LIST(e) from list_data
----
[1, 2, 3, 4, 5, 6, NULL]

query I
SELECT UNNEST(LIST(e)) ue from list_data ORDER BY ue
----
NULL
1
2
3
4
5
6

query TT
SELECT LIST(e), LIST(g) from list_data
----
[1, 2, 3, 4, 5, 6, NULL]	[1, 1, 2, 2, 2, 3, 5]

query T
SELECT LIST(42)
----
[42]

query T
SELECT LIST(42) FROM list_data
----
[42, 42, 42, 42, 42, 42, 42]

query I
SELECT UNNEST(LIST(42))
----
42

# unlist is alias of unnest for symmetry reasons
query I
SELECT UNLIST(LIST(42))
----
42

query II
SELECT UNNEST(LIST(e)) ue, UNNEST(LIST(g)) ug from list_data ORDER BY ue
----
NULL	5
1	1
2	1
3	2
4	2
5	2
6	3

query III
SELECT g, UNNEST(LIST(e)) ue, UNNEST(LIST(e+1)) ue2 from list_data GROUP BY g ORDER BY ue
----
5	NULL	NULL
1	1	2
1	2	3
2	3	4
2	4	5
2	5	6
3	6	7

query II
SELECT g, UNNEST(l) u FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1 ORDER BY u
----
5	NULL
1	1
1	2
2	3
2	4
2	5
3	6

query II
SELECT g, UNNEST(l)+1 u FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1 ORDER BY u
----
5	NULL
1	2
1	3
2	4
2	5
2	6
3	7

# omg omg, list of structs, structs of lists
query IT
SELECT g, STRUCT_PACK(a := g, b := le) sl FROM (SELECT g, LIST(e) le from list_data GROUP BY g) xx WHERE g < 3 ORDER BY g
----
1	{'a': 1, 'b': [1, 2]}
2	{'a': 2, 'b': [3, 4, 5]}

query T
SELECT LIST(STRUCT_PACK(a := g, b := le)) mind_blown FROM (SELECT g, LIST(e) le from list_data  GROUP BY g ORDER BY g) xx
----
[{'a': 1, 'b': [1, 2]}, {'a': 2, 'b': [3, 4, 5]}, {'a': 3, 'b': [6]}, {'a': 5, 'b': [NULL]}]

query IT
SELECT g, LIST(STRUCT_PACK(a := e, b := e+1)) ls from list_data GROUP BY g ORDER BY g
----
1	[{'a': 1, 'b': 2}, {'a': 2, 'b': 3}]
2	[{'a': 3, 'b': 4}, {'a': 4, 'b': 5}, {'a': 5, 'b': 6}]
3	[{'a': 6, 'b': 7}]
5	[{'a': NULL, 'b': NULL}]

# TODO check second col
query IT
SELECT g, LIST(STRUCT_PACK(a := e, b := e+1)) ls from list_data WHERE g > 2 GROUP BY g ORDER BY g
----
3	[{'a': 6, 'b': 7}]
5	[{'a': NULL, 'b': NULL}]

# list of list of int
query IT
SELECT g2, LIST(le) FROM (SELECT g % 2 g2, LIST(e) le from list_data GROUP BY g ORDER BY g) sq 	GROUP BY g2 ORDER BY g2
----
0	[[3, 4, 5]]
1	[[1, 2], [6], [NULL]]

query R
SELECT SUM(ue) FROM (SELECT UNNEST(le) ue FROM (SELECT g, LIST(e) le from list_data  GROUP BY g ORDER BY g) xx) xy
----
21.000000

# this is technically equivalent but is not supported
statement error
SELECT SUM(UNNEST(le)) FROM ( SELECT g, LIST(e) le from list_data  GROUP BY g ORDER BY g) xx

# you're holding it wrong
statement error
SELECT LIST(LIST(42))

statement error
SELECT UNNEST(UNNEST(LIST(42))

statement error
SELECT LIST()

statement error
SELECT LIST() FROM list_data

statement error
SELECT LIST(e, g) FROM list_data

statement error
SELECT g, UNNEST(l+1) u FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1

statement error
SELECT g, UNNEST(g) u FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1

statement error
SELECT g, UNNEST() u FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1

statement error
SELECT UNNEST(42)

statement error
SELECT UNNEST()

statement error
SELECT UNNEST(42) from list_data

statement error
SELECT UNNEST() from list_data

statement error
SELECT g FROM (SELECT g, LIST(e) l FROM list_data GROUP BY g) u1 where UNNEST(l) > 42


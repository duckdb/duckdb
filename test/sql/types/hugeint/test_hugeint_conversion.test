# name: test/sql/types/hugeint/test_hugeint_conversion.test
# description: Test hugeint conversion
# group: [hugeint]

# small numbers in hugeint
query III
SELECT '7'::HUGEINT, '130'::HUGEINT, '924829852'::HUGEINT
----
7	130	924829852

# zero
query II
SELECT '0'::HUGEINT, '-0'::HUGEINT
----
0	0

# small negative numbers
query III
SELECT '-7'::HUGEINT, '-130'::HUGEINT, '-924829852'::HUGEINT
----
-7	-130	-924829852

query I
SELECT '10000000000000000000000000000'::HUGEINT;
----
10000000000000000000000000000

# huge numbers in hugeint
query II
SELECT '1267650600228229401496703205376'::HUGEINT, '17014118346046923173168730371588410572'::HUGEINT;
----
1267650600228229401496703205376	17014118346046923173168730371588410572

# huge negative numbers in hugeint
query II
SELECT '-1267650600228229401496703205376'::HUGEINT, '-17014118346046923173168730371588410572'::HUGEINT;
----
-1267650600228229401496703205376	-17014118346046923173168730371588410572


# string -> hugeint conversion throws error on overflow
statement error
SELECT '1701411834604692317316873037158841057200'::HUGEINT;

statement error
SELECT '-1701411834604692317316873037158841057200'::HUGEINT;

# test the exact boundaries
# these work
query II
SELECT '170141183460469231731687303715884105727'::HUGEINT, '-170141183460469231731687303715884105727'::HUGEINT;
----
170141183460469231731687303715884105727	-170141183460469231731687303715884105727

# these don't
statement error
SELECT '170141183460469231731687303715884105728'::HUGEINT;

statement error
SELECT '-170141183460469231731687303715884105728'::HUGEINT;

# cast various types to hugeint
query IIIIII
SELECT 42::TINYINT::HUGEINT, 42::SMALLINT::HUGEINT, 42::INTEGER::HUGEINT, 42::BIGINT::HUGEINT, 42::FLOAT::HUGEINT, 42::DOUBLE::HUGEINT;
----
42	42	42	42	42	42

# negative values
query IIIIII
SELECT (-42)::TINYINT::HUGEINT, (-42)::SMALLINT::HUGEINT, (-42)::INTEGER::HUGEINT, (-42)::BIGINT::HUGEINT, (-42)::FLOAT::HUGEINT, (-42)::DOUBLE::HUGEINT;
----
-42	-42	-42	-42	-42	-42

# cast hugeint to various types
query IIIIRR
SELECT 42::HUGEINT::TINYINT, 42::HUGEINT::SMALLINT, 42::HUGEINT::INTEGER, 42::HUGEINT::BIGINT, 42::HUGEINT::FLOAT, 42::HUGEINT::DOUBLE;
----
42	42	42	42	42	42

# negative values
query IIIIRR
SELECT (-42)::HUGEINT::TINYINT, (-42)::HUGEINT::SMALLINT, (-42)::HUGEINT::INTEGER, (-42)::HUGEINT::BIGINT, (-42)::HUGEINT::FLOAT, (-42)::HUGEINT::DOUBLE;
----
-42	-42	-42	-42	-42	-42

# overflow in hugeint -> integer conversion
# test the exact boundaries for each type
statement error
SELECT 1000::HUGEINT::TINYINT;

# TINYINT
statement error
SELECT 128::HUGEINT::TINYINT;

statement error
SELECT -128::HUGEINT::TINYINT;

statement ok
SELECT 127::HUGEINT::TINYINT, -127::HUGEINT::TINYINT;

# SMALLINT
statement error
SELECT 100000::HUGEINT::SMALLINT;

statement error
SELECT 32768::HUGEINT::SMALLINT;

statement error
SELECT -32768::HUGEINT::SMALLINT;

statement ok
SELECT 32767::HUGEINT::SMALLINT, -32767::HUGEINT::SMALLINT;

# INTEGER
statement error
SELECT 100000000000::HUGEINT::INTEGER;

statement error
SELECT 2147483648::HUGEINT::INTEGER;

statement error
SELECT -2147483648::HUGEINT::INTEGER;

statement ok
SELECT 2147483647::HUGEINT::INTEGER, -2147483647::HUGEINT::INTEGER;

# BIGINT
statement error
SELECT 10000000000000000000::HUGEINT::BIGINT;

statement error
SELECT '9223372036854775808'::HUGEINT::BIGINT;

statement error
SELECT '-9223372036854775809'::HUGEINT::BIGINT;

statement ok
SELECT 9223372036854775807::HUGEINT::BIGINT, (-9223372036854775808)::HUGEINT::BIGINT;

# overflow in double -> hugeint conversion
statement error
SELECT 1e100::FLOAT::HUGEINT;

statement error
SELECT 1e100::DOUBLE::HUGEINT;

# typeof large constant is hugeint, as long as it fits
query TTTTT
SELECT typeof(10), typeof(10000000000), typeof(170141183460469231731687303715884105727), typeof(170141183460469231731687303715884105728), typeof(170141183460469231731687303715884105728000)
----
INTEGER	BIGINT	HUGEINT	DOUBLE	DOUBLE

# exponents are always double
query III
select 1e30, 1e100, 1e-1
----
1000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0.1

query III
select typeof(1e30), typeof(1e100), typeof(1e-1)
----
DOUBLE	DOUBLE	DOUBLE

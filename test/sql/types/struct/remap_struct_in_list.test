# name: test/sql/types/struct/remap_struct_in_list.test
# description: Test struct remapping
# group: [struct]

statement ok
PRAGMA enable_verification

# Remapping operations:
# - rename 'list.i' -> 'list.v1'
# - rename 'list.j' -> 'list.v2'
# - add column 'list.v2.y'
# - add column 'list.v3'

# remap nested types
query I
SELECT remap_struct(
	[
		{
			'i': 1,
			'j': {
				'x': 42,
				'z': 100
			}
		}
	], -- data
	NULL::STRUCT(
		v1 INT,
		v2 STRUCT(
			x INT,
			y INT,
			z INT
		),
		v3 VARCHAR
	)[], -- target type
	{
		'list': ROW(
			'list', {
				'v1': 'i',
				'v2': ROW(
					'j', {
						'x': 'x',
						'z': 'z'
					}
				)
			}
		)
	}, -- remapping data -> target_type
	{
		'list': {
			'v2': {
				'y': NULL::INT
			},
			'v3': NULL::VARCHAR
		}
	}
); -- defaults
----
[{'v1': 1, 'v2': {'x': 42, 'y': NULL, 'z': 100}, 'v3': NULL}]

# remap large list
statement ok
CREATE TABLE large_list(s STRUCT(i INTEGER)[]);

statement ok
INSERT INTO large_list (SELECT LIST(CASE WHEN i%2=0 THEN {'i': i} ELSE NULL END) FROM range(5000) t(i));

query III
SELECT COUNT(*), COUNT(j), SUM(j)
FROM (
	SELECT UNNEST(remap_struct(s, NULL::ROW(j INTEGER)[], {'list': ROW('list', {'j': 'i'})}, NULL), recursive := True) FROM large_list
)
----
5000	2500	6247500

# name: test/sql/cte/recursive_cte_key_variant.test
# description: Recursive CTEs with an error thrown in the pipelines
# group: [cte]

statement ok
PRAGMA enable_verification;

statement ok
CREATE TABLE tbl(a int);

query I
WITH RECURSIVE tbl(a) USING KEY (a) AS (SELECT 1 UNION SELECT a.a+1 FROM tbl AS a, (SELECT * FROM recurring.tbl AS d WHERE d.a = 1) AS b WHERE a.a < 2) SELECT * FROM tbl;
----
1
2

# reference only the recurring table
query II
WITH RECURSIVE tbl2(a, b) USING KEY (a) AS (SELECT 5, 1 UNION SELECT a, b + 1 FROM recurring.tbl2 WHERE b < a) SELECT * FROM tbl2;
----
5	5

statement error
WITH RECURSIVE tbl(a) USING KEY (b) AS (SELECT 1 UNION SELECT a.a+1 FROM tbl AS a, (SELECT * FROM recurring.tbl AS d WHERE d.a = 1) AS b WHERE a.a < 2) SELECT * FROM tbl;
----
Binder Error: Referenced column "b" not found in FROM clause!

statement error
WITH RECURSIVE tbl(a) USING KEY (a) AS (SELECT 1 UNION ALL SELECT a+1 FROM tbl) SELECT * FROM tbl;
----
Binder Error: UNION ALL cannot be used with USING KEY in recursive CTE.

query II
WITH RECURSIVE tbl2(a,b) USING KEY (a) AS (SELECT 1, NULL UNION SELECT a.a+1, a.b FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;
----
1	NULL
2	NULL

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a) AS (SELECT * FROM (VALUES (1, 2, 3), (2,2,5)) UNION SELECT a+1, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	2	3
2	3	3
3	4	3
4	4	5

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (b) AS (SELECT * FROM (VALUES (1, 2, 3), (2,3,2)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	2	3
1	3	3
1	4	3

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a) AS (SELECT * FROM (VALUES (1, 2, 3), (2,3,2)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	4	3
2	4	2

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (b,c) AS (SELECT * FROM (VALUES (1, 2, 3), (2,3,3)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	2	3
1	3	3
1	4	3

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a,b,c) AS (SELECT * FROM (VALUES (1, 2, 3), (2,3,3)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	2	3
2	3	3
1	3	3
2	4	3
1	4	3

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a) AS (SELECT * FROM (VALUES (1, 2, 3), (1,3,3)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	4	3

query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a,b,c) AS (SELECT * FROM (VALUES (1, 2, 3), (1,3,3)) UNION SELECT a, b+1, c FROM tbl WHERE b < 4) SELECT * FROM  tbl;
----
1	2	3
1	3	3
1	4	3

# Reference the recurring table more than once
query III
WITH RECURSIVE tbl(a,b,c) USING KEY (a) AS (
	SELECT 1, NULL, NULL
	UNION
	(SELECT DISTINCT ON (tbl.a) tbl.a+1, rec1.a, rec2.b
	FROM tbl, recurring.tbl AS rec1, recurring.tbl AS rec2
	WHERE tbl.a < 5
	ORDER BY tbl.a ASC, rec1.a DESC NULLS LAST, rec2.b DESC NULLS LAST
	)
) SELECT * FROM tbl;
----
1	NULL	NULL
2	1	NULL
3	2	1
4	3	2
5	4	3

############################################
# reference recurring table in wrong places
############################################

statement error
SELECT * FROM  recurring.tbl;
----
Catalog Error: Table with name tbl does not exist!

statement error
WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a + 1 FROM tbl2 AS a, recurring.tbl2 AS b WHERE a.a < 2) SELECT * FROM tbl2;
----
Invalid Input Error: RECURRING can only be used with USING KEY in recursive CTE.

statement error
WITH RECURSIVE tbl2(a,b) AS (SELECT 1, NULL UNION SELECT a.a+1, a.b FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;
----
Invalid Input Error: RECURRING can only be used with USING KEY in recursive CTE.

# second cte references recurring table of first cte while first cte does not
statement error
WITH RECURSIVE tbl(a, b) USING KEY (a) AS (SELECT 5, 1 UNION SELECT a, b + 1 FROM tbl WHERE b < a),
tbl1(a,b) AS (SELECT * FROM recurring.tbl) SELECT * FROM tbl1;
----
Binder Error: There is a WITH item named "tbl", but the recurring table cannot be referenced from this part of the query.

# second cte references recurring table of first like the first cte
statement error
WITH RECURSIVE tbl(a, b) USING KEY (a) AS (SELECT  * FROM ((VALUES (5, 1), (6,1)) UNION SELECT a, b + 1 FROM recurring.tbl WHERE b < a) WHERE a = 5),
tbl1(a,b) AS (SELECT * FROM recurring.tbl) SELECT * FROM tbl1;
----
Binder Error: There is a WITH item named "tbl", but the recurring table cannot be referenced from this part of the query.

statement error
WITH RECURSIVE tbl2(a) AS (SELECT 1 UNION SELECT a.a+1 FROM tbl2 AS a, (SELECT * FROM recurring.tbl2) AS b WHERE a.a < 2) SELECT * FROM tbl2;
----
Invalid Input Error: RECURRING can only be used with USING KEY in recursive CTE.

#######################
# Connected components
#######################
statement ok
CREATE OR REPLACE TABLE nodes (node int);

statement ok
INSERT INTO nodes VALUES (0), (1), (2), (3), (4), (5), (6);

statement ok
CREATE OR REPLACE TABLE edges (here int, there int);

statement ok
INSERT INTO edges VALUES  (0,4), (4,0),
						  (0,3), (3,0),
						  (1,4), (4,1),
						  (3,4), (4,3),
						  (2,5), (5,2);



query II
WITH RECURSIVE cc(node, comp) USING KEY (node) AS (
	SELECT n.node, n.node AS comp
	FROM nodes AS n
		UNION
	(SELECT DISTINCT ON (u.node) u.node, v.comp
	FROM recurring.cc AS u, cc AS v, edges AS e
	WHERE (e.here, e.there) = (u.node, v.node)
	AND v.comp < u.comp
	ORDER BY u.node asc, v.comp asc)
)
TABLE cc ORDER BY node;
----
0	0
1	0
2	2
3	0
4	0
5	2
6	6

#######################
# bellman-ford
#######################
statement ok
CREATE OR REPLACE TABLE edges (here   char(2), -- source node
  							   there  char(2), -- target node
  							   length int,  -- edge weight
  							   PRIMARY KEY (here, there));

statement ok
INSERT INTO edges(here, there, length) VALUES
  ('v0', 'v1', 9),
  ('v0', 'v2', 3),
  ('v1', 'v2', 6),
  ('v1', 'v4', 2),
  ('v2', 'v1', 2),
  ('v2', 'v3', 1),
  ('v3', 'v2', 2),
  ('v3', 'v4', 2);

statement ok
DROP TABLE nodes;

statement ok
CREATE OR REPLACE VIEW nodes(node) AS
  SELECT e.here
  FROM   edges AS e
   UNION
  SELECT e.there
  FROM   edges AS e;

query II
WITH RECURSIVE bellman(knode, distance) USING KEY (knode) AS (
  -- distance is 0 from source, âˆž from any other node
  SELECT n.node AS knode,
         CASE WHEN n.node = 'v0' THEN 0 ELSE 50000000 END AS distance
  FROM   nodes AS n
  UNION
  (SELECT DISTINCT ON (knode) rec.knode AS knode, n.distance + e.length AS distance
  FROM   bellman AS n, edges AS e, recurring.bellman AS rec
  WHERE  (e.here, e.there) = (n.knode, rec.knode)
  AND    rec.distance > n.distance + e.length
  ORDER BY distance)
)
SELECT n.knode || CASE WHEN n.knode = 'v0' THEN ' (source)' ELSE '' END AS node,
       n.distance
FROM   bellman AS n
ORDER BY n.knode;
----
v0 (source)	0
v1	5
v2	3
v3	4
v4	6


# more rows than STANDARD_CHUNK_SIZE
query I
WITH RECURSIVE tbl(n) USING KEY (n) AS (SELECT 1 UNION SELECT n+1 FROM tbl WHERE n < 3000) SELECT SUM(n) FROM tbl
----
4501500

# You can use recursive CTE with and without a key in a query.
query II
WITH RECURSIVE tbl (a, b) USING KEY (a) AS (SELECT 1 , 1 UNION SELECT a, b+1 FROM tbl WHERE b < 3), tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 3) SELECT * FROM tbl;
----
1	3

query II
WITH RECURSIVE tbl (a, b) USING KEY (a) AS (SELECT 1 , 1 UNION SELECT a, b+1 FROM tbl WHERE b < 3), tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 3) SELECT * FROM tbl2;
----
1	1
1	2
1	3

query II
WITH RECURSIVE tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 3), tbl (a, b) USING KEY (a) AS (SELECT 1 , 1 UNION SELECT a, b+1 FROM tbl WHERE b < 3) SELECT * FROM tbl2;
----
1	1
1	2
1	3

query II
WITH RECURSIVE tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 3), tbl (a, b) USING KEY (a) AS (SELECT 1 , 1 UNION SELECT a, b+1 FROM tbl WHERE b < 3) SELECT * FROM tbl;
----
1	3

query II
WITH RECURSIVE tbl(a, b) AS (
	SELECT 1, 1
		UNION
	(WITH RECURSIVE tbl2(a, b) USING KEY (b) AS (
		SELECT a, b+1 FROM tbl WHERE b < 5
			UNION
		SELECT a + 1, b
		FROM tbl2
		WHERE a < 5) SELECT * FROM tbl2))
SELECT * FROM tbl
----
1	1
5	2
5	3
5	4
5	5

query II
WITH RECURSIVE tbl(a, b) USING KEY (b) AS (
	SELECT 1, 1
		UNION
	(WITH RECURSIVE tbl2(a, b) AS (
		SELECT a, b+1 FROM tbl WHERE b < 5
			UNION
		SELECT a + 1, b
		FROM tbl2
		WHERE a < 5) SELECT * FROM tbl2 ORDER BY a))
SELECT * FROM tbl
----
1	1
5	2
5	3
5	4
5	5

query II
WITH RECURSIVE tbl(a, b) USING KEY (b) AS (
	SELECT 1, 1
		UNION
	(SELECT * FROM (WITH RECURSIVE tbl2(a, b) AS (
		SELECT a, b+1 FROM tbl WHERE b < 5
			UNION
		SELECT a + 1, b
		FROM tbl2
		WHERE a < 5) SELECT * FROM tbl2 ORDER BY a, b)))
SELECT * FROM tbl
----
1	1
5	2
5	3
5	4
5	5


query II
WITH RECURSIVE tbl(a,b) USING KEY (a) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl WHERE b < 5),
tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 5)
SELECT *
FROM tbl2
----
1	1
1	2
1	3
1	4
1	5

query II
WITH RECURSIVE tbl(a,b) USING KEY (a) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl WHERE b < 5),
tbl2(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 5)
SELECT *
FROM tbl
----
1	5

query II
WITH RECURSIVE tbl(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl WHERE b < 5),
tbl2(a,b) USING KEY (a) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 5)
SELECT *
FROM tbl2
----
1	5

query II
WITH RECURSIVE tbl(a,b) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl WHERE b < 5),
tbl2(a,b) USING KEY (a) AS (SELECT 1, 1 UNION SELECT a, b+1 FROM tbl2 WHERE b < 5)
SELECT *
FROM tbl
----
1	1
1	2
1	3
1	4
1	5

query III
WITH RECURSIVE tbl(a, b, c) USING KEY (a) AS ((SELECT [], 1, 3 UNION SELECT [1], 2, 4) UNION SELECT a || [b], b + 1, c FROM tbl WHERE b < 5) SELECT * FROM tbl ORDER BY len(a)
----
[]	1	3
[1]	2	3
[1, 2]	3	3
[1, 2, 3]	4	3
[1, 2, 3, 4]	5	3

query II
WITH RECURSIVE tbl(a, b) USING KEY (a) AS (SELECT 'string', 1 UNION SELECT a, b + 1 FROM tbl WHERE b < 5) SELECT * FROM tbl
----
string	5

query III
select  *
  from    range(1, 4) as _(l),
  lateral (
    with recursive cte(a, b) using key (a) as (
      select 1, 0
        union
      select a, b + 1
      from   recurring.cte
      where  b < l
    )
    table cte
  ) ORDER BY l
----
1	1	1
2	1	2
3	1	3

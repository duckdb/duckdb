# name: test/sql/window/test_window_filter.test
# description: FILTER clause for WINDOW functions
# group: [window]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE testing AS
	SELECT
		 x
		,round(x * 0.333,0) % 3 AS y
		,round(x * 0.333,0) % 3 AS z
	FROM generate_series(0,10) tbl(x);

# The x_filtered_window and z_filtered_window columns should return a different output than plain_window
query IIIIII
SELECT
	 x
	,y
	,z
	,avg(x) OVER (PARTITION BY y) AS plain_window
	,avg(x) FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	,avg(x) FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;
----
0	0.000000	0.000000	5.600000	1.000000	5.600000
1	0.000000	0.000000	5.600000	1.000000	5.600000
8	0.000000	0.000000	5.600000	1.000000	5.600000
9	0.000000	0.000000	5.600000	1.000000	5.600000
10	0.000000	0.000000	5.600000	1.000000	5.600000
2	1.000000	1.000000	3.000000	NULL	NULL
3	1.000000	1.000000	3.000000	NULL	NULL
4	1.000000	1.000000	3.000000	NULL	NULL
5	2.000000	2.000000	6.000000	NULL	NULL
6	2.000000	2.000000	6.000000	NULL	NULL
7	2.000000	2.000000	6.000000	NULL	NULL

# COUNT(*) coverage
query IIIIII
SELECT
	 x
	,y
	,z
	,count(*) OVER (PARTITION BY y) AS plain_window
	,count(*) FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	,count(*) FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;
----
0	0.000000	0.000000	5	1	5
1	0.000000	0.000000	5	1	5
8	0.000000	0.000000	5	1	5
9	0.000000	0.000000	5	1	5
10	0.000000	0.000000	5	1	5
2	1.000000	1.000000	3	0	0
3	1.000000	1.000000	3	0	0
4	1.000000	1.000000	3	0	0
5	2.000000	2.000000	3	0	0
6	2.000000	2.000000	3	0	0
7	2.000000	2.000000	3	0	0

# Holistic coverage
query IIIIII
SELECT
	 x
	,y
	,z
	,median(x) OVER (PARTITION BY y) AS plain_window
	,median(x) FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	,median(x) FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;
----
0	0.000000	0.000000	8.000000	1.000000	8.000000
1	0.000000	0.000000	8.000000	1.000000	8.000000
8	0.000000	0.000000	8.000000	1.000000	8.000000
9	0.000000	0.000000	8.000000	1.000000	8.000000
10	0.000000	0.000000	8.000000	1.000000	8.000000
2	1.000000	1.000000	3.000000	NULL	NULL
3	1.000000	1.000000	3.000000	NULL	NULL
4	1.000000	1.000000	3.000000	NULL	NULL
5	2.000000	2.000000	6.000000	NULL	NULL
6	2.000000	2.000000	6.000000	NULL	NULL
7	2.000000	2.000000	6.000000	NULL	NULL

# Filters do not affect framing.
query II
SELECT x, count(x) FILTER (WHERE x % 2 = 0) OVER (ORDER BY x ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
FROM generate_series(0,10) tbl(x);
----
0	2
1	2
2	3
3	2
4	3
5	2
6	3
7	2
8	3
9	2
10	2

#
# Errors
#

# Non-aggregates do not support filtering.

foreach nullary rank dense_rank row_number percent_rank cume_dist

statement error
SELECT
	 x
	,y
	,z
	, ${nullary}() OVER (PARTITION BY y) AS plain_window
	, ${nullary}() FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	, ${nullary}() FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;

endloop

foreach unary ntile first_value last_value lead lag

statement error
SELECT
	 x
	,y
	,z
	, ${unary}(x) OVER (PARTITION BY y) AS plain_window
	, ${unary}(x) FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	, ${unary}(x) FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;

endloop

foreach binary nth_value

statement error
SELECT
	 x
	,y
	,z
	, ${binary}(x, 1) OVER (PARTITION BY y) AS plain_window
	, ${binary}(x, 1) FILTER (WHERE x = 1) OVER (PARTITION BY y) AS x_filtered_window
	, ${binary}(x, 1) FILTER (WHERE z = 0) OVER (PARTITION BY y) AS z_filtered_window
FROM testing
ORDER BY y, x;

endloop

# name: test/sql/window/test_basic_window.test
# description: Most basic window function
# group: [window]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE empsalary (depname varchar, empno bigint, salary int, enroll_date date)

statement ok
INSERT INTO empsalary VALUES ('develop', 10, 5200, '2007-08-01'), ('sales', 1, 5000, '2006-10-01'), ('personnel', 5, 3500, '2007-12-10'), ('sales', 4, 4800, '2007-08-08'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01'), ('sales', 3, 4800, '2007-08-01'), ('develop', 8, 6000, '2006-10-01'), ('develop', 11, 5200, '2007-08-15')

# basic example from postgres' window.sql
query TIIR
SELECT depname, empno, salary, sum(salary) OVER (PARTITION BY depname ORDER BY empno) FROM empsalary ORDER BY depname, empno
----
develop	7	4200	4200.000000
develop	8	6000	10200.000000
develop	9	4500	14700.000000
develop	10	5200	19900.000000
develop	11	5200	25100.000000
personnel	2	3900	3900.000000
personnel	5	3500	7400.000000
sales	1	5000	5000.000000
sales	3	4800	9800.000000
sales	4	4800	14600.000000

# sum
query R
SELECT sum(salary) OVER (PARTITION BY depname ORDER BY salary) ss FROM empsalary ORDER BY depname, ss
----
4200.000000
8700.000000
19100.000000
19100.000000
25100.000000
3500.000000
7400.000000
9600.000000
9600.000000
14600.000000

# row_number
query I
SELECT row_number() OVER (PARTITION BY depname ORDER BY salary) rn FROM empsalary ORDER BY depname, rn
----
1
2
3
4
5
1
2
1
2
3

# first_value
query II
SELECT empno, first_value(empno) OVER (PARTITION BY depname ORDER BY empno) fv FROM empsalary ORDER BY 2 DESC, 1 ASC
----
7	7
8	7
9	7
10	7
11	7
2	2
5	2
1	1
3	1
4	1

# last_value
query III
SELECT depname, empno,
	last_value(empno) OVER (
		PARTITION BY depname ORDER BY empno ASC
		ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
		) fv
FROM empsalary
ORDER BY 1, 2
----
develop	7	11
develop	8	11
develop	9	11
develop	10	11
develop	11	11
personnel	2	5
personnel	5	5
sales	1	4
sales	3	4
sales	4	4

# rank_dense
query TII
SELECT depname, salary, dense_rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop	4200	1
develop	4500	2
develop	5200	3
develop	5200	3
develop	6000	4
personnel	3500	1
personnel	3900	2
sales	4800	1
sales	4800	1
sales	5000	2

# rank
query TII
SELECT depname, salary, rank() OVER (PARTITION BY depname ORDER BY salary) FROM empsalary order by depname, salary
----
develop	4200	1
develop	4500	2
develop	5200	3
develop	5200	3
develop	6000	5
personnel	3500	1
personnel	3900	2
sales	4800	1
sales	4800	1
sales	5000	3

# min/max/avg
query TIIR
SELECT depname, min(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m1, max(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m2, AVG(salary) OVER (PARTITION BY depname ORDER BY salary, empno) m3 FROM empsalary ORDER BY depname, empno
----
develop	4200	4200	4200.000000
develop	4200	6000	5020.000000
develop	4200	4500	4350.000000
develop	4200	5200	4633.333333
develop	4200	5200	4775.000000
personnel	3500	3900	3700.000000
personnel	3500	3500	3500.000000
sales	4800	5000	4866.666667
sales	4800	4800	4800.000000
sales	4800	4800	4800.000000

# stddev_pop
query TR
SELECT depname, STDDEV_POP(salary) OVER (PARTITION BY depname ORDER BY salary, empno) s FROM empsalary ORDER BY depname, empno
----
develop	0.000000
develop	627.375486
develop	150.000000
develop	418.993503
develop	438.035387
personnel	200.000000
personnel	0.000000
sales	94.280904
sales	0.000000
sales	0.000000

# covar_pop
query TR
SELECT depname, COVAR_POP(salary, empno) OVER (PARTITION BY depname ORDER BY salary, empno) c FROM empsalary ORDER BY depname, empno
----
develop	0.000000
develop	240.000000
develop	150.000000
develop	477.777778
develop	606.250000
personnel	-300.000000
personnel	0.000000
sales	-111.111111
sales	0.000000
sales	0.000000


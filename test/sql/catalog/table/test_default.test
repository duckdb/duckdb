# name: test/sql/catalog/table/test_default.test
# description: Test DEFAULT in tables
# group: [table]

require skip_reload


statement ok
PRAGMA enable_verification

# no default specified: write NULL value
statement ok
CREATE TABLE test (a INTEGER, b INTEGER);

statement ok
INSERT INTO test (b) VALUES (3);

statement ok
INSERT INTO test VALUES (DEFAULT, DEFAULT);

query II
SELECT * FROM test
----
NULL	3
NULL	NULL

statement ok
DROP TABLE test

# no default specified: default is NULL value
# but we set column to NOT NULL
# now insert should fail
statement ok
CREATE TABLE test (a INTEGER NOT NULL, b INTEGER);

statement error
INSERT INTO test (b) VALUES (3);

statement ok
DROP TABLE test

# simple default: constant value
statement ok
CREATE TABLE test (a INTEGER DEFAULT 1, b INTEGER);

statement ok
INSERT INTO test (b) VALUES (3);

query II
SELECT * FROM test
----
1	3

statement ok
DROP TABLE test

# default as expression
statement ok
CREATE TABLE test (a INTEGER DEFAULT 1+1, b INTEGER);

statement ok
INSERT INTO test (b) VALUES (3);

query II
SELECT * FROM test
----
2	3

statement ok
DROP TABLE test

# default with insert from query
statement ok
CREATE TABLE test (a INTEGER DEFAULT 1+1, b INTEGER);

statement ok
INSERT INTO test (b) SELECT 3

query II
SELECT * FROM test
----
2	3

statement ok
DROP TABLE test

# default from sequence
statement ok
CREATE SEQUENCE seq;

statement ok
CREATE TABLE test (a INTEGER DEFAULT nextval('seq'), b INTEGER);

statement ok
INSERT INTO test (b) VALUES (2), (4), (6), (2), (4);

query II
SELECT * FROM test ORDER BY 1
----
1	2
2	4
3	6
4	2
5	4

# cannot drop sequence now
statement error
DROP SEQUENCE seq

statement ok
DROP TABLE test

# after dropping table we can drop seq
statement ok
DROP SEQUENCE seq

# test default with update
statement ok
CREATE SEQUENCE seq;

statement ok
CREATE TABLE test (a INTEGER DEFAULT nextval('seq'), b INTEGER);

statement ok
INSERT INTO test (b) VALUES (1);

statement ok
UPDATE test SET a=DEFAULT

query II
SELECT * FROM test ORDER BY 1
----
2	1

# cannot use subquery in DEFAULT expression
statement error
CREATE TABLE test (a INTEGER DEFAULT (SELECT 42), b INTEGER);

# aggregate functions are not allowed in DEFAULT expressions
statement error
CREATE TABLE test (a INTEGER DEFAULT SUM(42), b INTEGER);

# window functions are not allowed in DEFAULT expressions
statement error
CREATE TABLE test (a INTEGER DEFAULT row_number() OVER (), b INTEGER);

# default value must be scalar expression
statement error
CREATE TABLE test (a INTEGER DEFAULT b+1, b INTEGER);

# test default with random
statement ok
DROP TABLE test

statement ok
CREATE TABLE test (a DOUBLE DEFAULT random(), b INTEGER);

statement ok
INSERT INTO test (b) VALUES (1);

statement ok
INSERT INTO test (b) VALUES (2);

query R
SELECT COUNT(DISTINCT a) FROM test;
----
2


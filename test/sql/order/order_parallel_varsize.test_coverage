# name: test/sql/order/order_parallel_varsize.test_coverage
# description: Test ORDER BY keyword with multiple threads (internal and external sorting)
# group: [order]

statement ok
PRAGMA verify_parallelism

# we run this with an uneven amount of threads to force the merge sort to have an odd amount of blocks to merge
statement ok
PRAGMA threads=3

# internal/external, different memory limits
foreach pragma true false

foreach mem 50 500

statement ok
PRAGMA debug_force_external=${pragma}

statement ok
PRAGMA memory_limit='${mem}MB'

statement ok
create table test as (select range i from range(100000));

# variable size sorting
query T
select i from test order by cast(i as varchar) desc;
----
100000 values hashing to 14d85a71bc549aeb80f7e77766a9fc93

query T
select i from test order by list_value(i) desc;
----
100000 values hashing to 6a720b227e361303445c41f7ff4a8109

query T
select i from test order by list_value(0, i) desc;
----
100000 values hashing to 6a720b227e361303445c41f7ff4a8109

query T
select i from test order by struct_pack(i) desc;
----
100000 values hashing to 6a720b227e361303445c41f7ff4a8109

query T
select i from test order by struct_pack(a:=0, i) desc;
----
100000 values hashing to 6a720b227e361303445c41f7ff4a8109

# the same, but with large prefix string so ties need to be broken
query T
select i from test order by cast(i + 1000000000000 as varchar) desc;
----
100000 values hashing to 6a720b227e361303445c41f7ff4a8109

statement ok
drop table test

endloop

endloop

# name: test/sql/index/art/memory/test_art_linear.test_slow
# description: Test the memory usage of the ART for linear integer insertions
# group: [memory]

statement ok
PRAGMA enable_verification

require noforcestorage

require skip_reload

statement ok
CREATE FUNCTION mem_to_bytes(x) AS CASE
    WHEN CONTAINS(x, 'KB') THEN REPLACE(x, 'KB', '')::INT * 1000
    WHEN CONTAINS(x, 'MB') THEN REPLACE(x, 'MB', '')::INT * 1000 * 1000
    WHEN CONTAINS(x, 'GB') THEN REPLACE(x, 'GB', '')::INT * 1000 * 1000 * 1000
    WHEN CONTAINS(x, 'TB') THEN REPLACE(x, 'TB', '')::INT * 1000 * 1000 * 1000 * 1000
    WHEN x = '0 bytes' THEN 0
    ELSE x::INT END;

# store the memory usage of 1M integers in base table
# verify that the memory increases and drops again
# this is the setup phase of the memory tests in this file

statement ok
CREATE TABLE temp (i integer);

statement ok
CREATE TABLE empty AS
SELECT mem_to_bytes(memory_usage) AS usage FROM pragma_database_size();

statement ok
INSERT INTO temp SELECT * FROM range(1000000);

statement ok
CREATE TABLE base AS
SELECT mem_to_bytes(memory_usage) AS usage FROM pragma_database_size();

query I
SELECT base.usage > empty.usage
FROM base, empty;
----
true

statement ok
DROP TABLE temp

statement ok
UPDATE empty SET usage = (SELECT mem_to_bytes(current.memory_usage) FROM pragma_database_size() AS current);

query I
SELECT mem_to_bytes(current.memory_usage) == empty.usage
FROM pragma_database_size() current, empty;
----
true

# create a table with a primary key and store the memory usage
# verify that the memory drops when deleting all entries from the table

statement ok
CREATE TABLE t (i integer PRIMARY KEY);

statement ok
INSERT INTO t SELECT * FROM range(1000000);

query I
SELECT mem_to_bytes(current.memory_usage) > base.usage AND
	mem_to_bytes(current.memory_usage) < 3 * base.usage
FROM base, pragma_database_size() current;
----
1

statement ok
DELETE FROM t

query I
SELECT mem_to_bytes(current.memory_usage) == base.usage
FROM pragma_database_size() current, base;
----
true

statement ok
DROP TABLE t;

query I
SELECT mem_to_bytes(current.memory_usage) == empty.usage
FROM pragma_database_size() current, empty;
----
true

# create a table with a primary key and store the memory usage
# now verify that the memory drops, but this time drop the whole table instead of deleting entries from it

statement ok
CREATE TABLE t (i integer PRIMARY KEY);

statement ok
INSERT INTO t SELECT * FROM range(1000000);

query I
SELECT mem_to_bytes(current.memory_usage) > base.usage AND
       	mem_to_bytes(current.memory_usage) < 3 * base.usage
FROM base, pragma_database_size() current;
----
1

statement ok
DROP TABLE t

query I
SELECT mem_to_bytes(current.memory_usage) == empty.usage
FROM pragma_database_size() current, empty;
----
true

# create a table with a primary key and store the memory usage
# verify that the memory decreases by approximately half when deleting half the entries

statement ok
CREATE TABLE t (i integer PRIMARY KEY);

statement ok
INSERT INTO t SELECT * FROM range(1000000);

query I
SELECT mem_to_bytes(current.memory_usage) > base.usage AND
       	mem_to_bytes(current.memory_usage) < 3 * base.usage
FROM base, pragma_database_size() current;
----
1

statement ok
CREATE TABLE pk_mem AS
SELECT mem_to_bytes(memory_usage) AS usage FROM pragma_database_size();

statement ok
DELETE FROM t WHERE i > 500000;

query I
SELECT mem_to_bytes(current.memory_usage) * 3 > pk_mem.usage
    AND mem_to_bytes(current.memory_usage) < pk_mem.usage
FROM pragma_database_size() current, pk_mem;
----
true


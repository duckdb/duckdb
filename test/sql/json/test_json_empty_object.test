# name: test/sql/json/test_json_empty_object.test
# description: Test empty objects in JSON (DuckDB cannot have empty STRUCT)
# group: [json]

require json

statement ok
pragma enable_verification

# returns JSON instead of {}
query I
select json_structure('{}')
----
"JSON"

statement error
select json_transform('{}', '{}')
----
Binder Error: Empty object in JSON structure

# create a JSON file with an empty struct
statement ok
copy (select '{"a": {}}') to '__TEST_DIR__/my.json' (FORMAT CSV, quote '')

# auto-detection should not give back an empty struct
query T
select typeof(a) from '__TEST_DIR__/my.json'
----
JSON

# can't force it to have an empty struct
statement error
select * from read_json('__TEST_DIR__/my.json', columns={a: 'STRUCT()')

# test issue 6443
statement ok
copy (select unnest(['{"c1":"val11","c2":{"k1":"val11","k2":{}}}','{"c1":"val21","c2":{"k1":"val21","k2":{}}}'])) to '__TEST_DIR__/data.ndjson' (FORMAT CSV, quote '')

statement ok
CREATE OR REPLACE TABLE tbl AS SELECT * FROM read_ndjson_auto('__TEST_DIR__/data.ndjson');

# no empty struct here either
query II
select typeof(c1), typeof(c2) from tbl;
----
VARCHAR	STRUCT(k1 VARCHAR, k2 JSON)
VARCHAR	STRUCT(k1 VARCHAR, k2 JSON)

require parquet

statement ok
copy tbl to '__TEST_DIR__/data.parquet';

query II
select * from '__TEST_DIR__/data.parquet';
----
val11	{'k1': val11, 'k2': {}}
val21	{'k1': val21, 'k2': {}}

# name: test/sql/json/test_json_copy_tpch.test_slow
# description: Test JSON COPY using TPC-H
# group: [json]

require json

require tpch

statement ok
start transaction

statement ok
call dbgen(sf=1)

# export lineitem as array (ARRAY does not need TRUE to be passed)
statement ok
COPY lineitem TO '__TEST_DIR__/lineitem.json' (ARRAY)

# also export the whole thing
statement ok
EXPORT DATABASE '__TEST_DIR__/export_json_test' (FORMAT JSON)

statement ok
rollback

# test the array first
statement ok
start transaction

statement ok
call dbgen(sf=0)

# lineitem json is ~2GB so this test that we can do streaming reads of json arrays
statement ok
set memory_limit='1gb'

statement ok
COPY lineitem from '__TEST_DIR__/lineitem.json' (ARRAY)

# 4gb should be enough for the rest
statement ok
set memory_limit='4gb'

query I
PRAGMA tpch(1)
----
<FILE>:extension/tpch/dbgen/answers/sf1/q01.csv

statement ok
rollback

statement ok
start transaction

# test the import
statement ok
import database '__TEST_DIR__/export_json_test'

loop i 1 9

query I
PRAGMA tpch(${i})
----
<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv

endloop

loop i 10 23

query I
PRAGMA tpch(${i})
----
<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv

endloop

# we can also run straight on JSON by creating views
# this also tests projection pushdown well
statement ok
rollback

statement ok
CREATE VIEW lineitem AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/lineitem.json',
	columns={
		l_orderkey: 'INTEGER',
		l_partkey: 'INTEGER',
		l_suppkey: 'INTEGER',
		l_linenumber: 'INTEGER',
		l_quantity: 'INTEGER',
		l_extendedprice: 'DECIMAL(15,2)',
		l_discount: 'DECIMAL(15,2)',
		l_tax: 'DECIMAL(15,2)',
		l_returnflag: 'VARCHAR',
		l_linestatus: 'VARCHAR',
		l_shipdate: 'DATE',
		l_commitdate: 'DATE',
		l_receiptdate: 'DATE',
		l_shipinstruct: 'VARCHAR',
		l_shipmode: 'VARCHAR',
		l_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW orders AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/orders.json',
	columns={
	    o_orderkey: 'INTEGER',
		o_custkey: 'INTEGER',
		o_orderstatus: 'VARCHAR',
		o_totalprice: 'DECIMAL(15,2)',
		o_orderdate: 'DATE',
		o_orderpriority: 'VARCHAR',
		o_clerk: 'VARCHAR',
		o_shippriority: 'INTEGER',
		o_comment: 'VARCHAR'
    }
);

statement ok
CREATE VIEW partsupp AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/partsupp.json',
	columns={
		ps_partkey: 'INTEGER',
		ps_suppkey: 'INTEGER',
		ps_availqty: 'INTEGER',
		ps_supplycost: 'DECIMAL(15,2)',
		ps_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW part AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/part.json',
	columns={
		p_partkey: 'INTEGER',
		p_name: 'VARCHAR',
		p_mfgr: 'VARCHAR',
		p_brand: 'VARCHAR',
		p_type: 'VARCHAR',
		p_size: 'INTEGER',
		p_container: 'VARCHAR',
		p_retailprice: 'DECIMAL(15,2)',
		p_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW customer AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/customer.json',
	columns={
		c_custkey: 'INTEGER',
		c_name: 'VARCHAR',
		c_address: 'VARCHAR',
		c_nationkey: 'INTEGER',
		c_phone: 'VARCHAR',
		c_acctbal: 'DECIMAL(15,2)',
		c_mktsegment: 'VARCHAR',
		c_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW supplier AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/supplier.json',
	columns={
		s_suppkey: 'INTEGER',
		s_name: 'VARCHAR',
		s_address: 'VARCHAR',
		s_nationkey: 'INTEGER',
		s_phone: 'VARCHAR',
		s_acctbal: 'DECIMAL(15,2)',
		s_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW nation AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/nation.json',
	columns={
		n_nationkey: 'INTEGER',
		n_name: 'VARCHAR',
		n_regionkey: 'INTEGER',
		n_comment: 'VARCHAR'
	}
);

statement ok
CREATE VIEW region AS SELECT * FROM read_ndjson(
	'__TEST_DIR__/export_json_test/region.json',
	columns={
		r_regionkey: 'INTEGER',
		r_name: 'VARCHAR',
		r_comment: 'VARCHAR'
	}
);

loop i 1 9

query I
PRAGMA tpch(${i})
----
<FILE>:extension/tpch/dbgen/answers/sf1/q0${i}.csv

endloop

loop i 10 23

query I
PRAGMA tpch(${i})
----
<FILE>:extension/tpch/dbgen/answers/sf1/q${i}.csv

endloop

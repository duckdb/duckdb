# name: test/sql/aggregate/distinct/grouped/multiple_grouping_sets.test
# group: [grouped]

statement ok
pragma enable_verification

statement ok
pragma verify_parallelism

# Distinct aggregates mixed with multiple grouping sets

statement ok
create table students (
	course VARCHAR,
	type VARCHAR,
	value BIGINT
);

statement ok
insert into students
		(course, type, value)
	values
		('CS', 'Bachelor', 20),
		('CS', 'Bachelor', 10),
		('CS', 'PhD', -20),
		('Math', 'Masters', 10),
		('CS', NULL, -15),
		('CS', NULL, 10),
		('Math', NULL, 15);

query IIII
select course, type, count(*), sum(distinct value) from students group by course, type order by all;
----
CS	NULL	2	-5
CS	Bachelor	2	30
CS	PhD	1	-20
Math	NULL	1	15
Math	Masters	1	10

query IIII
select course, type, count(*), sum(distinct value) from students group by (course, type) order by all;
----
CS	NULL	2	-5
CS	Bachelor	2	30
CS	PhD	1	-20
Math	NULL	1	15
Math	Masters	1	10

query III
select course, count(*), sum(distinct value) from students group by (), course, () order by all;
----
CS	5	-5
Math	2	25

# multiple grouping sets
query IIII
select count(*), course, type, sum(distinct value)
	from students
	group by grouping sets ((course), (type))
	order by all;
----
1	NULL	Masters	10
1	NULL	PhD	-20
2	NULL	Bachelor	30
2	Math	NULL	25
3	NULL	NULL	10
5	CS	NULL	-5

# multiple grouping sets
# these are combined as if they are regular GROUP BY expressions
# i.e. the result is just GROUP BY course, type

# If multiple grouping items are specified in a single GROUP BY clause,
# then the final list of grouping sets is the cross product of the individual items.
query IIIII
select sum(distinct value), count(*), course, avg(distinct value), type
	from students
	group by grouping sets (course), grouping sets(type)
	order by all;
----
-20	1	CS	-20.0	PhD
-5	2	CS	-2.5	NULL
10	1	Math	10.0	Masters
15	1	Math	15.0	NULL
30	2	CS	15.0	Bachelor

# combining grouping sets with non-grouping sets
query IIIII
select sum(distinct value), count(*), count(distinct value), course, type
	from students
	group by course, grouping sets(type)
	order by all;
----
-20	1	1	CS	PhD
-5	2	2	CS	NULL
10	1	1	Math	Masters
15	1	1	Math	NULL
30	2	2	CS	Bachelor

# with multiple grouping sets...
query IIIII
select count(*), ARG_MIN(distinct value%5, value), course, sum(distinct value), type
	from students
	group by course, grouping sets(type, ())
	order by all;
----
1	0	CS	-20	PhD
1	0	Math	10	Masters
1	0	Math	15	NULL
2	0	CS	-5	NULL
2	0	CS	30	Bachelor
2	0	Math	25	NULL
5	0	CS	-5	NULL

query IIII
select sum(distinct value), count(*), course, type
	from students
	group by grouping sets((course, type), (course))
	order by all;
----
-20	1	CS	PhD
-5	2	CS	NULL
-5	5	CS	NULL
10	1	Math	Masters
15	1	Math	NULL
25	2	Math	NULL
30	2	CS	Bachelor

# nested grouping sets
# If one GROUPING SETS clause is nested inside another,
# the effect is the same as if all the elements of the inner clause had been written directly in the outer clause.
query IIIIII
select count(*), count(distinct value), count(value), course, sum(distinct value), type
	from students
	group by grouping sets (grouping sets(course), grouping sets(type))
	order by all;
----
1	1	1	NULL	-20	PhD
1	1	1	NULL	10	Masters
2	2	2	NULL	30	Bachelor
2	2	2	Math	25	NULL
3	3	3	NULL	10	NULL
5	4	5	CS	-5	NULL

query IIIIII
select count(*), avg(distinct value) FILTER (where value < 5), avg(distinct value), course, avg(value), type
        from students
        group by grouping sets (grouping sets(course, ()), grouping sets(type))
        order by all;
----
1	NULL	10.0	NULL	10.0	Masters
1	-20.0	-20.0	NULL	-20.0	PhD
2	NULL	12.5	Math	12.5	NULL
2	NULL	15.0	NULL	15.0	Bachelor
3	-15.0	3.3333333333333335	NULL	3.3333333333333335	NULL
5	-17.5	-1.25	CS	1.0	NULL
7	-17.5	2.0	NULL	4.285714285714286	NULL

query IIII
select count(*), sum(distinct value), course, type
        from students
        group by grouping sets ((course), (), (type))
        order by all;
----
1	-20	NULL	PhD
1	10	NULL	Masters
2	25	Math	NULL
2	30	NULL	Bachelor
3	10	NULL	NULL
5	-5	CS	NULL
7	10	NULL	NULL

query IIIII
select count(*), count(distinct value), sum(distinct value), course, type
        from students
        group by grouping sets(course, ()), grouping sets(type)
        order by all;
----
1	1	-20	NULL	PhD
1	1	-20	CS	PhD
1	1	10	NULL	Masters
1	1	10	Math	Masters
1	1	15	Math	NULL
2	2	-5	CS	NULL
2	2	30	NULL	Bachelor
2	2	30	CS	Bachelor
3	3	10	NULL	NULL

query IIIII
select sum(distinct value), count(*), course, type, sum(distinct value)
        from students
        group by grouping sets(course, ()), type
        order by all;
----
-20	1	NULL	PhD	-20
-20	1	CS	PhD	-20
-5	2	CS	NULL	-5
10	1	NULL	Masters	10
10	1	Math	Masters	10
10	3	NULL	NULL	10
15	1	Math	NULL	15
30	2	NULL	Bachelor	30
30	2	CS	Bachelor	30

query IIIII
select sum(distinct value) FILTER (where value % 10 != 0), count(*), course, type, sum(distinct value)
        from students
        group by grouping sets((course, type), (type))
        order by all;
----
NULL	1	NULL	Masters	10
NULL	1	NULL	PhD	-20
NULL	1	CS	PhD	-20
NULL	1	Math	Masters	10
NULL	2	NULL	Bachelor	30
NULL	2	CS	Bachelor	30
-15	2	CS	NULL	-5
0	3	NULL	NULL	10
15	1	Math	NULL	15

# references to group ids by index
query IIII
select count(*), sum(distinct value), course, type
        from students
        group by grouping sets((3, 4), (4))
        order by all;
----
1	-20	NULL	PhD
1	-20	CS	PhD
1	10	NULL	Masters
1	10	Math	Masters
1	15	Math	NULL
2	-5	CS	NULL
2	30	NULL	Bachelor
2	30	CS	Bachelor
3	10	NULL	NULL

query IIII
select count(*), course AS crs, sum(distinct value), type AS tp
        from students
        group by grouping sets((crs, tp), (tp))
        order by all;
----
1	NULL	-20	PhD
1	NULL	10	Masters
1	CS	-20	PhD
1	Math	10	Masters
1	Math	15	NULL
2	NULL	30	Bachelor
2	CS	-5	NULL
2	CS	30	Bachelor
3	NULL	10	NULL

query IIII
select sum(distinct value), count(*), course, type
        from students
        group by grouping sets (grouping sets(course, ()), grouping sets(type, ()))
        order by all;
----
-20	1	NULL	PhD
-5	5	CS	NULL
10	1	NULL	Masters
10	3	NULL	NULL
10	7	NULL	NULL
10	7	NULL	NULL
25	2	Math	NULL
30	2	NULL	Bachelor

# name: test/sql/aggregate/aggregates/test_binned_histogram.test
# description: Test binned histograms
# group: [aggregates]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE obs(n BIGINT);

statement ok
INSERT INTO obs VALUES (0), (5), (7), (12), (20), (23), (24), (25), (26), (28), (31), (34), (36), (41), (47)

query I
SELECT histogram(n, [10, 20, 30, 40, 50]) FROM obs
----
{10=3, 20=2, 30=5, 40=3, 50=2}

# other values are placed into the other bin
query I
SELECT histogram(n, [10, 20, 30, 40]) FROM obs
----
{10=3, 20=2, 30=5, 40=3, 9223372036854775807=2}

query I
SELECT histogram(n::double, [10, 20, 30, 40]) FROM obs
----
{10.0=3, 20.0=2, 30.0=5, 40.0=3, inf=2}

# empty bins
query I
SELECT histogram(n, []) FROM obs
----
{9223372036854775807=15}

# bounds that are not sorted
query I
SELECT histogram(n, [10, 40, 50, 30, 20]) FROM obs
----
{10=3, 20=2, 30=5, 40=3, 50=2}

# grouped aggregation
# uneven: 5, 7, 23, 25, 31, 41, 47
# even: 0, 12, 20, 24, 26, 28, 34, 36
query II
SELECT n%2=0 is_even, histogram(n, [10, 20, 30, 40, 50]) FROM obs GROUP BY is_even ORDER BY is_even
----
false	{10=2, 20=0, 30=2, 40=1, 50=2}
true	{10=1, 20=2, 30=3, 40=2, 50=0}

# different bounds per group
query II
SELECT n%2=0 is_even, histogram(n, case when n%2=0 then [10, 20, 30, 40, 50] else [11, 21, 31, 41, 51] end) FROM obs GROUP BY is_even ORDER BY is_even
----
0	{11=2, 21=0, 31=3, 41=1, 51=1}
1	{10=1, 20=2, 30=3, 40=2, 50=0}

# values bigger than the max bin are ignored
query I
SELECT histogram(n, [10, 20, 30, 40, 50]) FROM obs
----
{10=3, 20=2, 30=5, 40=3, 50=2}

# larger bins
query I
SELECT histogram(i, range(999, 10000, 1000)) FROM range(10000) t(i)
----
{999=1000, 1999=1000, 2999=1000, 3999=1000, 4999=1000, 5999=1000, 6999=1000, 7999=1000, 8999=1000, 9999=1000}

# extreme values
query I
SELECT histogram(v, [-9223372036854775808, -9223372036854775807, 9223372036854775807]) FROM
(VALUES (-9223372036854775808), (-9223372036854775807), (0), (9223372036854775807)) t(v)
----
{-9223372036854775808=1, -9223372036854775807=1, 9223372036854775807=2}

# extreme doubles/negative values
query I
SELECT histogram(v, ['-infinity'::double, -10, 0, 10, 'infinity']) FROM
(VALUES (-1e308), (-0.5), (0), ('inf'), ('-inf'), (0.5)) t(v)
----
{-inf=1, -10.0=1, 0.0=2, 10.0=1, inf=1}

# timestamps
query I
SELECT histogram(v, range(timestamp '2000-01-01', timestamp '2005-01-01', interval '1 year')) FROM
(VALUES (timestamp '2000-01-01'), (timestamp '2003-01-01')) t(v)
----
{2000-01-01 00:00:00=1, 2001-01-01 00:00:00=0, 2002-01-01 00:00:00=0, 2003-01-01 00:00:00=1, 2004-01-01 00:00:00=0}

# strings
query I
SELECT histogram(v, ['a', 'b', 'c', 'z']) FROM
(VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) t(v)
----
{a=1, b=2, c=1, z=1}

# non-inlined strings
query I
SELECT histogram(concat('thisisalongprefix_', v), ['thisisalongprefix_'||x for x in ['a', 'b', 'c', 'z']]) FROM
(VALUES ('a'), ('aaaa'), ('b'), ('c'), ('d')) t(v)
----
{thisisalongprefix_a=1, thisisalongprefix_b=2, thisisalongprefix_c=1, thisisalongprefix_z=1}

# structs
query I
SELECT histogram({'i': n}, [{'i': x} for x in [10, 20, 30, 40, 50]]) FROM obs
----
{{'i': 10}=3, {'i': 20}=2, {'i': 30}=5, {'i': 40}=3, {'i': 50}=2}

# lists
query I
SELECT histogram([n], [[x] for x in [10, 20, 30, 40, 50]]) FROM obs
----
{[10]=3, [20]=2, [30]=5, [40]=3, [50]=2}

# duplicate bounds in bins
query I
SELECT histogram(n, [10, 10, 10, 10]) FROM obs
----
{10=3}

# null WITHIN bins
statement error
SELECT histogram(n, [10, 20, NULL]) FROM obs
----
Histogram bin entry cannot be NULL

# NULL bins
statement error
SELECT histogram(n, NULL::BIGINT[]) FROM obs
----
Histogram bin list cannot be NULL

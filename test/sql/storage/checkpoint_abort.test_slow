# name: test/sql/storage/checkpoint_abort.test_slow
# description: Test correct behavior if we unexpectedly abort during a checkpoint
# group: [storage]

require skip_reload


load __TEST_DIR__/checkpoint_abort.db

statement ok
CREATE TABLE integers AS SELECT * FROM range(100000) tbl(i);

statement ok
CHECKPOINT;

statement ok
PRAGMA disable_checkpoint_on_shutdown;

statement ok
PRAGMA wal_autocheckpoint='1TB';

statement ok
PRAGMA debug_checkpoint_abort='before_header'

query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers
----
0	99999	100000

statement ok
INSERT INTO integers SELECT * FROM range(100000, 200000) tbl(i);

query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers
----
0	199999	200000

statement ok
UPDATE integers SET i=i+1;

query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers
----
1	200000	200000

statement error
CHECKPOINT;

restart

# verify that the change was correctly loaded from disk
query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers
----
1	200000	200000

# now verify that empty blocks left by a checkpoint aborts are re-used
# so that checkpoint aborts don't permanently leave holes in the file

loop i 0 10

statement ok
PRAGMA disable_checkpoint_on_shutdown;

statement ok
PRAGMA wal_autocheckpoint='1TB';

statement ok
PRAGMA debug_checkpoint_abort='before_header'

statement ok
UPDATE integers SET i=i;

statement error
CHECKPOINT;

restart

# verify that the change was correctly loaded from disk
query III
SELECT MIN(i), MAX(i), COUNT(*) FROM integers
----
1	200000	200000

query I nosort expected_blocks
select total_blocks from pragma_database_size();

endloop

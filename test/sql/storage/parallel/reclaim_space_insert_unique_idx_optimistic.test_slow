# name: test/sql/storage/parallel/reclaim_space_insert_unique_idx_optimistic.test_slow
# description: Test space reclamation of optimistic writing with a UNIQUE constraint violation.
# group: [parallel]

load __TEST_DIR__/reclaim_space_unique_index.db

statement ok
SET preserve_insertion_order=false;

statement ok
CREATE TABLE integers AS SELECT * FROM range(1_000_000) t(i);

statement ok
CREATE TABLE integers2 (i INTEGER);

statement ok
INSERT INTO integers2 VALUES (9999999);

statement ok
CREATE UNIQUE INDEX idx ON integers2(i);

# For smaller block sizes (16KB) the total blocks increase (to twice the original amount) in the first
# iteration, and then stay constant.

statement ok
CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM pragma_database_size();

statement ok
CREATE TYPE test_result AS UNION (
	ok BOOL,
	err STRUCT(
		old BIGINT,
		allowed_max DECIMAL(21,1),
		actual BIGINT)
);

loop i 0 10

statement ok
BEGIN;

statement ok
CHECKPOINT;

statement ok
INSERT INTO integers2 VALUES (999_998);

# Invalidate the transaction.

statement error
INSERT INTO integers2 SELECT * FROM integers WHERE i <= 999_998;
----
<REGEX>:Constraint Error.*PRIMARY KEY or UNIQUE constraint violation.*

statement ok
ROLLBACK

# Ensure that the total blocks don't exceed the total blocks after the first iteration by more than 1.2.

query I
SELECT
	CASE WHEN ${i} = 0 THEN True::test_result
	WHEN current.total_blocks <= total_blocks_tbl.total_blocks * 1.4 THEN True::test_result
	ELSE {
		'old': total_blocks_tbl.total_blocks,
		'allowed_max': total_blocks_tbl.total_blocks * 1.4,
		'actual': current.total_blocks
	}::test_result
	END
FROM pragma_database_size() AS current, total_blocks_tbl;
----
true

# Adjust the total_blocks_tbl once to the count after the first iteration.

statement ok
UPDATE total_blocks_tbl SET total_blocks = (
	SELECT
		CASE WHEN ${i} = 0 THEN (SELECT current.total_blocks FROM pragma_database_size() AS current)
		ELSE (total_blocks)END
	);

endloop

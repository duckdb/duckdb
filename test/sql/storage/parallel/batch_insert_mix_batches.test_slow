# name: test/sql/storage/parallel/batch_insert_mix_batches.test_slow
# description: Test batch insert with small batches
# group: [parallel]

require parquet

load __TEST_DIR__/insert_mix_batches.db

statement ok
COPY (FROM range(100000) tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' (ROW_GROUP_SIZE 5000)

statement ok
COPY (FROM range(100000, 400000) tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' (ROW_GROUP_SIZE 200000)

statement ok
COPY (FROM range(400000, 700000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' (ROW_GROUP_SIZE 999)

statement ok
COPY (FROM range(700000, 1000000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' (ROW_GROUP_SIZE 99979)


# create views that read the batches
statement ok
CREATE VIEW v1 AS SELECT * FROM parquet_scan(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet',  '__TEST_DIR__/mix_batches_odd_again.parquet'])

statement ok
CREATE VIEW v2 AS FROM v1 WHERE (i/10000)%2=0;

statement ok
CREATE VIEW v3 AS FROM v1 WHERE (i/10000)%2=0 OR (i>200000 AND i < 400000) OR (i>600000 AND i < 800000);

loop i 0 2

query I
CREATE TABLE integers AS FROM v1;
----
1000000

# verify that we are not consuming an unnecessarily giant amount of blocks
# we have a total of 1.1M values - this should not be more than 20 row groups (ideally it is 10)
query I
select count(distinct row_group_id) < 20 from pragma_storage_info('integers');
----
true

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v1
----
499999500000	0	999999	1000000	1000000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers
----
499999500000	0	999999	1000000	1000000

query I
SELECT * FROM v1 LIMIT 5 OFFSET 99998
----
99998
99999
100000
100001
100002

query I
SELECT * FROM integers LIMIT 5 OFFSET 99998
----
99998
99999
100000
100001
100002

# now do the same, but filter out half of the values
query I
CREATE TABLE integers2 AS FROM v2
----
500000

# verify that we are not consuming an unnecessarily giant amount of blocks
# we have a total of 500K values - this should not be more than 20 row groups (ideally it is 5)
query I
select count(distinct row_group_id) < 20 from pragma_storage_info('integers2');
----
true

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v2
----
247499750000	0	989999	500000	500000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2
----
247499750000	0	989999	500000	500000

query I
SELECT * FROM v2 LIMIT 5 OFFSET 99998
----
189998
189999
200000
200001
200002

query I
SELECT * FROM integers2 LIMIT 5 OFFSET 99998
----
189998
189999
200000
200001
200002

# do it again, but this time only filter out SOME small batches
query I
CREATE TABLE integers3 AS FROM v3
----
700000

# verify that we are not consuming an unnecessarily giant amount of blocks
# we have a total of 750K values - this should not be more than 20 row groups (ideally it is 7)
query I
select count(distinct row_group_id) < 20 from pragma_storage_info('integers3');
----
true

query IIIII nosort full_match3
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v3
----
261256463520	0	802815	602816	602816

query IIIII nosort full_match3
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3
----
261256463520	0	802815	602816	602816

query I
SELECT * FROM v3 LIMIT 5 OFFSET 9999
----
9999
20000
20001
20002
20003

query I
SELECT * FROM integers3 LIMIT 5 OFFSET 9999
----
9999
20000
20001
20002
20003

statement ok
DROP TABLE integers

statement ok
DROP TABLE integers2

statement ok
DROP TABLE integers3

# create views that read the batches using unions
statement ok
CREATE OR REPLACE VIEW v1 AS FROM '__TEST_DIR__/mix_batches_small.parquet' UNION ALL FROM '__TEST_DIR__/mix_batches_large.parquet' UNION ALL FROM '__TEST_DIR__/mix_batches_odd.parquet' UNION ALL FROM '__TEST_DIR__/mix_batches_odd_again.parquet'

statement ok
CREATE OR REPLACE VIEW v2 AS FROM v1 WHERE (i/10000)%2=0;

statement ok
CREATE OR REPLACE VIEW v3 AS FROM v1 WHERE (i/10000)%2=0 OR (i>200000 AND i < 400000) OR (i>600000 AND i < 800000);

endloop
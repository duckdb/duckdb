# name: test/sql/storage/parallel/custom_row_group_size.test_slow
# description: Test batch insert with small batches
# group: [parallel]

require parquet

statement ok
ATTACH '__TEST_DIR__/custom_row_group_size.db' AS custom_row_group_size (ROW_GROUP_SIZE 204800)

statement ok
USE custom_row_group_size

statement ok
COPY (FROM range(100000) tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' (ROW_GROUP_SIZE 5000)

statement ok
COPY (FROM range(100000, 400000) tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' (ROW_GROUP_SIZE 200000)

statement ok
COPY (FROM range(400000, 700000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' (ROW_GROUP_SIZE 999)

statement ok
COPY (FROM range(700000, 1000000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' (ROW_GROUP_SIZE 99979)


# create views that read the batches
statement ok
CREATE VIEW v1 AS SELECT * FROM parquet_scan(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet',  '__TEST_DIR__/mix_batches_odd_again.parquet'])

statement ok
CREATE VIEW v2 AS FROM v1 WHERE (i//10000)%2=0;

statement ok
CREATE VIEW v3 AS FROM v1 WHERE (i//10000)%2=0 OR (i>200000 AND i < 400000) OR (i>600000 AND i < 800000);

query I
CREATE TABLE integers AS FROM v1;
----
1000000

# verify we are actually creating larger row groups
query I
SELECT MAX(count) FROM pragma_storage_info('integers')
----
204800

# we have a total of 1M values - this should not be more than 10 row groups (ideally it is 5)
query I
select count(distinct row_group_id) < 10 from pragma_storage_info('integers');
----
true

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM v1
----
499999500000	0	999999	1000000	1000000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers
----
499999500000	0	999999	1000000	1000000

# now do the same, but filter out half of the values
query I
CREATE TABLE integers2 AS FROM v2
----
500000

# also test deletions
query I
DELETE FROM integers WHERE (i//10000)%2<>0;
----
500000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers
----
247499750000	0	989999	500000	500000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2
----
247499750000	0	989999	500000	500000

# test updates
query I
UPDATE integers SET i=i+1 WHERE i%2=0
----
250000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers
----
247500000000	1	989999	500000	500000

query I
CREATE TABLE integers3 AS FROM v3
----
700000

# verify that we are not consuming an unnecessarily giant amount of blocks
# we have a total of 750K values - this should not be more than 10 row groups (ideally it is 4)
query I
select count(distinct row_group_id) < 10 from pragma_storage_info('integers3');
----
true

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3
----
348499650000	0	989999	700000	700000

# non-batch insert
statement ok
SET preserve_insertion_order = false

statement ok
CREATE TABLE integers4 AS FROM integers

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers4
----
247500000000	1	989999	500000	500000

# re-attach without the parameter
statement ok
ATTACH ':memory:' AS mem

statement ok
USE mem

statement ok
DETACH custom_row_group_size

statement ok
ATTACH '__TEST_DIR__/custom_row_group_size.db' AS custom_row_group_size

statement ok
USE custom_row_group_size

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers
----
247500000000	1	989999	500000	500000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers2
----
247499750000	0	989999	500000	500000

query IIIII
SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM integers3
----
348499650000	0	989999	700000	700000

# invalid row group size parameters
statement error
ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS custom_row_group_size_x1 (ROW_GROUP_SIZE 0)
----
row group size must be bigger than 0

statement error
ATTACH '__TEST_DIR__/custom_row_group_size_xx.db' AS custom_row_group_size_x2 (ROW_GROUP_SIZE 77)
----
row group size must be divisible by the vector size

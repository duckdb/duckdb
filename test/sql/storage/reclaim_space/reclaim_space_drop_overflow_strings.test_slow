# name: test/sql/storage/reclaim_space/reclaim_space_drop_overflow_strings.test_slow
# description: Test that we reclaim space when dropping tables containing overflow strings
# group: [reclaim_space]

load __TEST_DIR__/reclaim_space_overflow_strings.db

statement ok
PRAGMA force_checkpoint;

statement ok
CREATE TABLE strings AS SELECT repeat('X', case when i%17=0 then 5000 else i%7 end) AS s FROM generate_series(0,150000) tbl(i);

statement ok
CHECKPOINT;

statement ok
CHECKPOINT;

query IIIIII
SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings
----
296.955	0	5000	44543527	(empty)	X

# for smaller block sizes (16KB) the total blocks alternate between a few values in the loop,
# therefore, we need to compare to a range of total block counts
statement ok
CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM pragma_database_size();

loop i 0 10

statement ok
DROP TABLE strings;

statement ok
CREATE TABLE strings AS SELECT repeat('X', case when i%17=0 then 5000 else i%7 end) AS s FROM generate_series(0,150000) tbl(i);

query IIIIII
SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings
----
296.955	0	5000	44543527	(empty)	X

statement ok
CHECKPOINT;

# ensure that the total blocks don't exceed the total blocks after the first iteration
# by more than 1.2

query I
SELECT CASE WHEN ${i} = 0 THEN True
	WHEN current.total_blocks <= total_blocks_tbl.total_blocks * 1.2 THEN True
	ELSE False END
FROM pragma_database_size() AS current, total_blocks_tbl;
----
1

# adjust total_blocks_tbl once to the count after the first iteration

statement ok
UPDATE total_blocks_tbl SET total_blocks = (
	SELECT CASE WHEN ${i} = 0 THEN (SELECT current.total_blocks FROM pragma_database_size() AS current)
		ELSE (total_blocks) END);

statement ok
CHECKPOINT;

restart

query IIIIII
SELECT AVG(STRLEN(s)), MIN(STRLEN(S)), MAX(STRLEN(S)), SUM(STRLEN(S)), MIN(S[1]), MAX(S[1]) FROM strings
----
296.955	0	5000	44543527	(empty)	X

endloop

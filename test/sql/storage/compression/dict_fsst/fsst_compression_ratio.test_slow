# name: test/sql/storage/compression/dict_fsst/fsst_compression_ratio.test_slow
# description: Assert fsst compression ratio is within reasonable margins
# group: [dict_fsst]

# load the DB from disk
load __TEST_DIR__/test_dictionary.db readwrite v1.3.0

require tpch

# First test: detailed compression ratio
statement ok
PRAGMA force_compression='dict_fsst'

# Uncompressed size per value: 10 chars + 4 bytes for dict offset = 14
# Compressed size per values: 2 bytes for 2 symbols (BEEPBOOP) and (-{num}) + 0.25 byte = 2.25 bytes per value
# Ignoring overhead for symbol table and bitwidth storage, we would expect a ratio of maximally 14/2.25 = 6.22

statement ok
CREATE TABLE test_compressed AS SELECT concat('BEEPBOOP-', (i%3)::VARCHAR) AS i FROM range(0, 1250000) tbl(i);

statement ok
checkpoint

statement ok
PRAGMA force_compression='uncompressed'

statement ok
CREATE TABLE test_uncompressed AS SELECT concat('BEEPBOOP-', (i%3)::VARCHAR) AS i FROM range(0, 1250000) tbl(i);

statement ok
checkpoint

statement ok
CREATE TYPE test_result AS UNION (
    ok BOOL,
    err STRUCT(
        uncompressed HUGEINT,
        compressed HUGEINT,
        allowed_minimum_ratio DECIMAL(2,1),
        allowed_maximum_ratio DECIMAL(2,1),
        actual_ratio FLOAT
    )
);

statement ok
set variable min_ratio = 35.0;
set variable max_ratio = 36.5;

# This query keeps a pretty wide margin in compression ratio un purpose to account for possible changes that
# influence compression ratio.
query I
SELECT
    CASE 
        WHEN (uncompressed::FLOAT / compressed::FLOAT) > getvariable('min_ratio') AND (uncompressed::FLOAT / compressed::FLOAT) < getvariable('max_ratio')
            THEN True::test_result
        ELSE {
            'uncompressed': uncompressed,
            'compressed': compressed,
            'allowed_minimum_ratio': getvariable('min_ratio'),
            'allowed_maximum_ratio': getvariable('max_ratio'),
            'actual_ratio': uncompressed::FLOAT / compressed::FLOAT
        }::test_result
    END
FROM (
    select
        (select count(distinct block_id) from pragma_storage_info('test_compressed') where segment_type in('VARCHAR')) as compressed,
        (select count(distinct block_id) from pragma_storage_info('test_uncompressed') where segment_type in('VARCHAR')) as uncompressed
) AS blocks_tbl;
----
true

statement ok
CALL dbgen(sf=0.1)

statement ok
PRAGMA force_compression='uncompressed'

statement ok
CREATE TABLE l_comment_uncompressed AS SELECT l_orderkey % 27 as k, l_comment FROM lineitem;

statement ok
checkpoint

statement ok
PRAGMA force_compression='dict_fsst'

statement ok
CREATE TABLE l_comment_compressed AS SELECT l_orderkey % 27 as k, l_comment FROM lineitem;

statement ok
checkpoint

statement ok
set variable min_ratio = 1.5;
set variable max_ratio = 2.5;

# We compress l_comment with roughly ~3x compression ratio with fsst
query I
SELECT
    CASE 
        WHEN (uncompressed::FLOAT / compressed::FLOAT) > getvariable('min_ratio') AND (uncompressed::FLOAT / compressed::FLOAT) < getvariable('max_ratio')
            THEN True::test_result
        ELSE {
            'uncompressed': uncompressed,
            'compressed': compressed,
            'allowed_minimum_ratio': getvariable('min_ratio'),
            'allowed_maximum_ratio': getvariable('max_ratio'),
            'actual_ratio': uncompressed::FLOAT / compressed::FLOAT
        }::test_result
    END
FROM (
    select
        (select count(distinct block_id) from pragma_storage_info('l_comment_compressed') where segment_type in('VARCHAR')) as compressed,
        (select count(distinct block_id) from pragma_storage_info('l_comment_uncompressed') where segment_type in('VARCHAR')) as uncompressed
) AS blocks_tbl;
----
true

query I
SELECT COUNT(DISTINCT l_comment) FROM l_comment_compressed WHERE k = 13
----
21983

query I
SELECT COUNT(*) FROM l_comment_compressed WHERE contains(l_comment, 'fox')
----
27771

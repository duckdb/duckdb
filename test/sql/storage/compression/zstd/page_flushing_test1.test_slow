# name: test/sql/storage/compression/zstd/page_flushing_test1.test_slow
# group: [zstd]

load __TEST_DIR__/zstd_page_flushing_test1.db

require block_size 262144

statement ok
create table tbl (
	a VARCHAR
);

statement ok
set variable my_string = (
	select concat(range(0,500000)::VARCHAR)
);

statement ok
SET checkpoint_threshold = '10.0 GB';

# Feed it enough data to actually use zstd (enough to train a dictionary)
statement ok
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');
insert into tbl values ('aaaabbbb');

# ------- VECTOR 1 -------

# This will start on the segment page and write the remainder on 'extra_pages[0]' buffer
statement ok
insert into tbl select getvariable('my_string');

# ------- VECTOR 2 -------

# This starts on 'extra_pages[0]' and writes onto 'extra_pages[1]'
statement ok
insert into tbl select getvariable('my_string');

# Insert 2036 (STANDARD_VECTOR_SIZE - 12) to finish the vector of values
statement ok
insert into tbl select 'bbbbaaaa' from range(2036)

# ------- VECTOR 3 -------

# This starts on 'extra_pages[1]' and writes onto 'extra_pages[0]'
statement ok
insert into tbl select getvariable('my_string');

statement ok
insert into tbl select 'bbbbaaaa' from range(2047)

# ------- VECTOR 4 -------

# This starts on 'extra_pages[0]', overflows to 'extra_pages[1]' twice
statement ok
insert into tbl select concat(getvariable('my_string'), getvariable('my_string'));

statement ok
insert into tbl select 'bbbbaaaa' from range(2047)

# ------- VECTOR 5 -------

# This starts on 'extra_pages[1]', overflows to 'extra_pages[0]' twice
statement ok
insert into tbl select concat(getvariable('my_string'), getvariable('my_string'));

statement ok
insert into tbl select 'bbbbaaaa' from range(2047)

# ------------------------

statement ok
pragma force_compression='zstd'

statement ok
checkpoint

query II
select strlen(a), count(a) from tbl group by strlen(a) order by all;
----
8	8188
3888890	3
7777780	2

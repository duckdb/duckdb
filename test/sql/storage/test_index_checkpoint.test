# name: test/sql/storage/test_index_checkpoint.test
# description: Verify that database footprint remains within expected bounds when writing index data.
# group: [storage]

# FIXME: once we refactor the (de)serialization, these numbers should go down

require skip_reload

load __TEST_DIR__/test_index_checkpoint.db

# Ensure we do not checkpoint early (which would throw off the total_blocks stat)
statement ok
PRAGMA wal_autocheckpoint='1TB';

statement ok
CREATE TABLE t2 (i integer,  uid varchar);

statement ok
INSERT INTO t2 SELECT i.range AS i, gen_random_uuid() AS uid FROM range(10000) AS i;

statement ok
CREATE UNIQUE INDEX iu ON t2(uid);

statement ok
CHECKPOINT;

statement ok
SELECT * FROM pragma_database_size();

# A prior version of index checkpoint caused index data to be written twice.
# If a node type exists, then we write at least one block for it.
# Due to the UUIDs causing many different prefixes, we have 4 blocks for prefixes.
# We can fit all 10k leaves on one LEAF block. Then, we have one NODE4 block and
# one NODE16 block. This makes a total of 7 blocks for the index. With extra blocks from
# storing the data, we should stay below 12 blocks.
query I
SELECT total_blocks < 12 FROM pragma_database_size();
----
true

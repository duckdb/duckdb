# name: test/sql/storage/optimistic_write/optimistic_write.test_slow
# description: Test large appends within individual transactions
# group: [optimistic_write]

foreach skip_checkpoint true false

load __TEST_DIR__/optimistic_write_${skip_checkpoint}.db

statement ok
SET debug_skip_checkpoint_on_commit = ${skip_checkpoint}

statement ok
PRAGMA disable_checkpoint_on_shutdown

statement ok
CREATE OR REPLACE TABLE test (a INTEGER);

statement ok
INSERT INTO test SELECT * FROM range(1_000_000)

query I
SELECT SUM(a) FROM test
----
499999500000

restart

query I
SELECT SUM(a) FROM test
----
499999500000

statement ok
INSERT INTO test SELECT * FROM range(1_000_000)

query I
SELECT SUM(a) FROM test
----
999999000000

endloop

# For smaller block sizes (16KB) the total blocks alternate between a few values in the loop.

statement ok
CREATE TABLE total_blocks_tbl (total_blocks UBIGINT);

loop i 0 20

statement ok
BEGIN TRANSACTION;

statement ok
INSERT INTO test SELECT * FROM range(1_000_000);

statement ok
INSERT INTO test SELECT * FROM range(1_000_000);

statement ok
ROLLBACK;

# Track the block count of each iteration.

statement ok
INSERT INTO total_blocks_tbl SELECT current.total_blocks FROM pragma_database_size() AS current

statement ok
CHECKPOINT;

endloop

# Ensure that the blocks don't grow between iterations.

query I
WITH tbl(w) AS (
	SELECT struct_pack(
		total_blocks := total_blocks,
		sum := SUM (total_blocks) OVER (ROWS BETWEEN 0 PRECEDING AND 1 FOLLOWING)
	 ) AS w
	FROM total_blocks_tbl
	LIMIT 19)
SELECT list_filter(LIST(w), lambda x: x.total_blocks * 2.5 < x.sum) FROM tbl;
----
[]

# Ensure that the blocks don't grow 'quietly' between iterations.

query I
WITH tbl(l) AS (
	SELECT LIST(total_blocks) AS l FROM total_blocks_tbl)
SELECT list_sum(l) < (list_count(l) * l[3] + 2 * l[3]) FROM tbl;
----
true

statement ok
INSERT INTO test VALUES (42);

statement ok
CHECKPOINT;

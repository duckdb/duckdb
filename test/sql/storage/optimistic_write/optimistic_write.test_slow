# name: test/sql/storage/optimistic_write/optimistic_write.test_slow
# description: Test large appends within individual transactions
# group: [optimistic_write]

load __TEST_DIR__/optimistic_write.db

statement ok
CREATE TABLE test (a INTEGER);

statement ok
INSERT INTO test SELECT * FROM range(1000000)

query I
SELECT SUM(a) FROM test
----
499999500000

restart

statement ok
INSERT INTO test SELECT * FROM range(1000000)

query I
SELECT SUM(a) FROM test
----
999999000000

require skip_reload

# for smaller block sizes (16KB) the total blocks alternate between a few values in the loop,
# therefore, we need to compare to a range of total block counts
statement ok
CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM pragma_database_size();

# verify in a loop that the size of the system does not increase in case of rollbacks
loop i 0 10

statement ok
BEGIN TRANSACTION;

statement ok
INSERT INTO test SELECT * FROM range(1000000);

statement ok
INSERT INTO test SELECT * FROM range(1000000);

statement ok
ROLLBACK;

# ensure that the total blocks don't exceed the total blocks after the first iteration
# by more than 1.2

query I
SELECT CASE WHEN ${i} = 0 THEN True
	WHEN current.total_blocks <= total_blocks_tbl.total_blocks * 1.2 THEN True
	ELSE False END
FROM pragma_database_size() AS current, total_blocks_tbl;
----
1

# adjust total_blocks_tbl once to the count after the first iteration

statement ok
UPDATE total_blocks_tbl SET total_blocks = (
	SELECT CASE WHEN ${i} = 0 THEN (SELECT current.total_blocks FROM pragma_database_size() AS current)
		ELSE (total_blocks) END);

statement ok
CHECKPOINT;

endloop

statement ok
INSERT INTO test VALUES (42);

statement ok
CHECKPOINT;

# ensure that the total blocks don't exceed the total blocks after the first iteration
# by more than 1.2

query I
SELECT current.total_blocks <= total_blocks_tbl.total_blocks * 1.4
FROM pragma_database_size() AS current, total_blocks_tbl;
----
1

# name: test/sql/storage/optimistic_write/optimistic_write_drop_column.test_slow
# description: Test optimistic write with drop column in transaction-local storage
# group: [optimistic_write]

load __TEST_DIR__/optimistic_write_drop.db

statement ok
CREATE TABLE test (a INTEGER, b INTEGER, c INTEGER);

statement ok
BEGIN TRANSACTION

statement ok
INSERT INTO test SELECT i, i + 1, i + 2 FROM range(1000000) tbl(i)

statement ok
ALTER TABLE test DROP COLUMN c

statement ok
COMMIT

query II
SELECT SUM(a), SUM(b) FROM test
----
499999500000	500000500000

restart

query II
SELECT SUM(a), SUM(b) FROM test
----
499999500000	500000500000

statement ok
BEGIN TRANSACTION

statement ok
INSERT INTO test SELECT i, i FROM range(1000000) t(i)

statement ok
ALTER TABLE test DROP COLUMN b

statement ok
ROLLBACK

query II
SELECT SUM(a), SUM(b) FROM test
----
499999500000	500000500000

# Ensure that we reclaim space correctly.

require skip_reload

# For smaller block sizes (16KB) the total blocks alternate between a few values in the loop.
# Therefore, we compare to a range of total block counts.
statement ok
CREATE TABLE total_blocks_tbl AS SELECT total_blocks FROM pragma_database_size();

loop i 0 10

statement ok
DROP TABLE test

statement ok
CREATE TABLE test (a INTEGER, b INTEGER, c INTEGER);

statement ok
BEGIN TRANSACTION

statement ok
INSERT INTO test SELECT i, i + 1, i + 2 FROM range(1000000) tbl(i)

statement ok
ALTER TABLE test DROP COLUMN c

statement ok
COMMIT

query II
SELECT SUM(a), SUM(b) FROM test
----
499999500000	500000500000

# Ensure that the total blocks don't exceed the total blocks after the first iteration
# by more than 1.2.

query I
SELECT CASE WHEN ${i} = 0 THEN True
	WHEN current.total_blocks <= total_blocks_tbl.total_blocks * 1.2 THEN True
	ELSE False END
FROM pragma_database_size() AS current, total_blocks_tbl;
----
1

# Adjust total_blocks_tbl once to the count after the first iteration.

statement ok
UPDATE total_blocks_tbl SET total_blocks = (
	SELECT CASE WHEN ${i} = 0 THEN (SELECT current.total_blocks FROM pragma_database_size() AS current)
		ELSE (total_blocks) END);

statement ok
CHECKPOINT;

statement ok
CHECKPOINT;

endloop

# name: test/sql/storage/vacuum/test_truncate_after_delete.test_slow
# description: Test truncating of the database file after data is deleted
# group: [vacuum]

load __TEST_DIR__/truncate_after_delete.db

statement ok
CREATE TABLE uuids (i VARCHAR);

# For smaller block sizes (16KB) the total blocks alternate between a few values in the loop.
statement ok
CREATE TABLE blocks AS SELECT total_blocks AS b FROM pragma_database_size();

loop i 0 20

statement ok
DROP TABLE IF EXISTS integers;

statement ok
INSERT INTO uuids SELECT uuid()::varchar FROM range(1000000);

statement ok
CHECKPOINT;

# note that just deleting does not free the space yet
# that is because deleting + checkpointing causes the metadata to be written at the END of the file
# as we cannot override the deleted data yet
statement ok
DELETE FROM uuids;

statement ok
CHECKPOINT;

# doing ANOTHER action and checkpointing again causes the data to be truncated
# since the metadata can then overwrite the previously written data
statement ok
CREATE TABLE integers(i INTEGER);

statement ok
INSERT INTO integers VALUES (1), (2), (3);

statement ok
CHECKPOINT;

# Ensure that the current block count does not exceed the maximum block count by more than 1.2.

query I
SELECT CASE WHEN ${i} < 10 THEN True
	WHEN c.total_blocks <= blocks.b * 1.2 THEN True
	ELSE False END
FROM pragma_database_size() AS c, blocks;
----
1

# Adjust blocks to the maximum of the first 10 warm-up iterations.

statement ok
UPDATE blocks SET b = (
 	SELECT CASE WHEN ${i} < 10 THEN
 		(SELECT list_max(list_value(c.total_blocks, b)) FROM pragma_database_size() AS c)
 		ELSE (b) END);

endloop

restart

query I
FROM integers;
----
1
2
3

query I
FROM uuids;
----

# resume operation after truncation
restart

statement ok
DELETE FROM integers;

statement ok
INSERT INTO integers FROM range(1000000);

query I
SELECT SUM(i) FROM integers;
----
499999500000

restart

query I
SELECT SUM(i) FROM integers;
----
499999500000

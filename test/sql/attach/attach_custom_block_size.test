# name: test/sql/attach/attach_custom_block_size.test
# group: [attach]

require skip_reload

statement ok
PRAGMA enable_verification

statement error
ATTACH '__TEST_DIR__/not_pow_of_two.db' (BLOCK_SIZE 123456);
----
must be a power of two

# FIXME: once we implement this feature, we expect this to work
statement error
ATTACH '__TEST_DIR__/not_default.db' (BLOCK_SIZE 16384);
----
Not implemented

statement error
ATTACH '__TEST_DIR__/too_small.db' (BLOCK_SIZE 128);
----
must be greater or equal than the minimum

# default block allocation size works

statement ok
ATTACH '__TEST_DIR__/default_size.db' (BLOCK_SIZE 262144);

# detach and then try to attach with a different block size parameter
statement ok
DETACH default_size;

# FIXME: once we implement this feature, we expect this to fail because the file
# FIXME: already exists with a different block allocation size
statement error
ATTACH '__TEST_DIR__/default_size.dbe' (BLOCK_SIZE 16384);
----
not supported

statement ok
ATTACH '__TEST_DIR__/default_size.db';

statement ok
DETACH default_size;

# FIXME: once we implement the custom block size feature, we expect this to work.
# We detect the block allocation size in the header.
# ATTACH 'dbname.db' (BLOCK_SIZE 16384);
# DETACH dbname;
# ATTACH 'dbname.db';

statement error
SET preferred_block_alloc_size = '123456';
----
must be a power of two

statement error
SET preferred_block_alloc_size = '16384';
----
Not implemented

statement error
SET preferred_block_alloc_size = '128';
----
must be greater or equal than the minimum

statement ok
SET preferred_block_alloc_size = '262144';

statement ok
ATTACH '__TEST_DIR__/default_size.db';

# FIXME: once we implement the custom block size feature, we need a test that (in a tx) attaches a new
# database file. Then, we ROLLBACK the transaction. Then, we attach the same file with a different block size.
# We'll create an error in SingleFileStorageManager::LoadDatabase, as we do not remove the file on ROLLBACK.
# name: test/sql/function/interval/test_date_part.test
# description: Extract function
# group: [interval]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE intervals(i INTERVAL, s VARCHAR);

statement ok
INSERT INTO intervals VALUES ('2 years', 'year'), ('16 months', 'quarter'), ('42 days', 'day'), ('2066343400 microseconds', 'minute');

# test date_part with different combinations of constant/non-constant columns
query I
SELECT date_part(NULL::VARCHAR, NULL::INTERVAL) FROM intervals;
----
NULL
NULL
NULL
NULL

query I
SELECT date_part(s, NULL::INTERVAL) FROM intervals;
----
NULL
NULL
NULL
NULL

# intervals
query I
SELECT date_part(NULL, i) FROM intervals;
----
NULL
NULL
NULL
NULL

query I
SELECT date_part(s, INTERVAL '4 years 5 months 18 days 128 seconds') FROM intervals;
----
4
2
18
2

query I
SELECT date_part('seconds', i) FROM intervals;
----
0
0
0
26

query I
SELECT date_part('epoch', i) FROM intervals;
----
63115200
41925600
3628800
2066

query I
SELECT date_part(s, i) FROM intervals;
----
2
2
42
34


# interval gives errors for date-only parts
statement error
SELECT dayofweek(i) FROM intervals

statement error
SELECT isodow(i) FROM intervals

statement error
SELECT dayofyear(i) FROM intervals

statement error
SELECT week(i) FROM intervals

statement error
SELECT era(i) FROM intervals;

statement error
SELECT extract(era from i) FROM intervals;

statement error
SELECT date_part('era', i) FROM intervals;

statement error
SELECT date_part('offset', i) FROM intervals;

# Correctness: Compare date_part values with function values
foreach partcode millennium century decade year quarter month day hour minute second millisecond microsecond epoch

query III
SELECT i, DATE_PART('${partcode}', i) AS p, ${partcode}(i) AS f
FROM intervals
WHERE p <> f;
----

endloop

#
# Structs
#

# Correctness: Compare struct values with scalar values
foreach partcode millennium century decade year quarter month day hour minute second millisecond microsecond epoch

query III
SELECT i, DATE_PART('${partcode}', i) AS p, DATE_PART(['${partcode}'], i) AS st
FROM intervals
WHERE p <> st['${partcode}'];
----

endloop

# Day parts
query II
SELECT i, DATE_PART(['year', 'month', 'day'], i) AS parts
FROM intervals
ORDER BY 1;
----
00:34:26.3434	{'year': 0, 'month': 0, 'day': 0}
42 days	{'year': 0, 'month': 0, 'day': 42}
1 year 4 months	{'year': 1, 'month': 4, 'day': 0}
2 years	{'year': 2, 'month': 0, 'day': 0}

# Year parts
query II
SELECT i, DATE_PART(['millennium', 'century', 'decade', 'quarter'], i) AS parts
FROM intervals
ORDER BY 1;
----
00:34:26.3434	{'millennium': 0, 'century': 0, 'decade': 0, 'quarter': 1}
42 days	{'millennium': 0, 'century': 0, 'decade': 0, 'quarter': 1}
1 year 4 months	{'millennium': 0, 'century': 0, 'decade': 0, 'quarter': 2}
2 years	{'millennium': 0, 'century': 0, 'decade': 0, 'quarter': 1}

# Time parts
query II
SELECT i, DATE_PART(['hour', 'minute', 'second', 'epoch'], i) AS parts
FROM intervals
ORDER BY 1;
----
00:34:26.3434	{'hour': 0, 'minute': 34, 'second': 26, 'epoch': 2066}
42 days	{'hour': 0, 'minute': 0, 'second': 0, 'epoch': 3628800}
1 year 4 months	{'hour': 0, 'minute': 0, 'second': 0, 'epoch': 41925600}
2 years	{'hour': 0, 'minute': 0, 'second': 0, 'epoch': 63115200}

# Invalid parts

foreach datepart dow isodow doy week isoyear yearweek era timezone timezone_hour timezone_minute

statement error
SELECT d, DATE_PART(['${datepart}'], d) AS parts
FROM dates
ORDER BY 1;

endloop

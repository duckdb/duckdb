# name: test/sql/function/nested/test_struct_insert.test
# description: Test the struct_insert function.
# group: [nested]

statement ok
pragma enable_verification

# Test basic insertion into a STRUCT.
query T
SELECT struct_insert ({a: 1, b: 2}, c := 3);
----
{'a': 1, 'b': 2, 'c': 3}

# Insertion into a STRUCT generated by a row of data.
query T
WITH data AS (SELECT 1 AS a, 2 AS b, 3 AS c)
SELECT struct_insert (data, d := 4) FROM data;
----
{'a': 1, 'b': 2, 'c': 3, 'd': 4}

# Insertion of a nested STRUCT into an existing STRUCT.
query T
SELECT struct_insert({'a': 1, 'b': 'abc', 'c': true}, d := {'a': 'new stuff'});
----
{'a': 1, 'b': abc, 'c': true, 'd': {'a': new stuff}}

# Test incorrect usage.
statement error
SELECT struct_insert();
----
<REGEX>:Invalid Input Error.*Missing required arguments for struct_insert function.*

statement error
SELECT struct_insert({a: 1, b: 2});
----
<REGEX>:Invalid Input Error.*insert nothing into a STRUCT.*

statement error
SELECT struct_insert(123, a := 1);
----
<REGEX>:Invalid Input Error.*The first argument to struct_insert must be a STRUCT.*

statement error
SELECT struct_insert({a: 1, b: 2}, a := 2);
----
<REGEX>:Binder Error.*Duplicate struct entry name.*

# Test inserting NULL as the default value.

statement ok
CREATE TABLE tbl (col STRUCT(i INT));

statement ok
INSERT INTO tbl SELECT {'i': range} FROM range(3);

query I
SELECT struct_insert(col, a := col.i + 1, b := NULL::VARCHAR) FROM tbl ORDER BY ALL;
----
{'i': 0, 'a': 1, 'b': NULL}
{'i': 1, 'a': 2, 'b': NULL}
{'i': 2, 'a': 3, 'b': NULL}

query I
SELECT struct_insert(col, a := NULL, b := NULL::VARCHAR, c := [NULL]) FROM tbl ORDER BY ALL;
----
{'i': 0, 'a': NULL, 'b': NULL, 'c': [NULL]}
{'i': 1, 'a': NULL, 'b': NULL, 'c': [NULL]}
{'i': 2, 'a': NULL, 'b': NULL, 'c': [NULL]}
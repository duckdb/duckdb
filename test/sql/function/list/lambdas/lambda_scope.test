# name: test/sql/function/list/lambdas/lambda_scope.test
# description: Test the scoping of lambda variables.
# group: [lambdas]

# Lambda parameters have precedence over columns.

statement ok
CREATE TABLE t1 AS SELECT [1, 2, 3] AS x;

query I
SELECT list_apply(['hello'], x -> x) FROM t1;
----
[hello]

statement ok
CREATE TABLE t2 AS SELECT [[1], [2], [3]] AS x;

query I
SELECT list_transform([[1], [2], [3]], x -> x[1]) FROM t2;
----
[1, 2, 3]

statement ok
CREATE TABLE l_test (l integer[]);

statement ok
INSERT INTO l_test VALUES ([1, 2, 3]);

query II
SELECT l, list_transform(l, l -> l + 1) FROM l_test;
----
[1, 2, 3]	[2, 3, 4]

statement ok
CREATE TABLE l_filter_test (l integer[]);

statement ok
INSERT INTO l_filter_test VALUES ([1, 2]);

query II
SELECT l, list_filter(l, l -> l > 1) FROM l_filter_test;
----
[1, 2]	[2]

# don't allow qualified lambda parameters (LHS parameters)

statement error
SELECT list_apply(i, a.x -> a.x + 1) FROM (VALUES (list_value(1, 2, 3))) tbl(i);
----
Invalid lambda parameters

statement ok
CREATE TABLE qualified_tbl (x INTEGER[]);

statement ok
INSERT INTO qualified_tbl VALUES ([1, 2]);

query I
SELECT list_transform(qualified_tbl.x, x -> (qualified_tbl.x)[1] + 1 + x) FROM qualified_tbl;
----
[3, 4]

statement error
SELECT list_transform(qualified_tbl.x, qualified_tbl.x -> qualified_tbl.x + 1) FROM qualified_tbl;
----
Invalid lambda parameters

# previously ambiguous lambda parameters
# issue #9970

query I
SELECT list_transform([1, 2], x -> list_transform([3, 4], x -> x));
----
[[3, 4], [3, 4]]

query I
SELECT list_has_all([variable_has_all FOR variable_has_all IN ['a']], ['b']) AS list_comp_result;
----
false

query I
SELECT list_has_all(list_transform(['a'], variable_has_all -> variable_has_all), ['b']) AS list_transform_result;
----
false

query I
SELECT list_has_any(['b'], list_transform(['a'], variable_has_any -> variable_has_any)) AS list_transform_result;
----
false

query I
SELECT list_intersect(list_intersect([1], [1]), [1])
----
[1]

query I
SELECT list_intersect([1], list_intersect([1], [1]))
----
[1]

query I
SELECT list_has_any(LIST_VALUE(list_has_any([1], [1])), [1])
----
true

query I
SELECT list_has_any([1], LIST_VALUE(list_has_any([1], [1])))
----
true

query I
SELECT list_has_all(LIST_VALUE(list_has_all([1], [1])), [1])
----
true

query I
SELECT list_has_all([1], LIST_VALUE(list_has_all([1], [1])))
----
true

query I
SELECT list_has_any(LIST_VALUE(list_has_all(list_intersect([1], [1]), [1])), [1]);
----
true

query I
SELECT list_has_all(LIST_VALUE(list_has_any(list_intersect([1], [1]), [1])), [1]);
----
true

query I
SELECT list_intersect(LIST_VALUE(list_has_all(LIST_VALUE(list_has_any([1], [1])), [1])), [1])
----
[true]

query I
SELECT list_intersect(list_intersect([1, 2, 3, 4], [4, 5, 6, 7]), list_intersect([4, 5, 6, 7], [1, 2, 3, 4]));
----
[4]

# more tests for qualifying column names

statement ok
CREATE TABLE tbl_qualified AS SELECT 42 AS x;

query II
SELECT x, list_transform([1], x -> x) FROM tbl_qualified;
----
42	[1]

statement error
SELECT list_transform([1,2,3], sqrt(xxx.z) -> xxx.z + 1) AS l ;
----
Invalid lambda parameters

query I
SELECT list_transform([1, 2, 3], "x.y" -> "x.y" + x.y) AS l FROM (VALUES (42), (84)) x(y);
----
[43, 44, 45]
[85, 86, 87]

statement error
SELECT list_reduce([1, 2, 3, 4], x *++++++++* y -> x - y) AS l;
----
Invalid lambda parameters


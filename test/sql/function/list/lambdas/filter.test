# name: test/sql/function/list/lambdas/filter.test
# description: Test list_filter function
# group: [lambdas]

# NOTE: some of these tests are directly taken from the Presto Array Function examples

statement ok
PRAGMA enable_verification

# test NULLs and simple cases

query II
SELECT [1] AS l, list_filter([1], l -> l > 1)
----
[1]	[]

query I
SELECT list_filter(NULL, x -> x > 1)
----
NULL

query I
SELECT list_filter([True], x -> x)
----
[true]

query I
SELECT list_filter(['duck', 'a', 'รถ'], duck -> contains(concat(duck, 'DB'), 'duck'))
----
[duck]

query I
SELECT list_filter([1, 2, 3], x -> x % 2 = 0)
----
[2]

query I
SELECT list_filter([], x -> x > 1)
----
[]

query I
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0)
----
[1]

query I
SELECT list_filter([5, -6, NULL, 7], x -> x > 0)
----
[5, 7]

query I
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL)
----
[5, 7]

# test on table with rows

statement ok
CREATE TABLE lists (n integer, l integer[])

statement ok
INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2])

query I
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists
----
[1]
[1]
NULL
[-1]

query I
SELECT list_filter(l, x -> x <= n) FROM lists
----
[1]
[1, 2]
NULL
[-1, 2]

query I
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists
----
[1]
[1, 2, 3]
NULL
[-1, 2]

# test other operators and more complex/nested functions

query I
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'))
----
[abc]

query I
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2))
----
[[1], [2, 1], [2, 2]]

query I
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0), list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'))
----
[42, 8, 2, enjoy, life, the, fullest]

# test aliases

query I
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4)
----
[1]

# test many empty lists

statement ok
CREATE TABLE empty_lists (l integer[])

statement ok
INSERT INTO empty_lists VALUES ([]), ([]), ([]), ([1, NULL, -1]), ([]), (NULL), (NULL), ([]), ([1, 2, 3]), ([]), ([]), ([]);

query I
SELECT list_filter(l, x -> x > 0) FROM empty_lists
----
[]
[]
[]
[1]
[]
NULL
NULL
[]
[1, 2, 3]
[]
[]
[]

# very large lists

statement ok
CREATE TABLE large_lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;

query II
SELECT g, list_count(list_filter(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g
----
0	2500
1	0
2	2500
3	0

# test correlated subqueries

statement ok
CREATE TABLE corr_test (n integer, l varchar[], g integer)

statement ok
INSERT INTO corr_test VALUES (1, ['a', '11', '23'], 1), (3, [NULL, '2', 'hello', 'wie gehts'], 1), (NULL, NULL, 1), (0, [], 1)

query I
SELECT n FROM corr_test WHERE list_count(list_filter(l, elem -> length(elem) >= n)) >= n
----
1
0

query I
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_filter(list_concat(list(c.n), ct.l), a -> length(a) >= 1)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n
----
0
1
3

query I
SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)) FROM corr_test
----
[a, 11, 23]
[2, hello, wie gehts]
NULL
[]

query I
SELECT (SELECT list_filter(l, elem -> length(elem) >= n)) FROM corr_test
----
[a, 11, 23]
[hello, wie gehts]
NULL
[]

query I
SELECT (SELECT (SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)))) FROM corr_test
----
[a, 11, 23]
[2, hello, wie gehts]
NULL
[]

# positional references in lambda functions
query I
SELECT list_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], x -> x > #1) FROM range(10)
----
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[2, 3, 4, 5, 6, 7, 8, 9]
[3, 4, 5, 6, 7, 8, 9]
[4, 5, 6, 7, 8, 9]
[5, 6, 7, 8, 9]
[6, 7, 8, 9]
[7, 8, 9]
[8, 9]
[9]
[]

# fixes 5816
# auto casting in list_filter, or exception if not possible (casting is strict)

statement ok
create table lambdas AS SELECT [5,6] AS col1, [4,8] AS col2;

query I
SELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;
----
[[4, 8], [4, 8]]

query I
SELECT list_apply([5,6], x -> list_filter([4,8], y -> y));
----
[[4, 8], [4, 8]]

query I
SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));
----
[[5, 6]]

statement error
SELECT list_transform([['abc']], x -> list_filter(x, y -> y));
----
Conversion Error: Could not convert string 'abc' to BOOL

query II
select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];
----
[[0], [1], [2], [3], [4]]	[[0], [1], [2], [3], [4]]

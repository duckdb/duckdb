# name: test/sql/function/list/list_sort.test
# description: Test list_sort function
# group: [list]

statement ok
PRAGMA default_order='ASC';

statement ok
PRAGMA default_null_order='NULLS FIRST';

# test NULL or empty

foreach func_name list_sort list_reverse_sort

query I
SELECT ${func_name}(NULL)
----
NULL

query I
SELECT ${func_name}([NULL])
----
[NULL]

query I
SELECT ${func_name}([])
----
[]

query I
SELECT ${func_name}([]) WHERE 1 = 0
----

endloop

# test incorrect syntax

foreach func_name list_sort list_reverse_sort

statement error
SELECT ${func_name}()

statement error
SELECT ${func_name}(*)

statement error
SELECT ${func_name}([1, 2], 2)

statement error
SELECT ${func_name}([1, 2], 'DESC', 2)

statement error 
SELECT ${func_name}([1, 2], 2, 2)

endloop

statement error
SELECT list_sort([1, 2], 'NULLS FIRST')

# test incorrect parameter type

foreach func_name list_sort list_reverse_sort

foreach type boolean varchar tinyint smallint integer bigint hugeint utinyint usmallint uinteger ubigint float double decimal(4,1) decimal(9,4) decimal(18,6) decimal(38,10) date time timestamp timestamp_s timestamp_ms timestamp_ns timetz timestamptz interval blob

statement error
SELECT ${func_name}(NULL::${type})

endloop

endloop

# other tests

query I
SELECT list_sort([1, 2])
----
[1, 2]

query I
SELECT list_sort(list_sort([1, 2]))
----
[1, 2]

query I
SELECT list_reverse_sort([1, 2])
----
[2, 1]

query I
SELECT list_reverse_sort(list_reverse_sort([1, 2]))
----
[2, 1]

query I
SELECT list_sort([1, 3, NULL, 5, NULL, -5])
----
[NULL, NULL, -5, 1, 3, 5]

query I
SELECT list_reverse_sort([1, 3, NULL, 5, NULL, -5])
----
[NULL, NULL, 5, 3, 1, -5]

statement ok
CREATE TABLE integers AS SELECT LIST(i) AS i FROM range(1, 10, 1) t1(i)

statement ok
INSERT INTO integers VALUES ([NULL]), (NULL), ([])

query I
SELECT list_sort(i) FROM integers
----
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[NULL]
NULL
[]

query I
SELECT list_reverse_sort(i) FROM integers
----
[9, 8, 7, 6, 5, 4, 3, 2, 1]
[NULL]
NULL
[]

statement error
SELECT list_sort(l, l, l)

statement error
SELECT list_sort(l, 'ASC', l)

statement error
SELECT list_reverse_sort(l, l)

statement error
SELECT list_reverse_sort(l, 'DESC')

statement error
SELECT list_reverse_sort(l, 'DESC', 'NULLS FIRST')

# test aliases

query I
SELECT array_sort([1, 2])
----
[1, 2]

query I
SELECT array_reverse_sort([1, 2])
----
[2, 1]

# test custom ordering

query I
SELECT list_sort([1, 3, NULL, 2], 'ASC')
----
[NULL, 1, 2, 3]

query I
SELECT list_sort([1, 3, NULL, 2], 'DESC')
----
[NULL, 3, 2, 1]

query I
SELECT list_sort([1, 3, NULL, 2], 'DESC', 'NULLS LAST')
----
[3, 2, 1, NULL]

query I
SELECT list_sort([1, 3, NULL, 2], 'DESC', 'NULLS LAST')
----
[3, 2, 1, NULL]

query I
SELECT list_sort([1, 3, NULL, 2], 'deSc', 'nuLls LAST')
----
[3, 2, 1, NULL]

query I
SELECT list_sort([1, 3, NULL, 2], 'DESC', 'NULLS FIRST')
----
[NULL, 3, 2, 1]

query I
SELECT list_sort([1, 3, NULL, 2], 'ASC', 'NULLS FIRST')
----
[NULL, 1, 2, 3]

query I
SELECT list_sort([1, 3, NULL, 2], 'ASC', 'NULLS LAST')
----
[1, 2, 3, NULL]

query I
SELECT list_reverse_sort([1, 3, NULL, 2], 'NULLS LAST')
----
[3, 2, 1, NULL]

query I
SELECT list_reverse_sort([1, 3, NULL, 2], 'NULLS FIRST')
----
[NULL, 3, 2, 1]

# test all types

# BOOLEAN
query I
SELECT list_sort([True, False, NULL, True, True, NULL])
----
[NULL, NULL, false, true, true, true]

query I
SELECT list_sort([NULL::BOOLEAN])
----
[NULL]

# VARCHAR
query I
SELECT list_sort(['aa', 'a', 'cd', NULL, '42'])
----
[NULL, 42, a, aa, cd]

query I
SELECT list_sort([NULL::VARCHAR])
----
[NULL]

# INTEGER types
foreach type tinyint smallint integer bigint hugeint utinyint usmallint uinteger ubigint

query I
SELECT list_sort([1::${type}, NULL, 2::${type}])
----
[NULL, 1, 2]

query I
SELECT list_sort([NULL::${type}])
----
[NULL]

endloop

# FLOAT, DOUBLE and DECIMAL types

foreach type float double decimal(4,1) decimal(9,4) decimal(18,6) decimal(38,10)

statement ok
SELECT list_sort([1::${type}])

query I
SELECT list_sort([NULL::${type}])
----
[NULL]

endloop

# TEMPORAL types

# date
query I
SELECT list_sort(['2021-08-20'::DATE])
----
[2021-08-20]

# time
query I
SELECT list_sort(['14:59:37'::TIME])
----
[14:59:37]

# timestamp
query I
SELECT list_sort(['2021-08-20'::TIMESTAMP])
----
[2021-08-20 00:00:00]

# timestamp s
query I
SELECT list_sort(['2021-08-20'::TIMESTAMP_S])
----
[2021-08-20 00:00:00]

# timestamp ms
query I
SELECT list_sort(['2021-08-20 00:00:00.123'::TIMESTAMP_MS])
----
[2021-08-20 00:00:00.123]

# timestamp ns
query I
SELECT list_sort(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS])
----
[2021-08-20 00:00:00.123456]

# time with time zone
query I
SELECT list_sort(['14:59:37'::TIMETZ])
----
[14:59:37+00]

# timestamp with time zone
query I
SELECT list_sort(['2021-08-20'::TIMESTAMPTZ])
----
[2021-08-20 00:00:00+00]

# interval
query I
SELECT list_sort([INTERVAL 1 YEAR])
----
[1 year]

foreach type date time timestamp timestamp_s timestamp_ms timestamp_ns timetz timestamptz interval

query I
SELECT list_sort([NULL::${type}])
----
[NULL]

endloop

# BLOB

query I
SELECT list_sort(['{a: 1}'::BLOB, '{a: 3}'::BLOB])
----
[{a: 1}, {a: 3}]

query I
SELECT list_sort([NULL::BLOB])
----
[NULL]

# ENUMS

statement ok
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy')

statement ok
CREATE TABLE enums (e mood[])

statement ok
INSERT INTO enums VALUES (['happy', 'sad'])

query I
SELECT list_sort(e) FROM enums
----
[sad, happy]

# NESTED types

query I
SELECT list_sort([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]])
----
[NULL, [], [1], [1, 2], [1, 2, 3], [NULL]]

query I
SELECT list_sort([{'a': 1}, {'a': 5}, {'a': 3}])
----
[{'a': 1}, {'a': 3}, {'a': 5}]

# very large lists

statement ok
CREATE TABLE lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;

query T
with cte0 as (
  select g, list_reverse_sort(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i
----
0

# bug fixes test for #4591

query II
select k, array_sort(k,'DESC') from (values ([1,2,3,4])) as t(k);
----
[1, 2, 3, 4]	[4, 3, 2, 1]

query IIII
select k, v, map(k,v), map(k,v)[(array_sort(k,'DESC'))[1]] from (values ([1,2,3,4],[2,3,4,5])) as t(k,v);
----
[1, 2, 3, 4]	[2, 3, 4, 5]	{1=2, 2=3, 3=4, 4=5}	[5]

# bug fixes test for #7614

query II
select id, list(distinct foo order by foo) from (
  values (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by all
order by id;
----
1	[10, 15]
2	[10]

query II
select id, list(distinct foo order by foo) from (
  values (1, '10'), (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by id
order by id;
----
1	[10, 15]
2	[10]

query II
select id, list(foo order by foo) from (
  values (1, '10'), (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by id
order by id;
----
1	[10, 10, 15]
2	[10]

query II
select id, list(distinct foo order by foo) from (
  values (1, '10'), (1, '10'), (1, '15'), (2, '10')
) v (id, foo)
group by id
order by id;
----
1	[10, 15]
2	[10]

query II
select id, list(distinct foo order by bar) from (
  values (1, '10', 2), (1, '15', 1), (2, '10', 1)
) v (id, foo, bar)
group by all
order by id;
----
1	[15, 10]
2	[10]

# bug fixes test for #5694

require parquet

statement ok
CREATE TABLE stage AS SELECT * FROM 'data/parquet-testing/list_sort_segfault.parquet';

statement ok
CREATE TABLE health (a VARCHAR[]);

statement ok
INSERT INTO health SELECT list_sort(string_to_array(s, ',')) AS a FROM stage;

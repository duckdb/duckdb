# name: test/sql/function/list/aggregates/types.test
# description: Test the list_aggr function for all types
# group: [aggregates]

# This file specifically tests the functionality for each type, 
# it does not necessarily test the correctness (statement ok suffices for some tests)

require strinline

# BOOLEAN

# result False
foreach func_name bool_and bool_or first arbitrary last max median min mode string_agg group_concat

query I
SELECT list_aggr([False], '${func_name}')
----
false

query I
SELECT list_aggr([NULL::BOOLEAN], '${func_name}')
----
NULL

endloop

# any other result
foreach func_name approx_count_distinct count entropy array_agg list histogram

statement ok
SELECT list_aggr([False], '${func_name}')

statement ok
SELECT list_aggr([NULL::BOOLEAN], '${func_name}')

endloop

# statement error for BOOLEAN
foreach func_name avg favg bit_and bit_or bit_xor kurtosis mad product sem skewness sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

statement error
SELECT list_aggr([False], '${func_name}')

endloop

# VARCHAR

# result hello
foreach func_name first arbitrary last max median min mode string_agg group_concat

query I
SELECT list_aggr(['hello'], '${func_name}')
----
hello

query I
SELECT list_aggr([NULL::VARCHAR], '${func_name}')
----
NULL

endloop

# any other result
foreach func_name approx_count_distinct count entropy histogram array_agg list

statement ok
SELECT list_aggr(['hello'], '${func_name}')

statement ok
SELECT list_aggr([NULL::VARCHAR], '${func_name}')

endloop

# statement error for VARCHAR
foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or kurtosis mad product sem skewness sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

statement error
SELECT list_aggr(['hello'], '${func_name}')

endloop

# INTEGER types

foreach func_name avg favg bit_and bit_or bit_xor first arbitrary last max median min mode product string_agg group_concat sum fsum sumKahan kahan_sum

foreach type tinyint smallint integer bigint hugeint utinyint usmallint uinteger ubigint

query I
SELECT list_aggr([1::${type}], '${func_name}')
----
1

query I
SELECT list_aggr([NULL::${type}], '${func_name}')
----
NULL

endloop

endloop

# any other result
foreach func_name approx_count_distinct count entropy histogram kurtosis mad array_agg list sem skewness var_samp var_pop stddev stddev_pop variance stddev_samp

foreach type tinyint smallint integer bigint hugeint utinyint usmallint uinteger ubigint

statement ok
SELECT list_aggr([1::${type}], '${func_name}')

statement ok
SELECT list_aggr([NULL::${type}], '${func_name}')

endloop

endloop

# statement error for INTEGER types
foreach func_name bool_and bool_or

foreach type tinyint smallint integer bigint hugeint utinyint usmallint uinteger ubigint

statement error
SELECT list_aggr([1::${type}], '${func_name}')

endloop

endloop

# FLOAT, DOUBLE and DECIMAL types

foreach func_name avg favg first arbitrary last max median min mode product sum fsum sumKahan kahan_sum

foreach type float double decimal(4,1) decimal(9,4) decimal(18,6) decimal(38,10)

query I
SELECT list_aggr([1::${type}], '${func_name}')
----
1

query I
SELECT list_aggr([NULL::${type}], '${func_name}')
----
NULL

endloop

endloop

# any other result
foreach func_name approx_count_distinct count entropy histogram kurtosis mad array_agg list sem skewness string_agg group_concat var_samp var_pop stddev stddev_pop variance stddev_samp

foreach type float double decimal(4,1) decimal(9,4) decimal(18,6) decimal(38,10)

statement ok
SELECT list_aggr([1::${type}], '${func_name}')

statement ok
SELECT list_aggr([NULL::${type}], '${func_name}')

endloop

endloop

# statement error for FLOAT, DOUBLE and DECIMAL types
foreach func_name bit_and bit_or bit_xor bool_and bool_or

foreach type float double decimal(4,1) decimal(9,4) decimal(18,6) decimal(38,10)

statement error
SELECT list_aggr([1::${type}], '${func_name}')

endloop

endloop

# TEMPORAL types
# exceptions:
# mad (works with everything except interval)

# specific result
foreach func_name first arbitrary last max min mode string_agg group_concat

# date
query I
SELECT list_aggr(['2021-08-20'::DATE], '${func_name}')
----
2021-08-20

# time
query I
SELECT list_aggr(['14:59:37'::TIME], '${func_name}')
----
14:59:37

# timestamp
query I
SELECT list_aggr(['2021-08-20'::TIMESTAMP], '${func_name}')
----
2021-08-20 00:00:00

# timestamp s
query I
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], '${func_name}')
----
2021-08-20 00:00:00

# timestamp ms
query I
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], '${func_name}')
----
2021-08-20 00:00:00.123

# timestamp ns
query I
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], '${func_name}')
----
2021-08-20 00:00:00.123456

# time with time zone
query I
SELECT list_aggr(['14:59:37'::TIMETZ], '${func_name}')
----
14:59:37+00

# timestamp with time zone
query I
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], '${func_name}')
----
2021-08-20 00:00:00+00

# interval
query I
SELECT list_aggr([INTERVAL 1 YEAR], '${func_name}')
----
1 year

endloop

foreach func_name first arbitrary last max min mode string_agg group_concat

foreach type date time timestamp timestamp_s timestamp_ms timestamp_ns timetz timestamptz interval

query I
SELECT list_aggr([NULL::${type}], '${func_name}')
----
NULL

endloop

endloop

# any other result
foreach func_name approx_count_distinct count entropy median array_agg list histogram

foreach type date time timestamp timestamp_s timestamp_ms timestamp_ns timetz timestamptz

statement ok
SELECT list_aggr(['2021-08-20'::${type}], '${func_name}')

statement ok
SELECT list_aggr([NULL::${type}], '${func_name}')

endloop

statement ok
SELECT list_aggr([INTERVAL 1 YEAR], '${func_name}')

statement ok
SELECT list_aggr([NULL::INTERVAL], '${func_name}')

endloop

# statement error for TEMPORAL types
foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or kurtosis product sem skewness sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

foreach type date time timestamp timestamp_s timestamp_ms timestamp_ns timetz timestamptz

statement error
SELECT list_aggr(['2021-08-20'::${type}], '${func_name}')

endloop

statement error
SELECT list_aggr([INTERVAL 1 YEAR], '${func_name}')

endloop

# any other result
foreach func_name approx_count_distinct count entropy histogram array_agg list

endloop

# BLOB

# result {a: 1}
foreach func_name first arbitrary last max min

query I
SELECT list_aggr(['{a: 1}'::BLOB], '${func_name}')
----
{a: 1}

query I
SELECT list_aggr([NULL::BLOB], '${func_name}')
----
NULL

endloop

# any other result
foreach func_name count array_agg list

statement ok
SELECT list_aggr(['{a: 1}'::BLOB], '${func_name}')

statement ok
SELECT list_aggr([NULL::BLOB], '${func_name}')

endloop

# statement error for BLOB
foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or entropy histogram kurtosis mad median mode product sem skewness string_agg group_concat sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

statement error
SELECT list_aggr(['{a: 1}'::BLOB], '${func_name}')

endloop

# ENUMS

statement ok
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy')

statement ok
CREATE TABLE enums (e mood[])

statement ok
INSERT INTO enums VALUES (['happy'])

# result happy
foreach func_name first arbitrary last max median min mode string_agg group_concat

query I
SELECT list_aggr(e, '${func_name}') FROM enums
----
happy

endloop

# any other result
foreach func_name approx_count_distinct count entropy array_agg list histogram

statement ok
SELECT list_aggr(e, '${func_name}') FROM enums

endloop

# statement error for ENUMS

foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or kurtosis mad product sem skewness sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

statement error
SELECT list_aggr(e, '${func_name}') FROM enums

endloop

# NESTED types

# list, struct, result is [1] or {'a': 1}
foreach func_name first arbitrary last max median min mode string_agg group_concat

query I
SELECT list_aggr([[1]], '${func_name}')
----
[1]

query I
SELECT list_aggr([{'a': 1}], '${func_name}')
----
{'a': 1}

endloop

# list, struct, any other result
foreach func_name approx_count_distinct count entropy array_agg list

statement ok
SELECT list_aggr([[1]], '${func_name}')

statement ok
SELECT list_aggr([{'a': 1}], '${func_name}')

endloop

# statement error for NESTED types

# list, struct
foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or histogram kurtosis mad product sem skewness sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp

statement error
SELECT list_aggr([[1]], '${func_name}')

statement error
SELECT list_aggr([{'a': 1}], '${func_name}')

endloop
# name: test/sql/function/timestamp/test_icu_strptime.test
# description: Test sequence overflow
# group: [timestamp]

require icu

# Normalise the testing locale
statement ok
SET Calendar = 'gregorian';

statement ok
SET TimeZone = 'America/Los_Angeles';

statement ok
PRAGMA enable_verification

# Parse TZ
query I
select strptime('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z');
----
2022-03-05 15:59:17.877-08

# NULLs
query I
select strptime('2022-03-05 17:59:17.877 CST', NULL);
----
NULL

query I
select strptime(NULL, '%Y-%m-%d %H:%M:%S.%g %Z');
----
NULL

# Parse microseconds
query I
select strptime('2022-03-05 17:59:17.123456 CST', '%Y-%m-%d %H:%M:%S.%f %Z');
----
2022-03-05 15:59:17.123456-08

# Parse nanoseconds
query I
select strptime('2022-03-05 17:59:17.123456789 CST', '%Y-%m-%d %H:%M:%S.%n %Z');
----
2022-03-05 15:59:17.123457-08

# Parse specials

foreach func strptime try_strptime

query I
select ${func}('infinity', '%Y-%m-%d %H:%M:%S.%g %Z');
----
infinity

query I
select ${func}('-infinity', '%Y-%m-%d %H:%M:%S.%g %Z');
----
-infinity

query I
select ${func}('epoch', '%Y-%m-%d %H:%M:%S.%g %Z');
----
1969-12-31 16:00:00-08

endloop

#
# Parsing pre-Gregorian timestamps
#

# Winter
query I
select '1582-01-01 10:33:41+01'::timestamptz
----
1582-01-01 01:40:43-07:52

# Summer (no DST)
query I
select '1582-06-01 10:40:43+01'::timestamptz
----
1582-06-01 01:47:45-07:52

# BC
query I
select '0044-03-13 (BC) 10:33:41+01'::timestamptz
----
0044-03-13 (BC) 01:40:43-07:52

query I
SELECT '1582-10-10'::TIMESTAMPTZ AS ts;
----
1582-10-10 00:00:00-07:52

#
# Same date, multiple TZ names
#

# We can't use the offsets in pg_timezone_names() 
# because they change with the date
# So hard code the original values
# The important point is that these cover all the GMT offsets.
statement ok
CREATE TABLE zones AS (
	FROM (VALUES
		('Etc/GMT-14'),
		('NZ-CHAT'),
		('Pacific/Auckland'),
		('Pacific/Enderbury'),
		('Australia/LHI'),
		('Australia/Melbourne'),
		('Pacific/Efate'),
		('Australia/Darwin'),
		('Asia/Tokyo'),
		('Australia/Eucla'),
		('Asia/Shanghai'),
		('Asia/Novosibirsk'),
		('Asia/Yangon'),
		('Asia/Omsk'),
		('Asia/Kathmandu'),
		('Asia/Colombo'),
		('Asia/Oral'),
		('Asia/Kabul'),
		('Europe/Astrakhan'),
		('Asia/Tehran'),
		('Asia/Kuwait'),
		('Asia/Nicosia'),
		('Europe/Budapest'),
		('Etc/GMT-0'),
		('Atlantic/Azores'),
		('America/Cayenne'),
		('America/Nuuk'),
		('CNT'),
		('America/Martinique'),
		('America/Louisville'),
		('America/Rainy_River'),
		('America/Shiprock'),
		('Mexico/BajaNorte'),
		('America/Sitka'),
		('Pacific/Marquesas'),
		('Pacific/Johnston'),
		('Pacific/Niue'),
		('Etc/GMT+12'),
	) tbl(tz_name)
);

statement ok
CREATE TABLE abbrevs AS (
	FROM (VALUES
		('Etc/GMT-14'),
		('NZ-CHAT'),
		('NZ'),
		('Pacific/Enderbury'),
		('Australia/Hobart'),
		('Australia/LHI'),
		('Pacific/Efate'),
		('Australia/Adelaide'),
		('Etc/GMT-9'),
		('Australia/Eucla'),
		('CTT'),
		('Asia/Phnom_Penh'),
		('Asia/Yangon'),
		('Asia/Thimbu'),
		('Asia/Kathmandu'),
		('IST'),
		('Asia/Qyzylorda'),
		('Asia/Kabul'),
		('Europe/Samara'),
		('Iran'),
		('EAT'),
		('CAT'),
		('Europe/Bratislava'),
		('GMT'),
		('Atlantic/Azores'),
		('America/Cayenne'),
		('America/Nuuk'),
		('CNT'),
		('PRT'),
		('America/Panama'),
		('America/Rankin_Inlet'),
		('Canada/Yukon'),
		('PST'),
		('America/Nome'),
		('Pacific/Marquesas'),
		('Pacific/Johnston'),
		('Pacific/Niue'),
		('Etc/GMT+12'),
	) tbl(tz_name)
);

statement ok
CREATE TABLE offsets AS 
	FROM (VALUES
		('+14'),
		('+13'),
		('+12:45'),
		('+12'),
		('+11'),
		('+10:30'),
		('+10'),
		('+09:30'),
		('+09'),
		('+08:45'),
		('+08'),
		('+07'),
		('+06:30'),
		('+06'),
		('+05:45'),
		('+05:30'),
		('+05'),
		('+04:30'),
		('+04'),
		('+03:30'),
		('+03'),
		('+02'),
		('+01'),
		('+00'),
		('-01'),
		('-02'),
		('-03'),
		('-03:30'),
		('-04'),
		('-05'),
		('-06'),
		('-07'),
		('-08'),
		('-09'),
		('-09:30'),
		('-10'),
		('-11'),
		('-12'),
	) tbl(utc_offset)
;

foreach func strptime try_strptime

# Full zone names
query II
SELECT ${func}('2022-03-05 17:59:17.877 ' || tz_name, '%Y-%m-%d %H:%M:%S.%g %Z') tstz, tz_name
FROM zones
ORDER BY ALL
----
2022-03-04 19:59:17.877-08	Etc/GMT-14
2022-03-04 20:14:17.877-08	NZ-CHAT
2022-03-04 20:59:17.877-08	Pacific/Auckland
2022-03-04 20:59:17.877-08	Pacific/Enderbury
2022-03-04 22:59:17.877-08	Australia/LHI
2022-03-04 22:59:17.877-08	Australia/Melbourne
2022-03-04 22:59:17.877-08	Pacific/Efate
2022-03-05 00:29:17.877-08	Australia/Darwin
2022-03-05 00:59:17.877-08	Asia/Tokyo
2022-03-05 01:14:17.877-08	Australia/Eucla
2022-03-05 01:59:17.877-08	Asia/Shanghai
2022-03-05 02:59:17.877-08	Asia/Novosibirsk
2022-03-05 03:29:17.877-08	Asia/Yangon
2022-03-05 03:59:17.877-08	Asia/Omsk
2022-03-05 04:14:17.877-08	Asia/Kathmandu
2022-03-05 04:29:17.877-08	Asia/Colombo
2022-03-05 04:59:17.877-08	Asia/Oral
2022-03-05 05:29:17.877-08	Asia/Kabul
2022-03-05 05:59:17.877-08	Europe/Astrakhan
2022-03-05 06:29:17.877-08	Asia/Tehran
2022-03-05 06:59:17.877-08	Asia/Kuwait
2022-03-05 07:59:17.877-08	Asia/Nicosia
2022-03-05 08:59:17.877-08	Europe/Budapest
2022-03-05 09:59:17.877-08	Etc/GMT-0
2022-03-05 10:59:17.877-08	Atlantic/Azores
2022-03-05 12:59:17.877-08	America/Cayenne
2022-03-05 12:59:17.877-08	America/Nuuk
2022-03-05 13:29:17.877-08	CNT
2022-03-05 13:59:17.877-08	America/Martinique
2022-03-05 14:59:17.877-08	America/Louisville
2022-03-05 15:59:17.877-08	America/Rainy_River
2022-03-05 16:59:17.877-08	America/Shiprock
2022-03-05 17:59:17.877-08	Mexico/BajaNorte
2022-03-05 18:59:17.877-08	America/Sitka
2022-03-05 19:29:17.877-08	Pacific/Marquesas
2022-03-05 19:59:17.877-08	Pacific/Johnston
2022-03-05 20:59:17.877-08	Pacific/Niue
2022-03-05 21:59:17.877-08	Etc/GMT+12

# Abbreviations
query II
SELECT ${func}('2022-03-05 17:59:17.877 ' || tz_name, '%Y-%m-%d %H:%M:%S.%g %Z') tstz, tz_name
FROM abbrevs
ORDER BY ALL
----
2022-03-04 19:59:17.877-08	Etc/GMT-14
2022-03-04 20:14:17.877-08	NZ-CHAT
2022-03-04 20:59:17.877-08	NZ
2022-03-04 20:59:17.877-08	Pacific/Enderbury
2022-03-04 22:59:17.877-08	Australia/Hobart
2022-03-04 22:59:17.877-08	Australia/LHI
2022-03-04 22:59:17.877-08	Pacific/Efate
2022-03-04 23:29:17.877-08	Australia/Adelaide
2022-03-05 00:59:17.877-08	Etc/GMT-9
2022-03-05 01:14:17.877-08	Australia/Eucla
2022-03-05 01:59:17.877-08	CTT
2022-03-05 02:59:17.877-08	Asia/Phnom_Penh
2022-03-05 03:29:17.877-08	Asia/Yangon
2022-03-05 03:59:17.877-08	Asia/Thimbu
2022-03-05 04:14:17.877-08	Asia/Kathmandu
2022-03-05 04:29:17.877-08	IST
2022-03-05 04:59:17.877-08	Asia/Qyzylorda
2022-03-05 05:29:17.877-08	Asia/Kabul
2022-03-05 05:59:17.877-08	Europe/Samara
2022-03-05 06:29:17.877-08	Iran
2022-03-05 06:59:17.877-08	EAT
2022-03-05 07:59:17.877-08	CAT
2022-03-05 08:59:17.877-08	Europe/Bratislava
2022-03-05 09:59:17.877-08	GMT
2022-03-05 10:59:17.877-08	Atlantic/Azores
2022-03-05 12:59:17.877-08	America/Cayenne
2022-03-05 12:59:17.877-08	America/Nuuk
2022-03-05 13:29:17.877-08	CNT
2022-03-05 13:59:17.877-08	PRT
2022-03-05 14:59:17.877-08	America/Panama
2022-03-05 15:59:17.877-08	America/Rankin_Inlet
2022-03-05 16:59:17.877-08	Canada/Yukon
2022-03-05 17:59:17.877-08	PST
2022-03-05 18:59:17.877-08	America/Nome
2022-03-05 19:29:17.877-08	Pacific/Marquesas
2022-03-05 19:59:17.877-08	Pacific/Johnston
2022-03-05 20:59:17.877-08	Pacific/Niue
2022-03-05 21:59:17.877-08	Etc/GMT+12

#
# UTC Offsets
#

# These should be TSTZs because there is an offset specified.
query II
SELECT ${func}('2022-03-05 17:59:17.877 ' || utc_offset, '%Y-%m-%d %H:%M:%S.%g %z') tstz, utc_offset
FROM offsets
ORDER BY tstz
----
2022-03-04 19:59:17.877-08	+14
2022-03-04 20:59:17.877-08	+13
2022-03-04 21:14:17.877-08	+12:45
2022-03-04 21:59:17.877-08	+12
2022-03-04 22:59:17.877-08	+11
2022-03-04 23:29:17.877-08	+10:30
2022-03-04 23:59:17.877-08	+10
2022-03-05 00:29:17.877-08	+09:30
2022-03-05 00:59:17.877-08	+09
2022-03-05 01:14:17.877-08	+08:45
2022-03-05 01:59:17.877-08	+08
2022-03-05 02:59:17.877-08	+07
2022-03-05 03:29:17.877-08	+06:30
2022-03-05 03:59:17.877-08	+06
2022-03-05 04:14:17.877-08	+05:45
2022-03-05 04:29:17.877-08	+05:30
2022-03-05 04:59:17.877-08	+05
2022-03-05 05:29:17.877-08	+04:30
2022-03-05 05:59:17.877-08	+04
2022-03-05 06:29:17.877-08	+03:30
2022-03-05 06:59:17.877-08	+03
2022-03-05 07:59:17.877-08	+02
2022-03-05 08:59:17.877-08	+01
2022-03-05 09:59:17.877-08	+00
2022-03-05 10:59:17.877-08	-01
2022-03-05 11:59:17.877-08	-02
2022-03-05 12:59:17.877-08	-03
2022-03-05 13:29:17.877-08	-03:30
2022-03-05 13:59:17.877-08	-04
2022-03-05 14:59:17.877-08	-05
2022-03-05 15:59:17.877-08	-06
2022-03-05 16:59:17.877-08	-07
2022-03-05 17:59:17.877-08	-08
2022-03-05 18:59:17.877-08	-09
2022-03-05 19:29:17.877-08	-09:30
2022-03-05 19:59:17.877-08	-10
2022-03-05 20:59:17.877-08	-11
2022-03-05 21:59:17.877-08	-12

#
# Multiple formats
#

# First fails
query II
SELECT ${func}('2022-03-05 17:59:17.877 ' || tz_name, ['%m/%d/%Y  %H:%M:%S.%g %Z', '%Y-%m-%d %H:%M:%S.%g %Z']) tstz, tz_name
FROM zones
ORDER BY ALL
----
2022-03-04 19:59:17.877-08	Etc/GMT-14
2022-03-04 20:14:17.877-08	NZ-CHAT
2022-03-04 20:59:17.877-08	Pacific/Auckland
2022-03-04 20:59:17.877-08	Pacific/Enderbury
2022-03-04 22:59:17.877-08	Australia/LHI
2022-03-04 22:59:17.877-08	Australia/Melbourne
2022-03-04 22:59:17.877-08	Pacific/Efate
2022-03-05 00:29:17.877-08	Australia/Darwin
2022-03-05 00:59:17.877-08	Asia/Tokyo
2022-03-05 01:14:17.877-08	Australia/Eucla
2022-03-05 01:59:17.877-08	Asia/Shanghai
2022-03-05 02:59:17.877-08	Asia/Novosibirsk
2022-03-05 03:29:17.877-08	Asia/Yangon
2022-03-05 03:59:17.877-08	Asia/Omsk
2022-03-05 04:14:17.877-08	Asia/Kathmandu
2022-03-05 04:29:17.877-08	Asia/Colombo
2022-03-05 04:59:17.877-08	Asia/Oral
2022-03-05 05:29:17.877-08	Asia/Kabul
2022-03-05 05:59:17.877-08	Europe/Astrakhan
2022-03-05 06:29:17.877-08	Asia/Tehran
2022-03-05 06:59:17.877-08	Asia/Kuwait
2022-03-05 07:59:17.877-08	Asia/Nicosia
2022-03-05 08:59:17.877-08	Europe/Budapest
2022-03-05 09:59:17.877-08	Etc/GMT-0
2022-03-05 10:59:17.877-08	Atlantic/Azores
2022-03-05 12:59:17.877-08	America/Cayenne
2022-03-05 12:59:17.877-08	America/Nuuk
2022-03-05 13:29:17.877-08	CNT
2022-03-05 13:59:17.877-08	America/Martinique
2022-03-05 14:59:17.877-08	America/Louisville
2022-03-05 15:59:17.877-08	America/Rainy_River
2022-03-05 16:59:17.877-08	America/Shiprock
2022-03-05 17:59:17.877-08	Mexico/BajaNorte
2022-03-05 18:59:17.877-08	America/Sitka
2022-03-05 19:29:17.877-08	Pacific/Marquesas
2022-03-05 19:59:17.877-08	Pacific/Johnston
2022-03-05 20:59:17.877-08	Pacific/Niue
2022-03-05 21:59:17.877-08	Etc/GMT+12

endloop

#
# Try
#

query II
SELECT try_strptime('2022-03-05 17:59:17.877 ' || tz_name, '%m/%d/%Y  %H:%M:%S.%g %Z') tstz, tz_name
FROM zones
WHERE tstz IS NOT NULL
ORDER BY ALL
----

#
# Errors/Coverage
#

# Multiple formats are not allowed
statement ok
CREATE TABLE multiples (s VARCHAR, f VARCHAR);

statement ok
INSERT INTO multiples VALUES
	('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g %Z'),
	('2022-03-05 17:59:17.877', '%Y-%m-%d %H:%M:%S.%g'),
;

statement error
SELECT strptime(s, f) FROM multiples;

# Invalid format
statement error
select strptime('2022-03-05 17:59:17.877 CST', '%C');

# Parse error
statement error
select strptime('2022-03-05 17:59:17.877 CST', '%Y-%m-%d %H:%M:%S.%g');

#
# Cast VARCHAR => TIMESTAMPTZ
#
statement error
select 'fnord'::timestamptz;

query I
select TRY_CAST('fnord' AS timestamptz);
----
NULL

query I
select '2022-03-05 17:59:17.123456 CST'::timestamptz;
----
2022-03-05 15:59:17.123456-08

query I
select 'infinity'::timestamptz;
----
infinity

query I
select '-infinity'::timestamptz;
----
-infinity

query I
select 'epoch'::timestamptz;
----
1969-12-31 16:00:00-08


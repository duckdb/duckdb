# name: test/sql/secrets/create_secret_s3_serialization.test
# description: Test serialization of the S3/GCS/r2 secrets
# group: [secrets]

require httpfs

require parquet

load __TEST_DIR__/test_serialize_secrets.db

statement ok
PRAGMA enable_verification;

statement ok
set secret_directory='__TEST_DIR__/create_secret_s3_serialization'

statement ok
CREATE OR REPLACE PERSISTENT SECRET s1 (
    TYPE S3,
    PROVIDER config,
    SCOPE 's3://my_s3_scope',
    KEY_ID 'mekey',
    SECRET 'mesecret',
    REGION 'meregion',
    SESSION_TOKEN 'mesesh',
    ENDPOINT 'meendpoint',
    URL_STYLE 'mahstyle',
    USE_SSL true,
    URL_COMPATIBILITY_MODE true
)

statement ok
CREATE OR REPLACE PERSISTENT SECRET s2 (
    TYPE R2,
    PROVIDER config,
    SCOPE 's3://my_r2_scope',
    ACCOUNT_ID 'some_bogus_account',
    KEY_ID 'mekey',
    SECRET 'mesecret',
    SESSION_TOKEN 'mesesh',
    URL_STYLE 'mahstyle',
    USE_SSL 1,
    URL_COMPATIBILITY_MODE 1
)

statement ok
CREATE OR REPLACE PERSISTENT SECRET s3 (
    TYPE GCS,
    PROVIDER config,
    SCOPE 's3://my_gcs_scope',
    KEY_ID 'mekey',
    SECRET 'mesecret',
    SESSION_TOKEN 'mesesh',
    URL_STYLE 'mahstyle',
    USE_SSL true,
    URL_COMPATIBILITY_MODE true
)

query IIII
select name, type, provider, scope FROM duckdb_secrets() order by name;
----
s1	s3	config	[s3://my_s3_scope]
s2	r2	config	[s3://my_r2_scope]
s3	gcs	config	[s3://my_gcs_scope]

# Note: this query prints the tokens as an unredacted string
query I nosort secret_to_string
select secret_map from duckdb_secrets(redact=false) order by type;
----

restart

# Now setting the secret dir somehwere nonexistent will yield no persistent secrets
statement ok
set secret_directory='__TEST_DIR__/does_not_exist'

query I
select count(*) FROM duckdb_secrets(redact=false);
----
0

restart

# However setting it to the dir that does, we can suddenly see our persisted secrets
statement ok
set secret_directory='__TEST_DIR__/create_secret_s3_serialization'

# After restart secrets are still there
query IIII
select name, type, provider, scope FROM duckdb_secrets() order by name;
----
s1	s3	config	[s3://my_s3_scope]
s2	r2	config	[s3://my_r2_scope]
s3	gcs	config	[s3://my_gcs_scope]

# Note: this query prints the tokens as an unredacted string
query I nosort secret_to_string
select secret_map from duckdb_secrets(redact=false) order by type;
----

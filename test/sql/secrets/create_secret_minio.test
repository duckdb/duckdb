# name: test/sql/secrets/create_secret_minio.test
# description: Test s3 secrets actually work using minio
# group: [secrets]

require parquet

require httpfs

require-env S3_TEST_SERVER_AVAILABLE 1

# Require that these environment variables are also set

require-env AWS_DEFAULT_REGION

require-env AWS_ACCESS_KEY_ID

require-env AWS_SECRET_ACCESS_KEY

require-env DUCKDB_S3_ENDPOINT

require-env DUCKDB_S3_USE_SSL

set ignore_error_messages

load __TEST_DIR__/persistent_secrets.db

statement ok
PRAGMA enable_verification;

statement ok
set secret_directory='__TEST_DIR__/create_secret_minio'

# first need to unset the duckdb settings: currently the env variables are loaded automatically making all queries auth
statement ok
set s3_access_key_id='';

statement ok
set s3_secret_access_key='';

statement error
copy (select 1 as a) to 's3://test- /test-file.parquet'
----

# Now we create a scoped secret with correct credentials
statement ok
CREATE PERSISTENT SECRET (
    TYPE S3,
    PROVIDER config,
    SCOPE 's3://test-bucket/only-this-file-gets-auth.parquet',
    KEY_ID '${AWS_ACCESS_KEY_ID}',
    SECRET '${AWS_SECRET_ACCESS_KEY}',
    REGION '${AWS_DEFAULT_REGION}',
    ENDPOINT '${DUCKDB_S3_ENDPOINT}',
    USE_SSL '${DUCKDB_S3_USE_SSL}'
)

# scope doesn't match! query still fails
statement error
copy (select 1 as a) to 's3://test-bucket/test-file.parquet'
----

# scope matches, the secret is chosen and the query will succeed
statement ok
copy (select 1 as a) to 's3://test-bucket/only-this-file-gets-auth.parquet'

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_minio'

# persistent secrets survive restart
statement ok
copy (select 1 as a) to 's3://test-bucket/only-this-file-gets-auth.parquet'

# Its still scoped
statement error
copy (select 1 as a) to 's3://test-bucket/no-auth-here.parquet'
----
# name: test/sql/secrets/create_secret_s3_duckdb_settings.test_slow
# description: Test the duckdb_settings credential provider for the s3/r2/gcs type credentials
# group: [secrets]

require httpfs

require parquet

statement ok
PRAGMA enable_verification;

### NOTE: this is for testing purposes, this feature will be removed and replaced by a proper credential provider
#         that uses the AWS SDK.

statement ok
set secret_directory='__TEST_DIR__'

# Set some credentials for main_secret
statement ok
set s3_endpoint='global-invalid-domain'

# This secret is now created based on the current duckdb settings
statement ok
CREATE SECRET main_secret (
    TYPE S3,
    PROVIDER duckdb_settings
)

# Set credentials for scoped_secret_1
statement ok
set s3_endpoint='bucket1-invalid-domain'

statement ok
CREATE SECRET scoped_secret_1 (
    TYPE S3,
    PROVIDER duckdb_settings,
    SCOPE 's3://bucket1'
)

# Set credentials for other bucket
statement ok
set s3_endpoint='bucket2-invalid-domain'

statement ok
CREATE SECRET scoped_secret_2 (
    TYPE S3,
    PROVIDER duckdb_settings,
    SCOPE 's3://bucket2'
)

# Set credentials for some specific file in bucket2
statement ok
set s3_endpoint='bucket2-path-invalid-domain'

statement ok
CREATE SECRET scoped_secret_3 (
    TYPE S3,
    PROVIDER duckdb_settings,
    SCOPE 's3://bucket2/this/path/takes/other/creds/'
)

# Finally, set the global credentials to something else: these should not be used as long one of the secret scopes matches
statement ok
set s3_endpoint='settings-invalid-domain'

### Testing our scope is properly matched to the urls

statement error
from "s3://bucket1/test.parquet"
----
bucket1-invalid-domain

statement error
from "s3://bucket2/test.parquet"
----
bucket2-invalid-domain

statement error
from "s3://bucket2/this/path/takes/other/creds/test.parquet"
----
bucket2-path-invalid-domain

statement error
from "s3://bucket3/test.parquet"
----
global-invalid-domain

query III
select name, type, scope from duckdb_secrets() order by name;
----
main_secret	s3	[s3://, s3n://, s3a://]
scoped_secret_1	s3	[s3://bucket1]
scoped_secret_2	s3	[s3://bucket2]
scoped_secret_3	s3	[s3://bucket2/this/path/takes/other/creds/]

# Check the endpoints are actually set
# secrets of type x
query I
select secret_map['endpoint']
from duckdb_secrets() order by name;
----
[global-invalid-domain]
[bucket1-invalid-domain]
[bucket2-invalid-domain]
[bucket2-path-invalid-domain]

# Note: the settings from the provider can still be overridden
statement ok
set s3_endpoint='duckdb.settings.endpoint.to.be.overridden.bogusdomain.com'

statement ok
set s3_region='eu-west-1'

statement ok
CREATE SECRET overridden_region_secret (
    TYPE S3,
    PROVIDER duckdb_settings,
    SCOPE 's3://bucket4/',
    REGION 'overridden-region'
)

query I
select secret_map['region']
from duckdb_secrets() where name='overridden_region_secret';
----
[overridden-region]

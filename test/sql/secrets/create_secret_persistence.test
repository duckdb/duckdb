# name: test/sql/secrets/create_secret_persistence.test
# description: Test secret persistence
# group: [secrets]

statement ok
PRAGMA enable_verification;

load __TEST_DIR__/persistent_secrets.db

require httpfs

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Create some s3 secret, the normally the default is TEMPORARY
statement ok
CREATE SECRET my_tmp_secret (
	TYPE S3,
    SCOPE 's3://bucket1'
)

# Explicitly stating
statement ok
CREATE TEMPORARY SECRET my_tmp_secret_2 (
	TYPE S3,
    SCOPE 's3://bucket2'
)

statement ok
CREATE OR REPLACE PERSISTENT SECRET my_tmp_secret_3 (
	TYPE S3,
    SCOPE 's3://bucket3'
)

query III
SELECT name, storage, scope FROM duckdb_secrets() where storage='memory' order by name;
----
my_tmp_secret	memory	['s3://bucket1']
my_tmp_secret_2	memory	['s3://bucket2']

query II
SELECT name, scope FROM duckdb_secrets() where storage != 'memory';
----
my_tmp_secret_3	['s3://bucket3']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Persistent secrets are restored automatically
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_3	['s3://bucket3']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Trying to create same name TMP secret fails
statement error
CREATE PERSISTENT SECRET my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)
----
Invalid Input Error: Persistent secret with name 'my_tmp_secret_3' already exists in secret storage 'local_file'!

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Trying to create same name PERSISTENT secret fails
statement error
CREATE PERSISTENT SECRET my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)
----
Invalid Input Error: Persistent secret with name 'my_tmp_secret_3' already exists in secret storage 'local_file'!

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Note: this will be a temporary secret: there are now 2 secrets with the same name
statement ok
CREATE SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Secret is unmodified
query III
SELECT name, storage, scope FROM duckdb_secrets() where name='my_tmp_secret_3' order by storage;
----
my_tmp_secret_3	local_file	['s3://bucket3']
my_tmp_secret_3	memory	['s3://bucket3_not_used']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Ignoring already existing persistent secret is fine
statement ok
CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Running second time, code path slightly different as the secret is lazy loaded in previous step
statement ok
CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_3 (
    TYPE S3,
    SCOPE 's3://bucket3_not_used'
)

# Secret is unmodified
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_3	['s3://bucket3']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Secret is still unmodified after restart
query II
SELECT name, scope FROM duckdb_secrets() ;
----
my_tmp_secret_3	['s3://bucket3']

# Now we do actually update the persistent secret
statement ok
CREATE OR REPLACE PERSISTENT SECRET my_tmp_secret_3 (
	TYPE S3,
    SCOPE 's3://bucket3_updated'
)

# Its updated!
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_3	['s3://bucket3_updated']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Survives restart!
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_3	['s3://bucket3_updated']

# Now we add another secret, to reliably test deletion of the other one
statement ok
CREATE PERSISTENT SECRET IF NOT EXISTS my_tmp_secret_4 (
    TYPE S3,
    SCOPE 's3://another_secret'
)

query II
SELECT name, scope FROM duckdb_secrets() order by name;
----
my_tmp_secret_3	['s3://bucket3_updated']
my_tmp_secret_4	['s3://another_secret']

statement ok
DROP SECRET my_tmp_secret_3;

# my_tmp_secret_3 is deleted
query II
SELECT name, scope FROM duckdb_secrets();
----
my_tmp_secret_4	['s3://another_secret']

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_persistence'

# Secret is actually deleted
query III
SELECT name, storage, scope FROM duckdb_secrets() order by name;
----
my_tmp_secret_4	local_file	['s3://another_secret']

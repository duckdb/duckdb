# name: test/sql/secrets/create_secret_defaults.test
# description: Test default values during secret creation
# group: [secrets]

statement ok
PRAGMA enable_verification;

require httpfs

# Ensure any currently stored secrets don't interfere with the test
statement ok
set allow_persistent_secrets=false;

statement ok
DROP SECRET IF EXISTS s1;

# Without name we use the __default_<type> name. The default config for for the S3 type is config
statement ok
CREATE SECRET (
    TYPE S3,
    KEY_ID 'my_key',
    SECRET 'my_secret'
)

query IIII
SELECT name, provider, type, scope FROM duckdb_secrets();
----
__default_s3	config	s3	['s3://', 's3n://', 's3a://']

# Without name we use the __default_<type> name. The default config for for the R2 type is config
statement ok
CREATE SECRET (
    TYPE R2,
    KEY_ID 'my_key',
    SECRET 'my_secret',
    ACCOUNT_ID 'my_account_id'
)

query IIII
SELECT name, provider, type, scope FROM duckdb_secrets() ORDER BY name;
----
__default_r2	config	r2	['r2://']
__default_s3	config	s3	['s3://', 's3n://', 's3a://']


# Without name we use the __default_<type> name. The default config for for the R2 type is config
statement ok
CREATE SECRET (
    TYPE GCS,
    KEY_ID 'my_key',
    SECRET 'my_secret'
)

# duckdb_secrets with all defaults looks like this now
query IIIIII
SELECT name, persistent, storage, provider, type, scope FROM duckdb_secrets() ORDER BY name;
----
__default_gcs	0	memory	config	gcs	['gcs://', 'gs://']
__default_r2	0	memory	config	r2	['r2://']
__default_s3	0	memory	config	s3	['s3://', 's3n://', 's3a://']
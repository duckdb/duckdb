# name: test/sql/substrait/test_substrait_schema_json.test
# description: Test scalar functions with substrait
# group: [substrait]

require substrait

statement ok
PRAGMA enable_verification

# Test Nullability
statement ok
CREATE TABLE type (a integer not null)

query I
CALL get_substrait_json('select * from type;')
----
{"relations":[{"root":{"input":{"project":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["a"],"struct":{"types":[{"i32":{"nullability":"NULLABILITY_REQUIRED"}}],"nullability":"NULLABILITY_REQUIRED"}},"namedTable":{"names":["type"]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["a"]}}]}

statement ok
drop table type

statement ok
CREATE TABLE type (a integer)

query I
CALL get_substrait_json('select * from type;')
----
{"relations":[{"root":{"input":{"project":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["a"],"struct":{"types":[{"i32":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"namedTable":{"names":["type"]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"names":["a"]}}]}

statement ok
drop table type

statement ok
CREATE TABLE type (a integer, b varchar, c decimal (3,2))

# Multiple columns

query I
CALL get_substrait_json('select * from type;')
----
{"relations":[{"root":{"input":{"project":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["a","b","c"],"struct":{"types":[{"i32":{"nullability":"NULLABILITY_NULLABLE"}},{"varchar":{"nullability":"NULLABILITY_NULLABLE"}},{"decimal":{"scale":2,"precision":3,"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"namedTable":{"names":["type"]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":1}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":2}},"rootReference":{}}}]}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":1}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":2}},"rootReference":{}}}]}},"names":["a","b","c"]}}]}

statement ok
insert into type values (0, 'abc',0)

# Varchar with length due to statistics

query I
CALL get_substrait_json('select * from type;')
----
{"relations":[{"root":{"input":{"project":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["a","b","c"],"struct":{"types":[{"i32":{"nullability":"NULLABILITY_NULLABLE"}},{"varchar":{"length":3,"nullability":"NULLABILITY_NULLABLE"}},{"decimal":{"scale":2,"precision":3,"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"namedTable":{"names":["type"]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":1}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":2}},"rootReference":{}}}]}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":1}},"rootReference":{}}},{"selection":{"directReference":{"structField":{"field":2}},"rootReference":{}}}]}},"names":["a","b","c"]}}]}

statement ok
CREATE TABLE integers (i integer)

query I
CALL get_substrait_json('select * from integers limit 5')
----
{"relations":[{"root":{"input":{"fetch":{"input":{"project":{"input":{"project":{"input":{"read":{"baseSchema":{"names":["i"],"struct":{"types":[{"i32":{"nullability":"NULLABILITY_NULLABLE"}}],"nullability":"NULLABILITY_REQUIRED"}},"namedTable":{"names":["integers"]}}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"expressions":[{"selection":{"directReference":{"structField":{}},"rootReference":{}}}]}},"count":"5"}},"names":["i"]}}]}

# name: test/sql/pragma/test_custom_profiling_settings.test
# description: Test PRAGMA custom_profiling_settings
# group: [pragma]

require json

statement ok
PRAGMA enable_verification;

# Check that the default settings are as expected
statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
select unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) as names order by random();

statement ok
PRAGMA disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

statement ok
SELECT cpu_time, extra_info, operator_cardinality, operator_timing FROM metrics_output;

query I
SELECT unnest(res) from (
	select current_setting('custom_profiling_settings') as raw_setting,
	raw_setting.trim('{}') as setting,
	string_split(setting, ', ') as res
) ORDER BY ALL
----
"BLOCKED_THREAD_TIME": "true"
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"
"OPERATOR_CARDINALITY": "true"
"OPERATOR_ROWS_SCANNED": "true"
"OPERATOR_TIMING": "true"
"OPERATOR_TYPE": "true"
"QUERY_NAME": "true"
"RESULT_SET_SIZE": "true"

# Turn off all settings
statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
PRAGMA custom_profiling_settings='{}'

statement ok
select unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) as names order by random();

query I
SELECT unnest(res) from (
	select current_setting('custom_profiling_settings') as raw_setting,
	raw_setting.trim('{}') as setting,
	string_split(setting, ', ') as res
) ORDER BY ALL
----
(empty)

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

statement error
SELECT cpu_time FROM metrics_output;
----
Referenced column "cpu_time" not found in FROM clause!

statement error
SELECT extra_info FROM metrics_output;
----
Referenced column "extra_info" not found in FROM clause!

statement error
SELECT operator_cardinality FROM metrics_output;
----
Referenced column "operator_cardinality" not found in FROM clause!

statement error
SELECT operator_timing FROM metrics_output;
----
Referenced column "operator_timing" not found in FROM clause!

statement error
SELECT cumulative_cardinality FROM metrics_output;
----
Referenced column "cumulative_cardinality" not found in FROM clause!


# change the cpu time to false and the rest to true and re-run the query
statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
PRAGMA custom_profiling_settings='{"CPU_TIME": "false", "EXTRA_INFO": "true", "OPERATOR_CARDINALITY": "true", "OPERATOR_TIMING": "true"}'

query I rowsort
SELECT unnest(res) from (
	select current_setting('custom_profiling_settings') as raw_setting,
	raw_setting.trim('{}') as setting,
	string_split(setting, ', ') as res
)
----
"EXTRA_INFO": "true"
"OPERATOR_CARDINALITY": "true"
"OPERATOR_TIMING": "true"

statement ok
select unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) as names order by random();

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

statement error
select cpu_time from metrics_output;
----
Referenced column "cpu_time" not found in FROM clause!

statement ok
SELECT extra_info, operator_cardinality, operator_timing FROM metrics_output;

# Remove time and operator cardinality from the settings file but add back the cpu time and cumulative cardinality
statement ok
PRAGMA custom_profiling_settings='{"CPU_TIME": "true", "EXTRA_INFO": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}'

query I
SELECT unnest(res) from (
	select current_setting('custom_profiling_settings') as raw_setting,
	raw_setting.trim('{}') as setting,
	string_split(setting, ', ') as res
) ORDER BY ALL
----
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
select unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) as names order by random();

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

# Even though operator timing is set to false, it still should have been collected so that CPU timing can be calculated
query I
SELECT 
CASE 
    WHEN cpu_time > 0 THEN 'true'
    ELSE 'false'
END
FROM metrics_output;
----
true

# Even though operator cardinality is set to false, it still should have been collected so that cumulative cardinality can be calculated
query I
SELECT
CASE
	WHEN cumulative_cardinality > 0 THEN 'true'
	ELSE 'false'
END
FROM metrics_output;
----
true

# Since the query is not a table query, rows scanned should not be collected
query I
SELECT
CASE
	WHEN cumulative_rows_scanned > 0 THEN 'true'
	ELSE 'false'
END
FROM metrics_output;
----
false

# Check that rows scanned is collected on a table query
statement ok
PRAGMA custom_profiling_settings='{"OPERATOR_CARDINALITY": "true", "OPERATOR_ROWS_SCANNED": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}';

statement ok
CREATE TABLE integers(i INTEGER)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

statement ok
SELECT * FROM integers i1, integers i2 WHERE i1.i=i2.i ORDER BY 1

# disable profiling so that the next query does not collect any data
statement ok
pragma disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

statement ok
SELECT operator_cardinality, operator_rows_scanned, cumulative_cardinality, cumulative_rows_scanned FROM metrics_output;

# Make sure that the number of rows scanned is more than 0
query I
SELECT
CASE
	WHEN cumulative_rows_scanned > 0 THEN 'true'
	ELSE 'false'
END
FROM metrics_output;
----
true

# Rerun the same query but without the operator metrics to make sure the cumulative metrics are still collected
statement ok
PRAGMA custom_profiling_settings='{"CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true", "BLOCKED_THREAD_TIME": "true"}';

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
SELECT * FROM integers i1, integers i2 WHERE i1.i=i2.i ORDER BY 1

statement ok
PRAGMA disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

# Make sure that the number of rows scanned is more than 0 since the cumulative metrics are still collected
query I
SELECT
CASE
	WHEN cumulative_rows_scanned > 0 THEN 'true'
	ELSE 'false'
END
FROM metrics_output;
----
true

## Test Result_Set_Size
statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = 'test/sql/pragma/output.json';

statement ok
PRAGMA custom_profiling_settings='{"RESULT_SET_SIZE": "true", "OPERATOR_CARDINALITY": "true"}'

statement ok
select unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) as names order by random();

statement ok
PRAGMA disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

## Check that the query node has a result size of 144 = 9 (length of list) * 12 (size of a string)
query I
SELECT
CASE
	WHEN result_set_size = 144 THEN 'true'
	ELSE 'false'
END
FROM metrics_output;
----
true


## Create a large table to check that idle thread time is collected
statement ok
pragma threads=4;

statement ok
CREATE TABLE bigdata AS SELECT i AS col_a, i AS col_b FROM range(0,10000) tbl(i);

statement ok
PRAGMA custom_profiling_settings='{"BLOCKED_THREAD_TIME": "true"}';

# Complicated query to make sure that idle thread time is collected
statement ok
SELECT (SELECT COUNT(*) FROM bigdata WHERE col_a = 1) + (SELECT COUNT(*) FROM bigdata WHERE col_b = 1);

statement ok
PRAGMA disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM 'test/sql/pragma/output.json';

# Check that idle thread time is collected
query I
SELECT unnest(res) from (
	select current_setting('custom_profiling_settings') as raw_setting,
	raw_setting.trim('{}') as setting,
	string_split(setting, ', ') as res
) ORDER BY ALL
----
"BLOCKED_THREAD_TIME": "true"

## ERRORS
statement error
SELECT operator_timing FROM metrics_output;
----
Referenced column "operator_timing" not found in FROM clause!

# Error cases
statement error
PRAGMA custom_profiling_settings='}}}}}}'
----
Could not parse the custom profiler settings file due to incorrect JSON: "}}}}}}"

statement error
PRAGMA custom_profiling_settings=BONJOUR
----
IO Error: Could not parse the custom profiler settings file due to incorrect JSON: "BONJOUR"

statement error
PRAGMA custom_profiling_settings=[NOT_A_JSON]
----
Binder Error: SET value cannot contain column names

## add an invalid setting to the file
statement error
PRAGMA custom_profiling_settings='{"INVALID_SETTING": "true"}'
----
Invalid custom profiler settings: "INVALID_SETTING"


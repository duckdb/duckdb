# name: test/sql/pragma/profiling/test_custom_profiling_using_groups.test
# description: Test default profiling settings using groups.
# group: [profiling]

# This file is automatically generated by scripts/generate_metric_enums.py
# Do not edit this file manually, your changes will be overwritten

require json

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"ALL": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ALL_OPTIMIZERS": "true"
"ATTACH_LOAD_STORAGE_LATENCY": "true"
"ATTACH_REPLAY_WAL_LATENCY": "true"
"BLOCKED_THREAD_TIME": "true"
"CHECKPOINT_LATENCY": "true"
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_OPTIMIZER_TIMING": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"
"LATENCY": "true"
"OPERATOR_CARDINALITY": "true"
"OPERATOR_NAME": "true"
"OPERATOR_ROWS_SCANNED": "true"
"OPERATOR_TIMING": "true"
"OPERATOR_TYPE": "true"
"OPTIMIZER_BUILD_SIDE_PROBE_SIDE": "true"
"OPTIMIZER_COLUMN_LIFETIME": "true"
"OPTIMIZER_COMMON_AGGREGATE": "true"
"OPTIMIZER_COMMON_SUBEXPRESSIONS": "true"
"OPTIMIZER_COMMON_SUBPLAN": "true"
"OPTIMIZER_COMPRESSED_MATERIALIZATION": "true"
"OPTIMIZER_CTE_FILTER_PUSHER": "true"
"OPTIMIZER_CTE_INLINING": "true"
"OPTIMIZER_DELIMINATOR": "true"
"OPTIMIZER_DUPLICATE_GROUPS": "true"
"OPTIMIZER_EMPTY_RESULT_PULLUP": "true"
"OPTIMIZER_EXPRESSION_REWRITER": "true"
"OPTIMIZER_EXTENSION": "true"
"OPTIMIZER_FILTER_PULLUP": "true"
"OPTIMIZER_FILTER_PUSHDOWN": "true"
"OPTIMIZER_IN_CLAUSE": "true"
"OPTIMIZER_JOIN_FILTER_PUSHDOWN": "true"
"OPTIMIZER_JOIN_ORDER": "true"
"OPTIMIZER_LATE_MATERIALIZATION": "true"
"OPTIMIZER_LIMIT_PUSHDOWN": "true"
"OPTIMIZER_MATERIALIZED_CTE": "true"
"OPTIMIZER_REGEX_RANGE": "true"
"OPTIMIZER_REORDER_FILTER": "true"
"OPTIMIZER_SAMPLING_PUSHDOWN": "true"
"OPTIMIZER_STATISTICS_PROPAGATION": "true"
"OPTIMIZER_SUM_REWRITER": "true"
"OPTIMIZER_TOP_N": "true"
"OPTIMIZER_TOP_N_WINDOW_ELIMINATION": "true"
"OPTIMIZER_UNNEST_REWRITER": "true"
"OPTIMIZER_UNUSED_COLUMNS": "true"
"PHYSICAL_PLANNER": "true"
"PHYSICAL_PLANNER_COLUMN_BINDING": "true"
"PHYSICAL_PLANNER_CREATE_PLAN": "true"
"PHYSICAL_PLANNER_RESOLVE_TYPES": "true"
"PLANNER": "true"
"PLANNER_BINDING": "true"
"QUERY_NAME": "true"
"RESULT_SET_SIZE": "true"
"ROWS_RETURNED": "true"
"SYSTEM_PEAK_BUFFER_MEMORY": "true"
"SYSTEM_PEAK_TEMP_DIR_SIZE": "true"
"TOTAL_BYTES_READ": "true"
"TOTAL_BYTES_WRITTEN": "true"
"WAITING_TO_ATTACH_LATENCY": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ALL_OPTIMIZERS,
	ATTACH_LOAD_STORAGE_LATENCY,
	ATTACH_REPLAY_WAL_LATENCY,
	BLOCKED_THREAD_TIME,
	CHECKPOINT_LATENCY,
	CPU_TIME,
	CUMULATIVE_CARDINALITY,
	CUMULATIVE_OPTIMIZER_TIMING,
	CUMULATIVE_ROWS_SCANNED,
	EXTRA_INFO,
	LATENCY,
	OPTIMIZER_BUILD_SIDE_PROBE_SIDE,
	OPTIMIZER_COLUMN_LIFETIME,
	OPTIMIZER_COMMON_AGGREGATE,
	OPTIMIZER_COMMON_SUBEXPRESSIONS,
	OPTIMIZER_COMMON_SUBPLAN,
	OPTIMIZER_COMPRESSED_MATERIALIZATION,
	OPTIMIZER_CTE_FILTER_PUSHER,
	OPTIMIZER_CTE_INLINING,
	OPTIMIZER_DELIMINATOR,
	OPTIMIZER_DUPLICATE_GROUPS,
	OPTIMIZER_EMPTY_RESULT_PULLUP,
	OPTIMIZER_EXPRESSION_REWRITER,
	OPTIMIZER_EXTENSION,
	OPTIMIZER_FILTER_PULLUP,
	OPTIMIZER_FILTER_PUSHDOWN,
	OPTIMIZER_IN_CLAUSE,
	OPTIMIZER_JOIN_FILTER_PUSHDOWN,
	OPTIMIZER_JOIN_ORDER,
	OPTIMIZER_LATE_MATERIALIZATION,
	OPTIMIZER_LIMIT_PUSHDOWN,
	OPTIMIZER_MATERIALIZED_CTE,
	OPTIMIZER_REGEX_RANGE,
	OPTIMIZER_REORDER_FILTER,
	OPTIMIZER_SAMPLING_PUSHDOWN,
	OPTIMIZER_STATISTICS_PROPAGATION,
	OPTIMIZER_SUM_REWRITER,
	OPTIMIZER_TOP_N,
	OPTIMIZER_TOP_N_WINDOW_ELIMINATION,
	OPTIMIZER_UNNEST_REWRITER,
	OPTIMIZER_UNUSED_COLUMNS,
	PHYSICAL_PLANNER,
	PHYSICAL_PLANNER_COLUMN_BINDING,
	PHYSICAL_PLANNER_CREATE_PLAN,
	PHYSICAL_PLANNER_RESOLVE_TYPES,
	PLANNER,
	PLANNER_BINDING,
	QUERY_NAME,
	RESULT_SET_SIZE,
	ROWS_RETURNED,
	SYSTEM_PEAK_BUFFER_MEMORY,
	SYSTEM_PEAK_TEMP_DIR_SIZE,
	TOTAL_BYTES_READ,
	TOTAL_BYTES_WRITTEN,
	WAITING_TO_ATTACH_LATENCY FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"DEFAULT": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"
"LATENCY": "true"
"QUERY_NAME": "true"
"RESULT_SET_SIZE": "true"
"ROWS_RETURNED": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT CPU_TIME,
	CUMULATIVE_CARDINALITY,
	CUMULATIVE_ROWS_SCANNED,
	EXTRA_INFO,
	LATENCY,
	QUERY_NAME,
	RESULT_SET_SIZE,
	ROWS_RETURNED FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"EXECUTION": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"BLOCKED_THREAD_TIME": "true"
"SYSTEM_PEAK_BUFFER_MEMORY": "true"
"SYSTEM_PEAK_TEMP_DIR_SIZE": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT BLOCKED_THREAD_TIME,
	SYSTEM_PEAK_BUFFER_MEMORY,
	SYSTEM_PEAK_TEMP_DIR_SIZE FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"FILE": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ATTACH_LOAD_STORAGE_LATENCY": "true"
"ATTACH_REPLAY_WAL_LATENCY": "true"
"CHECKPOINT_LATENCY": "true"
"TOTAL_BYTES_READ": "true"
"TOTAL_BYTES_WRITTEN": "true"
"WAITING_TO_ATTACH_LATENCY": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ATTACH_LOAD_STORAGE_LATENCY,
	ATTACH_REPLAY_WAL_LATENCY,
	CHECKPOINT_LATENCY,
	TOTAL_BYTES_READ,
	TOTAL_BYTES_WRITTEN,
	WAITING_TO_ATTACH_LATENCY FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"OPERATOR": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"OPERATOR_CARDINALITY": "true"
"OPERATOR_NAME": "true"
"OPERATOR_ROWS_SCANNED": "true"
"OPERATOR_TIMING": "true"
"OPERATOR_TYPE": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT OPERATOR_CARDINALITY,
	OPERATOR_NAME,
	OPERATOR_ROWS_SCANNED,
	OPERATOR_TIMING,
	OPERATOR_TYPE FROM metrics_output
FROM (
	SELECT unnest(children, max_depth := 2)
	FROM metrics_output
)

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"OPTIMIZER": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"OPTIMIZER_BUILD_SIDE_PROBE_SIDE": "true"
"OPTIMIZER_COLUMN_LIFETIME": "true"
"OPTIMIZER_COMMON_AGGREGATE": "true"
"OPTIMIZER_COMMON_SUBEXPRESSIONS": "true"
"OPTIMIZER_COMMON_SUBPLAN": "true"
"OPTIMIZER_COMPRESSED_MATERIALIZATION": "true"
"OPTIMIZER_CTE_FILTER_PUSHER": "true"
"OPTIMIZER_CTE_INLINING": "true"
"OPTIMIZER_DELIMINATOR": "true"
"OPTIMIZER_DUPLICATE_GROUPS": "true"
"OPTIMIZER_EMPTY_RESULT_PULLUP": "true"
"OPTIMIZER_EXPRESSION_REWRITER": "true"
"OPTIMIZER_EXTENSION": "true"
"OPTIMIZER_FILTER_PULLUP": "true"
"OPTIMIZER_FILTER_PUSHDOWN": "true"
"OPTIMIZER_IN_CLAUSE": "true"
"OPTIMIZER_JOIN_FILTER_PUSHDOWN": "true"
"OPTIMIZER_JOIN_ORDER": "true"
"OPTIMIZER_LATE_MATERIALIZATION": "true"
"OPTIMIZER_LIMIT_PUSHDOWN": "true"
"OPTIMIZER_MATERIALIZED_CTE": "true"
"OPTIMIZER_REGEX_RANGE": "true"
"OPTIMIZER_REORDER_FILTER": "true"
"OPTIMIZER_SAMPLING_PUSHDOWN": "true"
"OPTIMIZER_STATISTICS_PROPAGATION": "true"
"OPTIMIZER_SUM_REWRITER": "true"
"OPTIMIZER_TOP_N": "true"
"OPTIMIZER_TOP_N_WINDOW_ELIMINATION": "true"
"OPTIMIZER_UNNEST_REWRITER": "true"
"OPTIMIZER_UNUSED_COLUMNS": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT OPTIMIZER_BUILD_SIDE_PROBE_SIDE,
	OPTIMIZER_COLUMN_LIFETIME,
	OPTIMIZER_COMMON_AGGREGATE,
	OPTIMIZER_COMMON_SUBEXPRESSIONS,
	OPTIMIZER_COMMON_SUBPLAN,
	OPTIMIZER_COMPRESSED_MATERIALIZATION,
	OPTIMIZER_CTE_FILTER_PUSHER,
	OPTIMIZER_CTE_INLINING,
	OPTIMIZER_DELIMINATOR,
	OPTIMIZER_DUPLICATE_GROUPS,
	OPTIMIZER_EMPTY_RESULT_PULLUP,
	OPTIMIZER_EXPRESSION_REWRITER,
	OPTIMIZER_EXTENSION,
	OPTIMIZER_FILTER_PULLUP,
	OPTIMIZER_FILTER_PUSHDOWN,
	OPTIMIZER_IN_CLAUSE,
	OPTIMIZER_JOIN_FILTER_PUSHDOWN,
	OPTIMIZER_JOIN_ORDER,
	OPTIMIZER_LATE_MATERIALIZATION,
	OPTIMIZER_LIMIT_PUSHDOWN,
	OPTIMIZER_MATERIALIZED_CTE,
	OPTIMIZER_REGEX_RANGE,
	OPTIMIZER_REORDER_FILTER,
	OPTIMIZER_SAMPLING_PUSHDOWN,
	OPTIMIZER_STATISTICS_PROPAGATION,
	OPTIMIZER_SUM_REWRITER,
	OPTIMIZER_TOP_N,
	OPTIMIZER_TOP_N_WINDOW_ELIMINATION,
	OPTIMIZER_UNNEST_REWRITER,
	OPTIMIZER_UNUSED_COLUMNS FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"PHASE_TIMING": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ALL_OPTIMIZERS": "true"
"CUMULATIVE_OPTIMIZER_TIMING": "true"
"OPTIMIZER_BUILD_SIDE_PROBE_SIDE": "true"
"OPTIMIZER_COLUMN_LIFETIME": "true"
"OPTIMIZER_COMMON_AGGREGATE": "true"
"OPTIMIZER_COMMON_SUBEXPRESSIONS": "true"
"OPTIMIZER_COMMON_SUBPLAN": "true"
"OPTIMIZER_COMPRESSED_MATERIALIZATION": "true"
"OPTIMIZER_CTE_FILTER_PUSHER": "true"
"OPTIMIZER_CTE_INLINING": "true"
"OPTIMIZER_DELIMINATOR": "true"
"OPTIMIZER_DUPLICATE_GROUPS": "true"
"OPTIMIZER_EMPTY_RESULT_PULLUP": "true"
"OPTIMIZER_EXPRESSION_REWRITER": "true"
"OPTIMIZER_EXTENSION": "true"
"OPTIMIZER_FILTER_PULLUP": "true"
"OPTIMIZER_FILTER_PUSHDOWN": "true"
"OPTIMIZER_IN_CLAUSE": "true"
"OPTIMIZER_JOIN_FILTER_PUSHDOWN": "true"
"OPTIMIZER_JOIN_ORDER": "true"
"OPTIMIZER_LATE_MATERIALIZATION": "true"
"OPTIMIZER_LIMIT_PUSHDOWN": "true"
"OPTIMIZER_MATERIALIZED_CTE": "true"
"OPTIMIZER_REGEX_RANGE": "true"
"OPTIMIZER_REORDER_FILTER": "true"
"OPTIMIZER_SAMPLING_PUSHDOWN": "true"
"OPTIMIZER_STATISTICS_PROPAGATION": "true"
"OPTIMIZER_SUM_REWRITER": "true"
"OPTIMIZER_TOP_N": "true"
"OPTIMIZER_TOP_N_WINDOW_ELIMINATION": "true"
"OPTIMIZER_UNNEST_REWRITER": "true"
"OPTIMIZER_UNUSED_COLUMNS": "true"
"PHYSICAL_PLANNER": "true"
"PHYSICAL_PLANNER_COLUMN_BINDING": "true"
"PHYSICAL_PLANNER_CREATE_PLAN": "true"
"PHYSICAL_PLANNER_RESOLVE_TYPES": "true"
"PLANNER": "true"
"PLANNER_BINDING": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ALL_OPTIMIZERS,
	CUMULATIVE_OPTIMIZER_TIMING,
	OPTIMIZER_BUILD_SIDE_PROBE_SIDE,
	OPTIMIZER_COLUMN_LIFETIME,
	OPTIMIZER_COMMON_AGGREGATE,
	OPTIMIZER_COMMON_SUBEXPRESSIONS,
	OPTIMIZER_COMMON_SUBPLAN,
	OPTIMIZER_COMPRESSED_MATERIALIZATION,
	OPTIMIZER_CTE_FILTER_PUSHER,
	OPTIMIZER_CTE_INLINING,
	OPTIMIZER_DELIMINATOR,
	OPTIMIZER_DUPLICATE_GROUPS,
	OPTIMIZER_EMPTY_RESULT_PULLUP,
	OPTIMIZER_EXPRESSION_REWRITER,
	OPTIMIZER_EXTENSION,
	OPTIMIZER_FILTER_PULLUP,
	OPTIMIZER_FILTER_PUSHDOWN,
	OPTIMIZER_IN_CLAUSE,
	OPTIMIZER_JOIN_FILTER_PUSHDOWN,
	OPTIMIZER_JOIN_ORDER,
	OPTIMIZER_LATE_MATERIALIZATION,
	OPTIMIZER_LIMIT_PUSHDOWN,
	OPTIMIZER_MATERIALIZED_CTE,
	OPTIMIZER_REGEX_RANGE,
	OPTIMIZER_REORDER_FILTER,
	OPTIMIZER_SAMPLING_PUSHDOWN,
	OPTIMIZER_STATISTICS_PROPAGATION,
	OPTIMIZER_SUM_REWRITER,
	OPTIMIZER_TOP_N,
	OPTIMIZER_TOP_N_WINDOW_ELIMINATION,
	OPTIMIZER_UNNEST_REWRITER,
	OPTIMIZER_UNUSED_COLUMNS,
	PHYSICAL_PLANNER,
	PHYSICAL_PLANNER_COLUMN_BINDING,
	PHYSICAL_PLANNER_CREATE_PLAN,
	PHYSICAL_PLANNER_RESOLVE_TYPES,
	PLANNER,
	PLANNER_BINDING FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"DEFAULT": "true", "FILE": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ATTACH_LOAD_STORAGE_LATENCY": "true"
"ATTACH_REPLAY_WAL_LATENCY": "true"
"CHECKPOINT_LATENCY": "true"
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"
"LATENCY": "true"
"QUERY_NAME": "true"
"RESULT_SET_SIZE": "true"
"ROWS_RETURNED": "true"
"TOTAL_BYTES_READ": "true"
"TOTAL_BYTES_WRITTEN": "true"
"WAITING_TO_ATTACH_LATENCY": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ATTACH_LOAD_STORAGE_LATENCY,
	ATTACH_REPLAY_WAL_LATENCY,
	CHECKPOINT_LATENCY,
	CPU_TIME,
	CUMULATIVE_CARDINALITY,
	CUMULATIVE_ROWS_SCANNED,
	EXTRA_INFO,
	LATENCY,
	QUERY_NAME,
	RESULT_SET_SIZE,
	ROWS_RETURNED,
	TOTAL_BYTES_READ,
	TOTAL_BYTES_WRITTEN,
	WAITING_TO_ATTACH_LATENCY FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"FILE": "true", "OPTIMIZER": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ATTACH_LOAD_STORAGE_LATENCY": "true"
"ATTACH_REPLAY_WAL_LATENCY": "true"
"CHECKPOINT_LATENCY": "true"
"OPTIMIZER_BUILD_SIDE_PROBE_SIDE": "true"
"OPTIMIZER_COLUMN_LIFETIME": "true"
"OPTIMIZER_COMMON_AGGREGATE": "true"
"OPTIMIZER_COMMON_SUBEXPRESSIONS": "true"
"OPTIMIZER_COMMON_SUBPLAN": "true"
"OPTIMIZER_COMPRESSED_MATERIALIZATION": "true"
"OPTIMIZER_CTE_FILTER_PUSHER": "true"
"OPTIMIZER_CTE_INLINING": "true"
"OPTIMIZER_DELIMINATOR": "true"
"OPTIMIZER_DUPLICATE_GROUPS": "true"
"OPTIMIZER_EMPTY_RESULT_PULLUP": "true"
"OPTIMIZER_EXPRESSION_REWRITER": "true"
"OPTIMIZER_EXTENSION": "true"
"OPTIMIZER_FILTER_PULLUP": "true"
"OPTIMIZER_FILTER_PUSHDOWN": "true"
"OPTIMIZER_IN_CLAUSE": "true"
"OPTIMIZER_JOIN_FILTER_PUSHDOWN": "true"
"OPTIMIZER_JOIN_ORDER": "true"
"OPTIMIZER_LATE_MATERIALIZATION": "true"
"OPTIMIZER_LIMIT_PUSHDOWN": "true"
"OPTIMIZER_MATERIALIZED_CTE": "true"
"OPTIMIZER_REGEX_RANGE": "true"
"OPTIMIZER_REORDER_FILTER": "true"
"OPTIMIZER_SAMPLING_PUSHDOWN": "true"
"OPTIMIZER_STATISTICS_PROPAGATION": "true"
"OPTIMIZER_SUM_REWRITER": "true"
"OPTIMIZER_TOP_N": "true"
"OPTIMIZER_TOP_N_WINDOW_ELIMINATION": "true"
"OPTIMIZER_UNNEST_REWRITER": "true"
"OPTIMIZER_UNUSED_COLUMNS": "true"
"TOTAL_BYTES_READ": "true"
"TOTAL_BYTES_WRITTEN": "true"
"WAITING_TO_ATTACH_LATENCY": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ATTACH_LOAD_STORAGE_LATENCY,
	ATTACH_REPLAY_WAL_LATENCY,
	CHECKPOINT_LATENCY,
	OPTIMIZER_BUILD_SIDE_PROBE_SIDE,
	OPTIMIZER_COLUMN_LIFETIME,
	OPTIMIZER_COMMON_AGGREGATE,
	OPTIMIZER_COMMON_SUBEXPRESSIONS,
	OPTIMIZER_COMMON_SUBPLAN,
	OPTIMIZER_COMPRESSED_MATERIALIZATION,
	OPTIMIZER_CTE_FILTER_PUSHER,
	OPTIMIZER_CTE_INLINING,
	OPTIMIZER_DELIMINATOR,
	OPTIMIZER_DUPLICATE_GROUPS,
	OPTIMIZER_EMPTY_RESULT_PULLUP,
	OPTIMIZER_EXPRESSION_REWRITER,
	OPTIMIZER_EXTENSION,
	OPTIMIZER_FILTER_PULLUP,
	OPTIMIZER_FILTER_PUSHDOWN,
	OPTIMIZER_IN_CLAUSE,
	OPTIMIZER_JOIN_FILTER_PUSHDOWN,
	OPTIMIZER_JOIN_ORDER,
	OPTIMIZER_LATE_MATERIALIZATION,
	OPTIMIZER_LIMIT_PUSHDOWN,
	OPTIMIZER_MATERIALIZED_CTE,
	OPTIMIZER_REGEX_RANGE,
	OPTIMIZER_REORDER_FILTER,
	OPTIMIZER_SAMPLING_PUSHDOWN,
	OPTIMIZER_STATISTICS_PROPAGATION,
	OPTIMIZER_SUM_REWRITER,
	OPTIMIZER_TOP_N,
	OPTIMIZER_TOP_N_WINDOW_ELIMINATION,
	OPTIMIZER_UNNEST_REWRITER,
	OPTIMIZER_UNUSED_COLUMNS,
	TOTAL_BYTES_READ,
	TOTAL_BYTES_WRITTEN,
	WAITING_TO_ATTACH_LATENCY FROM metrics_output
FROM metrics_output;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"PHASE_TIMING": "true", "EXECUTION": "true", "FILE": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

query I
SELECT unnest(res) FROM (
    SELECT current_setting('custom_profiling_settings') AS raw_setting,
    raw_setting.trim('{}') AS setting,
    string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"ALL_OPTIMIZERS": "true"
"ATTACH_LOAD_STORAGE_LATENCY": "true"
"ATTACH_REPLAY_WAL_LATENCY": "true"
"BLOCKED_THREAD_TIME": "true"
"CHECKPOINT_LATENCY": "true"
"CUMULATIVE_OPTIMIZER_TIMING": "true"
"OPTIMIZER_BUILD_SIDE_PROBE_SIDE": "true"
"OPTIMIZER_COLUMN_LIFETIME": "true"
"OPTIMIZER_COMMON_AGGREGATE": "true"
"OPTIMIZER_COMMON_SUBEXPRESSIONS": "true"
"OPTIMIZER_COMMON_SUBPLAN": "true"
"OPTIMIZER_COMPRESSED_MATERIALIZATION": "true"
"OPTIMIZER_CTE_FILTER_PUSHER": "true"
"OPTIMIZER_CTE_INLINING": "true"
"OPTIMIZER_DELIMINATOR": "true"
"OPTIMIZER_DUPLICATE_GROUPS": "true"
"OPTIMIZER_EMPTY_RESULT_PULLUP": "true"
"OPTIMIZER_EXPRESSION_REWRITER": "true"
"OPTIMIZER_EXTENSION": "true"
"OPTIMIZER_FILTER_PULLUP": "true"
"OPTIMIZER_FILTER_PUSHDOWN": "true"
"OPTIMIZER_IN_CLAUSE": "true"
"OPTIMIZER_JOIN_FILTER_PUSHDOWN": "true"
"OPTIMIZER_JOIN_ORDER": "true"
"OPTIMIZER_LATE_MATERIALIZATION": "true"
"OPTIMIZER_LIMIT_PUSHDOWN": "true"
"OPTIMIZER_MATERIALIZED_CTE": "true"
"OPTIMIZER_REGEX_RANGE": "true"
"OPTIMIZER_REORDER_FILTER": "true"
"OPTIMIZER_SAMPLING_PUSHDOWN": "true"
"OPTIMIZER_STATISTICS_PROPAGATION": "true"
"OPTIMIZER_SUM_REWRITER": "true"
"OPTIMIZER_TOP_N": "true"
"OPTIMIZER_TOP_N_WINDOW_ELIMINATION": "true"
"OPTIMIZER_UNNEST_REWRITER": "true"
"OPTIMIZER_UNUSED_COLUMNS": "true"
"PHYSICAL_PLANNER": "true"
"PHYSICAL_PLANNER_COLUMN_BINDING": "true"
"PHYSICAL_PLANNER_CREATE_PLAN": "true"
"PHYSICAL_PLANNER_RESOLVE_TYPES": "true"
"PLANNER": "true"
"PLANNER_BINDING": "true"
"SYSTEM_PEAK_BUFFER_MEMORY": "true"
"SYSTEM_PEAK_TEMP_DIR_SIZE": "true"
"TOTAL_BYTES_READ": "true"
"TOTAL_BYTES_WRITTEN": "true"
"WAITING_TO_ATTACH_LATENCY": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement ok
SELECT ALL_OPTIMIZERS,
	ATTACH_LOAD_STORAGE_LATENCY,
	ATTACH_REPLAY_WAL_LATENCY,
	BLOCKED_THREAD_TIME,
	CHECKPOINT_LATENCY,
	CUMULATIVE_OPTIMIZER_TIMING,
	OPTIMIZER_BUILD_SIDE_PROBE_SIDE,
	OPTIMIZER_COLUMN_LIFETIME,
	OPTIMIZER_COMMON_AGGREGATE,
	OPTIMIZER_COMMON_SUBEXPRESSIONS,
	OPTIMIZER_COMMON_SUBPLAN,
	OPTIMIZER_COMPRESSED_MATERIALIZATION,
	OPTIMIZER_CTE_FILTER_PUSHER,
	OPTIMIZER_CTE_INLINING,
	OPTIMIZER_DELIMINATOR,
	OPTIMIZER_DUPLICATE_GROUPS,
	OPTIMIZER_EMPTY_RESULT_PULLUP,
	OPTIMIZER_EXPRESSION_REWRITER,
	OPTIMIZER_EXTENSION,
	OPTIMIZER_FILTER_PULLUP,
	OPTIMIZER_FILTER_PUSHDOWN,
	OPTIMIZER_IN_CLAUSE,
	OPTIMIZER_JOIN_FILTER_PUSHDOWN,
	OPTIMIZER_JOIN_ORDER,
	OPTIMIZER_LATE_MATERIALIZATION,
	OPTIMIZER_LIMIT_PUSHDOWN,
	OPTIMIZER_MATERIALIZED_CTE,
	OPTIMIZER_REGEX_RANGE,
	OPTIMIZER_REORDER_FILTER,
	OPTIMIZER_SAMPLING_PUSHDOWN,
	OPTIMIZER_STATISTICS_PROPAGATION,
	OPTIMIZER_SUM_REWRITER,
	OPTIMIZER_TOP_N,
	OPTIMIZER_TOP_N_WINDOW_ELIMINATION,
	OPTIMIZER_UNNEST_REWRITER,
	OPTIMIZER_UNUSED_COLUMNS,
	PHYSICAL_PLANNER,
	PHYSICAL_PLANNER_COLUMN_BINDING,
	PHYSICAL_PLANNER_CREATE_PLAN,
	PHYSICAL_PLANNER_RESOLVE_TYPES,
	PLANNER,
	PLANNER_BINDING,
	SYSTEM_PEAK_BUFFER_MEMORY,
	SYSTEM_PEAK_TEMP_DIR_SIZE,
	TOTAL_BYTES_READ,
	TOTAL_BYTES_WRITTEN,
	WAITING_TO_ATTACH_LATENCY FROM metrics_output
FROM metrics_output;


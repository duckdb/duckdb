# name: test/sql/pragma/profiling/test_custom_profiling_disable_metrics.test
# description: Change CPU_TIME and other metrics.
# group: [profiling]

require json

statement ok
PRAGMA enable_verification;

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
PRAGMA custom_profiling_settings='{"CPU_TIME": "false", "EXTRA_INFO": "true", "OPERATOR_CARDINALITY": "true", "OPERATOR_TIMING": "true", "LATENCY": "true"}';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

# Evaluate results.

query I rowsort
SELECT unnest(res) FROM (
	SELECT current_setting('custom_profiling_settings') AS raw_setting,
	raw_setting.trim('{}') AS setting,
	string_split(setting, ', ') AS res
) ORDER BY ALL;
----
"EXTRA_INFO": "true"
"LATENCY": "true"
"OPERATOR_CARDINALITY": "true"
"OPERATOR_TIMING": "true"

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

statement error
SELECT cpu_time FROM metrics_output;
----
<REGEX>:Binder Error.*Referenced column "cpu_time" not found in FROM clause!.*

statement ok
SELECT extra_info, latency FROM metrics_output;

# Re-enable the CPU TIME.

statement ok
PRAGMA custom_profiling_settings='{"CPU_TIME": "true", "EXTRA_INFO": "true", "CUMULATIVE_CARDINALITY": "true", "CUMULATIVE_ROWS_SCANNED": "true"}'

query I
SELECT unnest(res) FROM (
	SELECT current_setting('custom_profiling_settings') AS raw_setting,
	raw_setting.trim('{}') AS setting,
	string_split(setting, ', ') AS res
) ORDER BY ALL
----
"CPU_TIME": "true"
"CUMULATIVE_CARDINALITY": "true"
"CUMULATIVE_ROWS_SCANNED": "true"
"EXTRA_INFO": "true"

# Re-enabled profiling.

statement ok
PRAGMA enable_profiling = 'json';

statement ok
PRAGMA profiling_output = '__TEST_DIR__/profiling_output.json';

statement ok
SELECT unnest(['Maia', 'Thijs', 'Mark', 'Hannes', 'Tom', 'Max', 'Carlo', 'Sam', 'Tania']) AS names ORDER BY random();

statement ok
PRAGMA disable_profiling;

statement ok
CREATE OR REPLACE TABLE metrics_output AS SELECT * FROM '__TEST_DIR__/profiling_output.json';

query I
SELECT
	CASE WHEN cpu_time > 0 THEN 'true'
    ELSE 'false' END
FROM metrics_output;
----
true

query I
SELECT
	CASE WHEN cumulative_cardinality > 0 THEN 'true'
	ELSE 'false' END
FROM metrics_output;
----
true

# Only collect ROWS_SCANNED for table queries.
query I
SELECT
	CASE WHEN cumulative_rows_scanned > 0 THEN 'true'
	ELSE 'false' END
FROM metrics_output;
----
false


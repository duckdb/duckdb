# name: test/sql/fts/test_indexing.test_slow
# description: Full text search indexing
# group: [fts]

require skip_reload

require fts

require noalternativeverify

statement ok
PRAGMA enable_verification

statement error
PRAGMA drop_fts_index('test')

statement ok
CREATE SCHEMA fts_main_test

statement ok
PRAGMA drop_fts_index('test')

statement ok
CREATE TABLE documents(id VARCHAR, body VARCHAR)

statement ok
INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999')

# non-existant parameters should yield an error
statement error
PRAGMA create_fts_index('documents', 'id', 'body', nonexistant_param='dummy')

# test different stemmer
statement ok
PRAGMA create_fts_index('documents', 'id', 'body', stemmer='turkish')

# cannot overwrite without supplying the 'overwrite' param
statement error
PRAGMA create_fts_index('documents', 'id', 'body')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', overwrite=true)

# drop and re-create
statement ok
PRAGMA drop_fts_index('documents')

statement error
PRAGMA create_fts_index('documents', 'id', 'body', stopwords='nonexistant_stopwords_table')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', stopwords='english')

query III
SELECT termid, docid, fieldid FROM fts_main_documents.terms
----
0	0	0
0	0	0
0	0	0
1	1	0
1	1	0
1	1	0
1	1	0
2	2	0
2	2	0
2	2	0
2	2	0
2	2	0

query III
SELECT name, docid, len FROM fts_main_documents.docs
----
doc1	0	3
doc2	1	4
doc3	2	5

query III
SELECT termid, term, df FROM fts_main_documents.dict
----
0	quack	1
1	bark	1
2	meow	1

query T
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term)
SELECT * FROM qtermids
----
0
1

query II
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids))
SELECT * FROM qterms
----
0	0
0	0
0	0
1	1
1	1
1	1
1	1

# log((3 - df + 0.5) / (df + 0.5)) -- number of documents = 3
# (len / 4) -- average document length is 4
# HAVING COUNT(DISTINCT termid) = 3 -- commented this out because there is no document with all terms present
query II
WITH ppterms AS (SELECT stem(unnest(string_split_regex(regexp_replace(lower(strip_accents('QUÁCKED BÁRKED')), '[^a-z]', ' ', 'g'), '\s+')), 'porter') AS term),
qtermids AS (SELECT termid FROM fts_main_documents.dict AS dict, ppterms WHERE dict.term = ppterms.term),
qterms AS (SELECT termid, docid FROM fts_main_documents.terms AS terms WHERE termid IN (SELECT qtermids.termid FROM qtermids)),
subscores AS (
SELECT docs.docid, len, term_tf.termid,
        tf, df, (log((3 - df + 0.5) / (df + 0.5))* ((tf * (1.2 + 1)/(tf + 1.2 * (1 - 0.75 + 0.75 * (len / 4)))))) AS subscore
FROM (SELECT termid, docid, COUNT(*) AS tf FROM qterms
    GROUP BY docid, termid) AS term_tf
    JOIN (SELECT docid FROM qterms
        GROUP BY docid) -- HAVING COUNT(DISTINCT termid) = 3)
        AS cdocs ON term_tf.docid = cdocs.docid
    JOIN fts_main_documents.docs AS docs ON term_tf.docid = docs.docid
    JOIN fts_main_documents.dict AS dict ON term_tf.termid = dict.termid)
SELECT name, score FROM (SELECT docid, sum(subscore) AS score
    FROM subscores GROUP BY docid) AS scores JOIN fts_main_documents.docs AS docs ON
    scores.docid = docs.docid ORDER BY score DESC LIMIT 1000
----
doc2	0.3754363455046031
doc1	0.36835264087244074

# now test the actual match macro
query III
SELECT score, id, body FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
0.37543634550460314	doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING
0.3683526408724408	doc1	 QUÁCKING+QUÁCKING+QUÁCKING

# drop and re-create, but index both the 'body' and 'author' column this time
statement ok
PRAGMA drop_fts_index('documents')

statement ok
DROP TABLE documents

statement ok
CREATE TABLE documents(id VARCHAR, body VARCHAR, author VARCHAR)

statement ok
INSERT INTO documents VALUES ('doc1', ' QUÁCKING+QUÁCKING+QUÁCKING', 'Hannes'), ('doc2', ' BÁRKING+BÁRKING+BÁRKING+BÁRKING', 'Mark'), ('doc3', ' MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999', 'Laurens')

statement ok
PRAGMA create_fts_index('main.documents', 'id', 'body', 'author')

# prepared statement for easier use
statement ok
PREPARE fts_query AS (WITH scored_docs AS (SELECT *, fts_main_documents.match_bm25(id, ?) AS score FROM documents) SELECT id, body, author FROM scored_docs WHERE score IS NOT NULL ORDER BY score DESC)

query III
EXECUTE fts_query('hannes')
----
doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes

query III
EXECUTE fts_query('mark laurens')
----
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
doc3	 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999	Laurens

query III
EXECUTE fts_query(NULL)
----

# different order by changing the parameters
query III
SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked', k := 0.6, b := 0.1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes

# no results for conjunctive query because no document contains both 'mark' and 'laurens
query I
SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', conjunctive := 1) AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----

# strings 'mark' and 'laurens' are not found in the 'body' field of the table 'documents'
query I
SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----

# but they are found in the 'author' field!
query I
SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
doc2
doc3

# if we search both the 'author' and 'body' fields then we get the same behaviour as leaving the fields empty
query I
SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'mark laurens', fields := 'body,author') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
doc2
doc3

# if we don't search any fields, we won't get any results
query I
SELECT id FROM (SELECT *, fts_main_documents.match_bm25(id, 'hannes mark laurens', fields := '') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----

# re-index with different stopwords table
statement ok
PRAGMA drop_fts_index('documents')

statement ok
CREATE TABLE my_stopwords (word VARCHAR)

statement ok
INSERT INTO my_stopwords VALUES ('quacking')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', stopwords='my_stopwords')

# the word 'quacking' is no longer indexed, therefore doc1 is no longer retrieved with this query
query III
SELECT id, body, author FROM (SELECT *, fts_main_documents.match_bm25(id, 'quacked barked') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark

# re-index with a custom whitelist, so that we can retrieve documents by searching on numbers
statement ok
PRAGMA drop_fts_index('documents')

statement ok
PRAGMA create_fts_index('documents', 'id', 'body', ignore='(\\.|[^a-z0-9])+')

query I
SELECT body FROM (SELECT *, fts_main_documents.match_bm25(id, '999') AS score FROM documents) sq WHERE score IS NOT NULL ORDER BY score DESC
----
 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999

# re-index with '*' to index all columns
statement ok
PRAGMA drop_fts_index('documents')

statement ok
PRAGMA create_fts_index('documents', 'id', '*', stopwords='english')

# prepared statement again for easier use
statement ok
PREPARE fts_query AS (WITH scored_docs AS (SELECT *, fts_main_documents.match_bm25(id, ?) AS score FROM documents) SELECT id, body, author FROM scored_docs WHERE score IS NOT NULL ORDER BY score DESC)

query III
EXECUTE fts_query('quacked mark laurens')
----
doc1	 QUÁCKING+QUÁCKING+QUÁCKING	Hannes
doc2	 BÁRKING+BÁRKING+BÁRKING+BÁRKING	Mark
doc3	 MÉOWING+MÉOWING+MÉOWING+MÉOWING+MÉOWING+999	Laurens

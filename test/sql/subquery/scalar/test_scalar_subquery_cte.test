# name: test/sql/subquery/scalar/test_scalar_subquery_cte.test
# description: Test subqueries with CTEs
# group: [scalar]

statement ok
PRAGMA enable_verification

query I
SELECT 1+(WITH cte AS (SELECT 1) SELECT * FROM cte)
----
2

query T
SELECT 1=(WITH cte AS (SELECT 1) SELECT * FROM cte)
----
1

query T
SELECT 1<>(WITH cte AS (SELECT 1) SELECT * FROM cte)
----
0

query T
SELECT 1=(WITH cte AS (SELECT NULL) SELECT * FROM cte)
----
NULL

query T
SELECT NULL=(SELECT 1)
----
NULL

# scalar subquery
query I
SELECT (WITH cte AS (SELECT 42) SELECT * FROM cte)
----
42

# nested subquery
query I
SELECT (WITH cte1 AS (WITH cte2 AS (SELECT 42) SELECT * FROM cte2) SELECT * FROM cte1)
----
42

# test aliasing of subquery
query I
SELECT * FROM (WITH cte(x) AS (SELECT 42) SELECT x FROM cte) v1(a);
----
42

# not enough aliases: defaults to using names for missing columns
query II
SELECT * FROM (WITH cte AS (SELECT 42, 41 AS x) SELECT * FROM cte) v1(a);
----
42	41

# too many aliases: fails
statement error
SELECT * FROM (WITH cte AS (SELECT 42, 41 AS x) SELECT * FROM cte) v1(a, b, c);

statement ok
CREATE TABLE test (a INTEGER, b INTEGER);

statement ok
INSERT INTO test VALUES (11, 22)

statement ok
INSERT INTO test VALUES (12, 21)

statement ok
INSERT INTO test VALUES (13, 22)

# select single tuple only in scalar subquery
query I
SELECT (WITH cte AS (SELECT a * 42 FROM test) SELECT * FROM cte)
----
462

# operations on subquery
query I
SELECT a*(WITH cte AS (SELECT 42) SELECT * FROM cte) FROM test
----
462
504
546

statement ok
CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER, d INTEGER, e INTEGER)

statement ok
INSERT INTO t1(e,c,b,d,a) VALUES(103,102,100,101,104)

statement ok
INSERT INTO t1(a,c,d,e,b) VALUES(107,106,108,109,105)

query R
SELECT c-(WITH cte AS (SELECT sum(c) FROM t1) SELECT * FROM cte) FROM t1
----
-106.000000
-102.000000

query I
SELECT CASE WHEN c>(WITH cte AS (SELECT sum(c)/count(*) FROM t1) SELECT * FROM cte) THEN a*2 ELSE b*10 END FROM t1
----
1000
214

# temporary solution until decorrelation of materialized CTEs is implemented
require noalternativeverify

# correlated subqueries
query IR
SELECT a, (WITH cte AS (SELECT SUM(b) FROM test tsub WHERE test.a=tsub.a) SELECT * FROM cte) FROM test
----
11	22.000000
12	21.000000
13	22.000000

query II
SELECT a, (WITH cte AS (SELECT CASE WHEN test.a=11 THEN 22 ELSE NULL END) SELECT * FROM cte) FROM test ORDER BY a
----
11	22
12	NULL
13	NULL

query II
SELECT a, (WITH cte AS (SELECT CASE WHEN test.a=11 THEN b ELSE NULL END FROM test tsub) SELECT * FROM cte) FROM test ORDER BY a
----
11	22
12	NULL
13	NULL

query II
SELECT a, (WITH cte AS (SELECT CASE WHEN test.a=11 THEN b ELSE NULL END FROM test tsub LIMIT 1) SELECT * FROM cte) FROM test ORDER BY a
----
11	22
12	NULL
13	NULL

query II
SELECT * from test where a=(WITH cte AS (SELECT a FROM test t WHERE t.b=test.b) SELECT min(a) FROM cte)
----
11	22
12	21

# exists / in / any subqueries
query II
SELECT * FROM test WHERE EXISTS (WITH cte AS (SELECT * FROM test ts WHERE ts.a = test.a AND b>21) SELECT a FROM cte)
----
11	22
13	22

# duplicate name in subquery
query II
SELECT * FROM (WITH cte AS (SELECT 42 AS a, 44 AS a) SELECT * FROM cte) tbl1
----
42	44

# name: test/optimizer/joins/cross_join_and_unnest_dont_work.test
# description: In the join order optimizer queries need to have the correct bindings
# group: [joins]

require json


statement ok
create table child_join as from values (1) t(c);

statement ok
create table small_probe as from values
(1, '1992-03-22 01:02:03'::TIMESTAMP),
(1, '1992-03-22 01:02:04'::TIMESTAMP),
(1, '1992-03-22 01:02:05'::TIMESTAMP),
(1, '1992-03-22 01:02:06'::TIMESTAMP),
(1, '1992-03-22 01:02:07'::TIMESTAMP),
(1, '1992-03-22 01:02:08'::TIMESTAMP) t(sp_const, a);

statement ok
create table large_build as from values
(1, '1992-03-22 01:02:04'::TIMESTAMP),
(1, '1992-03-22 01:02:05'::TIMESTAMP),
(1, '1992-03-22 01:02:06'::TIMESTAMP),
(1, '1992-03-22 01:02:07'::TIMESTAMP),
(1, '1992-03-22 01:02:08'::TIMESTAMP),
(1, '1992-03-22 01:02:09'::TIMESTAMP),
(1, '1992-03-22 01:02:10'::TIMESTAMP),
(1, '1992-03-22 01:02:11'::TIMESTAMP),
(1, '1992-03-22 01:02:12'::TIMESTAMP),
(1, '1992-03-22 01:02:13'::TIMESTAMP),
(1, '1992-03-22 01:02:14'::TIMESTAMP),
(1, '1992-03-22 01:02:15'::TIMESTAMP),
(1, '1992-03-22 01:02:16'::TIMESTAMP),
(1, '1992-03-22 01:02:17'::TIMESTAMP),
(1, '1992-03-22 01:02:18'::TIMESTAMP),
(1, '1992-03-22 01:02:19'::TIMESTAMP),
(1, '1992-03-22 01:02:20'::TIMESTAMP) t(lb_const, b);

# Compare NLJ optimisation to operator
foreach threshold 0 32

statement ok
PRAGMA asof_loop_join_threshold = ${threshold};

query I
select a from (select * from small_probe, child_join where c=sp_const) asof join large_build on (lb_const = sp_const and a < b) order by a;
----
1992-03-22 01:02:03
1992-03-22 01:02:04
1992-03-22 01:02:05
1992-03-22 01:02:06
1992-03-22 01:02:07
1992-03-22 01:02:08


query IIII
WITH
  id_with_timepoint AS (
    SELECT
      'ID1' AS user_id,
      '2024-12-23'::TIMESTAMP AS lastSeen
  ),
  id_and_payload_with_timepoint AS (
    SELECT
      'ID1' AS user_id,
      '2024-02-11'::TIMESTAMP AS timepoint,
      '{ "amp": [ {"k": "fqn1"}, {"k": "fqn2"}]}'::VARCHAR AS payload
  ),
  id_with_payload_intermediate AS (
    SELECT
      id_with_timepoint.user_id,
      id_with_timepoint.lastSeen,
      id_and_payload_with_timepoint.payload,
    FROM
      id_with_timepoint ASOF
      LEFT JOIN id_and_payload_with_timepoint ON (
        id_with_timepoint.user_id = id_and_payload_with_timepoint.user_id
        AND id_and_payload_with_timepoint.timepoint < id_with_timepoint.lastSeen
      )
  ),
  id_with_fqn AS (
    SELECT
      user_id,
      lastSeen,
      t.k_fqn
    FROM
      id_with_payload_intermediate
      LEFT JOIN LATERAL UNNEST(payload ->> '$.amp[*].k') AS t (k_fqn) ON TRUE
  ),
  fqn_table AS (
    SELECT
      *
    FROM
      (
        VALUES
          ('fqn2', '2021-03-03'::TIMESTAMP),
          ('fqn2', '2021-02-02'::TIMESTAMP),
          ('fqn1', '2021-01-01'::TIMESTAMP)
      ) AS data (ap_fqn, timepoint)
  )
SELECT
  id_with_fqn.user_id,
  id_with_fqn.k_fqn,
  fqn_table.ap_fqn,
  fqn_table.timepoint::TIMESTAMP
FROM
  id_with_fqn ASOF
  LEFT JOIN fqn_table ON (
    id_with_fqn.k_fqn = fqn_table.ap_fqn
    AND fqn_table.timepoint < id_with_fqn.lastSeen
  )
ORDER BY
  k_fqn,
  timepoint;
----
ID1	fqn1	fqn1	2021-01-01 00:00:00
ID1	fqn2	fqn2	2021-03-03 00:00:00

endloop

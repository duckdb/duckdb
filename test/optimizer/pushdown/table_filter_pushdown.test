# name: test/optimizer/pushdown/table_filter_pushdown.test
# description: Test Table Filter Push Down
# group: [pushdown]

require skip_reload


statement ok
CREATE TABLE integers(i integer, j integer, k integer)

statement ok
INSERT INTO integers VALUES (5, 5, 5), (10, 10, 10)

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

# complex filter cannot be entirely pushed down
query II
EXPLAIN SELECT k FROM integers where i+j > 10 and j = 5 and i = k+1
----
logical_opt	<REGEX>:.*FILTER.*

# simple filter is pushed down: no filter remaining
query II
EXPLAIN SELECT k FROM integers where j=5
----
logical_opt	<!REGEX>:.*FILTER.*

# multiple filters pushed down
query II
EXPLAIN SELECT k FROM integers where j = 5 and i = 10
----
logical_opt	<!REGEX>:.*FILTER.*

# test different data types
foreach type <numeric>

statement ok
CREATE TABLE tablinho_numbers(i ${type}, j ${type}, k ${type})

statement ok
INSERT INTO tablinho_numbers VALUES (0, 0, 0), (1, 1, 1), (2, 2, 2)

# simple filters are pushed down
query II
EXPLAIN SELECT k FROM tablinho_numbers where j = 1
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT k FROM tablinho_numbers where j > 1
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT k FROM tablinho_numbers where j >= 1
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT k FROM tablinho_numbers where j < 1
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT k FROM tablinho_numbers where j <= 1
----
logical_opt	<!REGEX>:.*FILTER.*

statement ok
DROP TABLE tablinho_numbers

endloop

# pushdown string
statement ok
CREATE TABLE tablinho(i varchar)

statement ok
INSERT INTO tablinho VALUES ('a'), ('bla'), ('c')

# simple filters are pushed down
query II
EXPLAIN SELECT i FROM tablinho where i = 'bla'
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i > 'bla'
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i >= 'bla'
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i < 'bla'
----
logical_opt	<!REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i <= 'bla'
----
logical_opt	<!REGEX>:.*FILTER.*

# more complex filters cannot be pushed down
query II
EXPLAIN SELECT i FROM tablinho where i like 'bla%'
----
logical_opt	<REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i like '%bla'
----
logical_opt	<REGEX>:.*FILTER.*

query II
EXPLAIN SELECT i FROM tablinho where i like '_bla'
----
logical_opt	<REGEX>:.*FILTER.*

# test Q6 pushdown
statement ok
CREATE TABLE LINEITEM(L_ORDERKEY INTEGER NOT NULL, L_PARTKEY INTEGER NOT NULL,L_SUPPKEY INTEGER 	 NOT NULL, L_LINENUMBER INTEGER NOT NULL,L_QUANTITY DECIMAL(15,2) NOT NULL,L_EXTENDEDPRICE 	 DECIMAL(15,2) NOT NULL, L_DISCOUNT DECIMAL(15,2) NOT NULL, L_TAX DECIMAL(15,2) NOT 	 NULL,L_RETURNFLAG CHAR(1) NOT NULL, L_LINESTATUS CHAR(1) NOT NULL, L_SHIPDATE DATE NOT NULL, 	 L_COMMITDATE DATE NOT NULL,L_RECEIPTDATE DATE NOT NULL, L_SHIPINSTRUCT CHAR(25) NOT NULL, 	 L_SHIPMODE CHAR(10) NOT NULL, L_COMMENT VARCHAR(44) NOT NULL)

query II
explain select sum(l_extendedprice * l_discount) as revenue from lineitem where l_shipdate >= '1994-01-01' and l_shipdate < '1995-01-01'  and l_discount between 0.05 and 0.07 and l_quantity < 24
----
logical_opt	<!REGEX>:.*FILTER.*

statement ok
create temporary table t as select range a, range % 10 b, mod(range,10000) c, 5 d, 10000 e from range(100);

statement ok
PRAGMA explain_output = PHYSICAL_ONLY;

query II
explain select count(*) from t where b <=3 and b>=0;
----
physical_plan	<REGEX>:.*b<=3.*

# test time pushdown

statement ok
CREATE TABLE test_time (a  TIME, b TIME, c TIME)

statement ok
INSERT INTO  test_time VALUES ('00:01:00','00:01:00','00:01:00'),('00:10:00','00:10:00','00:10:00'),('01:00:00','00:10:00','01:00:00'),(NULL,NULL,NULL)

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

query II
EXPLAIN SELECT count(*) from test_time where a ='00:01:00'
----
logical_opt	<!REGEX>:.*FILTER.*

# test bool pushdown

statement ok
CREATE TABLE test_bool (i bool, j bool)

statement ok
INSERT INTO  test_bool VALUES (TRUE,TRUE),(TRUE,FALSE),(FALSE,TRUE),(NULL,NULL)

statement ok
PRAGMA explain_output = OPTIMIZED_ONLY;

query II
EXPLAIN SELECT i FROM test_bool where j = TRUE
----
logical_opt	<!REGEX>:.*FILTER.*

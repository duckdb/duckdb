# name: test/optimizer/transitive_filters.test
# description: Test Transitive Filters
# group: [optimizer]

statement ok
PRAGMA explain_output='optimized_only';

### constant comparison [=, >, >=] followed by j >= i #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0=5 AND col1 >= col0
----
logical_opt	<REGEX>:.*\(col1 >= 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0>5 AND col1 >= col0
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0>=5 AND col1 >= col0
----
logical_opt	<REGEX>:.*\(col1 >= 5\).*

### constant comparison [=, >, >=] followed by j > i #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0=5 AND col1 > col0
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0>5 AND col1 > col0
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0>=5 AND col1 > col0
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

### constant comparison [=, <, <=] followed by j <= i #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0=5 AND col1 <= col0
----
logical_opt	<REGEX>:.*\(col1 <= 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0<5 AND col1 <= col0
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0<=5 AND col1 <= col0
----
logical_opt	<REGEX>:.*\(col1 <= 5\).*

### constant comparison [=, <, <=] followed by j < i #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0=5 AND col1 < col0
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0<5 AND col1 < col0
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col0<=5 AND col1 < col0
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

#################################################################################################
# Non-scalar comparisons followed by simple constant comparisons
# e.g., j >= i AND i>10

### j >= i followed by constant comparison [=, >, >=]  #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 >= col0 AND col0=5
----
logical_opt	<REGEX>:.*\(col1 >= 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 >= col0 AND col0>5
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 >= col0 AND col0>=5
----
logical_opt	<REGEX>:.*\(col1 >= 5\).*

### j > i followed by constant comparison [=, >, >=]  #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 > col0 AND col0=5
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 > col0 AND col0>5
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 > col0 AND col0>=5
----
logical_opt	<REGEX>:.*\(col1 > 5\).*

### j <= i followed by constant comparison [=, <, <=]  #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 <= col0 AND col0=5
----
logical_opt	<REGEX>:.*\(col1 <= 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 <= col0 AND col0<5
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 <= col0 AND col0<=5
----
logical_opt	<REGEX>:.*\(col1 <= 5\).*

### j < i followed by constant comparison [=, <, <=]  #########################
query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 < col0 AND col0=5
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 < col0 AND col0<5
----
logical_opt	<REGEX>:.*\(col1 < 5\).*

query II
EXPLAIN SELECT * FROM (VALUES(5,5)) tbl(col0, col1) WHERE col1 < col0 AND col0<=5
----
logical_opt	<REGEX>:.*\(col1 < 5\).*


### Complex transitive filters #################################################
#columns i and j correspond to columns: col0 and col1 in the optimized logical plan
#columns k and l correspond to columns: col2 and col3 in the optimized logical plan
#columns A and B are used to solve column name conflits

#check for the transivity j < 5001 and k > 4999
query II
EXPLAIN SELECT * FROM (VALUES(5000,5000)) tbl1(i,j), (VALUES(NULL, NULL, 5000, 5000)) tbl2(A, B, k,l) WHERE i>4999 AND j<=l AND k>=i AND l<5001
----
logical_opt	<REGEX>:(((.*\(col1 < 5001\).*)(.*\(col2 > 4999\).*))|((.*\(col2 > 4999\).*)(.*\(col1\) < 5001.*)))

#check for the transivity j > 4999 and k > 4999
query II
EXPLAIN SELECT * FROM (VALUES(5000,5000)) tbl1(i,j), (VALUES(NULL, NULL, 5000, 5000)) tbl2(A, B, k,l) WHERE i>4999 AND j>=i AND k>=j
----
logical_opt	<REGEX>:(((.*\(col1 > 4999\).*)(.*\(col2 > 4999\).*))|((.*\(col2 > 4999\).*)(.*\(col1 > 4999\).*)))

#check for the transivity j > 4999 and k > 4999
query II
EXPLAIN SELECT * FROM (VALUES(5000,5000)) tbl1(i,j), (VALUES(NULL, NULL, 5000, 5000)) tbl2(A, B, k,l) WHERE i>4999 AND k>=j AND j>=i
----
logical_opt	<REGEX>:(((.*\(col1 > 4999\).*)(.*\(col2 > 4999\).*))|((.*\(col2 > 4999\).*)(.*\(col1 > 4999\).*)))

#check for the transivity j > 4999 and k > 4999 and l > 4999
query II
EXPLAIN SELECT * FROM (VALUES(5000,5000)) tbl1(i,j), (VALUES(NULL, NULL, 5000, 5000)) tbl2(A, B, k,l) WHERE i>4999 AND k>=j AND j>=i AND l>=k
----
logical_opt	<REGEX>:((.*\(col2 > 4999\).*)(.*\(col3 > 4999\).*)|(.*\(col3 > 4999\).*)(.*\(col2 > 4999\).*))

#check for the transivity j < 4999 and k < 4999 and l < 4999
query II
EXPLAIN SELECT * FROM (VALUES(5000,5000)) tbl1(i,j), (VALUES(NULL, NULL, 5000, 5000)) tbl2(A, B, k,l) WHERE i<4999 AND k<=j AND j<=i AND l<=k
----
logical_opt	<REGEX>:((.*\(col2 < 4999\).*)(.*\(col3 < 4999\).*)|(.*\(col3 < 4999\).*)(.*\(col2 < 4999\).*))


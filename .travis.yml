env:
  global:
    - CIBW_TEST_REQUIRES='pytest'
    - CIBW_BEFORE_BUILD='pip install --prefer-binary "pandas>=0.24" "pytest>=4.3"'
    - CIBW_BEFORE_TEST='pip install --prefer-binary "pandas>=0.24"'
    - CIBW_TEST_COMMAND='python -m pytest {project}/tests'
    - SETUPTOOLS_SCM_NO_LOCAL=yes
    - TWINE_USERNAME=hfmuehleisen
    - SETUPTOOLS_SCM_DEBUG=please
    - MAKEFLAGS="-j 2"

git:
  depth: false

matrix:
  include:

    # - os: linux
    #   dist: bionic
    #   name: GCC 10
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #         - sourceline: 'ppa:deadsnakes/ppa'

    #       packages:
    #         - g++-10 python3.7

    #   env:
    #     - CC=gcc-10
    #     - CXX=g++-10

    #   script:
    #     - mkdir -p build/release
    #     - python3 scripts/amalgamation.py
    #     - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DDISABLE_UNITY=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1 ../.. && cmake --build .)

    #     - build/release/test/unittest "*"
    #     - python3.7 tools/shell/shell-test.py build/release/duckdb
    #     - python3 tools/rest/test_the_rest.py build/release/tools/rest
    #     - java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
    #     - (cd examples/embedded-c; make)
    #     - (cd examples/embedded-c++; make)
    #     - (cd examples/jdbc; make; make maven)

    #     - zip -j duckdb_cli-linux-amd64.zip build/release/duckdb
    #     - zip -j libduckdb-linux-amd64.zip build/release/src/libduckdb*.so src/amalgamation/duckdb.hpp src/include/duckdb.h
    #     - zip -j libduckdb-src.zip src/amalgamation/duckdb.hpp src/amalgamation/duckdb.cpp src/include/duckdb.h

    #     - python3 scripts/asset-upload.py libduckdb-src.zip libduckdb-linux-amd64.zip duckdb_cli-linux-amd64.zip duckdb_jdbc-linux-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar


    # - os: osx
    #   name: Xcode 11.5
    #   osx_image: xcode11.5
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$)

    #   script:
    #     - mkdir -p build/release
    #     - python3 scripts/amalgamation.py
    #     - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DDISABLE_UNITY=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DJDBC_DRIVER=1 ../.. && travis_wait 30 cmake --build .)

    #     - build/release/test/unittest
    #     - python3 tools/shell/shell-test.py build/release/duckdb
    #     - java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

    #     - zip -j duckdb_cli-osx-amd64.zip build/release/duckdb
    #     - zip -j libduckdb-osx-amd64.zip build/release/src/libduckdb*.dylib src/amalgamation/duckdb.hpp src/include/duckdb.h
    #     - python3 scripts/asset-upload.py libduckdb-osx-amd64.zip duckdb_cli-osx-amd64.zip duckdb_jdbc-osx-amd64.jar=build/release/tools/jdbc/duckdb_jdbc.jar


    # - os: windows
    #   name: VS 2017
    #   filter_secrets: false
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$)

    #   language: c

    #   before_script:
    #     - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
    #     - choco install jdk8 --version 8.0.211 -y --force
    #     - choco install zip -y --force

    #   script:
    #     - C:/Python37-x64/python.exe scripts/amalgamation.py
    #     - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DDISABLE_UNITY=1
    #     - cmake --build . --target duckdb --config Release
    #     - cmake --build . --target unittest --config Release
    #     - cmake --build . --target shell --config Release
    #     - cmake --build . --target jdbc --config Release

    #     - test/Release/unittest.exe
    #     - C:/Python37-x64/python.exe tools/shell/shell-test.py Release/duckdb.exe
    #     - C:/Program\ Files/Java/jdk1.8.0_211/bin/java -cp tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

    #     - zip -j duckdb_cli-windows-amd64.zip Release/duckdb.exe
    #     - zip -j libduckdb-windows-amd64.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
    #     - C:/Python37-x64/python.exe scripts/asset-upload.py libduckdb-windows-amd64.zip duckdb_cli-windows-amd64.zip duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar


# checks: debug mode (with sanitizers), coveralls, valgrind, vector sizes
    # - os: linux
    #   dist: bionic
    #   name: GCC 10 Debug
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #       packages:
    #         - g++-10
    #   env:
    #     - CC=gcc-10
    #     - CXX=g++-10
    #     - TREAT_WARNINGS_AS_ERRORS=1
    #   script:
    #     - make unit

    # - os: linux
    #   dist: bionic
    #   name: GCC 10 UBSAN
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #       packages:
    #         - g++-10
    #   env:
    #     - CC=gcc-10
    #     - CXX=g++-10
    #     - TREAT_WARNINGS_AS_ERRORS=1
    #   script:
    #     - make ubsandebug


    # - os: osx
    #   name: Xcode 11.5 Debug
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)
    #   osx_image: xcode11.5
    #   script:
    #     - make unit


    - os: linux
      dist: bionic
      name: Code Coverage
      if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test

      before_install:
        - pip install --user cpp-coveralls

      script:
        - mkdir -p build/coverage
        - (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DCMAKE_BUILD_TYPE=Debug ../.. && make)
        - build/coverage/test/unittest
        - coveralls -b build/coverage --exclude-pattern '.*CMake.*' --exclude tools --exclude benchmark --exclude examples --exclude third_party --exclude test --exclude src/common/enums --exclude src/parser/transform/helpers/nodetype_to_string.cpp --exclude build/coverage/third_party/libpg_query --exclude build/coverage/third_party/libpg_query/grammar --gcov-options '\-lp' > /dev/null


    # - os: linux
    #   dist: bionic
    #   name: Valgrind
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       packages:
    #         - valgrind

    #   script:
    #     - mkdir -p build/debug
    #     - (cd build/debug && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZER=FALSE ../.. && cmake --build .)
    #     - valgrind ./build/debug/test/unittest -s "Test TPC-H SF0.01"


    # - os: linux
    #   dist: bionic
    #   name: Vector Sizes
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   python: 3.7

    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #   script:
    #     - python3 scripts/test_vector_sizes.py

    # - os: linux
    #   dist: bionic
    #   name: SQLogicTests
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   python: 3.7

    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #   script:
    #     - make sqlite

# old compiler
    # - os: linux
    #   dist: trusty
    #   name: GCC 4.9
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)
    #   addons:
    #      apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #       packages:
    #         - g++-4.9 binutils-2.26
    #   env:
    #     - CC=gcc-4.9
    #     - CXX=g++-4.9
    #   script:
    #     make allunit


# weird platforms: 32 bit linux & windows, arm, solaris, openbsd


    # - os: linux
    #   dist: bionic
    #   name: GCC 10 32 Bit
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #       packages:
    #         - libc6-dev-i386 g++-10-multilib gcc-10-multilib gcc-multilib g++-multilib lib32readline6-dev

    #   env:
    #     - CC=gcc-10
    #     - CXX=g++-10

    #   script:
    #     - python3 scripts/amalgamation.py
    #     - mkdir -p build/release
    #     - (cd build/release && cmake -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DFORCE_32_BIT=1 -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build .)
    #     - build/release/test/unittest "*"

    #     - zip -j libduckdb-linux-i386.zip build/release/src/libduckdb*.so
    #     - zip -j duckdb_cli-linux-i386.zip build/release/duckdb

    #     - python3 scripts/asset-upload.py libduckdb-linux-i386.zip duckdb_cli-linux-i386.zip duckdb_jdbc-linux-i386.jar=build/release/tools/jdbc/duckdb_jdbc.jar


    # - os: windows
    #   name: VS 2017 32 Bit
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   filter_secrets: false

    #   language: c

    #   before_script:
    #     - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
    #     - choco install curl -y --force
    #     - choco install jdk8 --version 8.0.211 --x86 -y --force
    #     - choco install zip -y --force

    #   script:
    #     - C:/Python37-x64/python.exe scripts/amalgamation.py
    #     - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DAMALGAMATION_BUILD=1 -DJDBC_DRIVER=1 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1
    #     - cmake --build . --target duckdb --config Release
    #     - cmake --build . --target unittest --config Release
    #     - cmake --build . --target shell --config Release
    #     - cmake --build . --target jdbc --config Release

    #     - test/Release/unittest.exe
    #     - C:/Python37-x64/python.exe tools/shell/shell-test.py Release/duckdb.exe

    #     - zip -j libduckdb-windows-i386.zip src/Release/duckdb.dll
    #     - zip -j duckdb_cli-windows-i386.zip Release/duckdb.exe
    #     - C:/Python37-x64/python.exe scripts/asset-upload.py duckdb_cli-windows-i386.zip libduckdb-windows-i386.zip duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar


    - os: linux
      dist: xenial
      name: GCC 5 (ARM64), C++11
      if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

      arch: arm64

      script:
        - mkdir -p build/debug
        - (cd build/debug && cmake -DEXPLICIT_EXCEPTIONS=TRUE -DCMAKE_CXX_STANDARD=11 -DCMAKE_BUILD_TYPE=Debug ../.. && cmake --build .)
        - build/debug/test/unittest -s "[tpch]"


    - os: linux
      dist: xenial
      name: GCC 5 (ARM64), C++20
      if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

      arch: arm64

      script:
        - mkdir -p build/debug
        - (cd build/debug && cmake -DEXPLICIT_EXCEPTIONS=TRUE -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Debug ../.. && cmake --build .)
        - build/debug/test/unittest -s "[tpch]"



    # - os: linux
    #   dist: bionic
    #   name: Solaris VM
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)
    #   sudo: true

    #   install:
    #     - wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
    #     - echo -e "\ndeb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib\n" | sudo tee -a /etc/apt/sources.list
    #     - sudo apt-get update > /dev/null
    #     - sudo apt-get install -y linux-headers-$(uname -r) virtualbox-5.2 rsync
    #     - wget -q "https://homepages.cwi.nl/~hannes/86Cv27lf5353lJR/Solaris10_1-13-2.ova"
    #     - VBoxManage import Solaris10_1-13-2.ova
    #     - rm Solaris10_1-13-2.ova
    #     - VBoxManage modifyvm "Solaris10_1-13" --usb off --usbehci off --usbxhci off --cpus 2 --hwvirtex on --memory 6114
    #     - VBoxManage startvm "Solaris10_1-13" --type headless
    #     - echo -e "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEArPN99L/D9jXUwtFjoAzhnzA5a7t/YJiSrcTm+hKSxPp/nklfu1Km\ntDbMBOrXsAqLRcMz5JZoF8G1jebXOO3u2LRB+INFsxqDV76TZjUC1y4SAX17h5UvstT3sn\naPPt+TzwX3PmF8ooN+L8hDIZpvty6m+7b09QRFx4l7+j30MgO+kjwNHUyocn7qokoyH2p4\nfzvtoWePNyL191O9GNg6LmjneG25nN/NBoFYc/Zu+XfDY3gMECNurGHVV3W4ZNpoqjpZWU\nFx4eG0tShBZ+pvuFPy669+H8b5laNEjPGYclInW8unW6T9nuaoQjc/metBwaODgkOsAR0u\nddRxR8nIUwAAA9C2NMXdtjTF3QAAAAdzc2gtcnNhAAABAQCs8330v8P2NdTC0WOgDOGfMD\nlru39gmJKtxOb6EpLE+n+eSV+7Uqa0NswE6tewCotFwzPklmgXwbWN5tc47e7YtEH4g0Wz\nGoNXvpNmNQLXLhIBfXuHlS+y1Peydo8+35PPBfc+YXyig34vyEMhmm+3Lqb7tvT1BEXHiX\nv6PfQyA76SPA0dTKhyfuqiSjIfanh/O+2hZ483IvX3U70Y2DouaOd4bbmc380GgVhz9m75\nd8NjeAwQI26sYdVXdbhk2miqOllZQXHh4bS1KEFn6m+4U/Lrr34fxvmVo0SM8ZhyUidby6\ndbpP2e5qhCNz+Z60HBo4OCQ6wBHS511HFHychTAAAAAwEAAQAAAQEAl3IwnZ0+z96bjG0m\nvAQLngXwgjIRfFieOKPvTpPtCagBEG5X8gSSDcTeKoAqlvDkvBYO3uAGDqeFf9jgJe3T9N\ncD3cW1xvw0fyVWlW1eK2cgRUXIYhV1SzfKHvBKx1eoauRieLGNHhHe8aB/iHFf2hx0BH9V\nSSiQogX2Fk8iAphr9qLuR+M0eMtsZmq9nNpk0iXiohw7b3xNb1QrewoeiXiSI4xANdbkmx\n7R2Jnm132toa+ofPZWbpRptYyzv5TWRhEob4GQSknEvS7NEep3cxnv71d1wQvCfhkMKLXH\nKrIck4X46fLa+65OV8Bq37x91kRagOl4VFBZBT61Y9+DoQAAAIEAltUA8Zx5ETlUOXdGCQ\n+ftbCLZlmlPGGabFdg/EKM+M96Q3sj7L2lIP0Htt5w/HmM3Hz9uLk/d/m20zPq8xkltwCo\nF4R80K5HA38Q26fPRpJzDhch+k7AYuQwjziPSH1uzP3BdQo74KVuyvaTk+9VoeeFslF13P\njflhvUmCyquNkAAACBANtkmGdXwaMHrFKAibQreQuQD9CBRFRDRYNWOP4nPOp7YyCY4xbf\n02kHfFUmf7UqvY36v+jTC4RJ1mJH9KVlqJOB/JLhb6Wrv3xuddcxbwaMwb6dGgsZM+iB7G\nqBlcHlrxnWi6bXXK9WpQWaLNYdE4MKgRvKTSq20glezRWDijznAAAAgQDJzyCedgs5ibpb\nhvtNy5TGXPyX2lI9qoMDV2LSJZhp5TPL/mZqITUrehs0siM9IQ4DqhL4DgKBkYOLI/W6mW\nCXkQVFkGGLovzFUMM/wpK1Ua20k+0XakblI11yK3fjd0XJ0K5FyQ1YzG9XXZ8EuZo/2p2A\n8Y/K54JYuMflOJVftQAAABZoYW5uZXNAZGFrYXIuZGEuY3dpLm5sAQID\n-----END OPENSSH PRIVATE KEY-----\n" > id_rsa_solaris
    #     - chmod 400 id_rsa_solaris
    #     - export SSHFLAGS="-o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_rsa_solaris"
    #     - export SCMD="ssh $SSHFLAGS -p 2222 root@localhost"
    #     - sleep 60
    #     - while ! $SCMD ls ; do sleep 30 ; done
    #     - $SCMD 'bash -c "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"'

    #   script:
    #     - python scripts/amalgamation.py > /dev/null
    #     - rsync -a -e "ssh $SSHFLAGS -p 2222" --exclude=.git --exclude=build --exclude=third_party/sqllogictest --exclude=third_party/imdb .  root@localhost:/duckdb
    #     - travis_wait 50 $SCMD 'rm -rf /duckdb/build && mkdir -p /duckdb/build && cd /duckdb/build && export PATH=/opt/csw/bin/:$PATH CXX=g++ CC=gcc  && cmake -DCMAKE_AR=/opt/csw/bin/gar -DCMAKE_BUILD_TYPE=Debug -DAMALGAMATION_BUILD=1 .. && gmake -j2'
    #     - $SCMD /duckdb/build/test/unittest "~[copy]~[file_system]~[.]"


    # - os: linux
    #   dist: bionic
    #   name: OpenBSD VM
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)
    #   sudo: true

    #   install:
    #     - wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
    #     - echo -e "\ndeb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib\n" | sudo tee -a /etc/apt/sources.list
    #     - sudo apt-get update > /dev/null
    #     - sudo apt-get install -y linux-headers-$(uname -r) virtualbox-5.2 rsync
    #     - wget -q "https://homepages.cwi.nl/~hannes/86Cv27lf5353lJR/OpenBSD.ova"
    #     - VBoxManage import OpenBSD.ova
    #     - rm OpenBSD.ova
    #     - VBoxManage modifyvm "OpenBSD" --usb off --usbehci off --usbxhci off --cpus 2 --hwvirtex on --memory 6114
    #     - VBoxManage startvm "OpenBSD" --type headless
    #     - echo -e "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEA0I/POwsFY/l5DGvybl1amd9pqzP5ADPQGWupcNuKbSYq+sD4g5Jr\nqZ0vG9sULeYlZZFHzdbUqzdbK9rMZZOUwUwHbxViS2UlhCo0onB9bbzm6kQ2gSBaXxa8SC\nwllEdHq6c/kK50MZKVwqpBrxIJtGN08pNauhMPNMdniQZD5slkKrneTgGYnm30xNtkHStB\nY/btURWNlVd8Qedx8gSEV5628cAeKJAPOn4nrCYvy7uMWBOYqrqZii38uxdrhnZKKKENcA\ndUuFRdmFDK/0d+/0PeUYUacZm3HRU5F21440u51OdBMzBYe9AaQXQGrwKwY+YxlczlVh8g\n9XMWYBzJ3wAAA9B959FqfefRagAAAAdzc2gtcnNhAAABAQDQj887CwVj+XkMa/JuXVqZ32\nmrM/kAM9AZa6lw24ptJir6wPiDkmupnS8b2xQt5iVlkUfN1tSrN1sr2sxlk5TBTAdvFWJL\nZSWEKjSicH1tvObqRDaBIFpfFrxILCWUR0erpz+QrnQxkpXCqkGvEgm0Y3Tyk1q6Ew80x2\neJBkPmyWQqud5OAZiebfTE22QdK0Fj9u1RFY2VV3xB53HyBIRXnrbxwB4okA86fiesJi/L\nu4xYE5iqupmKLfy7F2uGdkoooQ1wB1S4VF2YUMr/R37/Q95RhRpxmbcdFTkXbXjjS7nU50\nEzMFh70BpBdAavArBj5jGVzOVWHyD1cxZgHMnfAAAAAwEAAQAAAQB6iVPfQ81p/MRDKRUq\nBM1bhKkH/qQ4mziUBu5psYN2N6ue4kvgueFpqUFpY2FKymKEd0QxyxvucLqvXIEk2P3YR/\nxCJtU2qPnO2iFMozz+gbNGRsejPEf8gFYlLVLy+KJCVySAtA7upUo6MmAfJUDwbFLkxvDS\nTKptfw70seqpJ/CdUXqrd/YAfwqGO0ZgQC59MDTGS1rXViRbTEMOxbWg9TMmvWb36vJG8i\nvSGimXL0gvhB7himZzK0z9tl8r3gHIHpiKy+67tzXyDdzXxpTJ7krBIwVgMgHwZpSy++c6\n9e6ag9LH217gWSDX4C0tAnHhjc5QqlCBwZVe/n2Kyg3pAAAAgQC1zeKHT3XLt9NfBVjhfq\nS3lMByGNCR90RS1vZe+wYVuChFCs7ztraWgMX9n7m3HvaGj+lqDPBD6mkoaYFCqKVr5GcH\nq1fij2sZeEpymhOUjX/aWGr9kdnxkvpSzYt33OU7hQIv34ViSXuyiEVb/SYXxqmwaYhCbW\noAlXqS57U3ZAAAAIEA58ImmEbbHDbA+mUZ1xugtb2heIQyVm+B1FtWtOY3B7LKgfgP5kaw\nhhVAlOfpxSyn/aNWdokE6JsFU/Vs/eiEXmn253ofF0J2kQuVD8+0m+yUMkbDYbfyc9FPsR\n1OS4cqjM8ET77EvLiqIHXO8aWr4eCOJxjDJLC0xVKOicgk/JUAAACBAOZghEZOuUgLjB1K\nQ0kMX+CTNvyKB44eY24kbp22KI4hsEw4BwyqPvCyRZsx7EBGXdGO0giVc41T6WJxwLVCbW\nmG1AC03KQ/lPXf/lzuwT4/N52hw+s4EmHlcPfoPyRFtbZuUyJqlhL4txWZdI31Ot0jxiQK\nxePoxUuMva2261ujAAAAFWhhbm5lc0BoZXJiZXJ0Mi5sb2NhbAECAwQF\n-----END OPENSSH PRIVATE KEY-----\n" > id_rsa_openbsd
    #     - chmod 400 id_rsa_openbsd
    #     - export SSHFLAGS="-o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_rsa_openbsd"
    #     - export SCMD="ssh $SSHFLAGS -p 2222 root@localhost"
    #     - sleep 60
    #     - while ! $SCMD ls ; do sleep 30 ; done
    #     - $SCMD pkg_add gmake rsync-3.1.3

    #   script:
    #     - python scripts/amalgamation.py > /dev/null
    #     - rsync -a -e "ssh $SSHFLAGS -p 2222" --exclude=.git --exclude=build --exclude=third_party/sqllogictest .  root@localhost:/home/duckdb
    #     - travis_wait 60 $SCMD 'rm -rf /home/duckdb/build && mkdir -p /home/duckdb/build && cd /home/duckdb/build && cmake -DCMAKE_BUILD_TYPE=Debug -DAMALGAMATION_BUILD=1 .. && gmake -j2'
    #     - $SCMD /home/duckdb/build/test/unittest "~[copy]~[sqlitelogic]~[sqlserver]~[parquet]~[.]"


# Fuzzing
    # - os: linux
    #   dist: bionic
    #   name: SQLancer
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #       packages:
    #         - g++-10 openjdk-11-jdk openjdk-11-jre

    #   env:
    #     - JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'
    #     - CC=gcc-10
    #     - CXX=g++-10
    #     - MAKEFLAGS=

    #   script:
    #     - export PATH=$JAVA_HOME/bin:$PATH
    #     - mkdir -p build/release
    #     - python3 scripts/amalgamation.py
    #     - (cd build/release && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DJDBC_DRIVER=1 -DBUILD_UNITTESTS=FALSE -DAMALGAMATION_BUILD=1 ../.. && travis_wait 30 cmake --build .)
    #     - java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
    #     - git clone https://github.com/hannesmuehleisen/sqlancer.git
    #     - (cd sqlancer && mvn package -q -DskipTests)
    #     - cp build/release/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
    #     - java -jar sqlancer/target/SQLancer-*.jar --num-queries 1000 --num-threads 1 --random-seed 0 --timeout-seconds 600 duckdb


    # - os: linux
    #   dist: bionic
    #   name: SQLancer (with Address Sanitizer)
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #       packages:
    #         - g++-10 openjdk-11-jdk openjdk-11-jre

    #   env:
    #     - JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64'
    #     - CC=gcc-10
    #     - CXX=g++-10
    #     - MAKEFLAGS=

    #   script:
    #     - export PATH=$JAVA_HOME/bin:$PATH
    #     - mkdir -p build/debug
    #     - (cd build/debug && cmake -DCMAKE_BUILD_TYPE=Debug -DJDBC_DRIVER=1 -DBUILD_UNITTESTS=FALSE -DENABLE_SANITIZER=TRUE ../.. && cmake --build .)
    #     - ASAN_OPTIONS=detect_leaks=0 LD_PRELOAD="/usr/lib/x86_64-linux-gnu/libasan.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6" java -cp build/debug/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
    #     - git clone https://github.com/hannesmuehleisen/sqlancer.git
    #     - (cd sqlancer && mvn package -q -DskipTests)
    #     - cp build/debug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
    #     - ASAN_OPTIONS=detect_leaks=0 LD_PRELOAD="/usr/lib/x86_64-linux-gnu/libasan.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6" java -jar sqlancer/target/SQLancer-*.jar --num-queries 1000 --num-threads 1 --random-seed 0 --timeout-seconds 600 duckdb



# APIs: jdbc/ r / python packages

    # - os: linux
    #   dist: bionic
    #   name: JDBC Compliance
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   addons:
    #     apt:
    #       packages:
    #         - openjdk-8-jdk openjdk-8-jre

    #   env:
    #     - JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64'

    #   script:
    #     - mkdir -p build/release
    #     - (cd build/release && cmake -DCMAKE_BUILD_TYPE=Release -DJDBC_DRIVER=1 -DBUILD_UNITTESTS=FALSE ../.. && cmake --build .)
    #     - java -cp build/release/tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
    #     - git clone https://github.com/cwida/jdbccts.git
    #     - (cd jdbccts && make DUCKDB_JAR=../build/release/tools/jdbc/duckdb_jdbc.jar test)


    # - os: linux
    #   name: Python 3.6 Package
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   dist: bionic
    #   language: python
    #   cache: pip
    #   env:
    #     - CIBW_BUILD='cp36-*'
    #   python: 3.7 # this does not apply to the python for root, there we still run 3.6
    #   filter_secrets: false

    #   addons:
    #     apt:
    #       packages:
    #         - python3-pip python3-wheel python3-numpy python3-wheel

    #   install:
    #     - pip install cibuildwheel==0.10.2 twine

    #   script:
    #     - cd tools/pythonpkg
    #     - python setup.py sdist
    #     - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
    #     - cibuildwheel --output-dir wheelhouse duckdb_tarball
    #     - cd ../..

    #     - |
    #       if [[ $TRAVIS_TAG ]] || ([ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ]) ; then
    #         python -m twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
    #       fi


    # - os: linux
    #   name: Python Package
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$)

    #   dist: bionic
    #   language: python
    #   cache: pip
    #   env:
    #     - CIBW_BUILD='cp37-* cp38-*'
    #   python: 3.7

    #   install:
    #     - pip install cibuildwheel==1.5.5 twine

    #   script:
    #     - sudo python3 --version
    #     - cd tools/pythonpkg
    #     - python setup.py sdist
    #     - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
    #     - cibuildwheel --output-dir wheelhouse duckdb_tarball
    #     - cd ../..
    #     - python3 scripts/asset-upload.py duckdb_python_src.tar.gz=tools/pythonpkg/dist/duckdb-*.tar.gz

    #     - |
    #       if [[ $TRAVIS_TAG ]] || ([ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ]) ; then
    #         python -m twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl tools/pythonpkg/dist/duckdb-*.tar.gz
    #       fi



    # - os: linux
    #   name: Python 2.7 Package
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   dist: bionic
    #   language: python
    #   cache: pip
    #   env:
    #     - CIBW_BUILD='cp27-*'
    #   python: 3.7

    #   install:
    #     - pip install cibuildwheel==0.10.2 twine

    #   script:
    #     - cd tools/pythonpkg
    #     - python setup.py sdist
    #     - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
    #     - cibuildwheel --output-dir wheelhouse duckdb_tarball
        # - cd ../..
        # - |
        #   if [[ $TRAVIS_TAG ]] || ([ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ]) ; then
        #     python -m twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
        #   fi


    # - os: osx
    #   name: Python Package
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   language: generic
    #   osx_image: xcode11.5

    #   env:
    #     - CIBW_BUILD='cp37-* cp38-*'

    #   install:
    #     - curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
    #     - python3 /tmp/get-pip.py
    #     - python3 -m pip install cibuildwheel==1.5.5 twine

    #   script:
    #     - cd tools/pythonpkg
    #     - python3 setup.py sdist
    #     - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
    #     - cibuildwheel --output-dir wheelhouse duckdb_tarball
    #     - cd ../..
    #     - |
    #       if [[ $TRAVIS_TAG ]] || ([ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ]) ; then
    #         twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
    #       fi


    # - os: windows
    #   name: Python Package
    #   if: (branch !~ ^r/.*$ AND head_branch !~ ^r/.*$) AND ((type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/)

    #   language: cpp
    #   filter_secrets: false
    #   # no python 27 because no C++11 support in its windows toolchain
    #   env:
    #     - CIBW_BUILD='cp36-* cp37-* cp38-*'

    #   install:
    #     - choco install python --version 3.8.6
    #     - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
    #     - python -m pip install cibuildwheel twine

    #   script:
    #     - cd tools/pythonpkg
    #     - python setup.py sdist
    #     - mkdir duckdb_tarball && tar xvf dist/duckdb-*.tar.gz --strip-components=1 -C duckdb_tarball
    #     - python -m cibuildwheel --platform windows --output-dir wheelhouse duckdb_tarball
    #     - cd ../..
    #     - |
    #       if [[ $TRAVIS_TAG ]] || ([ $TRAVIS_BRANCH = master ] && [ $TRAVIS_PULL_REQUEST = false ]) ; then
    #         python -m twine upload --non-interactive --disable-progress-bar --skip-existing tools/pythonpkg/wheelhouse/*.whl
    #       fi


    # - os: linux
    #   name: R Package
    #   if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/

    #   dist: bionic
    #   language: r
    #   r: devel
    #   cache: packages
    #   warnings_are_errors: true

    #   before_install:
    #     - mkdir -p $HOME/.R && echo -e 'CC=ccache gcc\nCXX=ccache g++\nCXX11=ccache g++\n' > $HOME/.R/Makevars
    #     - cd tools/rpkg

    #   script:
    #     - ./configure
    #     - R CMD build .
    #     - R CMD INSTALL duckdb_*.tar.gz
    #     - (cd tests && R -f testthat.R)
    #     - R CMD check --as-cran -o /tmp duckdb_*.tar.gz
    #     - python3 ../../scripts/asset-upload.py duckdb_r_src.tar.gz=duckdb_*.tar.gz

    # disabled for now bcause of constant timeouts during setup (i.e. we can't use travis_wait there)
    # - os: osx
    #   osx_image: xcode11.5
    #   name: R Package
    #   if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/

    #   language: r

    #   before_install:
    #     - cd tools/rpkg

    #   script:
    #     - ./configure
    #     - R CMD build .
    #     - R CMD INSTALL --build duckdb_*.tar.gz
    #     - (cd tests && R -f testthat.R)
    #     - python3 ../../scripts/asset-upload.py duckdb_r_osx.tgz=duckdb_*.tgz


    # - os: windows
    #   name: R Package
    #   filter_secrets: false
    #   if: (type = push AND branch = master) OR type = pull_request OR tag =~ /^v\d+\.\d+\.\d+$/

    #   language: cpp

    #   before_install:
    #     - choco install r.project -y
    #     - choco install rtools -y
    #     - choco install python3 --version 3.7.3 -y --params "/InstallDir:C:\Python37-x64"
    #     - export R_VER=$(choco info r -r | grep -o "[0-9].[0-9].[0-9]")
    #     - export "PATH=$PATH:/c/Program Files/R/R-$R_VER/bin/"
    #     - cd tools/rpkg
    #     - R -f dependencies.R

    #   script:
    #     - sh configure
    #     - sh build_win
    #     - (cd tests && R -f testthat.R)
    #     - C:/Python37-x64/python.exe ../../scripts/asset-upload.py duckdb_r_windows.zip=duckdb_*.zip


name: Windows
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
 win-release-64:
    name: Windows (64 Bit)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Build
      run: |
        python scripts/windows_ci.py
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1
        cmake --build . --config Release

    - name: Test
      run: test/Release/unittest.exe

    - name: Tools Test
      run: |
        python tools/shell/shell-test.py Release/duckdb.exe
        java -cp tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC

    - name: Deploy
      run: |
        python scripts/amalgamation.py
        choco install zip -y --force
        zip -j duckdb_cli-windows-amd64.zip Release/duckdb.exe
        zip -j libduckdb-windows-amd64.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
        zip -j duckdb_odbc-windows-amd64.zip tools/odbc/bin/Release/*
        python scripts/asset-upload-gha.py libduckdb-windows-amd64.zip duckdb_cli-windows-amd64.zip duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar duckdb_odbc-windows-amd64.zip

    - uses: actions/upload-artifact@v2
      with:
        name: duckdb-binaries-windows
        path: |
          libduckdb-windows-amd64.zip
          duckdb_cli-windows-amd64.zip
          tools/jdbc/duckdb_jdbc.jar

    - uses: ilammy/msvc-dev-cmd@v1
    - name: Duckdb.dll export symbols with C++ on Windows
      run: cl -I src/include examples/embedded-c++-windows/cppintegration.cpp -link src/Release/duckdb.lib

 win-release-32:
    name: Windows (32 Bit)
    runs-on: windows-latest
    needs: win-release-64

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Build
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1
        cmake --build . --config Release

    - name: Test
      run: test/Release/unittest.exe

    - name: Tools Test
      run: |
        python tools/shell/shell-test.py Release/duckdb.exe

    - name: Deploy
      run: |
        python scripts/amalgamation.py
        choco install zip -y --force
        zip -j duckdb_cli-windows-i386.zip Release/duckdb.exe
        zip -j libduckdb-windows-i386.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
        python scripts/asset-upload-gha.py libduckdb-windows-i386.zip duckdb_cli-windows-i386.zip duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar

    - uses: actions/upload-artifact@v2
      with:
        name: duckdb-binaries-windows
        path: |
          libduckdb-windows-i386.zip
          duckdb_cli-windows-i386.zip
          tools/jdbc/duckdb_jdbc.jar


 mingw:
     name: MingW (64 Bit)
     runs-on: windows-latest
     needs: win-release-64
     defaults:
       run:
         shell: msys2 {0}
     steps:
       - uses: actions/checkout@v2
       - uses: msys2/setup-msys2@v2
         with:
           msystem: MINGW64
           update: true
           install: git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja git
       # see here: https://gist.github.com/scivision/1de4fd6abea9ba6b2d87dc1e86b5d2ce
       - name: Put MSYS2_MinGW64 on PATH
         # there is not yet an environment variable for this path from msys2/setup-msys2
         run: export PATH=D:/a/_temp/msys/msys64/mingw64/bin:$PATH

       - name: Build
         run: |
           cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_PARQUET_EXTENSION=1
           cmake --build . --config Release

       - name: Test
         run: |
           cp src/libduckdb.dll .
           test/unittest.exe

 odbc-win-64:
    name: ODBC Windows
    runs-on: windows-latest
    needs: win-release-64
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Build
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1
        cmake --build . --config Release

    - name: Install ODBC Driver
      run:  |
        tools/odbc/bin/Release/odbc_install.exe //CI //Install
        Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\ODBC Data Sources"
        Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\DuckDB"
        Reg Query "HKLM\SOFTWARE\ODBC\ODBCINST.INI\DuckDB Driver"

    - name: Enable ODBC Trace HKCU
      run: |
        REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //f
        REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v Trace //t REG_SZ //d 1
        REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceDll //t REG_SZ //d "C:\Windows\system32\odbctrac.dll"
        REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceFile //t REG_SZ //d "D:\a\duckdb\duckdb\ODBC_TRACE.log"
        echo "----------------------------------------------------------------"
        Reg Query "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC"

    - name: Install psqlodbc
      run: |
        curl -L https://github.com/Mytherin/psqlodbc/archive/refs/heads/main.zip -o psqlodbc-main.zip
        unzip psqlodbc-main.zip
        (cd psqlodbc-main && make release)

    - name: Test psqlodbc
      run: |
        cd psqlodbc-main
        export PSQLODBC_TEST_DSN=DuckDB
        build/release/Release/psql_odbc_test.exe -f ../tools/odbc/test/psql_supported_tests

    - name: Print ODBC trace on failure
      if: ${{ failure() }}
      run: cat ODBC_TRACE.log

 win-extensions-64:
   name: Windows Extensions (64-bit)
   runs-on: windows-latest
   needs: win-release-64
   env:
     BUILD_VISUALIZER: 1
     BUILD_ICU: 1
     BUILD_TPCH: 1
     BUILD_TPCDS: 1
     BUILD_FTS: 1
     BUILD_HTTPFS: 1
     STATIC_OPENSSL: 1
     AWS_ACCESS_KEY_ID: ${{secrets.S3_ID}}
     AWS_SECRET_ACCESS_KEY: ${{secrets.S3_KEY}}
     AWS_DEFAULT_REGION: us-east-1
   steps:
     - uses: actions/checkout@v2
       with:
         fetch-depth: 0

     - uses: actions/setup-python@v2
       with:
         python-version: '3.7'

     - name: Install OpenSSL
       run: |
         choco install openssl -y --force

     - name: Build
       run: |
         make

     - name: Uninstall OpenSSL
       run: |
         choco uninstall openssl -y --force

     - name: Deploy
       run: |
         if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ && "$GITHUB_REPOSITORY" = "duckdb/duckdb" ]] ; then
           pip install awscli
           ./scripts/extension-upload.sh windows_amd64
           ./scripts/extension-upload-test.sh
         else
           ./scripts/extension-upload-test.sh local
         fi

name: LinuxRelease
on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - '**'
      - '!main'
      - '!feature'
    tags:
      - '**'
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

concurrency:
  group: linuxrelease-${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}-${{ inputs.override_git_describe }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}

jobs:
 linux-release:
    strategy:
      fail-fast: false
      matrix:
        config: [ { runner: ubuntu-latest, arch: amd64, image: x86_64}, {runner: ubuntu-24.04-arm, arch: arm64, image: aarch64}]

    name: Linux Build (${{ matrix.config.arch }})
    runs-on: ${{ matrix.config.runner }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.git_ref }}

    - name: Install pytest
      run: |
        python3 -m pip install pytest

    - name: Build
      shell: bash
      run: |
        export PWD=`pwd`
        docker run                                                             \
        -v$PWD:$PWD                                                            \
        -e CMAKE_BUILD_PARALLEL_LEVEL=2                                        \
        -e OVERRIDE_GIT_DESCRIBE=$OVERRIDE_GIT_DESCRIBE                        \
        -e EXTENSION_CONFIGS="$PWD/.github/config/bundled_extensions.cmake"    \
        -e ENABLE_EXTENSION_AUTOLOADING=1                                      \
        -e ENABLE_EXTENSION_AUTOINSTALL=1                                      \
        -e BUILD_BENCHMARK=1                                                   \
        -e FORCE_WARN_UNUSED=1                                                 \
        quay.io/pypa/manylinux_2_28_${{ matrix.config.image }}                  \
        bash -c "
          set -e

          yum install -y perl-IPC-Cmd gcc-toolset-12 gcc-toolset-12-gcc-c++ zip

          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          ./vcpkg install librdkafka

          export CMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake
          export VCPKG_TOOLCHAIN_PATH=/vcpkg/scripts/buildsystems/vcpkg.cmake

          git config --global --add safe.directory $PWD
          make -C $PWD
        "

    - name: Print platform
      shell: bash
      run: ./build/release/duckdb -c "PRAGMA platform;"

    - name: Deploy
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
      run: |
        zip -j duckdb_cli-linux-${{ matrix.config.arch }}.zip build/release/duckdb
        gzip -9 -k -n -c build/release/duckdb > duckdb_cli-linux-${{ matrix.config.arch }}.gz
        zip -j libduckdb-linux-${{ matrix.config.arch }}.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h
        ./scripts/upload-assets-to-staging.sh github_release libduckdb-linux-${{ matrix.config.arch }}.zip duckdb_cli-linux-${{ matrix.config.arch }}.zip duckdb_cli-linux-${{ matrix.config.arch }}.gz

    - uses: actions/upload-artifact@v4
      with:
        name: duckdb-binaries-linux-${{ matrix.config.arch }}
        path: |
          libduckdb-linux-${{ matrix.config.arch }}.zip
          duckdb_cli-linux-${{ matrix.config.arch }}.zip
          duckdb_cli-linux-${{ matrix.config.arch }}.gz
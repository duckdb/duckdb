name: LinuxRelease
on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - '**'
      - '!main'
      - '!feature'
    tags:
      - '**'
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

concurrency:
  group: linuxrelease-${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}-${{ inputs.override_git_describe }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  OVERRIDE_GIT_DESCRIBE: ${{ inputs.override_git_describe }}

jobs:
 linux-release:
    # needs: linux-extensions-64

    strategy:
      fail-fast: false
      matrix:
        config: [ { runner: ubuntu-latest, arch: amd64, image: x86_64}, {runner: ubuntu-24.04-arm, arch: arm64, image: aarch64}]

    name: Linux Build (${{ matrix.config.arch }})
    runs-on: ${{ matrix.config.runner }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.git_ref }}

    - name: Install pytest
      run: |
        python3 -m pip install pytest

    - name: Build
      shell: bash
      run: |
        export PWD=`pwd`
        docker run                                                             \
        -v$PWD:$PWD                                                            \
        -e CMAKE_BUILD_PARALLEL_LEVEL=2                                        \
        -e OVERRIDE_GIT_DESCRIBE=$OVERRIDE_GIT_DESCRIBE                        \
        -e EXTENSION_CONFIGS="$PWD/.github/config/bundled_extensions.cmake"    \
        -e ENABLE_EXTENSION_AUTOLOADING=1                                      \
        -e ENABLE_EXTENSION_AUTOINSTALL=1                                      \
        -e BUILD_BENCHMARK=1                                                   \
        -e FORCE_WARN_UNUSED=1                                                 \
        quay.io/pypa/manylinux_2_28_${{ matrix.config.image }}                  \
        bash -c "
          set -e

          yum install -y perl-IPC-Cmd gcc-toolset-12 gcc-toolset-12-gcc-c++ zip

          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          ./vcpkg install librdkafka

          export CMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake
          export VCPKG_TOOLCHAIN_PATH=/vcpkg/scripts/buildsystems/vcpkg.cmake

          git config --global --add safe.directory $PWD
          make -C $PWD
        "

    - name: Print platform
      shell: bash
      run: ./build/release/duckdb -c "PRAGMA platform;"

    - name: Deploy
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}
      run: |
        zip -j duckdb_cli-linux-${{ matrix.config.arch }}.zip build/release/duckdb
        gzip -9 -k -n -c build/release/duckdb > duckdb_cli-linux-${{ matrix.config.arch }}.gz
        zip -j libduckdb-linux-${{ matrix.config.arch }}.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h
        ./scripts/upload-assets-to-staging.sh github_release libduckdb-linux-${{ matrix.config.arch }}.zip duckdb_cli-linux-${{ matrix.config.arch }}.zip duckdb_cli-linux-${{ matrix.config.arch }}.gz

    - uses: actions/upload-artifact@v4
      with:
        name: duckdb-binaries-linux-${{ matrix.config.arch }}
        path: |
          libduckdb-linux-${{ matrix.config.arch }}.zip
          duckdb_cli-linux-${{ matrix.config.arch }}.zip
          duckdb_cli-linux-${{ matrix.config.arch }}.gz      


# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
#   cancel-in-progress: true

# env:
#   GH_TOKEN: ${{ secrets.GH_TOKEN }}

# jobs:
#   # linux-release-64:
#   #   # Builds binaries for linux_amd64_gcc4
#   #   name: Linux (x64)
#   #   runs-on: ubuntu-latest
#   #   container: quay.io/pypa/manylinux_2_28_x86_64:2025.03.29-1
#   #   env:
#   #     EXTENSION_CONFIGS: '${GITHUB_WORKSPACE}/.github/config/bundled_extensions.cmake'
#   #     ENABLE_EXTENSION_AUTOLOADING: 1
#   #     ENABLE_EXTENSION_AUTOINSTALL: 1
#   #     GEN: ninja
#   #     BUILD_BENCHMARK: 1
#   #     FORCE_WARN_UNUSED: 1
#   #     DUCKDB_RUN_PARALLEL_CSV_TESTS: 1
#   #     ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
#   #     VCPKG_HOST_TRIPLET: x64-linux
#   #     VCPKG_TARGET_TRIPLET: x64-linux

#   #   steps:
#   #     - uses: actions/checkout@v2
#   #       with:
#   #         fetch-depth: 0

#   #     - uses: ./.github/actions/manylinux_2014_setup
        
#   #       with:
#   #         ninja-build: 1
#   #         ccache: 1
#   #         python_alias: 1
#   #         vcpkg: 1
#   #         librdkafka: 1

#   #     - name: Install pytest
#   #       run: |
#   #         python3 -m pip install pytest
#   #         cmake --version

#   #     - name: Build
#   #       shell: bash
#   #       run:   VCPKG_TOOLCHAIN_PATH='${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake' make

#   #     - name: Print platform
#   #       shell: bash
#   #       run: ./build/release/duckdb -c "PRAGMA platform;"

#   #     - name: Deploy
#   #       shell: bash
#   #       run: |
#   #         python3 scripts/amalgamation.py
#   #         zip -j duckdb_cli-linux-amd64.zip build/release/duckdb
#   #         zip -j libduckdb-linux-amd64.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h
#   #         zip -j libduckdb-src.zip src/amalgamation/duckdb.hpp src/amalgamation/duckdb.cpp src/include/duckdb.h
#   #         python3 scripts/asset-upload-gha.py libduckdb-src.zip libduckdb-linux-amd64.zip duckdb_cli-linux-amd64.zip

#   #     - uses: actions/upload-artifact@v4
#   #       with:
#   #         name: duckdb-binaries-linux
#   #         path: |
#   #           libduckdb-linux-amd64.zip
#   #           duckdb_cli-linux-amd64.zip

#   linux-release-aarch64:
#     # Builds binaries for linux_arm64
#     name: Linux (aarch64)
#     runs-on: ubuntu-24.04-arm
#     # needs: linux-release-64
#     container:
#       image: quay.io/pypa/manylinux_2_28_aarch64:2025.03.29-1
#       # image: ubuntu:18.04
#       # volumes:
#       #   - /node20217:/node20217:rw,rshared
#       #   - /node20217:/__e/node20:ro,rshared
#     env:
#       EXTENSION_CONFIGS: '${GITHUB_WORKSPACE}/.github/config/bundled_extensions.cmake'
#       ENABLE_EXTENSION_AUTOLOADING: 1
#       ENABLE_EXTENSION_AUTOINSTALL: 1
#       GEN: ninja
#       BUILD_BENCHMARK: 1
#       TREAT_WARNINGS_AS_ERRORS: 1
#       FORCE_WARN_UNUSED: 1
#       DUCKDB_PLATFORM: linux_arm64
#       ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

#     steps:
#       # - name: install node20 with glibc 2.17
#       #   shell: bash
#       #   run: |
#       #     apt-get update && apt-get install xz-utils
#       #     ls /node20217
#       #     echo "done with ls"
#       #     ldd --version
#       #     apt update && apt -y install curl
#       #     curl --output node-v20.9.0-linux-x64-glibc-217.tar.xz https://unofficial-builds.nodejs.org/download/release/v20.9.0/node-v20.9.0-linux-x64-glibc-217.tar.xz
#       #     tar -xJf ./node-v20.9.0-linux-x64-glibc-217.tar.xz --strip-components 1 -C /node20217
#       #     ls /node20217
#       #     ldd /node20217/bin/node

#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - uses: ./.github/actions/manylinux_2014_setup
        
#         with:
#           ninja-build: 1
#           ccache: 1
#           python_alias: 1
#           vcpkg: 1
#           librdkafka: 1
#       # - uses: ./.github/actions/ubuntu_18_setup
#       #   with:
#       #     ccache: 1
#       #     aarch64_cross_compile: 1
#       #     vcpkg: 1

#       - name: Build
#         shell: bash
#         env:
#           CMAKE_TOOLCHAIN_FILE: ${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake
#           VCPKG_TOOLCHAIN_PATH: ${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake
#           VCPKG_HOST_TRIPLET: x64-linux
#           VCPKG_TARGET_TRIPLET: arm64-linux
#         run: |
#           $VCPKG_ROOT/vcpkg install librdkafka:arm64-linux
#           CMAKE_SYSTEM_ARCH=aarch64 CPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64 CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=arm64 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ make

#       - name: Deploy
#         shell: bash
#         run: |
#           python3 scripts/amalgamation.py
#           zip -j duckdb_cli-linux-aarch64.zip build/release/duckdb
#           zip -j libduckdb-linux-aarch64.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h
#           python3 scripts/asset-upload-gha.py libduckdb-linux-aarch64.zip duckdb_cli-linux-aarch64.zip

#       - uses: actions/upload-artifact@v4
#         with:
#           name: duckdb-binaries-linux-aarch64
#           path: |
#             libduckdb-linux-aarch64.zip
#             duckdb_cli-linux-aarch64.zip

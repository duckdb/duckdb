name: R
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
  rstats-linux:
    name: R Package Linux
    runs-on: ubuntu-20.04

    env:
      LIBARROW_BINARY : 'false'
      ARROW_RUNTIME_SIMD_LEVEL : 'AVX2'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - uses: r-lib/actions/setup-r@v1
      with:
        r-version: 'devel'

    - name: Install
      env:
        GITHUB_PAT: ${{ github.token }}
      run: |
        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev valgrind pandoc
        mkdir -p $HOME/.R
        R -f tools/rpkg/dependencies.R

    - name: Prepare
      run: |
        cd tools/rpkg
        ./configure
        R CMD build .

    - name: Tests
      run: |
        cd tools/rpkg
        R CMD INSTALL -d duckdb_*.tar.gz
        (cd tests && R -f testthat.R)

    - name: R CMD check
      run: |
        cd tools/rpkg
        R CMD check --as-cran -o /tmp duckdb_*.tar.gz
        if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi

    - name: Valgrind
      run: |
        cd tools/rpkg
        export NOT_CRAN='false'
        R CMD check --use-valgrind -o /tmp duckdb_*.tar.gz

    - name: Coverage
      env:
        DUCKDB_R_DEBUG: 1
      run: |
        pkgload::load_all("tools/rpkg")
        cov <- covr::codecov("tools/rpkg", relative_path = ".")
      shell: Rscript {0}

    - name: Print R log on failure
      if: ${{ failure() }}
      run: |
        ls -R /tmp/duckdb.Rcheck
        cat /tmp/duckdb.Rcheck/00check.log
        cat /tmp/duckdb.Rcheck/tests/testthat.Rout.fail

    - name: Deploy
      run: python scripts/asset-upload-gha.py duckdb_r_src.tar.gz=tools/rpkg/duckdb_*.tar.gz

  rstats-windows:
    name: R Package Windows
    runs-on: windows-latest
    needs: rstats-linux

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - uses: r-lib/actions/setup-r@v1
      with:
        r-version: 'devel'

    - name: Install
      run: |
        R -f tools/rpkg/dependencies.R

    - name: Build
      run: |
        cd tools/rpkg
        ./configure
        R CMD build .
        R CMD INSTALL duckdb_*.tar.gz
        (cd tests && R -f testthat.R)
        R CMD check --as-cran --no-manual -o /tmp duckdb_*.tar.gz
        if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi

  rubsan:
    name: R UBSAN
    runs-on: ubuntu-latest
    needs: rstats-linux

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Run
      run: |
        (cd tools/rpkg && ./configure && R CMD build .)
        docker run -v `pwd`:/duckdb --cap-add SYS_PTRACE wch1/r-debug:latest bash -c "mkdir -p ~/.R && echo -e \"PKG_CFLAGS=-fno-sanitize-recover=all\\nPKG_CXXFLAGS=-fno-sanitize-recover=all\" > ~/.R/Makevars && export CMAKE_UNITY_BUILD=OFF ARROW_R_DEV=TRUE LIBARROW_BINARY=true && cd /duckdb/tools/rpkg/ && RDsan -f dependencies.R && RDsan CMD INSTALL duckdb_*.tar.gz && cd tests && UBSAN_OPTIONS=print_stacktrace=1 RDsan -f testthat.R"

    - name: Print R log on failure
      if: ${{ failure() }}
      run: |
        cat duckdb.Rcheck/00check.log
        cat duckdb.Rcheck/tests/testthat.Rout.fail

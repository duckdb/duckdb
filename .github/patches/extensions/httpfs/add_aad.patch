diff --git a/extension/httpfs/crypto.cpp b/extension/httpfs/crypto.cpp
index 04bd795..0fe6be8 100644
--- a/extension/httpfs/crypto.cpp
+++ b/extension/httpfs/crypto.cpp
@@ -78,20 +78,34 @@ void AESStateSSL::GenerateRandomData(data_ptr_t data, idx_t len) {
 	RAND_bytes(data, len);
 }
 
-void AESStateSSL::InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const string *key) {
+void AESStateSSL::InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const string *key, const_data_ptr_t aad, idx_t aad_len) {
 	mode = ENCRYPT;
 
 	if (1 != EVP_EncryptInit_ex(context, GetCipher(*key), NULL, const_data_ptr_cast(key->data()), iv)) {
 		throw InternalException("EncryptInit failed");
 	}
+	
+	int len;
+	if (aad_len > 0){
+		if (!EVP_DecryptUpdate(context, NULL, &len, aad, aad_len)) {
+    			throw InternalException("Setting Additional Authenticated Data  failed");
+		}
+	}	
 }
 
-void AESStateSSL::InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const string *key) {
+void AESStateSSL::InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const string *key, const_data_ptr_t aad, idx_t aad_len) {
 	mode = DECRYPT;
 
 	if (1 != EVP_DecryptInit_ex(context, GetCipher(*key), NULL, const_data_ptr_cast(key->data()), iv)) {
 		throw InternalException("DecryptInit failed");
 	}
+
+	int len;
+        if (aad_len > 0){
+                if (!EVP_DecryptUpdate(context, NULL, &len, aad, aad_len)) {
+                        throw InternalException("Setting Additional Authenticated Data  failed");
+                }
+	}
 }
 
 size_t AESStateSSL::Process(const_data_ptr_t in, idx_t in_len, data_ptr_t out, idx_t out_len) {
diff --git a/extension/httpfs/include/crypto.hpp b/extension/httpfs/include/crypto.hpp
index f819356..eaa850e 100644
--- a/extension/httpfs/include/crypto.hpp
+++ b/extension/httpfs/include/crypto.hpp
@@ -29,8 +29,8 @@ public:
 	~AESStateSSL() override;
 
 public:
-	void InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key) override;
-	void InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key) override;
+	void InitializeEncryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key, const_data_ptr_t aad, idx_t aad_len) override;
+	void InitializeDecryption(const_data_ptr_t iv, idx_t iv_len, const std::string *key, const_data_ptr_t aad, idx_t aad_len) override;
 	size_t Process(const_data_ptr_t in, idx_t in_len, data_ptr_t out, idx_t out_len) override;
 	size_t Finalize(data_ptr_t out, idx_t out_len, data_ptr_t tag, idx_t tag_len) override;
 	void GenerateRandomData(data_ptr_t data, idx_t len) override;

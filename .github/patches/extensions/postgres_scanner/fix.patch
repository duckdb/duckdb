diff --git a/src/include/postgres_scanner_extension.hpp b/src/include/postgres_scanner_extension.hpp
index ccf7b84..e0c2687 100644
--- a/src/include/postgres_scanner_extension.hpp
+++ b/src/include/postgres_scanner_extension.hpp
@@ -13,11 +13,9 @@ public:
 	std::string Name() override {
 		return "postgres_scanner";
 	}
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 };
 
 extern "C" {
-DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db);
-DUCKDB_EXTENSION_API const char *postgres_scanner_version();
-DUCKDB_EXTENSION_API void postgres_scanner_storage_init(DBConfig &config);
+DUCKDB_CPP_EXTENSION_ENTRY(postgres_scanner, loader);
 }
diff --git a/src/include/storage/postgres_delete.hpp b/src/include/storage/postgres_delete.hpp
index 28fb86e..e709cee 100644
--- a/src/include/storage/postgres_delete.hpp
+++ b/src/include/storage/postgres_delete.hpp
@@ -14,7 +14,7 @@ namespace duckdb {
 
 class PostgresDelete : public PhysicalOperator {
 public:
-	PostgresDelete(LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index);
+	PostgresDelete(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index);
 
 	//! The table to delete from
 	TableCatalogEntry &table;
diff --git a/src/include/storage/postgres_index.hpp b/src/include/storage/postgres_index.hpp
index 2096d84..9e55535 100644
--- a/src/include/storage/postgres_index.hpp
+++ b/src/include/storage/postgres_index.hpp
@@ -16,7 +16,7 @@ namespace duckdb {
 //! PhysicalCreateSequence represents a CREATE SEQUENCE command
 class PostgresCreateIndex : public PhysicalOperator {
 public:
-	explicit PostgresCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
+	explicit PostgresCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
 
 	unique_ptr<CreateIndexInfo> info;
 	TableCatalogEntry &table;
diff --git a/src/include/storage/postgres_insert.hpp b/src/include/storage/postgres_insert.hpp
index 13ea902..4499315 100644
--- a/src/include/storage/postgres_insert.hpp
+++ b/src/include/storage/postgres_insert.hpp
@@ -16,9 +16,9 @@ namespace duckdb {
 class PostgresInsert : public PhysicalOperator {
 public:
 	//! INSERT INTO
-	PostgresInsert(LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
+	PostgresInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
 	//! CREATE TABLE AS
-	PostgresInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
+	PostgresInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
 
 	//! The table to insert into
 	optional_ptr<TableCatalogEntry> table;
diff --git a/src/include/storage/postgres_update.hpp b/src/include/storage/postgres_update.hpp
index 417657e..f6b5d88 100644
--- a/src/include/storage/postgres_update.hpp
+++ b/src/include/storage/postgres_update.hpp
@@ -15,7 +15,7 @@ namespace duckdb {
 
 class PostgresUpdate : public PhysicalOperator {
 public:
-	PostgresUpdate(LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns);
+	PostgresUpdate(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns);
 
 	//! The table to delete from
 	TableCatalogEntry &table;
diff --git a/src/postgres_extension.cpp b/src/postgres_extension.cpp
index d8f46e8..dd5ca0e 100644
--- a/src/postgres_extension.cpp
+++ b/src/postgres_extension.cpp
@@ -8,7 +8,7 @@
 
 #include "duckdb/catalog/catalog.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/main/database_manager.hpp"
 #include "duckdb/main/attached_database.hpp"
@@ -122,27 +122,27 @@ void SetPostgresNullByteReplacement(ClientContext &context, SetScope scope, Valu
 	}
 }
 
-static void LoadInternal(DatabaseInstance &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	PostgresScanFunction postgres_fun;
-	ExtensionUtil::RegisterFunction(db, postgres_fun);
-
+	loader.RegisterFunction(postgres_fun);
+	
 	PostgresScanFunctionFilterPushdown postgres_fun_filter_pushdown;
-	ExtensionUtil::RegisterFunction(db, postgres_fun_filter_pushdown);
+	loader.RegisterFunction(postgres_fun_filter_pushdown);
 
 	PostgresAttachFunction attach_func;
-	ExtensionUtil::RegisterFunction(db, attach_func);
+	loader.RegisterFunction(attach_func);
 
 	PostgresClearCacheFunction clear_cache_func;
-	ExtensionUtil::RegisterFunction(db, clear_cache_func);
+	loader.RegisterFunction(clear_cache_func);
 
 	PostgresQueryFunction query_func;
-	ExtensionUtil::RegisterFunction(db, query_func);
+	loader.RegisterFunction(query_func);
 
 	PostgresExecuteFunction execute_func;
-	ExtensionUtil::RegisterFunction(db, execute_func);
+	loader.RegisterFunction(execute_func);
 
 	PostgresBinaryCopyFunction binary_copy;
-	ExtensionUtil::RegisterFunction(db, binary_copy);
+	loader.RegisterFunction(binary_copy);
 
 	// Register the new type
 	SecretType secret_type;
@@ -150,13 +150,13 @@ static void LoadInternal(DatabaseInstance &db) {
 	secret_type.deserializer = KeyValueSecret::Deserialize<KeyValueSecret>;
 	secret_type.default_provider = "config";
 
-	ExtensionUtil::RegisterSecretType(db, secret_type);
+	loader.RegisterSecretType(secret_type);
 
 	CreateSecretFunction postgres_secret_function = {"postgres", "config", CreatePostgresSecretFunction};
 	SetPostgresSecretParameters(postgres_secret_function);
-	ExtensionUtil::RegisterFunction(db, postgres_secret_function);
+	loader.RegisterFunction(postgres_secret_function);
 
-	auto &config = DBConfig::GetConfig(db);
+	auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 	config.storage_extensions["postgres_scanner"] = make_uniq<PostgresStorageExtension>();
 
 	config.AddExtensionOption("pg_use_binary_copy", "Whether or not to use BINARY copy to read data",
@@ -187,26 +187,19 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.optimizer_extensions.push_back(std::move(postgres_optimizer));
 
 	config.extension_callbacks.push_back(make_uniq<PostgresExtensionCallback>());
-	for (auto &connection : ConnectionManager::Get(db).GetConnectionList()) {
+	for (auto &connection : ConnectionManager::Get(loader.GetDatabaseInstance()).GetConnectionList()) {
 		connection->registered_state->Insert("postgres_extension", make_shared_ptr<PostgresExtensionState>());
 	}
 }
 
-void PostgresScannerExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void PostgresScannerExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
-}
-
-DUCKDB_EXTENSION_API const char *postgres_scanner_version() {
-	return DuckDB::LibraryVersion();
+DUCKDB_CPP_EXTENSION_ENTRY(postgres_scanner, loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API void postgres_scanner_storage_init(DBConfig &config) {
-	config.storage_extensions["postgres_scanner"] = make_uniq<PostgresStorageExtension>();
-}
 }
diff --git a/src/postgres_scanner.cpp b/src/postgres_scanner.cpp
index 9b2d062..d49d8a3 100644
--- a/src/postgres_scanner.cpp
+++ b/src/postgres_scanner.cpp
@@ -2,7 +2,7 @@
 
 #include <libpq-fe.h>
 
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/shared_ptr.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
diff --git a/src/storage/postgres_delete.cpp b/src/storage/postgres_delete.cpp
index 88dec2c..7aa13db 100644
--- a/src/storage/postgres_delete.cpp
+++ b/src/storage/postgres_delete.cpp
@@ -8,8 +8,8 @@
 
 namespace duckdb {
 
-PostgresDelete::PostgresDelete(LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(table), row_id_index(row_id_index) {
+PostgresDelete::PostgresDelete(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(table), row_id_index(row_id_index) {
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/storage/postgres_index.cpp b/src/storage/postgres_index.cpp
index 5ce5b36..22ed8b4 100644
--- a/src/storage/postgres_index.cpp
+++ b/src/storage/postgres_index.cpp
@@ -11,8 +11,8 @@
 
 namespace duckdb {
 
-PostgresCreateIndex::PostgresCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
+PostgresCreateIndex::PostgresCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/storage/postgres_insert.cpp b/src/storage/postgres_insert.cpp
index dd616df..0ead9b0 100644
--- a/src/storage/postgres_insert.cpp
+++ b/src/storage/postgres_insert.cpp
@@ -14,14 +14,14 @@
 
 namespace duckdb {
 
-PostgresInsert::PostgresInsert(LogicalOperator &op, TableCatalogEntry &table,
+PostgresInsert::PostgresInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table,
                                physical_index_vector_t<idx_t> column_index_map_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
       column_index_map(std::move(column_index_map_p)) {
 }
 
-PostgresInsert::PostgresInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
+PostgresInsert::PostgresInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
       info(std::move(info)) {
 }
 
diff --git a/src/storage/postgres_update.cpp b/src/storage/postgres_update.cpp
index 8fa4d69..dd24447 100644
--- a/src/storage/postgres_update.cpp
+++ b/src/storage/postgres_update.cpp
@@ -8,8 +8,8 @@
 
 namespace duckdb {
 
-PostgresUpdate::PostgresUpdate(LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(table), columns(std::move(columns_p)) {
+PostgresUpdate::PostgresUpdate(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns_p)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(table), columns(std::move(columns_p)) {
 }
 
 //===--------------------------------------------------------------------===//

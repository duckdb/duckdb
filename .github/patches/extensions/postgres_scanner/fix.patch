diff --git a/src/postgres_extension.cpp b/src/postgres_extension.cpp
index a12f431..b0591d5 100644
--- a/src/postgres_extension.cpp
+++ b/src/postgres_extension.cpp
@@ -58,7 +58,7 @@ static void SetPostgresConnectionLimit(ClientContext &context, SetScope scope, V
 	}
 	auto databases = DatabaseManager::Get(context).GetDatabases(context);
 	for (auto &db_ref : databases) {
-		auto &db = db_ref.get();
+        auto &db = *db_ref;
 		auto &catalog = db.GetCatalog();
 		if (catalog.GetCatalogType() != "postgres") {
 			continue;
diff --git a/src/storage/postgres_clear_cache.cpp b/src/storage/postgres_clear_cache.cpp
index 3e16e48..878cf77 100644
--- a/src/storage/postgres_clear_cache.cpp
+++ b/src/storage/postgres_clear_cache.cpp
@@ -24,7 +24,7 @@ static unique_ptr<FunctionData> ClearCacheBind(ClientContext &context, TableFunc
 void PostgresClearCacheFunction::ClearPostgresCaches(ClientContext &context) {
 	auto databases = DatabaseManager::Get(context).GetDatabases(context);
 	for (auto &db_ref : databases) {
-		auto &db = db_ref.get();
+        auto &db = *db_ref;
 		auto &catalog = db.GetCatalog();
 		if (catalog.GetCatalogType() != "postgres") {
 			continue;
diff --git a/src/storage/postgres_insert.cpp b/src/storage/postgres_insert.cpp
index fcd7109..77a3372 100644
--- a/src/storage/postgres_insert.cpp
+++ b/src/storage/postgres_insert.cpp
@@ -218,7 +218,7 @@ PhysicalOperator &PostgresCatalog::PlanInsert(ClientContext &context, PhysicalPl
 	if (op.return_chunk) {
 		throw BinderException("RETURNING clause not yet supported for insertion into Postgres table");
 	}
-	if (op.action_type != OnConflictAction::THROW) {
+	if (op.on_conflict_info.action_type != OnConflictAction::THROW) {
 		throw BinderException("ON CONFLICT clause not yet supported for insertion into Postgres table");
 	}
 

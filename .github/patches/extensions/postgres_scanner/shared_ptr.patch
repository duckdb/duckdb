diff --git a/src/include/postgres_binary_copy.hpp b/src/include/postgres_binary_copy.hpp
index 4d49b00..f69e4fa 100644
--- a/src/include/postgres_binary_copy.hpp
+++ b/src/include/postgres_binary_copy.hpp
@@ -19,18 +19,19 @@ public:
 	PostgresBinaryCopyFunction();
 
 	static unique_ptr<FunctionData> PostgresBinaryWriteBind(ClientContext &context, CopyFunctionBindInput &input,
-											  const vector<string> &names, const vector<LogicalType> &sql_types);
-
-	static unique_ptr<GlobalFunctionData> PostgresBinaryWriteInitializeGlobal(ClientContext &context, FunctionData &bind_data,
-																const string &file_path);
-	static unique_ptr<LocalFunctionData> PostgresBinaryWriteInitializeLocal(ExecutionContext &context, FunctionData &bind_data_p);
-	static void PostgresBinaryWriteSink(ExecutionContext &context, FunctionData &bind_data_p, GlobalFunctionData &gstate,
-						  LocalFunctionData &lstate, DataChunk &input);
-	static void PostgresBinaryWriteCombine(ExecutionContext &context, FunctionData &bind_data, GlobalFunctionData &gstate,
-							 LocalFunctionData &lstate);
-	static void PostgresBinaryWriteFinalize(ClientContext &context, FunctionData &bind_data, GlobalFunctionData &gstate);
+	                                                        const vector<string> &names,
+	                                                        const vector<LogicalType> &sql_types);
+
+	static unique_ptr<GlobalFunctionData>
+	PostgresBinaryWriteInitializeGlobal(ClientContext &context, FunctionData &bind_data, const string &file_path);
+	static unique_ptr<LocalFunctionData> PostgresBinaryWriteInitializeLocal(ExecutionContext &context,
+	                                                                        FunctionData &bind_data_p);
+	static void PostgresBinaryWriteSink(ExecutionContext &context, FunctionData &bind_data_p,
+	                                    GlobalFunctionData &gstate, LocalFunctionData &lstate, DataChunk &input);
+	static void PostgresBinaryWriteCombine(ExecutionContext &context, FunctionData &bind_data,
+	                                       GlobalFunctionData &gstate, LocalFunctionData &lstate);
+	static void PostgresBinaryWriteFinalize(ClientContext &context, FunctionData &bind_data,
+	                                        GlobalFunctionData &gstate);
 };
 
-
-
 } // namespace duckdb
diff --git a/src/include/postgres_connection.hpp b/src/include/postgres_connection.hpp
index e4595e2..08fd19c 100644
--- a/src/include/postgres_connection.hpp
+++ b/src/include/postgres_connection.hpp
@@ -10,6 +10,7 @@
 
 #include "postgres_utils.hpp"
 #include "postgres_result.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 
 namespace duckdb {
 class PostgresBinaryWriter;
diff --git a/src/include/storage/postgres_catalog_set.hpp b/src/include/storage/postgres_catalog_set.hpp
index e20a803..4fe45f6 100644
--- a/src/include/storage/postgres_catalog_set.hpp
+++ b/src/include/storage/postgres_catalog_set.hpp
@@ -11,6 +11,7 @@
 #include "duckdb/transaction/transaction.hpp"
 #include "duckdb/common/case_insensitive_map.hpp"
 #include "duckdb/common/mutex.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 
 namespace duckdb {
 struct DropInfo;
diff --git a/src/include/storage/postgres_table_entry.hpp b/src/include/storage/postgres_table_entry.hpp
index d96dfad..529c234 100644
--- a/src/include/storage/postgres_table_entry.hpp
+++ b/src/include/storage/postgres_table_entry.hpp
@@ -50,7 +50,7 @@ public:
 
 	TableStorageInfo GetStorageInfo(ClientContext &context) override;
 
-	void BindUpdateConstraints(LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
+	void BindUpdateConstraints(Binder &binder, LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
 	                           ClientContext &context) override;
 
 	//! Get the copy format (text or binary) that should be used when writing data to this table
diff --git a/src/postgres_binary_copy.cpp b/src/postgres_binary_copy.cpp
index f0d86a3..4c89c3f 100644
--- a/src/postgres_binary_copy.cpp
+++ b/src/postgres_binary_copy.cpp
@@ -5,8 +5,7 @@
 
 namespace duckdb {
 
-PostgresBinaryCopyFunction::PostgresBinaryCopyFunction() :
-  CopyFunction("postgres_binary") {
+PostgresBinaryCopyFunction::PostgresBinaryCopyFunction() : CopyFunction("postgres_binary") {
 
 	copy_to_bind = PostgresBinaryWriteBind;
 	copy_to_initialize_global = PostgresBinaryWriteInitializeGlobal;
@@ -54,16 +53,18 @@ struct PostgresBinaryCopyGlobalState : public GlobalFunctionData {
 	}
 };
 
-struct PostgresBinaryWriteBindData : public TableFunctionData {
-};
+struct PostgresBinaryWriteBindData : public TableFunctionData {};
 
-unique_ptr<FunctionData> PostgresBinaryCopyFunction::PostgresBinaryWriteBind(ClientContext &context, CopyFunctionBindInput &input,
-													const vector<string> &names, const vector<LogicalType> &sql_types) {
+unique_ptr<FunctionData> PostgresBinaryCopyFunction::PostgresBinaryWriteBind(ClientContext &context,
+                                                                             CopyFunctionBindInput &input,
+                                                                             const vector<string> &names,
+                                                                             const vector<LogicalType> &sql_types) {
 	return make_uniq<PostgresBinaryWriteBindData>();
 }
 
-unique_ptr<GlobalFunctionData> PostgresBinaryCopyFunction::PostgresBinaryWriteInitializeGlobal(ClientContext &context, FunctionData &bind_data,
-																	  const string &file_path) {
+unique_ptr<GlobalFunctionData>
+PostgresBinaryCopyFunction::PostgresBinaryWriteInitializeGlobal(ClientContext &context, FunctionData &bind_data,
+                                                                const string &file_path) {
 	auto result = make_uniq<PostgresBinaryCopyGlobalState>();
 	auto &fs = FileSystem::GetFileSystem(context);
 	result->file_writer = make_uniq<BufferedFileWriter>(fs, file_path);
@@ -72,25 +73,27 @@ unique_ptr<GlobalFunctionData> PostgresBinaryCopyFunction::PostgresBinaryWriteIn
 	return std::move(result);
 }
 
-unique_ptr<LocalFunctionData> PostgresBinaryCopyFunction::PostgresBinaryWriteInitializeLocal(ExecutionContext &context, FunctionData &bind_data_p) {
+unique_ptr<LocalFunctionData>
+PostgresBinaryCopyFunction::PostgresBinaryWriteInitializeLocal(ExecutionContext &context, FunctionData &bind_data_p) {
 	return make_uniq<LocalFunctionData>();
 }
 
-void PostgresBinaryCopyFunction::PostgresBinaryWriteSink(ExecutionContext &context, FunctionData &bind_data_p, GlobalFunctionData &gstate_p,
-								LocalFunctionData &lstate, DataChunk &input) {
+void PostgresBinaryCopyFunction::PostgresBinaryWriteSink(ExecutionContext &context, FunctionData &bind_data_p,
+                                                         GlobalFunctionData &gstate_p, LocalFunctionData &lstate,
+                                                         DataChunk &input) {
 	auto &gstate = gstate_p.Cast<PostgresBinaryCopyGlobalState>();
 	gstate.WriteChunk(input);
 }
 
-void PostgresBinaryCopyFunction::PostgresBinaryWriteCombine(ExecutionContext &context, FunctionData &bind_data, GlobalFunctionData &gstate,
-								   LocalFunctionData &lstate) {
+void PostgresBinaryCopyFunction::PostgresBinaryWriteCombine(ExecutionContext &context, FunctionData &bind_data,
+                                                            GlobalFunctionData &gstate, LocalFunctionData &lstate) {
 }
 
-void PostgresBinaryCopyFunction::PostgresBinaryWriteFinalize(ClientContext &context, FunctionData &bind_data, GlobalFunctionData &gstate_p) {
+void PostgresBinaryCopyFunction::PostgresBinaryWriteFinalize(ClientContext &context, FunctionData &bind_data,
+                                                             GlobalFunctionData &gstate_p) {
 	auto &gstate = gstate_p.Cast<PostgresBinaryCopyGlobalState>();
 	// write the footer and close the file
 	gstate.Flush();
 }
 
-
-}
\ No newline at end of file
+} // namespace duckdb
\ No newline at end of file
diff --git a/src/postgres_connection.cpp b/src/postgres_connection.cpp
index 6372055..18fbd77 100644
--- a/src/postgres_connection.cpp
+++ b/src/postgres_connection.cpp
@@ -3,6 +3,8 @@
 #include "duckdb/parser/parser.hpp"
 #include "postgres_connection.hpp"
 #include "duckdb/common/types/uuid.hpp"
+#include "duckdb/common/shared_ptr.hpp"
+#include "duckdb/common/helper.hpp"
 
 namespace duckdb {
 
@@ -40,7 +42,7 @@ PostgresConnection &PostgresConnection::operator=(PostgresConnection &&other) no
 
 PostgresConnection PostgresConnection::Open(const string &connection_string) {
 	PostgresConnection result;
-	result.connection = make_shared<OwnedPostgresConnection>(PostgresUtils::PGConnect(connection_string));
+	result.connection = make_shared_ptr<OwnedPostgresConnection>(PostgresUtils::PGConnect(connection_string));
 	result.dsn = connection_string;
 	return result;
 }
diff --git a/src/postgres_extension.cpp b/src/postgres_extension.cpp
index 34d46d0..95988f2 100644
--- a/src/postgres_extension.cpp
+++ b/src/postgres_extension.cpp
@@ -9,6 +9,7 @@
 #include "duckdb/catalog/catalog.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "duckdb/main/extension_util.hpp"
+#include "duckdb/common/helper.hpp"
 #include "duckdb/main/database_manager.hpp"
 #include "duckdb/main/attached_database.hpp"
 #include "storage/postgres_catalog.hpp"
@@ -47,7 +48,7 @@ public:
 class PostgresExtensionCallback : public ExtensionCallback {
 public:
 	void OnConnectionOpened(ClientContext &context) override {
-		context.registered_state.insert(make_pair("postgres_extension", make_shared<PostgresExtensionState>()));
+		context.registered_state.insert(make_pair("postgres_extension", make_shared_ptr<PostgresExtensionState>()));
 	}
 };
 
@@ -123,7 +124,7 @@ static void LoadInternal(DatabaseInstance &db) {
 
 	config.extension_callbacks.push_back(make_uniq<PostgresExtensionCallback>());
 	for (auto &connection : ConnectionManager::Get(db).GetConnectionList()) {
-		connection->registered_state.insert(make_pair("postgres_extension", make_shared<PostgresExtensionState>()));
+		connection->registered_state.insert(make_pair("postgres_extension", make_shared_ptr<PostgresExtensionState>()));
 	}
 }
 
diff --git a/src/postgres_scanner.cpp b/src/postgres_scanner.cpp
index 449df0b..75c029f 100644
--- a/src/postgres_scanner.cpp
+++ b/src/postgres_scanner.cpp
@@ -3,6 +3,8 @@
 #include <libpq-fe.h>
 
 #include "duckdb/main/extension_util.hpp"
+#include "duckdb/common/shared_ptr.hpp"
+#include "duckdb/common/helper.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "postgres_filter_pushdown.hpp"
 #include "postgres_scanner.hpp"
diff --git a/src/storage/postgres_schema_set.cpp b/src/storage/postgres_schema_set.cpp
index 93c3f28..cd3b46f 100644
--- a/src/storage/postgres_schema_set.cpp
+++ b/src/storage/postgres_schema_set.cpp
@@ -6,6 +6,7 @@
 #include "duckdb/parser/parsed_data/create_schema_info.hpp"
 #include "storage/postgres_table_set.hpp"
 #include "storage/postgres_catalog.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 
 namespace duckdb {
 
diff --git a/src/storage/postgres_table_entry.cpp b/src/storage/postgres_table_entry.cpp
index d791678..7ba1ad6 100644
--- a/src/storage/postgres_table_entry.cpp
+++ b/src/storage/postgres_table_entry.cpp
@@ -31,7 +31,8 @@ unique_ptr<BaseStatistics> PostgresTableEntry::GetStatistics(ClientContext &cont
 	return nullptr;
 }
 
-void PostgresTableEntry::BindUpdateConstraints(LogicalGet &, LogicalProjection &, LogicalUpdate &, ClientContext &) {
+void PostgresTableEntry::BindUpdateConstraints(Binder &binder, LogicalGet &, LogicalProjection &, LogicalUpdate &,
+											   ClientContext &) {
 }
 
 TableFunction PostgresTableEntry::GetScanFunction(ClientContext &context, unique_ptr<FunctionData> &bind_data) {

diff --git a/postgres_scanner.cpp b/postgres_scanner.cpp
index ddaf654..83d45d1 100644
--- a/postgres_scanner.cpp
+++ b/postgres_scanner.cpp
@@ -9,6 +9,7 @@
 #define ntohll(x) ((((uint64_t)ntohl(x & 0xFFFFFFFF)) << 32) + ntohl(x >> 32))
 #endif
 
+#include "duckdb/main/extension_util.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "duckdb/planner/table_filter.hpp"
 #include "duckdb/planner/filter/conjunction_filter.hpp"
@@ -1126,18 +1127,11 @@ public:
 
 extern "C" {
 DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db) {
-	Connection con(db);
-	con.BeginTransaction();
-	auto &context = *con.context;
-	auto &catalog = Catalog::GetSystemCatalog(context);
-
 	PostgresScanFunction postgres_fun;
-	CreateTableFunctionInfo postgres_info(postgres_fun);
-	catalog.CreateTableFunction(context, postgres_info);
+	ExtensionUtil::RegisterFunction(db, postgres_fun);
 
 	PostgresScanFunctionFilterPushdown postgres_fun_filter_pushdown;
-	CreateTableFunctionInfo postgres_filter_pushdown_info(postgres_fun_filter_pushdown);
-	catalog.CreateTableFunction(context, postgres_filter_pushdown_info);
+	ExtensionUtil::RegisterFunction(db, postgres_fun_filter_pushdown);
 
 	TableFunction attach_func("postgres_attach", {LogicalType::VARCHAR}, AttachFunction, AttachBind);
 	attach_func.named_parameters["overwrite"] = LogicalType::BOOLEAN;
@@ -1147,10 +1141,7 @@ DUCKDB_EXTENSION_API void postgres_scanner_init(duckdb::DatabaseInstance &db) {
 	attach_func.named_parameters["sink_schema"] = LogicalType::VARCHAR;
 	attach_func.named_parameters["suffix"] = LogicalType::VARCHAR;
 
-	CreateTableFunctionInfo attach_info(attach_func);
-	catalog.CreateTableFunction(context, attach_info);
-
-	con.Commit();
+	ExtensionUtil::RegisterFunction(db, attach_func);
 }
 
 DUCKDB_EXTENSION_API const char *postgres_scanner_version() {

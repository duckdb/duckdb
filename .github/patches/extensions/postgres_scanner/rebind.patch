diff --git a/src/include/postgres_scanner.hpp b/src/include/postgres_scanner.hpp
index 396664d..eb8f621 100644
--- a/src/include/postgres_scanner.hpp
+++ b/src/include/postgres_scanner.hpp
@@ -83,6 +83,7 @@ public:
 	PostgresClearCacheFunction();
 
 	static void ClearCacheOnSetting(ClientContext &context, SetScope scope, Value &parameter);
+	static void ClearPostgresCaches(ClientContext &context);
 };
 
 class PostgresQueryFunction : public TableFunction {
diff --git a/src/include/storage/postgres_catalog.hpp b/src/include/storage/postgres_catalog.hpp
index 7e90c18..1b887fa 100644
--- a/src/include/storage/postgres_catalog.hpp
+++ b/src/include/storage/postgres_catalog.hpp
@@ -72,6 +72,20 @@ public:
 
 	void ClearCache();
 
+	//! Whether or not this catalog should search a specific type with the standard priority
+	CatalogLookupBehavior CatalogTypeLookupRule(CatalogType type) const override {
+		switch (type) {
+		case CatalogType::INDEX_ENTRY:
+		case CatalogType::TABLE_ENTRY:
+		case CatalogType::TYPE_ENTRY:
+		case CatalogType::VIEW_ENTRY:
+			return CatalogLookupBehavior::STANDARD;
+		default:
+			// unsupported type (e.g. scalar functions, aggregates, ...)
+			return CatalogLookupBehavior::NEVER_LOOKUP;
+		}
+	}
+
 private:
 	void DropSchema(ClientContext &context, DropInfo &info) override;
 
diff --git a/src/postgres_extension.cpp b/src/postgres_extension.cpp
index 81bd46e..6e18d5a 100644
--- a/src/postgres_extension.cpp
+++ b/src/postgres_extension.cpp
@@ -12,9 +12,44 @@
 #include "duckdb/main/attached_database.hpp"
 #include "storage/postgres_catalog.hpp"
 #include "storage/postgres_optimizer.hpp"
+#include "duckdb/planner/extension_callback.hpp"
+#include "duckdb/main/client_context.hpp"
+#include "duckdb/main/client_context_state.hpp"
+#include "duckdb/main/connection_manager.hpp"
+#include "duckdb/common/error_data.hpp"
 
 using namespace duckdb;
 
+class PostgresExtensionState : public ClientContextState {
+public:
+	bool CanRequestRebind() override {
+		return true;
+	}
+	RebindQueryInfo OnPlanningError(ClientContext &context, SQLStatement &statement, ErrorData &error) override {
+		if (error.Type() != ExceptionType::BINDER) {
+			return RebindQueryInfo::DO_NOT_REBIND;
+		}
+		auto &extra_info = error.ExtraInfo();
+		auto entry = extra_info.find("error_subtype");
+		if (entry == extra_info.end()) {
+			return RebindQueryInfo::DO_NOT_REBIND;
+		}
+		if (entry->second != "COLUMN_NOT_FOUND") {
+			return RebindQueryInfo::DO_NOT_REBIND;
+		}
+		// clear caches and rebind
+		PostgresClearCacheFunction::ClearPostgresCaches(context);
+		return RebindQueryInfo::ATTEMPT_TO_REBIND;
+	}
+};
+
+class PostgresExtensionCallback : public ExtensionCallback {
+public:
+	void OnConnectionOpened(ClientContext &context) override {
+		context.registered_state.insert(make_pair("postgres_extension", make_shared<PostgresExtensionState>()));
+	}
+};
+
 static void SetPostgresConnectionLimit(ClientContext &context, SetScope scope, Value &parameter) {
 	if (scope == SetScope::LOCAL) {
 		throw InvalidInputException("pg_connection_limit can only be set globally");
@@ -78,6 +113,11 @@ static void LoadInternal(DatabaseInstance &db) {
 	OptimizerExtension postgres_optimizer;
 	postgres_optimizer.optimize_function = PostgresOptimizer::Optimize;
 	config.optimizer_extensions.push_back(std::move(postgres_optimizer));
+
+	config.extension_callbacks.push_back(make_uniq<PostgresExtensionCallback>());
+	for(auto &connection : ConnectionManager::Get(db).GetConnectionList()) {
+		connection->registered_state.insert(make_pair("postgres_extension", make_shared<PostgresExtensionState>()));
+	}
 }
 
 void PostgresScannerExtension::Load(DuckDB &db) {
diff --git a/src/storage/postgres_clear_cache.cpp b/src/storage/postgres_clear_cache.cpp
index 33a4789..3e16e48 100644
--- a/src/storage/postgres_clear_cache.cpp
+++ b/src/storage/postgres_clear_cache.cpp
@@ -21,7 +21,7 @@ static unique_ptr<FunctionData> ClearCacheBind(ClientContext &context, TableFunc
 	return std::move(result);
 }
 
-static void ClearPostgresCaches(ClientContext &context) {
+void PostgresClearCacheFunction::ClearPostgresCaches(ClientContext &context) {
 	auto databases = DatabaseManager::Get(context).GetDatabases(context);
 	for (auto &db_ref : databases) {
 		auto &db = db_ref.get();
@@ -38,12 +38,12 @@ static void ClearCacheFunction(ClientContext &context, TableFunctionInput &data_
 	if (data.finished) {
 		return;
 	}
-	ClearPostgresCaches(context);
+	PostgresClearCacheFunction::ClearPostgresCaches(context);
 	data.finished = true;
 }
 
 void PostgresClearCacheFunction::ClearCacheOnSetting(ClientContext &context, SetScope scope, Value &parameter) {
-	ClearPostgresCaches(context);
+	PostgresClearCacheFunction::ClearPostgresCaches(context);
 }
 
 PostgresClearCacheFunction::PostgresClearCacheFunction()

diff --git a/src/excel/excel_extension.cpp b/src/excel/excel_extension.cpp
index 84a4e4a..9dce971 100644
--- a/src/excel/excel_extension.cpp
+++ b/src/excel/excel_extension.cpp
@@ -1,12 +1,10 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "excel_extension.hpp"
 
 #include "duckdb.hpp"
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/function/scalar_function.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "nf_calendar.h"
 #include "nf_localedata.h"
 #include "nf_zformat.h"
@@ -70,21 +68,24 @@ static void NumberFormatFunction(DataChunk &args, ExpressionState &state, Vector
 // Load
 //--------------------------------------------------------------------------------------------------
 
-void ExcelExtension::Load(DuckDB &db) {
-	auto &db_instance = *db.instance;
+static void LoadInternal(ExtensionLoader &loader) {
 
 	ScalarFunction text_func("text", {LogicalType::DOUBLE, LogicalType::VARCHAR}, LogicalType::VARCHAR,
-	                         NumberFormatFunction);
-	ExtensionUtil::RegisterFunction(db_instance, text_func);
+							 NumberFormatFunction);
+	loader.RegisterFunction(text_func);
 
 	ScalarFunction excel_text_func("excel_text", {LogicalType::DOUBLE, LogicalType::VARCHAR}, LogicalType::VARCHAR,
-	                               NumberFormatFunction);
+								   NumberFormatFunction);
 
-	ExtensionUtil::RegisterFunction(db_instance, excel_text_func);
+	loader.RegisterFunction(excel_text_func);
 
 	// Register the XLSX functions
-	ReadXLSX::Register(db_instance);
-	WriteXLSX::Register(db_instance);
+	ReadXLSX::Register(loader);
+	WriteXLSX::Register(loader);
+}
+
+void ExcelExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 std::string ExcelExtension::Name() {
@@ -95,16 +96,8 @@ std::string ExcelExtension::Name() {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void excel_init(duckdb::DatabaseInstance &db) {
-	duckdb::DuckDB db_wrapper(db);
-	db_wrapper.LoadExtension<duckdb::ExcelExtension>();
+DUCKDB_CPP_EXTENSION_ENTRY(excel, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *excel_version() {
-	return duckdb::DuckDB::LibraryVersion();
 }
-}
-
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
diff --git a/src/excel/include/excel_extension.hpp b/src/excel/include/excel_extension.hpp
index 156bb7e..5b711aa 100644
--- a/src/excel/include/excel_extension.hpp
+++ b/src/excel/include/excel_extension.hpp
@@ -15,7 +15,7 @@ namespace duckdb {
 
 class ExcelExtension : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 	std::string Name() override;
 };
 
diff --git a/src/excel/include/xlsx/read_xlsx.hpp b/src/excel/include/xlsx/read_xlsx.hpp
index fb1a323..f3901d6 100644
--- a/src/excel/include/xlsx/read_xlsx.hpp
+++ b/src/excel/include/xlsx/read_xlsx.hpp
@@ -6,10 +6,10 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
 struct WriteXLSX {
-	static void Register(DatabaseInstance &db);
+	static void Register(ExtensionLoader &loader);
 };
 
 enum class XLSXHeaderMode : uint8_t { NEVER, MAYBE, FORCE };
@@ -47,7 +47,7 @@ struct ReadXLSX {
 	static void ParseOptions(XLSXReadOptions &options, const named_parameter_map_t &input);
 	static void ResolveSheet(const unique_ptr<XLSXReadData> &result, ZipFileReader &archive);
 
-	static void Register(DatabaseInstance &db);
+	static void Register(ExtensionLoader &loader);
 	static TableFunction GetFunction();
 };
 
diff --git a/src/excel/xlsx/copy_xlsx.cpp b/src/excel/xlsx/copy_xlsx.cpp
index 33890b5..94a0ac9 100644
--- a/src/excel/xlsx/copy_xlsx.cpp
+++ b/src/excel/xlsx/copy_xlsx.cpp
@@ -1,7 +1,7 @@
 #include "duckdb/common/exception/conversion_exception.hpp"
 #include "duckdb/function/copy_function.hpp"
 #include "duckdb/main/database.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/planner/expression/bound_cast_expression.hpp"
 #include "duckdb/planner/expression/bound_function_expression.hpp"
 #include "duckdb/planner/expression/bound_reference_expression.hpp"
@@ -470,7 +470,7 @@ static unique_ptr<FunctionData> CopyFromBind(ClientContext &context, CopyInfo &i
 //------------------------------------------------------------------------------
 // Register
 //------------------------------------------------------------------------------
-void WriteXLSX::Register(DatabaseInstance &db) {
+void WriteXLSX::Register(ExtensionLoader &loader) {
 	CopyFunction info("xlsx");
 
 	info.copy_to_bind = Bind;
@@ -485,7 +485,7 @@ void WriteXLSX::Register(DatabaseInstance &db) {
 	info.copy_from_function = ReadXLSX::GetFunction();
 
 	info.extension = "xlsx";
-	ExtensionUtil::RegisterFunction(db, info);
+	loader.RegisterFunction(info);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/excel/xlsx/read_xlsx.cpp b/src/excel/xlsx/read_xlsx.cpp
index ebd621b..10b10e8 100644
--- a/src/excel/xlsx/read_xlsx.cpp
+++ b/src/excel/xlsx/read_xlsx.cpp
@@ -5,7 +5,7 @@
 #include "duckdb/function/replacement_scan.hpp"
 #include "duckdb/function/table_function.hpp"
 #include "duckdb/main/database.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/query_result.hpp"
 #include "duckdb/parser/expression/constant_expression.hpp"
 #include "duckdb/parser/expression/function_expression.hpp"
@@ -726,9 +726,9 @@ TableFunction ReadXLSX::GetFunction() {
 	return read_xlsx;
 }
 
-void ReadXLSX::Register(DatabaseInstance &db) {
-	ExtensionUtil::RegisterFunction(db, GetFunction());
-	db.config.replacement_scans.emplace_back(XLSXReplacementScan);
+void ReadXLSX::Register(ExtensionLoader &loader) {
+	loader.RegisterFunction(GetFunction());
+	loader.GetDatabaseInstance().config.replacement_scans.emplace_back(XLSXReplacementScan);
 }
 
 } // namespace duckdb
\ No newline at end of file

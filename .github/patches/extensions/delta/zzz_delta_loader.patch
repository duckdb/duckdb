diff --git a/src/delta_extension.cpp b/src/delta_extension.cpp
index 0f8a64a..1c0b190 100644
--- a/src/delta_extension.cpp
+++ b/src/delta_extension.cpp
@@ -1,5 +1,3 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "delta_extension.hpp"
 
 #include "delta_utils.hpp"
@@ -11,7 +9,7 @@
 #include "duckdb.hpp"
 #include "duckdb/common/exception.hpp"
 #include "duckdb/function/table_macro_function.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/storage/storage_extension.hpp"
 #include "duckdb/main/config.hpp"
 
@@ -55,19 +53,19 @@ public:
 	}
 };
 
-static void LoadInternal(DatabaseInstance &instance) {
+static void LoadInternal(ExtensionLoader &loader) {
 	// Load Table functions
-	for (const auto &function : DeltaFunctions::GetTableFunctions(instance)) {
-		ExtensionUtil::RegisterFunction(instance, function);
+	for (const auto &function : DeltaFunctions::GetTableFunctions(loader)) {
+		loader.RegisterFunction(function);
 	}
 
 	// Load Scalar functions
-	for (const auto &function : DeltaFunctions::GetScalarFunctions(instance)) {
-		ExtensionUtil::RegisterFunction(instance, function);
+	for (const auto &function : DeltaFunctions::GetScalarFunctions(loader)) {
+		loader.RegisterFunction(function);
 	}
 
 	// Register the "single table" delta catalog (to ATTACH a single delta table)
-	auto &config = DBConfig::GetConfig(instance);
+	auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 	config.storage_extensions["delta"] = make_uniq<DeltaStorageExtension>();
 
 	config.AddExtensionOption("delta_scan_explain_files_filtered",
@@ -81,13 +79,13 @@ static void LoadInternal(DatabaseInstance &instance) {
 	    "performance even with DuckDB logging disabled.",
 	    LogicalType::BOOLEAN, Value(false), LoggerCallback::DuckDBSettingCallBack);
 
-	DeltaMacros::RegisterMacros(instance);
+	DeltaMacros::RegisterMacros(loader);
 
-	LoggerCallback::Initialize(instance);
+	LoggerCallback::Initialize(loader.GetDatabaseInstance());
 }
 
-void DeltaExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void DeltaExtension::Load(ExtensionLoader &load) {
+	LoadInternal(load);
 }
 
 std::string DeltaExtension::Name() {
@@ -98,16 +96,8 @@ std::string DeltaExtension::Name() {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void delta_init(duckdb::DatabaseInstance &db) {
-	duckdb::DuckDB db_wrapper(db);
-	db_wrapper.LoadExtension<duckdb::DeltaExtension>();
+DUCKDB_CPP_EXTENSION_ENTRY(delta, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *delta_version() {
-	return duckdb::DuckDB::LibraryVersion();
-}
 }
-
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
diff --git a/src/delta_functions.cpp b/src/delta_functions.cpp
index be24564..7bbcd01 100644
--- a/src/delta_functions.cpp
+++ b/src/delta_functions.cpp
@@ -1,22 +1,22 @@
 #include "delta_functions.hpp"
 
 #include "duckdb.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 
 namespace duckdb {
 
-vector<TableFunctionSet> DeltaFunctions::GetTableFunctions(DatabaseInstance &instance) {
+vector<TableFunctionSet> DeltaFunctions::GetTableFunctions(ExtensionLoader &loader) {
 	vector<TableFunctionSet> functions;
 
-	functions.push_back(GetDeltaScanFunction(instance));
+	functions.push_back(GetDeltaScanFunction(loader));
 
 	return functions;
 }
 
-vector<ScalarFunctionSet> DeltaFunctions::GetScalarFunctions(DatabaseInstance &instance) {
+vector<ScalarFunctionSet> DeltaFunctions::GetScalarFunctions(ExtensionLoader &loader) {
 	vector<ScalarFunctionSet> functions;
 
-	functions.push_back(GetExpressionFunction(instance));
+	functions.push_back(GetExpressionFunction(loader));
 
 	return functions;
 }
diff --git a/src/delta_macros.cpp b/src/delta_macros.cpp
index 1f06933..7a24cde 100644
--- a/src/delta_macros.cpp
+++ b/src/delta_macros.cpp
@@ -43,7 +43,7 @@ JOIN
     tpcds_queries() as tpcds_queries on tpcds_queries."query"=query_string
 )";
 
-void DeltaMacros::RegisterTableMacro(DatabaseInstance &db, const string &name, const string &query,
+void DeltaMacros::RegisterTableMacro(ExtensionLoader &loader, const string &name, const string &query,
                                      const vector<string> &params, const child_list_t<Value> &named_params) {
 	Parser parser;
 	parser.ParseQuery(query);
@@ -66,7 +66,7 @@ void DeltaMacros::RegisterTableMacro(DatabaseInstance &db, const string &name, c
 	info.internal = true;
 	info.macros.push_back(std::move(func));
 
-	ExtensionUtil::RegisterFunction(db, info);
+	loader.RegisterFunction(info);
 }
 
 static DefaultMacro delta_macros[] = {
@@ -78,16 +78,16 @@ static DefaultMacro delta_macros[] = {
      "files_after BIGINT)"},
 };
 
-void DeltaMacros::RegisterMacros(DatabaseInstance &instance) {
+void DeltaMacros::RegisterMacros(ExtensionLoader &loader) {
 	// Register Regular macros
 	for (auto &macro : delta_macros) {
 		auto info = DefaultFunctionGenerator::CreateInternalMacroInfo(macro);
-		ExtensionUtil::RegisterFunction(instance, *info);
+		loader.RegisterFunction(*info);
 	}
 
 	// Register Table Macros
-	RegisterTableMacro(instance, "delta_filter_pushdown_log", DELTA_FILTER_PUSHDOWN_MACRO, {}, {});
-	RegisterTableMacro(instance, "delta_filter_pushdown_log_tpcds", DELTA_FILTER_PUSHDOWN_MACRO_TPCDS, {}, {});
+	RegisterTableMacro(loader, "delta_filter_pushdown_log", DELTA_FILTER_PUSHDOWN_MACRO, {}, {});
+	RegisterTableMacro(loader, "delta_filter_pushdown_log_tpcds", DELTA_FILTER_PUSHDOWN_MACRO_TPCDS, {}, {});
 }
 
 }; // namespace duckdb
diff --git a/src/functions/delta_scan/delta_scan.cpp b/src/functions/delta_scan/delta_scan.cpp
index e663376..3e75635 100644
--- a/src/functions/delta_scan/delta_scan.cpp
+++ b/src/functions/delta_scan/delta_scan.cpp
@@ -5,7 +5,7 @@
 #include "duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp"
 #include "duckdb/function/table_function.hpp"
 #include "duckdb/main/extension_helper.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/query_profiler.hpp"
 #include "duckdb/main/secret/secret_manager.hpp"
 #include "duckdb/parser/expression/function_expression.hpp"
@@ -55,13 +55,14 @@ static InsertionOrderPreservingMap<string> DeltaFunctionToString(TableFunctionTo
 	return result;
 }
 
-TableFunctionSet DeltaFunctions::GetDeltaScanFunction(DatabaseInstance &instance) {
+TableFunctionSet DeltaFunctions::GetDeltaScanFunction(ExtensionLoader &loader) {
 	// Parquet extension needs to be loaded for this to make sense
+	auto &instance = loader.GetDatabaseInstance();
 	ExtensionHelper::AutoLoadExtension(instance, "parquet");
 
 	// The delta_scan function is constructed by grabbing the parquet scan from the Catalog, then injecting the
 	// DeltaMultiFileReader into it to create a Delta-based multi file read
-	auto &parquet_scan = ExtensionUtil::GetTableFunction(instance, "parquet_scan");
+	auto &parquet_scan = loader.GetTableFunction("parquet_scan");
 	auto parquet_scan_copy = parquet_scan.functions;
 
 	for (auto &function : parquet_scan_copy.functions) {
diff --git a/src/functions/expression_functions.cpp b/src/functions/expression_functions.cpp
index dbcabef..9b4e8fc 100644
--- a/src/functions/expression_functions.cpp
+++ b/src/functions/expression_functions.cpp
@@ -31,7 +31,7 @@ static void GetDeltaTestExpression(DataChunk &input, ExpressionState &state, Vec
 	output.SetValue(0, Value::LIST(result_to_string));
 };
 
-ScalarFunctionSet DeltaFunctions::GetExpressionFunction(DatabaseInstance &instance) {
+ScalarFunctionSet DeltaFunctions::GetExpressionFunction(ExtensionLoader &loader) {
 	ScalarFunctionSet result;
 	result.name = "get_delta_test_expression";
 
diff --git a/src/include/delta_extension.hpp b/src/include/delta_extension.hpp
index d6b13f2..a4793e2 100644
--- a/src/include/delta_extension.hpp
+++ b/src/include/delta_extension.hpp
@@ -6,7 +6,7 @@ namespace duckdb {
 
 class DeltaExtension : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 	std::string Name() override;
 };
 
diff --git a/src/include/delta_functions.hpp b/src/include/delta_functions.hpp
index 0753551..12142f6 100644
--- a/src/include/delta_functions.hpp
+++ b/src/include/delta_functions.hpp
@@ -12,16 +12,18 @@
 
 namespace duckdb {
 
+class ExtensionLoader;
+
 class DeltaFunctions {
 public:
-	static vector<TableFunctionSet> GetTableFunctions(DatabaseInstance &instance);
-	static vector<ScalarFunctionSet> GetScalarFunctions(DatabaseInstance &instance);
+	static vector<TableFunctionSet> GetTableFunctions(ExtensionLoader &instance);
+	static vector<ScalarFunctionSet> GetScalarFunctions(ExtensionLoader &instance);
 
 private:
 	//! Table Functions
-	static TableFunctionSet GetDeltaScanFunction(DatabaseInstance &instance);
+	static TableFunctionSet GetDeltaScanFunction(ExtensionLoader &instance);
 
 	//! Scalar Functions
-	static ScalarFunctionSet GetExpressionFunction(DatabaseInstance &instance);
+	static ScalarFunctionSet GetExpressionFunction(ExtensionLoader &instance);
 };
 } // namespace duckdb
diff --git a/src/include/delta_macros.hpp b/src/include/delta_macros.hpp
index 8a2647e..c87e3dd 100644
--- a/src/include/delta_macros.hpp
+++ b/src/include/delta_macros.hpp
@@ -11,13 +11,13 @@
 #include "duckdb/main/database.hpp"
 
 namespace duckdb {
-
+class ExtensionLoader;
 class DeltaMacros {
 public:
-	static void RegisterMacros(DatabaseInstance &instance);
+	static void RegisterMacros(ExtensionLoader &loader);
 
 protected:
-	static void RegisterTableMacro(DatabaseInstance &db, const string &name, const string &query,
+	static void RegisterTableMacro(ExtensionLoader &loader, const string &name, const string &query,
 	                               const vector<string> &params, const child_list_t<Value> &named_params);
 };
 } // namespace duckdb
diff --git a/src/storage/delta_table_entry.cpp b/src/storage/delta_table_entry.cpp
index 28a03a6..ddc1949 100644
--- a/src/storage/delta_table_entry.cpp
+++ b/src/storage/delta_table_entry.cpp
@@ -4,7 +4,7 @@
 
 #include "duckdb/storage/statistics/base_statistics.hpp"
 #include "duckdb/storage/table_storage_info.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/database.hpp"
 #include "duckdb/main/secret/secret_manager.hpp"
 #include "duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp"
@@ -30,7 +30,14 @@ void DeltaTableEntry::BindUpdateConstraints(Binder &binder, LogicalGet &, Logica
 
 TableFunction DeltaTableEntry::GetScanFunction(ClientContext &context, unique_ptr<FunctionData> &bind_data) {
 	auto &db = DatabaseInstance::GetDatabase(context);
-	auto &delta_function_set = ExtensionUtil::GetTableFunction(db, "delta_scan");
+	auto &system_catalog = Catalog::GetSystemCatalog(db);
+	auto data = CatalogTransaction::GetSystemTransaction(db);
+	auto &schema = system_catalog.GetSchema(data, DEFAULT_SCHEMA);
+	auto catalog_entry = schema.GetEntry(data, CatalogType::TABLE_FUNCTION_ENTRY, "delta_scan");
+	if (!catalog_entry) {
+		throw InvalidInputException("Function with name \"%s\" not found in ExtensionLoader::GetTableFunction", name);
+	}
+	auto &delta_function_set = catalog_entry->Cast<TableFunctionCatalogEntry>();
 
 	auto delta_scan_function = delta_function_set.functions.GetFunctionByArguments(context, {LogicalType::VARCHAR});
 	auto &delta_catalog = catalog.Cast<DeltaCatalog>();

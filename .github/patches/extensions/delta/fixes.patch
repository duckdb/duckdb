diff --git a/src/functions/delta_scan.cpp b/src/functions/delta_scan.cpp
index 65eb34f..7210382 100644
--- a/src/functions/delta_scan.cpp
+++ b/src/functions/delta_scan.cpp
@@ -464,7 +464,11 @@ unique_ptr<MultiFileList> DeltaSnapshot::ComplexFilterPushdown(ClientContext &co
     for (const auto &filter : filters) {
         combiner.AddFilter(filter->Copy());
     }
-    auto filterstmp = combiner.GenerateTableScanFilters(info.column_ids);
+    vector<ColumnIndex> column_indexes;
+    for(auto column_id : info.column_ids) {
+    	column_indexes.emplace_back(column_id);
+    }
+    auto filterstmp = combiner.GenerateTableScanFilters(column_indexes);
 
     // TODO: can/should we figure out if this filtered anything?
     auto filtered_list = make_uniq<DeltaSnapshot>(context, paths[0]);
@@ -529,7 +533,7 @@ unique_ptr<NodeStatistics> DeltaSnapshot::GetCardinality(ClientContext &context)
     return nullptr;
 }
 
-unique_ptr<MultiFileReader> DeltaMultiFileReader::CreateInstance() {
+unique_ptr<MultiFileReader> DeltaMultiFileReader::CreateInstance(const TableFunction &table_function) {
     return std::move(make_uniq<DeltaMultiFileReader>());
 }
 
@@ -575,7 +579,7 @@ void DeltaMultiFileReader::BindOptions(MultiFileReaderOptions &options, MultiFil
 void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_options, const MultiFileReaderBindData &options,
                   const string &filename, const vector<string> &local_names,
                   const vector<LogicalType> &global_types, const vector<string> &global_names,
-                  const vector<column_t> &global_column_ids, MultiFileReaderData &reader_data,
+                  const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
                   ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) {
     MultiFileReader::FinalizeBind(file_options, options, filename, local_names, global_types, global_names, global_column_ids, reader_data, context, global_state);
 
@@ -600,7 +604,7 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_optio
 
     if (!file_metadata->partition_map.empty()) {
         for (idx_t i = 0; i < global_column_ids.size(); i++) {
-            column_t col_id = global_column_ids[i];
+            column_t col_id = global_column_ids[i].GetPrimaryIndex();
             if (IsRowIdColumnId(col_id)) {
                 continue;
             }
@@ -618,12 +622,12 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileReaderOptions &file_optio
     }
 }
 
-unique_ptr<MultiFileList> DeltaMultiFileReader::CreateFileList(ClientContext &context, const vector<string>& paths, FileGlobOptions options) {
+shared_ptr<MultiFileList> DeltaMultiFileReader::CreateFileList(ClientContext &context, const vector<string>& paths, FileGlobOptions options) {
     if (paths.size() != 1) {
         throw BinderException("'delta_scan' only supports single path as input");
     }
 
-    return make_uniq<DeltaSnapshot>(context, paths[0]);
+    return make_shared_ptr<DeltaSnapshot>(context, paths[0]);
 }
 
 // Generate the correct Selection Vector Based on the Raw delta KernelBoolSlice dv and the row_id_column
@@ -670,14 +674,14 @@ unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalSta
                                                                                    const duckdb::MultiFileList &file_list,
                                                                                    const vector<duckdb::LogicalType> &global_types,
                                                                                    const vector<std::string> &global_names,
-                                                                                   const vector<duckdb::column_t> &global_column_ids) {
+                                                                                   const vector<duckdb::ColumnIndex> &global_column_ids) {
     vector<LogicalType> extra_columns;
     vector<pair<string, idx_t>> mapped_columns;
 
     // Create a map of the columns that are in the projection
     case_insensitive_map_t<idx_t> selected_columns;
     for (idx_t i = 0; i < global_column_ids.size(); i++) {
-        auto global_id = global_column_ids[i];
+        auto global_id = global_column_ids[i].GetPrimaryIndex();
         if (IsRowIdColumnId(global_id)) {
             continue;
         }
@@ -736,7 +740,7 @@ unique_ptr<MultiFileReaderGlobalState> DeltaMultiFileReader::InitializeGlobalSta
 // in the parquet files, we just add null constant columns
 static void CustomMulfiFileNameMapping(const string &file_name, const vector<LogicalType> &local_types,
                                         const vector<string> &local_names, const vector<LogicalType> &global_types,
-                                        const vector<string> &global_names, const vector<column_t> &global_column_ids,
+                                        const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
                                         MultiFileReaderData &reader_data, const string &initial_file,
                                         optional_ptr<MultiFileReaderGlobalState> global_state) {
     D_ASSERT(global_types.size() == global_names.size());
@@ -760,7 +764,7 @@ static void CustomMulfiFileNameMapping(const string &file_name, const vector<Log
 			continue;
 		}
 		// not constant - look up the column in the name map
-		auto global_id = global_column_ids[i];
+		auto global_id = global_column_ids[i].GetPrimaryIndex();
 		if (global_id >= global_types.size()) {
 			throw InternalException(
 			    "MultiFileReader::CreatePositionalMapping - global_id is out of range in global_types for this file");
@@ -800,7 +804,7 @@ static void CustomMulfiFileNameMapping(const string &file_name, const vector<Log
 
 void DeltaMultiFileReader::CreateNameMapping(const string &file_name, const vector<LogicalType> &local_types,
                                         const vector<string> &local_names, const vector<LogicalType> &global_types,
-                                        const vector<string> &global_names, const vector<column_t> &global_column_ids,
+                                        const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
                                         MultiFileReaderData &reader_data, const string &initial_file,
                                         optional_ptr<MultiFileReaderGlobalState> global_state) {
     // First call the base implementation to do most mapping
diff --git a/src/include/functions/delta_scan.hpp b/src/include/functions/delta_scan.hpp
index aac35cc..d90968b 100644
--- a/src/include/functions/delta_scan.hpp
+++ b/src/include/functions/delta_scan.hpp
@@ -103,9 +103,9 @@ struct DeltaMultiFileReaderGlobalState : public MultiFileReaderGlobalState {
 };
 
 struct DeltaMultiFileReader : public MultiFileReader {
-    static unique_ptr<MultiFileReader> CreateInstance();
+    static unique_ptr<MultiFileReader> CreateInstance(const TableFunction &table_function);
     //! Return a DeltaSnapshot
-    unique_ptr<MultiFileList> CreateFileList(ClientContext &context, const vector<string> &paths,
+    shared_ptr<MultiFileList> CreateFileList(ClientContext &context, const vector<string> &paths,
                    FileGlobOptions options) override;
 
     //! Override the regular parquet bind using the MultiFileReader Bind. The bind from these are what DuckDB's file
@@ -119,19 +119,19 @@ struct DeltaMultiFileReader : public MultiFileReader {
 
     void CreateNameMapping(const string &file_name, const vector<LogicalType> &local_types,
                       const vector<string> &local_names, const vector<LogicalType> &global_types,
-                      const vector<string> &global_names, const vector<column_t> &global_column_ids,
+                      const vector<string> &global_names, const vector<ColumnIndex> &global_column_ids,
                       MultiFileReaderData &reader_data, const string &initial_file,
                       optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
     unique_ptr<MultiFileReaderGlobalState> InitializeGlobalState(ClientContext &context, const MultiFileReaderOptions &file_options,
                           const MultiFileReaderBindData &bind_data, const MultiFileList &file_list,
                           const vector<LogicalType> &global_types, const vector<string> &global_names,
-                          const vector<column_t> &global_column_ids) override;
+                          const vector<ColumnIndex> &global_column_ids) override;
 
     void FinalizeBind(const MultiFileReaderOptions &file_options, const MultiFileReaderBindData &options,
                                        const string &filename, const vector<string> &local_names,
                                        const vector<LogicalType> &global_types, const vector<string> &global_names,
-                                       const vector<column_t> &global_column_ids, MultiFileReaderData &reader_data,
+                                       const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
                                        ClientContext &context, optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
     //! Override the FinalizeChunk method

diff --git a/src/functions/delta_scan/delta_multi_file_reader.cpp b/src/functions/delta_scan/delta_multi_file_reader.cpp
index b36853a..7491a5c 100644
--- a/src/functions/delta_scan/delta_multi_file_reader.cpp
+++ b/src/functions/delta_scan/delta_multi_file_reader.cpp
@@ -18,6 +18,7 @@
 #include "duckdb/parser/parsed_expression.hpp"
 #include "duckdb/planner/binder.hpp"
 #include "duckdb/planner/operator/logical_get.hpp"
+#include "duckdb/planner/expression/bound_constant_expression.hpp"
 
 namespace duckdb {
 
@@ -65,16 +66,17 @@ static void FinalizeBindBaseOverride(const MultiFileOptions &file_options,
 		}
 	}
 	for (idx_t i = 0; i < global_column_ids.size(); i++) {
+		auto global_idx = MultiFileGlobalIndex(i);
 		auto &col_idx = global_column_ids[i];
 		if (col_idx.IsRowIdColumn()) {
 			// row-id
-			reader_data.constant_map.emplace_back(i, Value::BIGINT(42));
+			reader_data.constant_map.Add(global_idx, Value::BIGINT(42));
 			continue;
 		}
 		auto column_id = col_idx.GetPrimaryIndex();
 		if (column_id == options.filename_idx) {
 			// filename
-			reader_data.constant_map.emplace_back(i, Value(filename));
+			reader_data.constant_map.Add(global_idx, Value(filename));
 			continue;
 		}
 		if (file_options.union_by_name) {
@@ -87,7 +89,7 @@ static void FinalizeBindBaseOverride(const MultiFileOptions &file_options,
 			if (not_present_in_file) {
 				// we need to project a column with name \"global_name\" - but it does not exist in the current file
 				// push a NULL value of the specified type
-				reader_data.constant_map.emplace_back(i, Value(type));
+				reader_data.constant_map.Add(global_idx, Value(type));
 				continue;
 			}
 		}
@@ -97,10 +99,10 @@ static void FinalizeBindBaseOverride(const MultiFileOptions &file_options,
 // Parses the columns that are used by the delta extension into
 void DeltaMultiFileReaderGlobalState::SetColumnIdx(const string &column, idx_t idx) {
 	if (column == "file_row_number") {
-		file_row_number_idx = idx;
+		file_row_number_idx = MultiFileGlobalIndex(idx);
 		return;
 	} else if (column == "delta_file_number") {
-		delta_file_number_idx = idx;
+		delta_file_number_idx = MultiFileGlobalIndex(idx);
 		return;
 	}
 	throw IOException("Unknown column '%s' found as required by the DeltaMultiFileReader");
@@ -190,7 +192,8 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileOptions &file_optio
 			// We add the constant column for the delta_file_number option
 			// NOTE: we add a placeholder here, to demonstrate how we can also populate extra columns in the
 			// FinalizeChunk
-			reader_data.constant_map.emplace_back(delta_global_state.delta_file_number_idx, Value::UBIGINT(0));
+			auto global_idx = MultiFileGlobalIndex(delta_global_state.delta_file_number_idx);
+			reader_data.constant_map.Add(global_idx, Value::UBIGINT(0));
 		}
 	}
 
@@ -201,6 +204,7 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileOptions &file_optio
 
 	if (!file_metadata.partition_map.empty()) {
 		for (idx_t i = 0; i < global_column_ids.size(); i++) {
+			auto global_idx = MultiFileGlobalIndex(i);
 			column_t col_id = global_column_ids[i].GetPrimaryIndex();
 			if (IsRowIdColumnId(col_id)) {
 				continue;
@@ -209,10 +213,10 @@ void DeltaMultiFileReader::FinalizeBind(const MultiFileOptions &file_optio
 			if (col_partition_entry != file_metadata.partition_map.end()) {
 				auto &current_type = global_columns[col_id].type;
 				if (current_type == LogicalType::BLOB) {
-					reader_data.constant_map.emplace_back(i, Value::BLOB_RAW(col_partition_entry->second));
+					reader_data.constant_map.Add(global_idx, Value::BLOB_RAW(col_partition_entry->second));
 				} else {
 					auto maybe_value = Value(col_partition_entry->second).DefaultCastAs(current_type);
-					reader_data.constant_map.emplace_back(i, maybe_value);
+					reader_data.constant_map.Add(global_idx, maybe_value);
 				}
 			}
 		}
@@ -305,21 +309,23 @@ DeltaMultiFileReader::InitializeGlobalState(ClientContext &context, const MultiF
 // This code is duplicated from MultiFileReader::CreateNameMapping the difference is that for columns that are not found
 // in the parquet files, we just add null constant columns
 static void CustomMulfiFileNameMapping(const string &file_name,
-                                       const vector<MultiFileColumnDefinition> &local_columns,
-                                       const vector<MultiFileColumnDefinition> &global_columns,
-                                       const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
-                                       const string &initial_file,
-                                       optional_ptr<MultiFileReaderGlobalState> global_state) {
+	                                 const vector<MultiFileColumnDefinition> &local_columns,
+	                                 const vector<MultiFileColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const MultiFileReaderBindData &bind_data,
+	                                 const virtual_column_map_t &virtual_columns, const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) {
 	// we have expected types: create a map of name -> column index
-	case_insensitive_map_t<idx_t> name_map;
-	for (idx_t col_idx = 0; col_idx < local_columns.size(); col_idx++) {
-		name_map[local_columns[col_idx].name] = col_idx;
+	case_insensitive_map_t<MultiFileLocalColumnId> name_map;
+	for (idx_t col_id = 0; col_id < local_columns.size(); col_id++) {
+		name_map.emplace(local_columns[col_id].name, MultiFileLocalColumnId(col_id));
 	}
 	for (idx_t i = 0; i < global_column_ids.size(); i++) {
 		// check if this is a constant column
+		auto global_idx = MultiFileGlobalIndex(i);
 		bool constant = false;
 		for (auto &entry : reader_data.constant_map) {
-			if (entry.column_id == i) {
+			if (entry.column_idx.GetIndex() == i) {
 				constant = true;
 				break;
 			}
@@ -337,17 +343,10 @@ static void CustomMulfiFileNameMapping(const string &file_name,
 		auto &global_name = global_columns[global_id].name;
 		auto entry = name_map.find(global_name);
 		if (entry == name_map.end()) {
-			string candidate_names;
-			for (auto &local_column : local_columns) {
-				if (!candidate_names.empty()) {
-					candidate_names += ", ";
-				}
-				candidate_names += local_column.name;
-			}
 			// FIXME: this override is pretty hacky: for missing columns we just insert NULL constants
 			auto &global_type = global_columns[global_id].type;
 			Value val(global_type);
-			reader_data.constant_map.push_back({i, val});
+			reader_data.constant_map.Add(global_idx, val);
 			continue;
 		}
 		// we found the column in the local file - check if the types are the same
@@ -360,7 +359,7 @@ static void CustomMulfiFileNameMapping(const string &file_name,
 			reader_data.cast_map[local_id] = global_type;
 		}
 		// the types are the same - create the mapping
-		reader_data.column_mapping.push_back(i);
+		reader_data.column_mapping.push_back(global_idx);
 		reader_data.column_ids.push_back(local_id);
 	}
 
@@ -368,15 +367,13 @@ static void CustomMulfiFileNameMapping(const string &file_name,
 }
 
 void DeltaMultiFileReader::CreateColumnMapping(const string &file_name,
-                                               const vector<MultiFileColumnDefinition> &local_columns,
-                                               const vector<MultiFileColumnDefinition> &global_columns,
-                                               const vector<ColumnIndex> &global_column_ids,
-                                               MultiFileReaderData &reader_data,
-                                               const MultiFileReaderBindData &bind_data, const string &initial_file,
-                                               optional_ptr<MultiFileReaderGlobalState> global_state) {
-	// First call the base implementation to do most mapping
-	CustomMulfiFileNameMapping(file_name, local_columns, global_columns, global_column_ids, reader_data, initial_file,
-	                           global_state);
+	                                 const vector<MultiFileColumnDefinition> &local_columns,
+	                                 const vector<MultiFileColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const MultiFileReaderBindData &bind_data,
+	                                 const virtual_column_map_t &virtual_columns, const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) {
+	MultiFileReader::CreateColumnMappingByName(file_name, local_columns, global_columns, global_column_ids, reader_data, bind_data, virtual_columns, initial_file, global_state);
 
 	// Then we handle delta specific mapping
 	D_ASSERT(global_state);
@@ -387,9 +384,9 @@ void DeltaMultiFileReader::CreateColumnMapping(const string &file_name,
 		D_ASSERT(delta_global_state.file_row_number_idx != DConstants::INVALID_INDEX);
 
 		// Build the name map
-		case_insensitive_map_t<idx_t> name_map;
-		for (idx_t col_idx = 0; col_idx < local_columns.size(); col_idx++) {
-			name_map[local_columns[col_idx].name] = col_idx;
+		case_insensitive_map_t<MultiFileLocalColumnId> name_map;
+		for (idx_t col_id = 0; col_id < local_columns.size(); col_id++) {
+			name_map.emplace(local_columns[col_id].name, MultiFileLocalColumnId(col_id));
 		}
 
 		// Lookup the required column in the local map
@@ -398,8 +395,18 @@ void DeltaMultiFileReader::CreateColumnMapping(const string &file_name,
 			throw IOException("Failed to find the file_row_number column");
 		}
 
+		{
+			// FIXME: this method does not have access to a ClientContext,
+			// previous way of creating a Binder does not work here.
+			//
+			// If that's important, this logic should be moved to FinalizeChunk.
+			D_ASSERT(reader_data.expressions.size() == delta_global_state.file_row_number_idx.GetIndex());
+			reader_data.expressions.push_back(make_uniq<BoundConstantExpression>(Value(LogicalType::BIGINT)));
+		}
+
 		// Register the column to be scanned from this file
 		reader_data.column_ids.push_back(entry->second);
+		reader_data.column_indexes.emplace_back(entry->second);
 		reader_data.column_mapping.push_back(delta_global_state.file_row_number_idx);
 	}
 
@@ -408,10 +415,11 @@ void DeltaMultiFileReader::CreateColumnMapping(const string &file_name,
 }
 
 void DeltaMultiFileReader::FinalizeChunk(ClientContext &context, const MultiFileReaderBindData &bind_data,
-                                         const MultiFileReaderData &reader_data, DataChunk &chunk,
-                                         optional_ptr<MultiFileReaderGlobalState> global_state) {
+	                                      const MultiFileReaderData &reader_data, DataChunk &input_chunk,
+	                                      DataChunk &output_chunk, ExpressionExecutor &executor,
+	                                      optional_ptr<MultiFileReaderGlobalState> global_state) {
 	// Base class finalization first
-	MultiFileReader::FinalizeChunk(context, bind_data, reader_data, chunk, global_state);
+	MultiFileReader::FinalizeChunk(context, bind_data, reader_data, input_chunk, output_chunk, executor, global_state);
 
 	D_ASSERT(global_state);
 	auto &delta_global_state = global_state->Cast<DeltaMultiFileReaderGlobalState>();
@@ -421,36 +429,23 @@ void DeltaMultiFileReader::FinalizeChunk(ClientContext &context, const MultiFile
 	const auto &snapshot = dynamic_cast<const DeltaMultiFileList &>(*global_state->file_list);
 	auto &metadata = snapshot.GetMetaData(reader_data.file_list_idx.GetIndex());
 
-	if (metadata.selection_vector.ptr && chunk.size() != 0) {
-		D_ASSERT(delta_global_state.file_row_number_idx != DConstants::INVALID_INDEX);
-		auto &file_row_number_column = chunk.data[delta_global_state.file_row_number_idx];
+	unordered_map<idx_t, MultiFileLocalIndex> global_to_local;
+	for (idx_t i = 0; i < reader_data.column_mapping.size(); i++) {
+		auto local_idx = MultiFileLocalIndex(i);
+		auto global_idx = reader_data.column_mapping[local_idx].GetIndex();
+		global_to_local.emplace(global_idx, local_idx);
+	}
+
+	if (metadata.selection_vector.ptr && input_chunk.size() != 0) {
+		D_ASSERT(delta_global_state.file_row_number_idx.GetIndex() != DConstants::INVALID_INDEX);
+		auto &global_idx = delta_global_state.file_row_number_idx;
+		auto &local_idx = global_to_local.at(global_idx);
+		auto &file_row_number_column = input_chunk.data[local_idx.GetIndex()];
 
 		// Construct the selection vector using the file_row_number column and the raw selection vector from delta
 		idx_t select_count;
-		auto sv = DuckSVFromDeltaSV(metadata.selection_vector, file_row_number_column, chunk.size(), select_count);
-		chunk.Slice(sv, select_count);
-	}
-
-	// Note: this demo function shows how we can use DuckDB's Binder create expression-based generated columns
-	if (delta_global_state.delta_file_number_idx != DConstants::INVALID_INDEX) {
-		//! Create Dummy expression (0 + file_number)
-		vector<unique_ptr<ParsedExpression>> child_expr;
-		child_expr.push_back(make_uniq<ConstantExpression>(Value::UBIGINT(0)));
-		child_expr.push_back(make_uniq<ConstantExpression>(Value::UBIGINT(7)));
-		unique_ptr<ParsedExpression> expr =
-		    make_uniq<FunctionExpression>("+", std::move(child_expr), nullptr, nullptr, false, true);
-
-		//! s dummy expression
-		auto binder = Binder::CreateBinder(context);
-		ExpressionBinder expr_binder(*binder, context);
-		auto bound_expr = expr_binder.Bind(expr, nullptr);
-
-		//! Execute dummy expression into result column
-		ExpressionExecutor expr_executor(context);
-		expr_executor.AddExpression(*bound_expr);
-
-		//! Execute the expression directly into the output Chunk
-		expr_executor.ExecuteExpression(chunk.data[delta_global_state.delta_file_number_idx]);
+		auto sv = DuckSVFromDeltaSV(metadata.selection_vector, file_row_number_column, input_chunk.size(), select_count);
+		output_chunk.Slice(sv, select_count);
 	}
 };
 
diff --git a/src/include/functions/delta_scan/delta_multi_file_reader.hpp b/src/include/functions/delta_scan/delta_multi_file_reader.hpp
index bc6aa05..6f7e3a3 100644
--- a/src/include/functions/delta_scan/delta_multi_file_reader.hpp
+++ b/src/include/functions/delta_scan/delta_multi_file_reader.hpp
@@ -17,12 +17,12 @@ class DeltaMultiFileList;
 
 struct DeltaMultiFileReaderGlobalState : public MultiFileReaderGlobalState {
 	DeltaMultiFileReaderGlobalState(vector<LogicalType> extra_columns_p, optional_ptr<const MultiFileList> file_list_p)
-	    : MultiFileReaderGlobalState(extra_columns_p, file_list_p) {
+	    : MultiFileReaderGlobalState(extra_columns_p, file_list_p), delta_file_number_idx(DConstants::INVALID_INDEX), file_row_number_idx(DConstants::INVALID_INDEX) {
 	}
 	//! The idx of the file number column in the result chunk
-	idx_t delta_file_number_idx = DConstants::INVALID_INDEX;
+	MultiFileGlobalIndex delta_file_number_idx;
 	//! The idx of the file_row_number column in the result chunk
-	idx_t file_row_number_idx = DConstants::INVALID_INDEX;
+	MultiFileGlobalIndex file_row_number_idx;
 
 	void SetColumnIdx(const string &column, idx_t idx);
 };
@@ -42,11 +42,13 @@ struct DeltaMultiFileReader : public MultiFileReader {
 	void BindOptions(MultiFileOptions &options, MultiFileList &files, vector<LogicalType> &return_types,
 	                 vector<string> &names, MultiFileReaderBindData &bind_data) override;
 
-	void CreateColumnMapping(const string &file_name, const vector<MultiFileColumnDefinition> &local_columns,
-	                         const vector<MultiFileColumnDefinition> &global_columns,
-	                         const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
-	                         const MultiFileReaderBindData &bind_data, const string &initial_file,
-	                         optional_ptr<MultiFileReaderGlobalState> global_state) override;
+	void CreateColumnMapping(const string &file_name,
+	                                 const vector<MultiFileColumnDefinition> &local_columns,
+	                                 const vector<MultiFileColumnDefinition> &global_columns,
+	                                 const vector<ColumnIndex> &global_column_ids, MultiFileReaderData &reader_data,
+	                                 const MultiFileReaderBindData &bind_data,
+	                                 const virtual_column_map_t &virtual_columns, const string &initial_file,
+	                                 optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
 	unique_ptr<MultiFileReaderGlobalState>
 	InitializeGlobalState(ClientContext &context, const MultiFileOptions &file_options,
@@ -62,8 +64,9 @@ struct DeltaMultiFileReader : public MultiFileReader {
 
 	//! Override the FinalizeChunk method
 	void FinalizeChunk(ClientContext &context, const MultiFileReaderBindData &bind_data,
-	                   const MultiFileReaderData &reader_data, DataChunk &chunk,
-	                   optional_ptr<MultiFileReaderGlobalState> global_state) override;
+	                                      const MultiFileReaderData &reader_data, DataChunk &input_chunk,
+	                                      DataChunk &output_chunk, ExpressionExecutor &executor,
+	                                      optional_ptr<MultiFileReaderGlobalState> global_state) override;
 
 	//! Override the ParseOption call to parse delta_scan specific options
 	bool ParseOption(const string &key, const Value &val, MultiFileOptions &options,

diff --git a/src/include/inet_extension.hpp b/src/include/inet_extension.hpp
index bb9b18b..fbd22d6 100644
--- a/src/include/inet_extension.hpp
+++ b/src/include/inet_extension.hpp
@@ -15,13 +15,12 @@ namespace duckdb {
 
 class InetExtension : public Extension {
 public:
-  void Load(DuckDB &db) override;
+  void Load(ExtensionLoader &loader) override;
   std::string Name() override;
   std::string Version() const override;
 
-protected:
-  ScalarFunctionSet GetEscapeFunctionSet();
-  ScalarFunction GetUnescapeFunction();
+  static ScalarFunctionSet GetEscapeFunctionSet();
+  static ScalarFunction GetUnescapeFunction();
 };
 
 } // namespace duckdb
diff --git a/src/inet_escape_functions.cpp b/src/inet_escape_functions.cpp
index 0be7481..1503440 100644
--- a/src/inet_escape_functions.cpp
+++ b/src/inet_escape_functions.cpp
@@ -1,5 +1,5 @@
 #include "duckdb/planner/expression/bound_function_expression.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/common/types/blob.hpp"
 #include "utf8proc_wrapper.hpp"
 #include "inet_extension.hpp"
diff --git a/src/inet_extension.cpp b/src/inet_extension.cpp
index 4eb3a86..ac0f107 100644
--- a/src/inet_extension.cpp
+++ b/src/inet_extension.cpp
@@ -1,10 +1,8 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "duckdb.hpp"
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/common/pair.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/function/scalar_function.hpp"
 #include "duckdb/parser/parsed_data/create_type_info.hpp"
 #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
@@ -17,7 +15,7 @@ namespace duckdb {
 
 static constexpr auto INET_TYPE_NAME = "INET";
 
-void InetExtension::Load(DuckDB &db) {
+static void LoadInternal(ExtensionLoader &loader) {
   // add the "inet" type
   child_list_t<LogicalType> children;
   children.push_back(make_pair("ip_type", LogicalType::UTINYINT));
@@ -28,55 +26,55 @@ void InetExtension::Load(DuckDB &db) {
   children.push_back(make_pair("mask", LogicalType::USMALLINT));
   auto inet_type = LogicalType::STRUCT(std::move(children));
   inet_type.SetAlias(INET_TYPE_NAME);
-  ExtensionUtil::RegisterType(*db.instance, INET_TYPE_NAME, inet_type);
+  loader.RegisterType(INET_TYPE_NAME, inet_type);
 
   // add the casts to and from INET type
-  ExtensionUtil::RegisterCastFunction(*db.instance, LogicalType::VARCHAR,
-                                      inet_type,
-                                      INetFunctions::CastVarcharToINET);
-  ExtensionUtil::RegisterCastFunction(*db.instance, inet_type,
-                                      LogicalType::VARCHAR,
-                                      INetFunctions::CastINETToVarchar);
+  loader.RegisterCastFunction(LogicalType::VARCHAR, inet_type,
+    INetFunctions::CastVarcharToINET);
+  loader.RegisterCastFunction(inet_type, LogicalType::VARCHAR,
+    INetFunctions::CastINETToVarchar);
 
   // add inet functions
-  ExtensionUtil::RegisterFunction(
-      *db.instance, ScalarFunction("host", {inet_type}, LogicalType::VARCHAR,
+  loader.RegisterFunction(
+      ScalarFunction("host", {inet_type}, LogicalType::VARCHAR,
                                    INetFunctions::Host));
-  ExtensionUtil::RegisterFunction(
-      *db.instance, ScalarFunction("family", {inet_type}, LogicalType::UTINYINT,
+  loader.RegisterFunction(
+      ScalarFunction("family", {inet_type}, LogicalType::UTINYINT,
                                    INetFunctions::Family));
-  ExtensionUtil::RegisterFunction(
-      *db.instance, ScalarFunction("netmask", {inet_type}, {inet_type},
+  loader.RegisterFunction(
+      ScalarFunction("netmask", {inet_type}, {inet_type},
                                    INetFunctions::Netmask));
-  ExtensionUtil::RegisterFunction(
-      *db.instance, ScalarFunction("network", {inet_type}, {inet_type},
+  loader.RegisterFunction(
+      ScalarFunction("network", {inet_type}, {inet_type},
                                    INetFunctions::Network));
-  ExtensionUtil::RegisterFunction(
-      *db.instance, ScalarFunction("broadcast", {inet_type}, {inet_type},
+  loader.RegisterFunction(
+      ScalarFunction("broadcast", {inet_type}, {inet_type},
                                    INetFunctions::Broadcast));
-  ExtensionUtil::RegisterFunction(*db.instance, GetEscapeFunctionSet());
-  ExtensionUtil::RegisterFunction(*db.instance, GetUnescapeFunction());
+  loader.RegisterFunction(InetExtension::GetEscapeFunctionSet());
+  loader.RegisterFunction(InetExtension::GetUnescapeFunction());
 
   // Add - function with ALTER_ON_CONFLICT
   ScalarFunction substract_fun("-", {inet_type, LogicalType::HUGEINT},
                                inet_type, INetFunctions::Subtract);
-  ExtensionUtil::AddFunctionOverload(*db.instance, substract_fun);
+  loader.AddFunctionOverload(substract_fun);
 
   ScalarFunction add_fun("+", {inet_type, LogicalType::HUGEINT}, inet_type,
                          INetFunctions::Add);
-  ExtensionUtil::AddFunctionOverload(*db.instance, add_fun);
+  loader.AddFunctionOverload(add_fun);
 
   // Add IP range operators
-  ExtensionUtil::RegisterFunction(*db.instance,
-                                  ScalarFunction("<<=", {inet_type, inet_type},
+  loader.RegisterFunction(ScalarFunction("<<=", {inet_type, inet_type},
                                                  LogicalType::BOOLEAN,
                                                  INetFunctions::ContainsLeft));
-  ExtensionUtil::RegisterFunction(*db.instance,
-                                  ScalarFunction(">>=", {inet_type, inet_type},
+  loader.RegisterFunction(ScalarFunction(">>=", {inet_type, inet_type},
                                                  LogicalType::BOOLEAN,
                                                  INetFunctions::ContainsRight));
 }
 
+void InetExtension::Load(ExtensionLoader &loader) {
+  LoadInternal(loader);
+}
+
 std::string InetExtension::Name() { return "inet"; }
 
 std::string InetExtension::Version() const {
@@ -91,16 +89,8 @@ std::string InetExtension::Version() const {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void inet_init(duckdb::DatabaseInstance &db) {
-  duckdb::DuckDB db_wrapper(db);
-  db_wrapper.LoadExtension<duckdb::InetExtension>();
+DUCKDB_CPP_EXTENSION_ENTRY(inet, loader) {
+  duckdb::LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *inet_version() {
-  return duckdb::DuckDB::LibraryVersion();
 }
-}
-
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif

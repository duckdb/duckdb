diff --git a/src/include/sqlite_scanner_extension.hpp b/src/include/sqlite_scanner_extension.hpp
index 40dfb9a..d290788 100644
--- a/src/include/sqlite_scanner_extension.hpp
+++ b/src/include/sqlite_scanner_extension.hpp
@@ -13,11 +13,9 @@ public:
 	std::string Name() override {
 		return "sqlite_scanner";
 	}
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 };
 
 extern "C" {
-DUCKDB_EXTENSION_API void sqlite_scanner_init(duckdb::DatabaseInstance &db);
-DUCKDB_EXTENSION_API const char *sqlite_scanner_version();
-DUCKDB_EXTENSION_API void sqlite_scanner_storage_init(DBConfig &config);
+	DUCKDB_CPP_EXTENSION_ENTRY(sqlite_scanner, loader);
 }
\ No newline at end of file
diff --git a/src/sqlite_extension.cpp b/src/sqlite_extension.cpp
index f85328f..c2f7c81 100644
--- a/src/sqlite_extension.cpp
+++ b/src/sqlite_extension.cpp
@@ -9,7 +9,7 @@
 #include "sqlite_scanner_extension.hpp"
 
 #include "duckdb/catalog/catalog.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 
 using namespace duckdb;
@@ -20,16 +20,17 @@ static void SetSqliteDebugQueryPrint(ClientContext &context, SetScope scope, Val
 	SQLiteDB::DebugSetPrintQueries(BooleanValue::Get(parameter));
 }
 
-static void LoadInternal(DatabaseInstance &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	SqliteScanFunction sqlite_fun;
-	ExtensionUtil::RegisterFunction(db, sqlite_fun);
+	loader.RegisterFunction(sqlite_fun);
 
 	SqliteAttachFunction attach_func;
-	ExtensionUtil::RegisterFunction(db, attach_func);
+	loader.RegisterFunction(attach_func);
 
 	SQLiteQueryFunction query_func;
-	ExtensionUtil::RegisterFunction(db, query_func);
+	loader.RegisterFunction(query_func);
 
+	auto &db = loader.GetDatabaseInstance();
 	auto &config = DBConfig::GetConfig(db);
 	config.AddExtensionOption("sqlite_all_varchar", "Load all SQLite columns as VARCHAR columns", LogicalType::BOOLEAN);
 
@@ -39,19 +40,12 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.storage_extensions["sqlite_scanner"] = make_uniq<SQLiteStorageExtension>();
 }
 
-void SqliteScannerExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void SqliteScannerExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API void sqlite_scanner_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
+DUCKDB_CPP_EXTENSION_ENTRY(sqlite_scanner, loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *sqlite_scanner_version() {
-	return DuckDB::LibraryVersion();
-}
-
-DUCKDB_EXTENSION_API void sqlite_scanner_storage_init(DBConfig &config) {
-	config.storage_extensions["sqlite_scanner"] = make_uniq<SQLiteStorageExtension>();
-}
 }

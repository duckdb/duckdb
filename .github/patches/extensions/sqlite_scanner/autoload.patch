diff --git a/src/sqlite_extension.cpp b/src/sqlite_extension.cpp
index 71e0347..aff292d 100644
--- a/src/sqlite_extension.cpp
+++ b/src/sqlite_extension.cpp
@@ -8,6 +8,7 @@
 #include "sqlite_scanner_extension.hpp"
 
 #include "duckdb/catalog/catalog.hpp"
+#include "duckdb/main/extension_util.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 
 using namespace duckdb;
@@ -15,26 +16,16 @@ using namespace duckdb;
 extern "C" {
 
 static void LoadInternal(DatabaseInstance &db) {
-	Connection con(db);
-	con.BeginTransaction();
-	auto &context = *con.context;
-	auto &catalog = Catalog::GetSystemCatalog(context);
-
 	SqliteScanFunction sqlite_fun;
-	CreateTableFunctionInfo sqlite_info(sqlite_fun);
-	catalog.CreateTableFunction(context, sqlite_info);
+	ExtensionUtil::RegisterFunction(db, sqlite_fun);
 
 	SqliteAttachFunction attach_func;
-
-	CreateTableFunctionInfo attach_info(attach_func);
-	catalog.CreateTableFunction(context, attach_info);
+	ExtensionUtil::RegisterFunction(db, attach_func);
 
 	auto &config = DBConfig::GetConfig(db);
 	config.AddExtensionOption("sqlite_all_varchar", "Load all SQLite columns as VARCHAR columns", LogicalType::BOOLEAN);
 
 	config.storage_extensions["sqlite_scanner"] = make_uniq<SQLiteStorageExtension>();
-
-	con.Commit();
 }
 
 void SqliteScannerExtension::Load(DuckDB &db) {

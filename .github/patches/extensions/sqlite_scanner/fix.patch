diff --git a/src/include/sqlite_scanner_extension.hpp b/src/include/sqlite_scanner_extension.hpp
index 40dfb9a..d290788 100644
--- a/src/include/sqlite_scanner_extension.hpp
+++ b/src/include/sqlite_scanner_extension.hpp
@@ -13,11 +13,9 @@ public:
 	std::string Name() override {
 		return "sqlite_scanner";
 	}
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 };
 
 extern "C" {
-DUCKDB_EXTENSION_API void sqlite_scanner_init(duckdb::DatabaseInstance &db);
-DUCKDB_EXTENSION_API const char *sqlite_scanner_version();
-DUCKDB_EXTENSION_API void sqlite_scanner_storage_init(DBConfig &config);
+	DUCKDB_CPP_EXTENSION_ENTRY(sqlite_scanner, loader);
 }
\ No newline at end of file
diff --git a/src/include/storage/sqlite_delete.hpp b/src/include/storage/sqlite_delete.hpp
index 3c07df3..7315ebe 100644
--- a/src/include/storage/sqlite_delete.hpp
+++ b/src/include/storage/sqlite_delete.hpp
@@ -14,7 +14,7 @@ namespace duckdb {
 
 class SQLiteDelete : public PhysicalOperator {
 public:
-	SQLiteDelete(LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index);
+	SQLiteDelete(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index);
 
 	//! The table to delete from
 	TableCatalogEntry &table;
diff --git a/src/include/storage/sqlite_index.hpp b/src/include/storage/sqlite_index.hpp
index 4400497..f60a33a 100644
--- a/src/include/storage/sqlite_index.hpp
+++ b/src/include/storage/sqlite_index.hpp
@@ -16,7 +16,7 @@ namespace duckdb {
 //! PhysicalCreateSequence represents a CREATE SEQUENCE command
 class SQLiteCreateIndex : public PhysicalOperator {
 public:
-	explicit SQLiteCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
+	SQLiteCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
 
 	unique_ptr<CreateIndexInfo> info;
 	TableCatalogEntry &table;
diff --git a/src/include/storage/sqlite_insert.hpp b/src/include/storage/sqlite_insert.hpp
index 65ec357..2a5d181 100644
--- a/src/include/storage/sqlite_insert.hpp
+++ b/src/include/storage/sqlite_insert.hpp
@@ -16,9 +16,9 @@ namespace duckdb {
 class SQLiteInsert : public PhysicalOperator {
 public:
 	//! INSERT INTO
-	SQLiteInsert(LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
+	SQLiteInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
 	//! CREATE TABLE AS
-	SQLiteInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
+	SQLiteInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
 
 	//! The table to insert into
 	optional_ptr<TableCatalogEntry> table;
diff --git a/src/include/storage/sqlite_update.hpp b/src/include/storage/sqlite_update.hpp
index 0061620..92ed76e 100644
--- a/src/include/storage/sqlite_update.hpp
+++ b/src/include/storage/sqlite_update.hpp
@@ -15,7 +15,7 @@ namespace duckdb {
 
 class SQLiteUpdate : public PhysicalOperator {
 public:
-	SQLiteUpdate(LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns);
+	SQLiteUpdate(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns);
 
 	//! The table to delete from
 	TableCatalogEntry &table;
diff --git a/src/sqlite_extension.cpp b/src/sqlite_extension.cpp
index f85328f..c2f7c81 100644
--- a/src/sqlite_extension.cpp
+++ b/src/sqlite_extension.cpp
@@ -9,7 +9,7 @@
 #include "sqlite_scanner_extension.hpp"
 
 #include "duckdb/catalog/catalog.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 
 using namespace duckdb;
@@ -20,16 +20,17 @@ static void SetSqliteDebugQueryPrint(ClientContext &context, SetScope scope, Val
 	SQLiteDB::DebugSetPrintQueries(BooleanValue::Get(parameter));
 }
 
-static void LoadInternal(DatabaseInstance &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	SqliteScanFunction sqlite_fun;
-	ExtensionUtil::RegisterFunction(db, sqlite_fun);
+	loader.RegisterFunction(sqlite_fun);
 
 	SqliteAttachFunction attach_func;
-	ExtensionUtil::RegisterFunction(db, attach_func);
+	loader.RegisterFunction(attach_func);
 
 	SQLiteQueryFunction query_func;
-	ExtensionUtil::RegisterFunction(db, query_func);
+	loader.RegisterFunction(query_func);
 
+	auto &db = loader.GetDatabaseInstance();
 	auto &config = DBConfig::GetConfig(db);
 	config.AddExtensionOption("sqlite_all_varchar", "Load all SQLite columns as VARCHAR columns", LogicalType::BOOLEAN);
 
@@ -39,19 +40,12 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.storage_extensions["sqlite_scanner"] = make_uniq<SQLiteStorageExtension>();
 }
 
-void SqliteScannerExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void SqliteScannerExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API void sqlite_scanner_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
+DUCKDB_CPP_EXTENSION_ENTRY(sqlite_scanner, loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *sqlite_scanner_version() {
-	return DuckDB::LibraryVersion();
-}
-
-DUCKDB_EXTENSION_API void sqlite_scanner_storage_init(DBConfig &config) {
-	config.storage_extensions["sqlite_scanner"] = make_uniq<SQLiteStorageExtension>();
-}
 }
diff --git a/src/storage/sqlite_delete.cpp b/src/storage/sqlite_delete.cpp
index c19f45b..bde562f 100644
--- a/src/storage/sqlite_delete.cpp
+++ b/src/storage/sqlite_delete.cpp
@@ -9,8 +9,8 @@
 
 namespace duckdb {
 
-SQLiteDelete::SQLiteDelete(LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(table), row_id_index(row_id_index) {
+SQLiteDelete::SQLiteDelete(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, idx_t row_id_index)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(table), row_id_index(row_id_index) {
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/storage/sqlite_index.cpp b/src/storage/sqlite_index.cpp
index 440db80..e076502 100644
--- a/src/storage/sqlite_index.cpp
+++ b/src/storage/sqlite_index.cpp
@@ -6,8 +6,8 @@
 
 namespace duckdb {
 
-SQLiteCreateIndex::SQLiteCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
+SQLiteCreateIndex::SQLiteCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/storage/sqlite_insert.cpp b/src/storage/sqlite_insert.cpp
index 9cd4786..fbca2ac 100644
--- a/src/storage/sqlite_insert.cpp
+++ b/src/storage/sqlite_insert.cpp
@@ -13,14 +13,14 @@
 
 namespace duckdb {
 
-SQLiteInsert::SQLiteInsert(LogicalOperator &op, TableCatalogEntry &table,
+SQLiteInsert::SQLiteInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table,
                            physical_index_vector_t<idx_t> column_index_map_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
       column_index_map(std::move(column_index_map_p)) {
 }
 
-SQLiteInsert::SQLiteInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
+SQLiteInsert::SQLiteInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
       info(std::move(info)) {
 }
 
diff --git a/src/storage/sqlite_update.cpp b/src/storage/sqlite_update.cpp
index b550549..6c071d7 100644
--- a/src/storage/sqlite_update.cpp
+++ b/src/storage/sqlite_update.cpp
@@ -8,8 +8,8 @@
 
 namespace duckdb {
 
-SQLiteUpdate::SQLiteUpdate(LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(table), columns(std::move(columns_p)) {
+SQLiteUpdate::SQLiteUpdate(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, vector<PhysicalIndex> columns_p)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(table), columns(std::move(columns_p)) {
 }
 
 //===--------------------------------------------------------------------===//

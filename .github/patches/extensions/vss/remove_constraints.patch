diff --git a/src/hnsw/hnsw_index.cpp b/src/hnsw/hnsw_index.cpp
index 50cb165..ce89f08 100644
--- a/src/hnsw/hnsw_index.cpp
+++ b/src/hnsw/hnsw_index.cpp
@@ -499,14 +499,6 @@ ErrorData HNSWIndex::Append(IndexLock &lock, DataChunk &appended_data, Vector &r
 	return ErrorData {};
 }
 
-void HNSWIndex::VerifyAppend(DataChunk &chunk) {
-	// There is nothing to verify here as we dont support constraints anyway
-}
-
-void HNSWIndex::VerifyAppend(DataChunk &chunk, ConflictManager &conflict_manager) {
-	// There is nothing to verify here as we dont support constraints anyway
-}
-
 void HNSWIndex::PersistToDisk() {
 	// Acquire an exclusive lock to persist the index
 	auto lock = rwlock.GetExclusiveLock();
@@ -565,10 +557,6 @@ bool HNSWIndex::MergeIndexes(IndexLock &state, BoundIndex &other_index) {
 void HNSWIndex::Vacuum(IndexLock &state) {
 }
 
-void HNSWIndex::CheckConstraintsForChunk(DataChunk &input, ConflictManager &conflict_manager) {
-	throw NotImplementedException("HNSWIndex::CheckConstraintsForChunk() not implemented");
-}
-
 string HNSWIndex::VerifyAndToString(IndexLock &state, const bool only_verify) {
 	throw NotImplementedException("HNSWIndex::VerifyAndToString() not implemented");
 }
diff --git a/src/include/hnsw/hnsw_index.hpp b/src/include/hnsw/hnsw_index.hpp
index 2b7d87a..dde408c 100644
--- a/src/include/hnsw/hnsw_index.hpp
+++ b/src/include/hnsw/hnsw_index.hpp
@@ -69,10 +69,7 @@ public:
 public:
 	//! Called when data is appended to the index. The lock obtained from InitializeLock must be held
 	ErrorData Append(IndexLock &lock, DataChunk &entries, Vector &row_identifiers) override;
-	//! Verify that data can be appended to the index without a constraint violation
-	void VerifyAppend(DataChunk &chunk) override;
-	//! Verify that data can be appended to the index without a constraint violation using the conflict manager
-	void VerifyAppend(DataChunk &chunk, ConflictManager &conflict_manager) override;
+
 	//! Deletes all data from the index. The lock obtained from InitializeLock must be held
 	void CommitDrop(IndexLock &index_lock) override;
 	//! Delete a chunk of entries from the index. The lock obtained from InitializeLock must be held
@@ -90,9 +87,6 @@ public:
 	//! Traverses an HNSWIndex and vacuums the qualifying nodes. The lock obtained from InitializeLock must be held
 	void Vacuum(IndexLock &state) override;
 
-	//! Performs constraint checking for a chunk of input data
-	void CheckConstraintsForChunk(DataChunk &input, ConflictManager &conflict_manager) override;
-
 	//! Returns the string representation of the HNSWIndex, or only traverses and verifies the index.
 	string VerifyAndToString(IndexLock &state, const bool only_verify) override;
 	//! Ensures that the node allocation counts match the node counts.

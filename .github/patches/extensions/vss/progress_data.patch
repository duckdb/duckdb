diff --git a/src/hnsw/hnsw_index_physical_create.cpp b/src/hnsw/hnsw_index_physical_create.cpp
index 82ac33e..1130598 100644
--- a/src/hnsw/hnsw_index_physical_create.cpp
+++ b/src/hnsw/hnsw_index_physical_create.cpp
@@ -305,17 +305,21 @@ SinkFinalizeType PhysicalCreateHNSWIndex::Finalize(Pipeline &pipeline, Event &ev
 	return SinkFinalizeType::READY;
 }
 
-double PhysicalCreateHNSWIndex::GetSinkProgress(ClientContext &context, GlobalSinkState &gstate,
-                                                double source_progress) const {
+ProgressData PhysicalCreateHNSWIndex::GetSinkProgress(ClientContext &context, GlobalSinkState &gstate,
+                                                ProgressData source_progress) const {
 	// The "source_progress" is not relevant for CREATE INDEX statements
+	ProgressData res;
+
 	const auto &state = gstate.Cast<CreateHNSWIndexGlobalState>();
 	// First half of the progress is appending to the collection
 	if (!state.is_building) {
-		return 50.0 *
-		       MinValue(1.0, static_cast<double>(state.loaded_count) / static_cast<double>(estimated_cardinality));
+		res.done = state.loaded_count + 0.0;
+		res.total = estimated_cardinality + estimated_cardinality;
+	} else {
+		res.done = state.loaded_count + state.built_count;
+		res.total = state.loaded_count + state.loaded_count;
 	}
-	// Second half is actually building the index
-	return 50.0 + (50.0 * static_cast<double>(state.built_count) / static_cast<double>(state.loaded_count));
+	return res;
 }
 
-} // namespace duckdb
\ No newline at end of file
+} // namespace duckdb
diff --git a/src/include/hnsw/hnsw_index_physical_create.hpp b/src/include/hnsw/hnsw_index_physical_create.hpp
index b620831..069887c 100644
--- a/src/include/hnsw/hnsw_index_physical_create.hpp
+++ b/src/include/hnsw/hnsw_index_physical_create.hpp
@@ -1,5 +1,6 @@
 #pragma once
 #include "duckdb/execution/physical_operator.hpp"
+#include "duckdb/execution/progress_data.hpp"
 #include "duckdb/storage/data_table.hpp"
 
 namespace duckdb {
@@ -52,7 +53,7 @@ public:
 		return true;
 	}
 
-	double GetSinkProgress(ClientContext &context, GlobalSinkState &gstate, double source_progress) const override;
+	ProgressData GetSinkProgress(ClientContext &context, GlobalSinkState &gstate, ProgressData source_progress) const override;
 };
 
-} // namespace duckdb
\ No newline at end of file
+} // namespace duckdb

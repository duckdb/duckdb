diff --git a/src/hnsw/hnsw_index.cpp b/src/hnsw/hnsw_index.cpp
index a280522b30..687860728c 100644
--- a/src/hnsw/hnsw_index.cpp
+++ b/src/hnsw/hnsw_index.cpp
@@ -122,7 +122,7 @@ HNSWIndex::HNSWIndex(const string &name, IndexConstraintType index_constraint_ty
                      TableIOManager &table_io_manager, const vector<unique_ptr<Expression>> &unbound_expressions,
                      AttachedDatabase &db, const case_insensitive_map_t<Value> &options, const IndexStorageInfo &info,
                      idx_t estimated_cardinality)
-    : Index(name, TYPE_NAME, index_constraint_type, column_ids, table_io_manager, unbound_expressions, db) {
+    : BoundIndex(name, TYPE_NAME, index_constraint_type, column_ids, table_io_manager, unbound_expressions, db) {
 
 	if (index_constraint_type != IndexConstraintType::NONE) {
 		throw NotImplementedException("HNSW indexes do not support unique or primary key constraints");
@@ -517,7 +517,7 @@ idx_t HNSWIndex::GetInMemorySize(IndexLock &state) {
 	return index.memory_usage();
 }
 
-bool HNSWIndex::MergeIndexes(IndexLock &state, Index &other_index) {
+bool HNSWIndex::MergeIndexes(IndexLock &state, BoundIndex &other_index) {
 	throw NotImplementedException("HNSWIndex::MergeIndexes() not implemented");
 }
 
@@ -538,9 +538,9 @@ string HNSWIndex::VerifyAndToString(IndexLock &state, const bool only_verify) {
 void HNSWModule::RegisterIndex(DatabaseInstance &db) {
 
 	IndexType index_type;
-	index_type.name = HNSWIndex::TYPE_NAME;
 
-	index_type.create_instance = [](CreateIndexInput &input) -> unique_ptr<Index> {
+	index_type.name = HNSWIndex::TYPE_NAME;
+	index_type.create_instance = [](CreateIndexInput &input) -> unique_ptr<BoundIndex> {
 		auto res = make_uniq<HNSWIndex>(input.name, input.constraint_type, input.column_ids, input.table_io_manager,
 		                                input.unbound_expressions, input.db, input.options, input.storage_info);
 		return std::move(res);
diff --git a/src/hnsw/hnsw_index_physical_create.cpp b/src/hnsw/hnsw_index_physical_create.cpp
index 9ab0b87fae..6123ba3e3c 100644
--- a/src/hnsw/hnsw_index_physical_create.cpp
+++ b/src/hnsw/hnsw_index_physical_create.cpp
@@ -33,7 +33,7 @@ PhysicalCreateHNSWIndex::PhysicalCreateHNSWIndex(LogicalOperator &op, TableCatal
 class CreateHNSWIndexGlobalState : public GlobalSinkState {
 public:
 	//! Global index to be added to the table
-	unique_ptr<Index> global_index;
+	unique_ptr<HNSWIndex> global_index;
 	atomic<idx_t> next_thread_id = {0};
 };
 
@@ -74,7 +74,7 @@ SinkResultType PhysicalCreateHNSWIndex::Sink(ExecutionContext &context, DataChun
                                              OperatorSinkInput &input) const {
 	auto &gstate = input.global_state.Cast<CreateHNSWIndexGlobalState>();
 	auto &lstate = input.local_state.Cast<CreateHNSWIndexLocalState>();
-	auto &index = gstate.global_index->Cast<HNSWIndex>();
+	auto &index = *gstate.global_index;
 
 	if (lstate.thread_id == idx_t(-1)) {
 		lstate.thread_id = gstate.next_thread_id++;
@@ -119,7 +119,7 @@ SinkFinalizeType PhysicalCreateHNSWIndex::Finalize(Pipeline &pipeline, Event &ev
 	// If not in memory, persist the index to disk
 	if (!storage.db.GetStorageManager().InMemory()) {
 		// Finalize the index
-		gstate.global_index->Cast<HNSWIndex>().PersistToDisk();
+		gstate.global_index->PersistToDisk();
 	}
 
 	if (!storage.IsRoot()) {
@@ -138,14 +138,14 @@ SinkFinalizeType PhysicalCreateHNSWIndex::Finalize(Pipeline &pipeline, Event &ev
 
 	// Get the entry as a DuckIndexEntry
 	auto &index = index_entry->Cast<DuckIndexEntry>();
-	index.initial_index_size = gstate.global_index->GetInMemorySize();
+	index.initial_index_size = gstate.global_index->Cast<BoundIndex>().GetInMemorySize();
 	index.info = make_uniq<IndexDataTableInfo>(storage.GetDataTableInfo(), index.name);
 	for (auto &parsed_expr : info->parsed_expressions) {
 		index.parsed_expressions.push_back(parsed_expr->Copy());
 	}
 
 	// Finally add it to storage
-	storage.GetDataTableInfo()->GetIndexes().AddIndex(std::move(gstate.global_index));
+	storage.AddIndex(std::move(gstate.global_index));
 
 	return SinkFinalizeType::READY;
 }
diff --git a/src/hnsw/hnsw_index_pragmas.cpp b/src/hnsw/hnsw_index_pragmas.cpp
index cb9bfd2841..97f831a855 100644
--- a/src/hnsw/hnsw_index_pragmas.cpp
+++ b/src/hnsw/hnsw_index_pragmas.cpp
@@ -99,14 +99,14 @@ static void HNSWIndexInfoExecute(ClientContext &context, TableFunctionInput &dat
 		HNSWIndex *hnsw_index = nullptr;
 
 		auto &table_info = *storage.GetDataTableInfo();
-		table_info.InitializeIndexes(context);
-		table_info.GetIndexes().Scan([&](Index &index) {
-			if (index.name == index_entry.name && index.index_type == HNSWIndex::TYPE_NAME) {
-				hnsw_index = &index.Cast<HNSWIndex>();
+		table_info.GetIndexes().BindAndScan<HNSWIndex>(context, table_info, [&](HNSWIndex &index) {
+			if (index.name == index_entry.name) {
+				hnsw_index = &index;
 				return true;
 			}
 			return false;
 		});
+
 		if (!hnsw_index) {
 			throw BinderException("Index %s not found", index_entry.name);
 		}
@@ -175,10 +175,8 @@ static void CompactIndexPragma(ClientContext &context, const FunctionParameters
 	bool found_index = false;
 
 	auto &table_info = *storage.GetDataTableInfo();
-	table_info.InitializeIndexes(context);
-	table_info.GetIndexes().Scan([&](Index &index_entry) {
-		if (index_entry.name == index_name && index_entry.index_type == HNSWIndex::TYPE_NAME && !index_entry.IsUnknown()) {
-			auto &hnsw_index = index_entry.Cast<HNSWIndex>();
+	table_info.GetIndexes().BindAndScan<HNSWIndex>(context, table_info,  [&](HNSWIndex &hnsw_index) {
+		if (index_entry.name == index_name) {
 			hnsw_index.Compact();
 			found_index = true;
 			return true;
diff --git a/src/hnsw/hnsw_index_scan.cpp b/src/hnsw/hnsw_index_scan.cpp
index d09aae9df3..71f657199a 100644
--- a/src/hnsw/hnsw_index_scan.cpp
+++ b/src/hnsw/hnsw_index_scan.cpp
@@ -124,7 +124,7 @@ unique_ptr<NodeStatistics> HNSWIndexScanCardinality(ClientContext &context, cons
 //-------------------------------------------------------------------------
 static string HNSWIndexScanToString(const FunctionData *bind_data_p) {
 	auto &bind_data = bind_data_p->Cast<HNSWIndexScanBindData>();
-	return bind_data.table.name + " (HNSW INDEX SCAN : " + bind_data.index.name + ")";
+	return bind_data.table.name + " (HNSW INDEX SCAN : " + bind_data.index.GetIndexName() + ")";
 }
 
 //-------------------------------------------------------------------------
diff --git a/src/hnsw/hnsw_plan_index_scan.cpp b/src/hnsw/hnsw_plan_index_scan.cpp
index d08a8590b1..3bec53a34b 100644
--- a/src/hnsw/hnsw_plan_index_scan.cpp
+++ b/src/hnsw/hnsw_plan_index_scan.cpp
@@ -132,38 +132,32 @@ public:
 		auto &duck_table = table.Cast<DuckTableEntry>();
 		auto &table_info = *table.GetStorage().GetDataTableInfo();
 
-		// Load the indexes
-		table_info.InitializeIndexes(context);
-
 		// Find the index
 		unique_ptr<HNSWIndexScanBindData> bind_data = nullptr;
-		table_info.GetIndexes().Scan([&](Index &index_entry) {
-			if (index_entry.index_type == HNSWIndex::TYPE_NAME) {
-				auto &hnsw_index = index_entry.Cast<HNSWIndex>();
-
-				if (hnsw_index.GetVectorSize() != array_size) {
-					// The vector size of the index does not match the vector size of the query
-					return false;
-				}
+		table_info.GetIndexes().BindAndScan<HNSWIndex>(context, table_info, [&](HNSWIndex &index_entry) {
+			auto &hnsw_index = index_entry.Cast<HNSWIndex>();
 
-				if (!hnsw_index.MatchesDistanceFunction(bound_function.function.name)) {
-					// The distance function of the index does not match the distance function of the query
-					return false;
-				}
+			if (hnsw_index.GetVectorSize() != array_size) {
+				// The vector size of the index does not match the vector size of the query
+				return false;
+			}
 
-				// Create a query vector from the constant value
-				auto query_vector = make_unsafe_uniq_array<float>(array_size);
-				auto vector_elements = ArrayValue::GetChildren(target_value);
-				for (idx_t i = 0; i < array_size; i++) {
-					query_vector[i] = vector_elements[i].GetValue<float>();
-				}
+			if (!hnsw_index.MatchesDistanceFunction(bound_function.function.name)) {
+				// The distance function of the index does not match the distance function of the query
+				return false;
+			}
 
-				// Create the bind data for this index
-				bind_data =
-				    make_uniq<HNSWIndexScanBindData>(duck_table, index_entry, top_n.limit, std::move(query_vector));
-				return true;
+			// Create a query vector from the constant value
+			auto query_vector = make_unsafe_uniq_array<float>(array_size);
+			auto vector_elements = ArrayValue::GetChildren(target_value);
+			for (idx_t i = 0; i < array_size; i++) {
+				query_vector[i] = vector_elements[i].GetValue<float>();
 			}
-			return false;
+
+			// Create the bind data for this index
+			bind_data =
+				make_uniq<HNSWIndexScanBindData>(duck_table, index_entry, top_n.limit, std::move(query_vector));
+			return true;
 		});
 
 		if (!bind_data) {
diff --git a/src/include/hnsw/hnsw_index.hpp b/src/include/hnsw/hnsw_index.hpp
index d26ce3247d..0652a7dcbd 100644
--- a/src/include/hnsw/hnsw_index.hpp
+++ b/src/include/hnsw/hnsw_index.hpp
@@ -1,11 +1,12 @@
 #pragma once
 
-#include "duckdb/storage/index.hpp"
-#include "duckdb/common/array.hpp"
+
+#include "duckdb/execution/index/bound_index.hpp"
 #include "duckdb/execution/index/index_pointer.hpp"
 #include "duckdb/execution/index/fixed_size_allocator.hpp"
-#include "duckdb/common/unordered_map.hpp"
+#include "duckdb/common/array.hpp"
 #include "duckdb/common/case_insensitive_map.hpp"
+#include "duckdb/common/unordered_map.hpp"
 
 #include "usearch/duckdb_usearch.hpp"
 
@@ -21,7 +22,7 @@ struct HNSWIndexStats {
 	vector<unum::usearch::index_dense_gt<row_t>::stats_t> level_stats;
 };
 
-class HNSWIndex : public Index {
+class HNSWIndex : public BoundIndex {
 public:
 	// The type name of the HNSWIndex
 	static constexpr const char *TYPE_NAME = "HNSW";
@@ -77,7 +78,7 @@ public:
 
 	//! Merge another index into this index. The lock obtained from InitializeLock must be held, and the other
 	//! index must also be locked during the merge
-	bool MergeIndexes(IndexLock &state, Index &other_index) override;
+	bool MergeIndexes(IndexLock &state, BoundIndex &other_index) override;
 
 	//! Traverses an HNSWIndex and vacuums the qualifying nodes. The lock obtained from InitializeLock must be held
 	void Vacuum(IndexLock &state) override;

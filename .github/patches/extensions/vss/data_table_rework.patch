diff --git a/src/hnsw/hnsw_index.cpp b/src/hnsw/hnsw_index.cpp
index 92d7c67..7e4bcdc 100644
--- a/src/hnsw/hnsw_index.cpp
+++ b/src/hnsw/hnsw_index.cpp
@@ -3,6 +3,7 @@
 #include "duckdb/common/serializer/binary_deserializer.hpp"
 #include "duckdb/common/serializer/binary_serializer.hpp"
 #include "duckdb/execution/index/fixed_size_allocator.hpp"
+#include "duckdb/storage/partial_block_manager.hpp"
 #include "duckdb/storage/table/scan_state.hpp"
 #include "hnsw/hnsw.hpp"
 
@@ -480,7 +481,7 @@ IndexStorageInfo HNSWIndex::GetStorageInfo(const bool get_buffers) {
 	if (!get_buffers) {
 		// use the partial block manager to serialize all allocator data
 		auto &block_manager = table_io_manager.GetIndexBlockManager();
-		PartialBlockManager partial_block_manager(block_manager, CheckpointType::FULL_CHECKPOINT);
+		PartialBlockManager partial_block_manager(block_manager, PartialBlockType::FULL_CHECKPOINT);
 		linked_block_allocator->SerializeBuffers(partial_block_manager);
 		partial_block_manager.FlushPartialBlocks();
 	} else {
diff --git a/src/hnsw/hnsw_index_physical_create.cpp b/src/hnsw/hnsw_index_physical_create.cpp
index 67ba14c..99a56c4 100644
--- a/src/hnsw/hnsw_index_physical_create.cpp
+++ b/src/hnsw/hnsw_index_physical_create.cpp
@@ -139,13 +139,13 @@ SinkFinalizeType PhysicalCreateHNSWIndex::Finalize(Pipeline &pipeline, Event &ev
 	// Get the entry as a DuckIndexEntry
 	auto &index = index_entry->Cast<DuckIndexEntry>();
 	index.initial_index_size = gstate.global_index->GetInMemorySize();
-	index.info = make_uniq<IndexDataTableInfo>(storage.info, index.name);
+	index.info = make_uniq<IndexDataTableInfo>(storage.GetDataTableInfo(), index.name);
 	for (auto &parsed_expr : info->parsed_expressions) {
 		index.parsed_expressions.push_back(parsed_expr->Copy());
 	}
 
 	// Finally add it to storage
-	storage.info->indexes.AddIndex(std::move(gstate.global_index));
+	storage.AddIndex(std::move(gstate.global_index));
 
 	return SinkFinalizeType::READY;
 }
diff --git a/src/hnsw/hnsw_index_pragmas.cpp b/src/hnsw/hnsw_index_pragmas.cpp
index cef1293..19e92fd 100644
--- a/src/hnsw/hnsw_index_pragmas.cpp
+++ b/src/hnsw/hnsw_index_pragmas.cpp
@@ -98,8 +98,8 @@ static void HNSWIndexInfoExecute(ClientContext &context, TableFunctionInput &dat
 		auto &storage = table_entry.GetStorage();
 		HNSWIndex *hnsw_index = nullptr;
 
-		storage.info->InitializeIndexes(context);
-		storage.info->indexes.Scan([&](Index &index) {
+		storage.InitializeIndexes(context);
+		storage.GetDataTableInfo()->GetIndexes().Scan([&](Index &index) {
 			if (index.name == index_entry.name && index.index_type == HNSWIndex::TYPE_NAME) {
 				hnsw_index = &index.Cast<HNSWIndex>();
 				return true;
@@ -172,7 +172,7 @@ static void CompactIndexPragma(ClientContext &context, const FunctionParameters
 
 	auto &storage = table_entry.GetStorage();
 	bool found_index = false;
-	storage.info->indexes.Scan([&](Index &index_entry) {
+	storage.GetDataTableInfo()->GetIndexes().Scan([&](Index &index_entry) {
 		if (index_entry.name == index_name && index_entry.index_type == HNSWIndex::TYPE_NAME) {
 			auto &hnsw_index = index_entry.Cast<HNSWIndex>();
 			hnsw_index.Compact();
diff --git a/src/hnsw/hnsw_plan_index_scan.cpp b/src/hnsw/hnsw_plan_index_scan.cpp
index 09a7de9..69f00e7 100644
--- a/src/hnsw/hnsw_plan_index_scan.cpp
+++ b/src/hnsw/hnsw_plan_index_scan.cpp
@@ -128,14 +128,14 @@ public:
 		}
 
 		auto &duck_table = table.Cast<DuckTableEntry>();
-		auto &table_info = table.GetStorage().info;
+		auto &table_info = table.GetStorage().GetDataTableInfo();
 
 		// Load the indexes
 		table_info->InitializeIndexes(context);
 
 		// Find the index
 		unique_ptr<HNSWIndexScanBindData> bind_data = nullptr;
-		table_info->indexes.Scan([&](Index &index_entry) {
+		table_info->GetIndexes().Scan([&](Index &index_entry) {
 			if (index_entry.index_type == HNSWIndex::TYPE_NAME) {
 				auto &hnsw_index = index_entry.Cast<HNSWIndex>();
 
diff --git a/test/sql/hnsw/hnsw_insert_wal.test b/test/sql/hnsw/hnsw_insert_wal.test
index 80e0558..67c9526 100644
--- a/test/sql/hnsw/hnsw_insert_wal.test
+++ b/test/sql/hnsw/hnsw_insert_wal.test
@@ -9,9 +9,13 @@ require vector_size 2048
 statement ok
 PRAGMA enable_verification;
 
+mode skip
+
 statement ok
 PRAGMA disable_checkpoint_on_shutdown;
 
+mode unskip
+
 statement ok
 CREATE TABLE t1 (vec FLOAT[3]);
 

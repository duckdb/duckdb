diff --git a/src/include/mysql_connection.hpp b/src/include/mysql_connection.hpp
index 02fc956..336ed41 100644
--- a/src/include/mysql_connection.hpp
+++ b/src/include/mysql_connection.hpp
@@ -8,6 +8,7 @@
 
 #pragma once
 
+#include "duckdb/common/shared_ptr.hpp"
 #include "mysql_utils.hpp"
 #include "mysql_result.hpp"
 
diff --git a/src/include/mysql_scanner_extension.hpp b/src/include/mysql_scanner_extension.hpp
index b5a2713..dc69b08 100644
--- a/src/include/mysql_scanner_extension.hpp
+++ b/src/include/mysql_scanner_extension.hpp
@@ -8,7 +8,7 @@
 
 using namespace duckdb;
 
-class MySQLScannerExtension : public Extension {
+class MysqlScannerExtension : public Extension {
 public:
 	std::string Name() override {
 		return "mysql_scanner";
diff --git a/src/include/storage/mysql_table_entry.hpp b/src/include/storage/mysql_table_entry.hpp
index dbbed8a..6a34aaa 100644
--- a/src/include/storage/mysql_table_entry.hpp
+++ b/src/include/storage/mysql_table_entry.hpp
@@ -44,7 +44,7 @@ public:
 
 	TableStorageInfo GetStorageInfo(ClientContext &context) override;
 
-	void BindUpdateConstraints(LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
+	void BindUpdateConstraints(Binder &binder, LogicalGet &get, LogicalProjection &proj, LogicalUpdate &update,
 	                           ClientContext &context) override;
 };
 
diff --git a/src/mysql_connection.cpp b/src/mysql_connection.cpp
index 267e9f5..0c72f36 100644
--- a/src/mysql_connection.cpp
+++ b/src/mysql_connection.cpp
@@ -28,7 +28,7 @@ MySQLConnection &MySQLConnection::operator=(MySQLConnection &&other) noexcept {
 
 MySQLConnection MySQLConnection::Open(const string &connection_string) {
 	MySQLConnection result;
-	result.connection = make_shared<OwnedMySQLConnection>(MySQLUtils::Connect(connection_string));
+	result.connection = make_shared_ptr<OwnedMySQLConnection>(MySQLUtils::Connect(connection_string));
 	result.dsn = connection_string;
 	result.Execute("SET character_set_results = 'utf8mb4';");
 	return result;
diff --git a/src/mysql_extension.cpp b/src/mysql_extension.cpp
index 47d90fc..c955b14 100644
--- a/src/mysql_extension.cpp
+++ b/src/mysql_extension.cpp
@@ -48,7 +48,7 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.optimizer_extensions.push_back(std::move(mysql_optimizer));
 }
 
-void MySQLScannerExtension::Load(DuckDB &db) {
+void MysqlScannerExtension::Load(DuckDB &db) {
 	LoadInternal(*db.instance);
 }
 
diff --git a/src/storage/mysql_table_entry.cpp b/src/storage/mysql_table_entry.cpp
index 9c62c21..0a9112d 100644
--- a/src/storage/mysql_table_entry.cpp
+++ b/src/storage/mysql_table_entry.cpp
@@ -81,7 +81,7 @@ unique_ptr<BaseStatistics> MySQLTableEntry::GetStatistics(ClientContext &context
 	return nullptr;
 }
 
-void MySQLTableEntry::BindUpdateConstraints(LogicalGet &, LogicalProjection &, LogicalUpdate &, ClientContext &) {
+void MySQLTableEntry::BindUpdateConstraints(Binder &binder, LogicalGet &, LogicalProjection &, LogicalUpdate &, ClientContext &) {
 }
 
 TableFunction MySQLTableEntry::GetScanFunction(ClientContext &context, unique_ptr<FunctionData> &bind_data) {
diff --git a/vcpkg_ports/libmysql/portfile.cmake b/vcpkg_ports/libmysql/portfile.cmake
index 04a29c0..21ab500 100644
--- a/vcpkg_ports/libmysql/portfile.cmake
+++ b/vcpkg_ports/libmysql/portfile.cmake
@@ -22,22 +22,18 @@ endif()
 
 set(CROSS_COMPILING "")
 set(STACK_DIRECTION "")
-if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x86" OR VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
+if(NOT VCPKG_TARGET_IS_WINDOWS)
     set(STACK_DIRECTION -DSTACK_DIRECTION=-1)
-else()
-    # ARM builds are always cross compiled
+    set(HAVE_IB_GCC_ATOMIC_BUILTINS 0)
+    set(CROSS_COMPILING -DCMAKE_CROSSCOMPILING=1)
+    # Non-Windows builds are always cross-compiled
     # as such we build the executables (comp_sql, uca9dump, comp_client_err) separately
     set(PATCH_FILES
         ${PATCH_FILES}
         remove_executables.patch
     )
-    if(VCPKG_TARGET_IS_LINUX)
-        set(CROSS_COMPILING -DCMAKE_CROSSCOMPILING=1)
-        set(STACK_DIRECTION -DSTACK_DIRECTION=-1)
-    endif()
 endif()
 
-
 vcpkg_from_github(
     OUT_SOURCE_PATH SOURCE_PATH
     REPO mysql/mysql-server

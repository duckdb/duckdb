diff --git a/src/include/mysql_scanner_extension.hpp b/src/include/mysql_scanner_extension.hpp
index dc69b08..ba2c8a7 100644
--- a/src/include/mysql_scanner_extension.hpp
+++ b/src/include/mysql_scanner_extension.hpp
@@ -13,11 +13,9 @@ public:
 	std::string Name() override {
 		return "mysql_scanner";
 	}
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 };
 
 extern "C" {
-DUCKDB_EXTENSION_API void mysql_scanner_init(duckdb::DatabaseInstance &db);
-DUCKDB_EXTENSION_API const char *mysql_scanner_version();
-DUCKDB_EXTENSION_API void mysql_scanner_storage_init(DBConfig &config);
+	DUCKDB_CPP_EXTENSION_ENTRY(mysql_scanner, loader);
 }
diff --git a/src/include/storage/mysql_execute_query.hpp b/src/include/storage/mysql_execute_query.hpp
index f9e02cd..848deb3 100644
--- a/src/include/storage/mysql_execute_query.hpp
+++ b/src/include/storage/mysql_execute_query.hpp
@@ -15,7 +15,7 @@ class TableCatalogEntry;
 
 class MySQLExecuteQuery : public PhysicalOperator {
 public:
-	MySQLExecuteQuery(LogicalOperator &op, string op_name, TableCatalogEntry &table, string query);
+	MySQLExecuteQuery(PhysicalPlan &physical_plan, LogicalOperator &op, string op_name, TableCatalogEntry &table, string query);
 
 	//! The table to delete from
 	string op_name;
diff --git a/src/include/storage/mysql_index.hpp b/src/include/storage/mysql_index.hpp
index fbc4836..a674069 100644
--- a/src/include/storage/mysql_index.hpp
+++ b/src/include/storage/mysql_index.hpp
@@ -16,7 +16,7 @@ namespace duckdb {
 //! PhysicalCreateSequence represents a CREATE SEQUENCE command
 class MySQLCreateIndex : public PhysicalOperator {
 public:
-	explicit MySQLCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
+	MySQLCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table);
 
 	unique_ptr<CreateIndexInfo> info;
 	TableCatalogEntry &table;
diff --git a/src/include/storage/mysql_insert.hpp b/src/include/storage/mysql_insert.hpp
index 3c3213d..45c9ba7 100644
--- a/src/include/storage/mysql_insert.hpp
+++ b/src/include/storage/mysql_insert.hpp
@@ -16,9 +16,9 @@ namespace duckdb {
 class MySQLInsert : public PhysicalOperator {
 public:
 	//! INSERT INTO
-	MySQLInsert(LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
+	MySQLInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table, physical_index_vector_t<idx_t> column_index_map);
 	//! CREATE TABLE AS
-	MySQLInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
+	MySQLInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info);
 
 	//! The table to insert into
 	optional_ptr<TableCatalogEntry> table;
diff --git a/src/mysql_extension.cpp b/src/mysql_extension.cpp
index 9d51436..b2cfa8a 100644
--- a/src/mysql_extension.cpp
+++ b/src/mysql_extension.cpp
@@ -7,7 +7,7 @@
 
 #include "duckdb/catalog/catalog.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/database_manager.hpp"
 #include "duckdb/main/attached_database.hpp"
 #include "storage/mysql_catalog.hpp"
@@ -83,27 +83,29 @@ void SetMySQLSecretParameters(CreateSecretFunction &function) {
 	function.named_parameters["ssl_key"] = LogicalType::VARCHAR;
 }
 
-static void LoadInternal(DatabaseInstance &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	mysql_library_init(0, NULL, NULL);
 	MySQLClearCacheFunction clear_cache_func;
-	ExtensionUtil::RegisterFunction(db, clear_cache_func);
+	loader.RegisterFunction(clear_cache_func);
 
 	MySQLExecuteFunction execute_function;
-	ExtensionUtil::RegisterFunction(db, execute_function);
+	loader.RegisterFunction(execute_function);
 
 	MySQLQueryFunction query_function;
-	ExtensionUtil::RegisterFunction(db, query_function);
+	loader.RegisterFunction(query_function);
 
 	SecretType secret_type;
 	secret_type.name = "mysql";
 	secret_type.deserializer = KeyValueSecret::Deserialize<KeyValueSecret>;
 	secret_type.default_provider = "config";
 
-	ExtensionUtil::RegisterSecretType(db, secret_type);
+	loader.RegisterSecretType(secret_type);
 
 	CreateSecretFunction mysql_secret_function = {"mysql", "config", CreateMySQLSecretFunction};
 	SetMySQLSecretParameters(mysql_secret_function);
-	ExtensionUtil::RegisterFunction(db, mysql_secret_function);
+	loader.RegisterFunction(mysql_secret_function);
+
+	auto &db = loader.GetDatabaseInstance();
 
 	auto &config = DBConfig::GetConfig(db);
 	config.storage_extensions["mysql_scanner"] = make_uniq<MySQLStorageExtension>();
@@ -123,22 +125,14 @@ static void LoadInternal(DatabaseInstance &db) {
 	config.optimizer_extensions.push_back(std::move(mysql_optimizer));
 }
 
-void MysqlScannerExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void MysqlScannerExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void mysql_scanner_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
-}
-
-DUCKDB_EXTENSION_API const char *mysql_scanner_version() {
-	return DuckDB::LibraryVersion();
+DUCKDB_CPP_EXTENSION_ENTRY(mysql_scanner, loader) {
+	LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API void mysql_scanner_storage_init(DBConfig &config) {
-	mysql_library_init(0, NULL, NULL);
-	config.storage_extensions["mysql_scanner"] = make_uniq<MySQLStorageExtension>();
-}
 }
diff --git a/src/mysql_scanner.cpp b/src/mysql_scanner.cpp
index a239dfb..46df8b7 100644
--- a/src/mysql_scanner.cpp
+++ b/src/mysql_scanner.cpp
@@ -1,6 +1,6 @@
 #include "duckdb.hpp"
 
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "mysql_scanner.hpp"
 #include "mysql_result.hpp"
diff --git a/src/storage/mysql_execute_query.cpp b/src/storage/mysql_execute_query.cpp
index 8bf9426..aaeb3c7 100644
--- a/src/storage/mysql_execute_query.cpp
+++ b/src/storage/mysql_execute_query.cpp
@@ -12,8 +12,8 @@
 
 namespace duckdb {
 
-MySQLExecuteQuery::MySQLExecuteQuery(LogicalOperator &op, string op_name_p, TableCatalogEntry &table, string query_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), op_name(std::move(op_name_p)), table(table),
+MySQLExecuteQuery::MySQLExecuteQuery(PhysicalPlan &physical_plan, LogicalOperator &op, string op_name_p, TableCatalogEntry &table, string query_p)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), op_name(std::move(op_name_p)), table(table),
       query(std::move(query_p)) {
 }
 
diff --git a/src/storage/mysql_index.cpp b/src/storage/mysql_index.cpp
index 587cdf2..ce95653 100644
--- a/src/storage/mysql_index.cpp
+++ b/src/storage/mysql_index.cpp
@@ -6,8 +6,8 @@
 
 namespace duckdb {
 
-MySQLCreateIndex::MySQLCreateIndex(unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
+MySQLCreateIndex::MySQLCreateIndex(PhysicalPlan &physical_plan, unique_ptr<CreateIndexInfo> info, TableCatalogEntry &table)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, {LogicalType::BIGINT}, 1), info(std::move(info)), table(table) {
 }
 
 //===--------------------------------------------------------------------===//
diff --git a/src/storage/mysql_insert.cpp b/src/storage/mysql_insert.cpp
index 121d85a..0d84183 100644
--- a/src/storage/mysql_insert.cpp
+++ b/src/storage/mysql_insert.cpp
@@ -14,14 +14,14 @@
 
 namespace duckdb {
 
-MySQLInsert::MySQLInsert(LogicalOperator &op, TableCatalogEntry &table,
+MySQLInsert::MySQLInsert(PhysicalPlan &physical_plan, LogicalOperator &op, TableCatalogEntry &table,
                          physical_index_vector_t<idx_t> column_index_map_p)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(&table), schema(nullptr),
       column_index_map(std::move(column_index_map_p)) {
 }
 
-MySQLInsert::MySQLInsert(LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
-    : PhysicalOperator(PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
+MySQLInsert::MySQLInsert(PhysicalPlan &physical_plan, LogicalOperator &op, SchemaCatalogEntry &schema, unique_ptr<BoundCreateTableInfo> info)
+    : PhysicalOperator(physical_plan, PhysicalOperatorType::EXTENSION, op.types, 1), table(nullptr), schema(&schema),
       info(std::move(info)) {
 }
 

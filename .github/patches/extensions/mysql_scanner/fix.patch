diff --git a/src/include/storage/mysql_catalog.hpp b/src/include/storage/mysql_catalog.hpp
index 58975f3..891247d 100644
--- a/src/include/storage/mysql_catalog.hpp
+++ b/src/include/storage/mysql_catalog.hpp
@@ -37,18 +37,14 @@ public:
 
 	void ScanSchemas(ClientContext &context, std::function<void(SchemaCatalogEntry &)> callback) override;
 
-	optional_ptr<SchemaCatalogEntry> GetSchema(CatalogTransaction transaction, const string &schema_name,
-	                                           OnEntryNotFound if_not_found,
-	                                           QueryErrorContext error_context = QueryErrorContext()) override;
-
-	unique_ptr<PhysicalOperator> PlanInsert(ClientContext &context, LogicalInsert &op,
-	                                        unique_ptr<PhysicalOperator> plan) override;
-	unique_ptr<PhysicalOperator> PlanCreateTableAs(ClientContext &context, LogicalCreateTable &op,
-	                                               unique_ptr<PhysicalOperator> plan) override;
-	unique_ptr<PhysicalOperator> PlanDelete(ClientContext &context, LogicalDelete &op,
-	                                        unique_ptr<PhysicalOperator> plan) override;
-	unique_ptr<PhysicalOperator> PlanUpdate(ClientContext &context, LogicalUpdate &op,
-	                                        unique_ptr<PhysicalOperator> plan) override;
+	optional_ptr<SchemaCatalogEntry> LookupSchema(CatalogTransaction transaction, const EntryLookupInfo &schema_lookup,
+	                                           OnEntryNotFound if_not_found) override;
+
+    PhysicalOperator &PlanCreateTableAs(ClientContext &context, PhysicalPlanGenerator &planner, LogicalCreateTable &op, PhysicalOperator &plan) override;
+    PhysicalOperator &PlanInsert(ClientContext &context, PhysicalPlanGenerator &planner, LogicalInsert &op, optional_ptr<PhysicalOperator> plan) override;
+    PhysicalOperator &PlanDelete(ClientContext &context, PhysicalPlanGenerator &planner, LogicalDelete &op, PhysicalOperator &plan) override;
+    PhysicalOperator &PlanUpdate(ClientContext &context, PhysicalPlanGenerator &planner, LogicalUpdate &op, PhysicalOperator &plan) override;
+
 	unique_ptr<LogicalOperator> BindCreateIndex(Binder &binder, CreateStatement &stmt, TableCatalogEntry &table,
 	                                            unique_ptr<LogicalOperator> plan) override;
 
diff --git a/src/include/storage/mysql_schema_entry.hpp b/src/include/storage/mysql_schema_entry.hpp
index 9d6b709..8a8de36 100644
--- a/src/include/storage/mysql_schema_entry.hpp
+++ b/src/include/storage/mysql_schema_entry.hpp
@@ -38,7 +38,7 @@ public:
 	void Scan(ClientContext &context, CatalogType type, const std::function<void(CatalogEntry &)> &callback) override;
 	void Scan(CatalogType type, const std::function<void(CatalogEntry &)> &callback) override;
 	void DropEntry(ClientContext &context, DropInfo &info) override;
-	optional_ptr<CatalogEntry> GetEntry(CatalogTransaction transaction, CatalogType type, const string &name) override;
+	optional_ptr<CatalogEntry> LookupEntry(CatalogTransaction transaction, const EntryLookupInfo &lookup_info) override;
 
 private:
 	void AlterTable(MySQLTransaction &transaction, RenameTableInfo &info);
diff --git a/src/storage/mysql_catalog.cpp b/src/storage/mysql_catalog.cpp
index fb0e6b6..b55154a 100644
--- a/src/storage/mysql_catalog.cpp
+++ b/src/storage/mysql_catalog.cpp
@@ -381,15 +381,15 @@ void MySQLCatalog::ScanSchemas(ClientContext &context, std::function<void(Schema
 	schemas.Scan(context, [&](CatalogEntry &schema) { callback(schema.Cast<MySQLSchemaEntry>()); });
 }
 
-optional_ptr<SchemaCatalogEntry> MySQLCatalog::GetSchema(CatalogTransaction transaction, const string &schema_name,
-                                                         OnEntryNotFound if_not_found,
-                                                         QueryErrorContext error_context) {
+optional_ptr<SchemaCatalogEntry> MySQLCatalog::LookupSchema(CatalogTransaction transaction, const EntryLookupInfo &schema_lookup,
+                                                         OnEntryNotFound if_not_found) {
+    auto schema_name = schema_lookup.GetEntryName();
 	if (schema_name == DEFAULT_SCHEMA) {
 		if (default_schema.empty()) {
 			throw InvalidInputException("Attempting to fetch the default schema - but no database was "
 			                            "provided in the connection string");
 		}
-		return GetSchema(transaction, default_schema, if_not_found, error_context);
+		schema_name = default_schema;
 	}
 	auto entry = schemas.GetEntry(transaction.GetContext(), schema_name);
 	if (!entry && if_not_found != OnEntryNotFound::RETURN_NULL) {
diff --git a/src/storage/mysql_execute_query.cpp b/src/storage/mysql_execute_query.cpp
index 8dcac4c..eefbd59 100644
--- a/src/storage/mysql_execute_query.cpp
+++ b/src/storage/mysql_execute_query.cpp
@@ -85,7 +85,7 @@ string ExtractFilters(PhysicalOperator &child, const string &statement) {
 	// in the planning process to convert this into a SQL statement
 	if (child.type == PhysicalOperatorType::FILTER) {
 		auto &filter = child.Cast<PhysicalFilter>();
-		auto result = ExtractFilters(*child.children[0], statement);
+		auto result = ExtractFilters(child.children[0], statement);
 		auto filter_str = filter.expression->ToString();
 		if (result.empty()) {
 			return filter_str;
@@ -105,7 +105,7 @@ string ExtractFilters(PhysicalOperator &child, const string &statement) {
 				                              "are supported in the MySQL connector");
 			}
 		}
-		return ExtractFilters(*child.children[0], statement);
+		return ExtractFilters(child.children[0], statement);
 	} else if (child.type == PhysicalOperatorType::TABLE_SCAN) {
 		auto &table_scan = child.Cast<PhysicalTableScan>();
 		if (!table_scan.table_filters) {
@@ -154,15 +154,14 @@ string ConstructDeleteStatement(LogicalDelete &op, PhysicalOperator &child) {
 	return result;
 }
 
-unique_ptr<PhysicalOperator> MySQLCatalog::PlanDelete(ClientContext &context, LogicalDelete &op,
-                                                      unique_ptr<PhysicalOperator> plan) {
+PhysicalOperator &MySQLCatalog::PlanDelete(ClientContext &context, PhysicalPlanGenerator &planner, LogicalDelete &op, PhysicalOperator &plan) {
 	if (op.return_chunk) {
 		throw BinderException("RETURNING clause not yet supported for deletion of a MySQL table");
 	}
 
-	auto result = make_uniq<MySQLExecuteQuery>(op, "DELETE", op.table, ConstructDeleteStatement(op, *plan));
-	result->children.push_back(std::move(plan));
-	return std::move(result);
+	auto &execute = planner.Make<MySQLExecuteQuery>(op, "DELETE", op.table, ConstructDeleteStatement(op, plan));
+    execute.children.push_back(plan);
+	return execute;
 }
 
 string ConstructUpdateStatement(LogicalUpdate &op, PhysicalOperator &child) {
@@ -196,21 +195,21 @@ string ConstructUpdateStatement(LogicalUpdate &op, PhysicalOperator &child) {
 		result += proj.select_list[ref.index]->ToString();
 	}
 	result += " ";
-	auto filters = ExtractFilters(*child.children[0], "UPDATE");
+	auto filters = ExtractFilters(child.children[0], "UPDATE");
 	if (!filters.empty()) {
 		result += " WHERE " + filters;
 	}
 	return result;
 }
 
-unique_ptr<PhysicalOperator> MySQLCatalog::PlanUpdate(ClientContext &context, LogicalUpdate &op,
-                                                      unique_ptr<PhysicalOperator> plan) {
+PhysicalOperator &MySQLCatalog::PlanUpdate(ClientContext &context, PhysicalPlanGenerator &planner, LogicalUpdate &op, PhysicalOperator &plan) {
 	if (op.return_chunk) {
 		throw BinderException("RETURNING clause not yet supported for updates of a MySQL table");
 	}
-	auto result = make_uniq<MySQLExecuteQuery>(op, "UPDATE", op.table, ConstructUpdateStatement(op, *plan));
-	result->children.push_back(std::move(plan));
-	return std::move(result);
+
+	auto &execute = planner.Make<MySQLExecuteQuery>(op, "UPDATE", op.table, ConstructUpdateStatement(op, plan));
+    execute.children.push_back(plan);
+	return execute;
 }
 
 } // namespace duckdb
diff --git a/src/storage/mysql_index.cpp b/src/storage/mysql_index.cpp
index 1381630..587cdf2 100644
--- a/src/storage/mysql_index.cpp
+++ b/src/storage/mysql_index.cpp
@@ -37,8 +37,8 @@ public:
 	unique_ptr<CreateIndexInfo> info;
 	TableCatalogEntry &table;
 
-	unique_ptr<PhysicalOperator> CreatePlan(ClientContext &context, PhysicalPlanGenerator &generator) override {
-		return make_uniq<MySQLCreateIndex>(std::move(info), table);
+	PhysicalOperator &CreatePlan(ClientContext &context, PhysicalPlanGenerator &planner) override {
+		return planner.Make<MySQLCreateIndex>(std::move(info), table);
 	}
 
 	void Serialize(Serializer &serializer) const override {
diff --git a/src/storage/mysql_insert.cpp b/src/storage/mysql_insert.cpp
index 7a62b23..19e6586 100644
--- a/src/storage/mysql_insert.cpp
+++ b/src/storage/mysql_insert.cpp
@@ -265,10 +265,10 @@ InsertionOrderPreservingMap<string> MySQLInsert::ParamsToString() const {
 //===--------------------------------------------------------------------===//
 // Plan
 //===--------------------------------------------------------------------===//
-unique_ptr<PhysicalOperator> AddCastToMySQLTypes(ClientContext &context, unique_ptr<PhysicalOperator> plan) {
+PhysicalOperator &AddCastToMySQLTypes(ClientContext &context, PhysicalPlanGenerator &planner, PhysicalOperator &plan) {
 	// check if we need to cast anything
 	bool require_cast = false;
-	auto &child_types = plan->GetTypes();
+	auto &child_types = plan.GetTypes();
 	for (auto &type : child_types) {
 		auto mysql_type = MySQLUtils::ToMySQLType(type);
 		if (mysql_type != type) {
@@ -276,54 +276,51 @@ unique_ptr<PhysicalOperator> AddCastToMySQLTypes(ClientContext &context, unique_
 			break;
 		}
 	}
-	if (require_cast) {
-		vector<LogicalType> mysql_types;
-		vector<unique_ptr<Expression>> select_list;
-		for (idx_t i = 0; i < child_types.size(); i++) {
-			auto &type = child_types[i];
-			unique_ptr<Expression> expr;
-			expr = make_uniq<BoundReferenceExpression>(type, i);
+    if (!require_cast) {
+        return plan;
+    }
 
-			auto mysql_type = MySQLUtils::ToMySQLType(type);
-			if (mysql_type != type) {
-				// add a cast
-				expr = BoundCastExpression::AddCastToType(context, std::move(expr), mysql_type);
-			}
-			mysql_types.push_back(std::move(mysql_type));
-			select_list.push_back(std::move(expr));
-		}
-		// we need to cast: add casts
-		auto proj =
-		    make_uniq<PhysicalProjection>(std::move(mysql_types), std::move(select_list), plan->estimated_cardinality);
-		proj->children.push_back(std::move(plan));
-		plan = std::move(proj);
-	}
+    vector<LogicalType> mysql_types;
+    vector<unique_ptr<Expression>> select_list;
+    for (idx_t i = 0; i < child_types.size(); i++) {
+        auto &type = child_types[i];
+        unique_ptr<Expression> expr;
+        expr = make_uniq<BoundReferenceExpression>(type, i);
 
-	return plan;
+        auto mysql_type = MySQLUtils::ToMySQLType(type);
+        if (mysql_type != type) {
+            // add a cast
+            expr = BoundCastExpression::AddCastToType(context, std::move(expr), mysql_type);
+        }
+        mysql_types.push_back(std::move(mysql_type));
+        select_list.push_back(std::move(expr));
+    }
+    // we need to cast: add casts
+    auto &proj = planner.Make<PhysicalProjection>(std::move(mysql_types), std::move(select_list), plan.estimated_cardinality);
+    proj.children.push_back(plan);
+    return proj;
 }
 
-unique_ptr<PhysicalOperator> MySQLCatalog::PlanInsert(ClientContext &context, LogicalInsert &op,
-                                                      unique_ptr<PhysicalOperator> plan) {
+PhysicalOperator &MySQLCatalog::PlanInsert(ClientContext &context, PhysicalPlanGenerator &planner, LogicalInsert &op, optional_ptr<PhysicalOperator> plan) {
 	if (op.return_chunk) {
 		throw BinderException("RETURNING clause not yet supported for insertion into MySQL table");
 	}
 	if (op.action_type != OnConflictAction::THROW) {
 		throw BinderException("ON CONFLICT clause not yet supported for insertion into MySQL table");
 	}
-	plan = AddCastToMySQLTypes(context, std::move(plan));
 
-	auto insert = make_uniq<MySQLInsert>(op, op.table, op.column_index_map);
-	insert->children.push_back(std::move(plan));
-	return std::move(insert);
+    D_ASSERT(plan);
+	auto &inner_plan = AddCastToMySQLTypes(context, planner, *plan);
+	auto &insert = planner.Make<MySQLInsert>(op, op.table, op.column_index_map);
+	insert.children.push_back(inner_plan);
+	return insert;
 }
 
-unique_ptr<PhysicalOperator> MySQLCatalog::PlanCreateTableAs(ClientContext &context, LogicalCreateTable &op,
-                                                             unique_ptr<PhysicalOperator> plan) {
-	plan = AddCastToMySQLTypes(context, std::move(plan));
-
-	auto insert = make_uniq<MySQLInsert>(op, op.schema, std::move(op.info));
-	insert->children.push_back(std::move(plan));
-	return std::move(insert);
+PhysicalOperator &MySQLCatalog::PlanCreateTableAs(ClientContext &context, PhysicalPlanGenerator &planner, LogicalCreateTable &op, PhysicalOperator &plan) {
+	auto &inner_plan = AddCastToMySQLTypes(context, planner, plan);
+	auto &insert = planner.Make<MySQLInsert>(op, op.schema, std::move(op.info));
+	insert.children.push_back(plan);
+	return insert;
 }
 
 } // namespace duckdb
diff --git a/src/storage/mysql_schema_entry.cpp b/src/storage/mysql_schema_entry.cpp
index 052d384..a06d665 100644
--- a/src/storage/mysql_schema_entry.cpp
+++ b/src/storage/mysql_schema_entry.cpp
@@ -197,12 +197,12 @@ void MySQLSchemaEntry::DropEntry(ClientContext &context, DropInfo &info) {
 	GetCatalogSet(info.type).DropEntry(context, info);
 }
 
-optional_ptr<CatalogEntry> MySQLSchemaEntry::GetEntry(CatalogTransaction transaction, CatalogType type,
-                                                      const string &name) {
-	if (!CatalogTypeIsSupported(type)) {
+optional_ptr<CatalogEntry> MySQLSchemaEntry::LookupEntry(CatalogTransaction transaction, const EntryLookupInfo &lookup_info) {
+	auto lookup_type = lookup_info.GetCatalogType();
+	if (!CatalogTypeIsSupported(lookup_type)) {
 		return nullptr;
 	}
-	return GetCatalogSet(type).GetEntry(transaction.GetContext(), name);
+	return GetCatalogSet(lookup_type).GetEntry(transaction.GetContext(), lookup_info.GetEntryName());
 }
 
 MySQLCatalogSet &MySQLSchemaEntry::GetCatalogSet(CatalogType type) {

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 341eb3c..540a708 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,7 @@ set(EXTENSION_SOURCES
     src/azure_extension.cpp
     src/azure_secret.cpp
     src/azure_filesystem.cpp
+    src/azure_http_state.cpp
     src/azure_storage_account_client.cpp
     src/azure_blob_filesystem.cpp
     src/azure_dfs_filesystem.cpp
diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index 42f9323..b094616 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -5,12 +5,12 @@
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/common/shared_ptr.hpp"
-#include "duckdb/common/http_state.hpp"
+#include "azure_http_state.hpp"
 #include "duckdb/common/file_opener.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/main/secret/secret.hpp"
 #include "duckdb/main/secret/secret_manager.hpp"
-#include "duckdb/function/scalar/string_functions.hpp"
+#include "duckdb/functions_internal/scalar/string_common.hpp"
 #include "duckdb/function/scalar_function.hpp"
 #include "duckdb/main/extension_util.hpp"
 #include "duckdb/main/client_data.hpp"
@@ -47,7 +47,7 @@ static bool Match(vector<string>::const_iterator key, vector<string>::const_iter
 			}
 			return false;
 		}
-		if (!LikeFun::Glob(key->data(), key->length(), pattern->data(), pattern->length())) {
+		if (!Glob(key->data(), key->length(), pattern->data(), pattern->length())) {
 			return false;
 		}
 		key++;
diff --git a/src/azure_dfs_filesystem.cpp b/src/azure_dfs_filesystem.cpp
index 739078c..242223d 100644
--- a/src/azure_dfs_filesystem.cpp
+++ b/src/azure_dfs_filesystem.cpp
@@ -3,7 +3,7 @@
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/common/shared_ptr.hpp"
-#include "duckdb/function/scalar/string_functions.hpp"
+#include "duckdb/functions_internal/scalar/string_common.hpp"
 #include <algorithm>
 #include <azure/storage/blobs/blob_options.hpp>
 #include <azure/storage/common/storage_exception.hpp>
@@ -48,7 +48,7 @@ static void Walk(const Azure::Storage::Files::DataLake::DataLakeFileSystemClient
 		for (const auto &elt : res.Paths) {
 			if (elt.IsDirectory) {
 				if (!recursive) { // Only perform recursive call if we are not already processing recursive result
-					if (LikeFun::Glob(elt.Name.data(), elt.Name.length(), path_pattern.data(), end_match)) {
+					if (Glob(elt.Name.data(), elt.Name.length(), path_pattern.data(), end_match)) {
 						if (end_match >= path_pattern.length()) {
 							// Skip, no way there will be matches anymore
 							continue;
@@ -59,7 +59,7 @@ static void Walk(const Azure::Storage::Files::DataLake::DataLakeFileSystemClient
 				}
 			} else {
 				// File
-				if (LikeFun::Glob(elt.Name.data(), elt.Name.length(), path_pattern.data(), path_pattern.length())) {
+				if (Glob(elt.Name.data(), elt.Name.length(), path_pattern.data(), path_pattern.length())) {
 					out_result->push_back(elt.Name);
 				}
 			}
diff --git a/src/azure_filesystem.cpp b/src/azure_filesystem.cpp
index 6175421..e32b2ca 100644
--- a/src/azure_filesystem.cpp
+++ b/src/azure_filesystem.cpp
@@ -169,21 +169,20 @@ shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(
 
 		auto context_key = GetContextPrefix() + parsed_url.storage_account_name;
 
-		auto &registered_state = client_context->registered_state;
-		auto storage_account_it = registered_state.find(context_key);
-		if (storage_account_it == registered_state.end()) {
+		auto &registered_state = *client_context->registered_state;
+		auto azure_context_state = registered_state.Get<AzureContextState>(context_key);
+		if (!azure_context_state) {
 			result = CreateStorageContext(opener, path, parsed_url);
-			registered_state.insert(std::make_pair(context_key, result));
+			registered_state.Insert(context_key, result);
 		} else {
-			auto *azure_context_state = static_cast<AzureContextState *>(storage_account_it->second.get());
 			// We keep the context valid until the QueryEnd (cf: AzureBlobContextState#QueryEnd())
 			// we do so because between queries the user can change the secret/variable that has been set
 			// the side effect of that is that we will reconnect (potentially retrieve a new token) on each request
 			if (!azure_context_state->IsValid()) {
 				result = CreateStorageContext(opener, path, parsed_url);
-				registered_state[context_key] = result;
+				registered_state.Insert(context_key, result);
 			} else {
-				result = shared_ptr<AzureContextState>(storage_account_it->second, azure_context_state);
+				result = azure_context_state;
 			}
 		}
 	} else {
@@ -193,6 +192,7 @@ shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(
 	return result;
 }
 
+
 AzureReadOptions AzureStorageFileSystem::ParseAzureReadOptions(optional_ptr<FileOpener> opener) {
 	AzureReadOptions options;
 
diff --git a/src/azure_storage_account_client.cpp b/src/azure_storage_account_client.cpp
index 11ad859..f206ebd 100644
--- a/src/azure_storage_account_client.cpp
+++ b/src/azure_storage_account_client.cpp
@@ -77,7 +77,7 @@ static std::string AccountUrl(const AzureParsedUrl &azure_parsed_url) {
 
 template <typename T>
 static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                         shared_ptr<HTTPState> http_state) {
+                         shared_ptr<AzureHTTPState> http_state) {
 	static_assert(std::is_base_of<Azure::Core::_internal::ClientOptions, T>::value,
 	              "type parameter must be an Azure ClientOptions");
 	T options;
@@ -94,13 +94,13 @@ static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 
 static Azure::Storage::Blobs::BlobClientOptions
 ToBlobClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                    shared_ptr<HTTPState> http_state) {
+                    shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Blobs::BlobClientOptions>(transport_options, std::move(http_state));
 }
 
 static Azure::Storage::Files::DataLake::DataLakeClientOptions
 ToDfsClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                   shared_ptr<HTTPState> http_state) {
+                   shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Files::DataLake::DataLakeClientOptions>(transport_options,
 	                                                                               std::move(http_state));
 }
@@ -112,16 +112,16 @@ ToTokenCredentialOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 	return options;
 }
 
-static shared_ptr<HTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
+static shared_ptr<AzureHTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
 	Value value;
 	bool enable_http_stats = false;
 	if (FileOpener::TryGetCurrentSetting(opener, "azure_http_stats", value)) {
 		enable_http_stats = value.GetValue<bool>();
 	}
 
-	shared_ptr<HTTPState> http_state;
+	shared_ptr<AzureHTTPState> http_state;
 	if (enable_http_stats) {
-		http_state = HTTPState::TryGetState(opener);
+		http_state = AzureHTTPState::TryGetState(opener);
 	}
 
 	return http_state;
diff --git a/src/http_state_policy.cpp b/src/http_state_policy.cpp
index baa3f97..f58b36d 100644
--- a/src/http_state_policy.cpp
+++ b/src/http_state_policy.cpp
@@ -9,7 +9,7 @@ const static std::string CONTENT_LENGTH = "content-length";
 
 namespace duckdb {
 
-HttpStatePolicy::HttpStatePolicy(shared_ptr<HTTPState> http_state) : http_state(std::move(http_state)) {
+HttpStatePolicy::HttpStatePolicy(shared_ptr<AzureHTTPState> http_state) : http_state(std::move(http_state)) {
 }
 
 std::unique_ptr<Azure::Core::Http::RawResponse>
diff --git a/src/include/http_state_policy.hpp b/src/include/http_state_policy.hpp
index 9db73b6..30563b7 100644
--- a/src/include/http_state_policy.hpp
+++ b/src/include/http_state_policy.hpp
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "duckdb/common/http_state.hpp"
 #include "duckdb/common/shared_ptr.hpp"
+#include "azure_http_state.hpp"
 #include <azure/core/context.hpp>
 #include <azure/core/http/http.hpp>
 #include <azure/core/http/policies/policy.hpp>
@@ -12,7 +12,7 @@ namespace duckdb {
 
 class HttpStatePolicy : public Azure::Core::Http::Policies::HttpPolicy {
 public:
-	HttpStatePolicy(shared_ptr<HTTPState> http_state);
+	HttpStatePolicy(shared_ptr<AzureHTTPState> http_state);
 
 	std::unique_ptr<Azure::Core::Http::RawResponse> Send(Azure::Core::Http::Request &request,
 	                                                     Azure::Core::Http::Policies::NextHttpPolicy next_policy,
@@ -21,7 +21,7 @@ public:
 	std::unique_ptr<Azure::Core::Http::Policies::HttpPolicy> Clone() const override;
 
 private:
-	shared_ptr<HTTPState> http_state;
+	shared_ptr<AzureHTTPState> http_state;
 };
 
 } // namespace duckdb

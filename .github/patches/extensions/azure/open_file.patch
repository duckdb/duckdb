diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index 6f4d0dc..bc34eb9 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -66,21 +66,20 @@ AzureBlobContextState::GetBlobContainerClient(const std::string &blobContainerNa
 }
 
 //////// AzureBlobStorageFileHandle ////////
-AzureBlobStorageFileHandle::AzureBlobStorageFileHandle(AzureBlobStorageFileSystem &fs, string path, uint8_t flags,
+AzureBlobStorageFileHandle::AzureBlobStorageFileHandle(AzureBlobStorageFileSystem &fs, string path, FileOpenFlags flags,
                                                        const AzureReadOptions &read_options,
                                                        Azure::Storage::Blobs::BlobClient blob_client)
     : AzureFileHandle(fs, std::move(path), flags, read_options), blob_client(std::move(blob_client)) {
 }
 
 //////// AzureBlobStorageFileSystem ////////
-unique_ptr<AzureFileHandle> AzureBlobStorageFileSystem::CreateHandle(const string &path, uint8_t flags,
-                                                                     FileLockType lock, FileCompressionType compression,
-                                                                     FileOpener *opener) {
-	if (opener == nullptr) {
+unique_ptr<AzureFileHandle> AzureBlobStorageFileSystem::CreateHandle(const string &path, FileOpenFlags flags,
+                                                                     optional_ptr<FileOpener> opener) {
+	if (!opener) {
 		throw InternalException("Cannot do Azure storage CreateHandle without FileOpener");
 	}
 
-	D_ASSERT(compression == FileCompressionType::UNCOMPRESSED);
+	D_ASSERT(flags.Compression() == FileCompressionType::UNCOMPRESSED);
 
 	auto parsed_url = ParseUrl(path);
 	auto storage_context = GetOrCreateStorageContext(opener, path, parsed_url);
@@ -167,9 +166,9 @@ void AzureBlobStorageFileSystem::LoadRemoteFileInfo(AzureFileHandle &handle) {
 	hfh.last_modified = ToTimeT(res.Value.LastModified);
 }
 
-bool AzureBlobStorageFileSystem::FileExists(const string &filename) {
+bool AzureBlobStorageFileSystem::FileExists(const string &filename, optional_ptr<FileOpener> opener) {
 	try {
-		auto handle = OpenFile(filename, FileFlags::FILE_FLAGS_READ);
+		auto handle = OpenFile(filename, FileFlags::FILE_FLAGS_READ, opener);
 		auto &sfh = handle->Cast<AzureBlobStorageFileHandle>();
 		if (sfh.length == 0) {
 			return false;
@@ -202,7 +201,7 @@ void AzureBlobStorageFileSystem::ReadRange(AzureFileHandle &handle, idx_t file_o
 	}
 }
 
-std::shared_ptr<AzureContextState> AzureBlobStorageFileSystem::CreateStorageContext(FileOpener *opener,
+std::shared_ptr<AzureContextState> AzureBlobStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener,
                                                                                     const string &path,
                                                                                     const AzureParsedUrl &parsed_url) {
 	auto azure_read_options = ParseAzureReadOptions(opener);
diff --git a/src/azure_dfs_filesystem.cpp b/src/azure_dfs_filesystem.cpp
index 34435ae..5ccbed0 100644
--- a/src/azure_dfs_filesystem.cpp
+++ b/src/azure_dfs_filesystem.cpp
@@ -83,21 +83,20 @@ AzureDfsContextState::GetDfsFileSystemClient(const std::string &file_system_name
 }
 
 //////// AzureDfsContextState ////////
-AzureDfsStorageFileHandle::AzureDfsStorageFileHandle(AzureDfsStorageFileSystem &fs, string path, uint8_t flags,
+AzureDfsStorageFileHandle::AzureDfsStorageFileHandle(AzureDfsStorageFileSystem &fs, string path, FileOpenFlags flags,
                                                      const AzureReadOptions &read_options,
                                                      Azure::Storage::Files::DataLake::DataLakeFileClient client)
     : AzureFileHandle(fs, std::move(path), flags, read_options), file_client(std::move(client)) {
 }
 
 //////// AzureDfsStorageFileSystem ////////
-unique_ptr<AzureFileHandle> AzureDfsStorageFileSystem::CreateHandle(const string &path, uint8_t flags,
-                                                                    FileLockType lock, FileCompressionType compression,
-                                                                    FileOpener *opener) {
+unique_ptr<AzureFileHandle> AzureDfsStorageFileSystem::CreateHandle(const string &path, FileOpenFlags flags,
+                                                                    optional_ptr<FileOpener> opener) {
 	if (opener == nullptr) {
 		throw InternalException("Cannot do Azure storage CreateHandle without FileOpener");
 	}
 
-	D_ASSERT(compression == FileCompressionType::UNCOMPRESSED);
+	D_ASSERT(flags.Compression() == FileCompressionType::UNCOMPRESSED);
 
 	auto parsed_url = ParseUrl(path);
 	auto storage_context = GetOrCreateStorageContext(opener, path, parsed_url);
@@ -186,7 +185,7 @@ void AzureDfsStorageFileSystem::ReadRange(AzureFileHandle &handle, idx_t file_of
 	}
 }
 
-std::shared_ptr<AzureContextState> AzureDfsStorageFileSystem::CreateStorageContext(FileOpener *opener,
+std::shared_ptr<AzureContextState> AzureDfsStorageFileSystem::CreateStorageContext(optional_ptr<FileOpener> opener,
                                                                                    const string &path,
                                                                                    const AzureParsedUrl &parsed_url) {
 	auto azure_read_options = ParseAzureReadOptions(opener);
diff --git a/src/azure_filesystem.cpp b/src/azure_filesystem.cpp
index 4c2caed..bbf5275 100644
--- a/src/azure_filesystem.cpp
+++ b/src/azure_filesystem.cpp
@@ -18,7 +18,7 @@ void AzureContextState::QueryEnd() {
 	is_valid = false;
 }
 
-AzureFileHandle::AzureFileHandle(AzureStorageFileSystem &fs, string path, uint8_t flags,
+AzureFileHandle::AzureFileHandle(AzureStorageFileSystem &fs, string path, FileOpenFlags flags,
                                  const AzureReadOptions &read_options)
     : FileHandle(fs, std::move(path)), flags(flags),
       // File info
@@ -27,7 +27,7 @@ AzureFileHandle::AzureFileHandle(AzureStorageFileSystem &fs, string path, uint8_
       buffer_available(0), buffer_idx(0), file_offset(0), buffer_start(0), buffer_end(0),
       // Options
       read_options(read_options) {
-	if (flags & FileFlags::FILE_FLAGS_READ) {
+	if (flags.OpenForReading()) {
 		read_buffer = duckdb::unique_ptr<data_t[]>(new data_t[read_options.buffer_size]);
 	}
 }
@@ -37,7 +37,7 @@ void AzureFileHandle::PostConstruct() {
 }
 
 void AzureStorageFileSystem::LoadFileInfo(AzureFileHandle &handle) {
-	if (handle.flags & FileFlags::FILE_FLAGS_READ) {
+	if (handle.flags.OpenForReading()) {
 		try {
 			LoadRemoteFileInfo(handle);
 		} catch (const Azure::Storage::StorageException &e) {
@@ -53,15 +53,15 @@ void AzureStorageFileSystem::LoadFileInfo(AzureFileHandle &handle) {
 	}
 }
 
-unique_ptr<FileHandle> AzureStorageFileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock,
-                                                        FileCompressionType compression, FileOpener *opener) {
-	D_ASSERT(compression == FileCompressionType::UNCOMPRESSED);
+unique_ptr<FileHandle> AzureStorageFileSystem::OpenFile(const string &path,FileOpenFlags flags,
+														optional_ptr<FileOpener> opener) {
+	D_ASSERT(flags.Compression() == FileCompressionType::UNCOMPRESSED);
 
-	if (flags & FileFlags::FILE_FLAGS_WRITE) {
+	if (flags.OpenForWriting()) {
 		throw NotImplementedException("Writing to Azure containers is currently not supported");
 	}
 
-	auto handle = CreateHandle(path, flags, lock, compression, opener);
+	auto handle = CreateHandle(path, flags, opener);
 	return std::move(handle);
 }
 
@@ -92,7 +92,7 @@ void AzureStorageFileSystem::Read(FileHandle &handle, void *buffer, int64_t nr_b
 	idx_t buffer_offset = 0;
 
 	// Don't buffer when DirectIO is set.
-	if (hfh.flags & FileFlags::FILE_FLAGS_DIRECT_IO && to_read > 0) {
+	if (hfh.flags.DirectIO() && to_read > 0) {
 		ReadRange(hfh, location, (char *)buffer, to_read);
 		hfh.buffer_available = 0;
 		hfh.buffer_idx = 0;
@@ -153,7 +153,7 @@ int64_t AzureStorageFileSystem::Read(FileHandle &handle, void *buffer, int64_t n
 	return nr_bytes;
 }
 
-std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(FileOpener *opener,
+std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(optional_ptr<FileOpener> opener,
                                                                                      const string &path,
                                                                                      const AzureParsedUrl &parsed_url) {
 	Value value;
@@ -164,7 +164,7 @@ std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageCon
 
 	std::shared_ptr<AzureContextState> result;
 	if (azure_context_caching) {
-		auto *client_context = FileOpener::TryGetClientContext(opener);
+		auto client_context = FileOpener::TryGetClientContext(opener);
 
 		auto context_key = GetContextPrefix() + parsed_url.storage_account_name;
 
@@ -192,7 +192,7 @@ std::shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageCon
 	return result;
 }
 
-AzureReadOptions AzureStorageFileSystem::ParseAzureReadOptions(FileOpener *opener) {
+AzureReadOptions AzureStorageFileSystem::ParseAzureReadOptions(optional_ptr<FileOpener> opener) {
 	AzureReadOptions options;
 
 	Value concurrency_val;
diff --git a/src/azure_storage_account_client.cpp b/src/azure_storage_account_client.cpp
index e54ca93..5a22e60 100644
--- a/src/azure_storage_account_client.cpp
+++ b/src/azure_storage_account_client.cpp
@@ -35,7 +35,7 @@ namespace duckdb {
 const static std::string DEFAULT_BLOB_ENDPOINT = "blob.core.windows.net";
 const static std::string DEFAULT_DFS_ENDPOINT = "dfs.core.windows.net";
 
-static std::string TryGetCurrentSetting(FileOpener *opener, const std::string &name) {
+static std::string TryGetCurrentSetting(optional_ptr<FileOpener> opener, const std::string &name) {
 	Value val;
 	if (FileOpener::TryGetCurrentSetting(opener, name, val)) {
 		return val.ToString();
@@ -110,7 +110,7 @@ ToTokenCredentialOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 	return options;
 }
 
-static std::shared_ptr<HTTPState> GetHttpState(FileOpener *opener) {
+static std::shared_ptr<HTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
 	Value value;
 	bool enable_http_stats = false;
 	if (FileOpener::TryGetCurrentSetting(opener, "azure_http_stats", value)) {
@@ -270,7 +270,7 @@ static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(const s
 	return transport_options;
 }
 
-static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(FileOpener *opener,
+static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(optional_ptr<FileOpener> opener,
                                                                          const KeyValueSecret &secret) {
 	auto transport_option_type = TryGetCurrentSetting(opener, "azure_transport_option_type");
 
@@ -302,7 +302,7 @@ static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(FileOpe
 }
 
 static Azure::Storage::Blobs::BlobServiceClient
-GetBlobStorageAccountClientFromConfigProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetBlobStorageAccountClientFromConfigProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                               const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 
@@ -328,7 +328,7 @@ GetBlobStorageAccountClientFromConfigProvider(FileOpener *opener, const KeyValue
 }
 
 static Azure::Storage::Files::DataLake::DataLakeServiceClient
-GetDfsStorageAccountClientFromConfigProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetDfsStorageAccountClientFromConfigProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                              const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 
@@ -355,7 +355,7 @@ GetDfsStorageAccountClientFromConfigProvider(FileOpener *opener, const KeyValueS
 }
 
 static Azure::Storage::Blobs::BlobServiceClient
-GetBlobStorageAccountClientFromCredentialChainProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetBlobStorageAccountClientFromCredentialChainProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                                        const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 	// Create credential chain
@@ -369,7 +369,7 @@ GetBlobStorageAccountClientFromCredentialChainProvider(FileOpener *opener, const
 }
 
 static Azure::Storage::Files::DataLake::DataLakeServiceClient
-GetDfsStorageAccountClientFromCredentialChainProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetDfsStorageAccountClientFromCredentialChainProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                                       const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 	// Create credential chain
@@ -383,7 +383,7 @@ GetDfsStorageAccountClientFromCredentialChainProvider(FileOpener *opener, const
 }
 
 static Azure::Storage::Blobs::BlobServiceClient
-GetBlobStorageAccountClientFromServicePrincipalProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetBlobStorageAccountClientFromServicePrincipalProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                                         const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 	auto token_credential = CreateClientCredential(secret, transport_options);
@@ -396,7 +396,7 @@ GetBlobStorageAccountClientFromServicePrincipalProvider(FileOpener *opener, cons
 }
 
 static Azure::Storage::Files::DataLake::DataLakeServiceClient
-GetDfsStorageAccountClientFromServicePrincipalProvider(FileOpener *opener, const KeyValueSecret &secret,
+GetDfsStorageAccountClientFromServicePrincipalProvider(optional_ptr<FileOpener> opener, const KeyValueSecret &secret,
                                                        const AzureParsedUrl &azure_parsed_url) {
 	auto transport_options = GetTransportOptions(opener, secret);
 	auto token_credential = CreateClientCredential(secret, transport_options);
@@ -409,7 +409,7 @@ GetDfsStorageAccountClientFromServicePrincipalProvider(FileOpener *opener, const
 }
 
 static Azure::Storage::Blobs::BlobServiceClient
-GetBlobStorageAccountClient(FileOpener *opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
+GetBlobStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
 	auto &provider = secret.GetProvider();
 	// default provider
 	if (provider == "config") {
@@ -424,7 +424,7 @@ GetBlobStorageAccountClient(FileOpener *opener, const KeyValueSecret &secret, co
 }
 
 static Azure::Storage::Files::DataLake::DataLakeServiceClient
-GetDfsStorageAccountClient(FileOpener *opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
+GetDfsStorageAccountClient(optional_ptr<FileOpener> opener, const KeyValueSecret &secret, const AzureParsedUrl &azure_parsed_url) {
 	auto &provider = secret.GetProvider();
 	// default provider
 	if (provider == "config") {
@@ -438,7 +438,7 @@ GetDfsStorageAccountClient(FileOpener *opener, const KeyValueSecret &secret, con
 	throw InvalidInputException("Unsupported provider type %s for azure", provider);
 }
 
-static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(FileOpener *opener) {
+static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(optional_ptr<FileOpener> opener) {
 	auto azure_transport_option_type = TryGetCurrentSetting(opener, "azure_transport_option_type");
 
 	// Load proxy options
@@ -449,7 +449,7 @@ static Azure::Core::Http::Policies::TransportOptions GetTransportOptions(FileOpe
 	return GetTransportOptions(azure_transport_option_type, http_proxy, http_proxy_user_name, http_proxy_password);
 }
 
-static Azure::Storage::Blobs::BlobServiceClient GetBlobStorageAccountClient(FileOpener *opener,
+static Azure::Storage::Blobs::BlobServiceClient GetBlobStorageAccountClient(optional_ptr<FileOpener> opener,
                                                                             const std::string &provided_storage_account,
                                                                             const std::string &provided_endpoint) {
 	auto transport_options = GetTransportOptions(opener);
@@ -494,7 +494,7 @@ static Azure::Storage::Blobs::BlobServiceClient GetBlobStorageAccountClient(File
 	return Azure::Storage::Blobs::BlobServiceClient {account_url, blob_options};
 }
 
-const SecretMatch LookupSecret(FileOpener *opener, const std::string &path) {
+const SecretMatch LookupSecret(optional_ptr<FileOpener> opener, const std::string &path) {
 	auto context = opener->TryGetClientContext();
 
 	if (context) {
@@ -505,7 +505,7 @@ const SecretMatch LookupSecret(FileOpener *opener, const std::string &path) {
 	return {};
 }
 
-Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(FileOpener *opener, const std::string &path,
+Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
                                                                      const AzureParsedUrl &azure_parsed_url) {
 
 	auto secret_match = LookupSecret(opener, path);
@@ -519,7 +519,7 @@ Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(FileOpener
 }
 
 Azure::Storage::Files::DataLake::DataLakeServiceClient
-ConnectToDfsStorageAccount(FileOpener *opener, const std::string &path, const AzureParsedUrl &azure_parsed_url) {
+ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path, const AzureParsedUrl &azure_parsed_url) {
 	auto secret_match = LookupSecret(opener, path);
 	if (secret_match.HasMatch()) {
 		const auto &base_secret = secret_match.GetSecret();
diff --git a/src/include/azure_blob_filesystem.hpp b/src/include/azure_blob_filesystem.hpp
index cb76d68..4d10ebe 100644
--- a/src/include/azure_blob_filesystem.hpp
+++ b/src/include/azure_blob_filesystem.hpp
@@ -23,7 +23,7 @@ class AzureBlobStorageFileSystem;
 
 class AzureBlobStorageFileHandle : public AzureFileHandle {
 public:
-	AzureBlobStorageFileHandle(AzureBlobStorageFileSystem &fs, string path, uint8_t flags,
+	AzureBlobStorageFileHandle(AzureBlobStorageFileSystem &fs, string path, FileOpenFlags flags,
 	                           const AzureReadOptions &read_options, Azure::Storage::Blobs::BlobClient blob_client);
 	~AzureBlobStorageFileHandle() override = default;
 
@@ -36,7 +36,7 @@ public:
 	vector<string> Glob(const string &path, FileOpener *opener = nullptr) override;
 
 	// FS methods
-	bool FileExists(const string &filename) override;
+	bool FileExists(const string &filename, optional_ptr<FileOpener> opener = nullptr) override;
 	bool CanHandleFile(const string &fpath) override;
 	string GetName() const override {
 		return "AzureBlobStorageFileSystem";
@@ -57,10 +57,10 @@ protected:
 	const string &GetContextPrefix() const override {
 		return PATH_PREFIX;
 	}
-	std::shared_ptr<AzureContextState> CreateStorageContext(FileOpener *opener, const string &path,
+	std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
 	                                                        const AzureParsedUrl &parsed_url) override;
-	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, uint8_t flags, FileLockType lock,
-	                                                 FileCompressionType compression, FileOpener *opener) override;
+	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
+													 optional_ptr<FileOpener> opener) override;
 
 	void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) override;
 };
diff --git a/src/include/azure_dfs_filesystem.hpp b/src/include/azure_dfs_filesystem.hpp
index c4bf8fe..cdcdb23 100644
--- a/src/include/azure_dfs_filesystem.hpp
+++ b/src/include/azure_dfs_filesystem.hpp
@@ -25,7 +25,7 @@ class AzureDfsStorageFileSystem;
 
 class AzureDfsStorageFileHandle : public AzureFileHandle {
 public:
-	AzureDfsStorageFileHandle(AzureDfsStorageFileSystem &fs, string path, uint8_t flags,
+	AzureDfsStorageFileHandle(AzureDfsStorageFileSystem &fs, string path, FileOpenFlags flags,
 	                          const AzureReadOptions &read_options,
 	                          Azure::Storage::Files::DataLake::DataLakeFileClient client);
 	~AzureDfsStorageFileHandle() override = default;
@@ -55,10 +55,10 @@ protected:
 	const string &GetContextPrefix() const override {
 		return PATH_PREFIX;
 	}
-	std::shared_ptr<AzureContextState> CreateStorageContext(FileOpener *opener, const string &path,
+	std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
 	                                                        const AzureParsedUrl &parsed_url) override;
-	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, uint8_t flags, FileLockType lock,
-	                                                 FileCompressionType compression, FileOpener *opener) override;
+	duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
+													 optional_ptr<FileOpener> opener) override;
 
 	void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) override;
 };
diff --git a/src/include/azure_filesystem.hpp b/src/include/azure_filesystem.hpp
index a41d7a2..338c744 100644
--- a/src/include/azure_filesystem.hpp
+++ b/src/include/azure_filesystem.hpp
@@ -52,10 +52,10 @@ public:
 	}
 
 protected:
-	AzureFileHandle(AzureStorageFileSystem &fs, string path, uint8_t flags, const AzureReadOptions &read_options);
+	AzureFileHandle(AzureStorageFileSystem &fs, string path, FileOpenFlags flags, const AzureReadOptions &read_options);
 
 public:
-	const uint8_t flags;
+	const FileOpenFlags flags;
 
 	// File info
 	idx_t length;
@@ -76,9 +76,8 @@ public:
 class AzureStorageFileSystem : public FileSystem {
 public:
 	// FS methods
-	duckdb::unique_ptr<FileHandle> OpenFile(const string &path, uint8_t flags, FileLockType lock = DEFAULT_LOCK,
-	                                        FileCompressionType compression = DEFAULT_COMPRESSION,
-	                                        FileOpener *opener = nullptr) override;
+	duckdb::unique_ptr<FileHandle> OpenFile(const string &path, FileOpenFlags flags,
+	                                        optional_ptr<FileOpener> opener = nullptr) override;
 
 	void Read(FileHandle &handle, void *buffer, int64_t nr_bytes, idx_t location) override;
 	int64_t Read(FileHandle &handle, void *buffer, int64_t nr_bytes) override;
@@ -88,7 +87,7 @@ public:
 	bool OnDiskFile(FileHandle &handle) override {
 		return false;
 	}
-	bool IsPipe(const string &filename) override {
+	bool IsPipe(const string &filename, optional_ptr<FileOpener> opener = nullptr) override {
 		return false;
 	}
 	int64_t GetFileSize(FileHandle &handle) override;
@@ -99,18 +98,18 @@ public:
 	void LoadFileInfo(AzureFileHandle &handle);
 
 protected:
-	virtual duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, uint8_t flags, FileLockType lock,
-	                                                         FileCompressionType compression, FileOpener *opener) = 0;
+	virtual duckdb::unique_ptr<AzureFileHandle> CreateHandle(const string &path, FileOpenFlags flags,
+															 optional_ptr<FileOpener> opener) = 0;
 	virtual void ReadRange(AzureFileHandle &handle, idx_t file_offset, char *buffer_out, idx_t buffer_out_len) = 0;
 
 	virtual const string &GetContextPrefix() const = 0;
-	std::shared_ptr<AzureContextState> GetOrCreateStorageContext(FileOpener *opener, const string &path,
+	std::shared_ptr<AzureContextState> GetOrCreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
 	                                                             const AzureParsedUrl &parsed_url);
-	virtual std::shared_ptr<AzureContextState> CreateStorageContext(FileOpener *opener, const string &path,
+	virtual std::shared_ptr<AzureContextState> CreateStorageContext(optional_ptr<FileOpener> opener, const string &path,
 	                                                                const AzureParsedUrl &parsed_url) = 0;
 
 	virtual void LoadRemoteFileInfo(AzureFileHandle &handle) = 0;
-	static AzureReadOptions ParseAzureReadOptions(FileOpener *opener);
+	static AzureReadOptions ParseAzureReadOptions(optional_ptr<FileOpener> opener);
 	static time_t ToTimeT(const Azure::DateTime &dt);
 };
 
diff --git a/src/include/azure_storage_account_client.hpp b/src/include/azure_storage_account_client.hpp
index 2e22ee0..600fa10 100644
--- a/src/include/azure_storage_account_client.hpp
+++ b/src/include/azure_storage_account_client.hpp
@@ -8,10 +8,10 @@
 
 namespace duckdb {
 
-Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(FileOpener *opener, const std::string &path,
+Azure::Storage::Blobs::BlobServiceClient ConnectToBlobStorageAccount(optional_ptr<FileOpener> opener, const std::string &path,
                                                                      const AzureParsedUrl &azure_parsed_url);
 
 Azure::Storage::Files::DataLake::DataLakeServiceClient
-ConnectToDfsStorageAccount(FileOpener *opener, const std::string &path, const AzureParsedUrl &azure_parsed_url);
+ConnectToDfsStorageAccount(optional_ptr<FileOpener> opener, const std::string &path, const AzureParsedUrl &azure_parsed_url);
 
 } // namespace duckdb

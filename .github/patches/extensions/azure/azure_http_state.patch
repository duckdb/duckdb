diff --git a/CMakeLists.txt b/CMakeLists.txt
index 341eb3c..540a708 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,7 @@ set(EXTENSION_SOURCES
     src/azure_extension.cpp
     src/azure_secret.cpp
     src/azure_filesystem.cpp
+    src/azure_http_state.cpp
     src/azure_storage_account_client.cpp
     src/azure_blob_filesystem.cpp
     src/azure_dfs_filesystem.cpp
diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index 42f9323..4050960 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -5,7 +5,7 @@
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/helper.hpp"
 #include "duckdb/common/shared_ptr.hpp"
-#include "duckdb/common/http_state.hpp"
+#include "azure_http_state.hpp"
 #include "duckdb/common/file_opener.hpp"
 #include "duckdb/common/string_util.hpp"
 #include "duckdb/main/secret/secret.hpp"
diff --git a/src/azure_filesystem.cpp b/src/azure_filesystem.cpp
index 6175421..e32b2ca 100644
--- a/src/azure_filesystem.cpp
+++ b/src/azure_filesystem.cpp
@@ -169,21 +169,20 @@ shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(
 
 		auto context_key = GetContextPrefix() + parsed_url.storage_account_name;
 
-		auto &registered_state = client_context->registered_state;
-		auto storage_account_it = registered_state.find(context_key);
-		if (storage_account_it == registered_state.end()) {
+		auto &registered_state = *client_context->registered_state;
+		auto azure_context_state = registered_state.Get<AzureContextState>(context_key);
+		if (!azure_context_state) {
 			result = CreateStorageContext(opener, path, parsed_url);
-			registered_state.insert(std::make_pair(context_key, result));
+			registered_state.Insert(context_key, result);
 		} else {
-			auto *azure_context_state = static_cast<AzureContextState *>(storage_account_it->second.get());
 			// We keep the context valid until the QueryEnd (cf: AzureBlobContextState#QueryEnd())
 			// we do so because between queries the user can change the secret/variable that has been set
 			// the side effect of that is that we will reconnect (potentially retrieve a new token) on each request
 			if (!azure_context_state->IsValid()) {
 				result = CreateStorageContext(opener, path, parsed_url);
-				registered_state[context_key] = result;
+				registered_state.Insert(context_key, result);
 			} else {
-				result = shared_ptr<AzureContextState>(storage_account_it->second, azure_context_state);
+				result = azure_context_state;
 			}
 		}
 	} else {
@@ -193,6 +192,7 @@ shared_ptr<AzureContextState> AzureStorageFileSystem::GetOrCreateStorageContext(
 	return result;
 }
 
+
 AzureReadOptions AzureStorageFileSystem::ParseAzureReadOptions(optional_ptr<FileOpener> opener) {
 	AzureReadOptions options;
 
diff --git a/src/azure_http_state.cpp b/src/azure_http_state.cpp
new file mode 100644
index 0000000..c65942f
--- /dev/null
+++ b/src/azure_http_state.cpp
@@ -0,0 +1,51 @@
+#include "azure_http_state.hpp"
+#include "duckdb/main/client_context.hpp"
+#include "duckdb/main/query_profiler.hpp"
+
+namespace duckdb {
+
+void AzureHTTPState::Reset() {
+	head_count = 0;
+	get_count = 0;
+	put_count = 0;
+	post_count = 0;
+	total_bytes_received = 0;
+	total_bytes_sent = 0;
+}
+
+shared_ptr<AzureHTTPState> AzureHTTPState::TryGetState(ClientContext &context) {
+	return context.registered_state->GetOrCreate<AzureHTTPState>("azure_http_state");
+}
+
+shared_ptr<AzureHTTPState> AzureHTTPState::TryGetState(optional_ptr<FileOpener> opener) {
+	auto client_context = FileOpener::TryGetClientContext(opener);
+	if (client_context) {
+		return TryGetState(*client_context);
+	}
+	return nullptr;
+}
+
+void AzureHTTPState::WriteProfilingInformation(std::ostream &ss) {
+	string read = "in: " + StringUtil::BytesToHumanReadableString(total_bytes_received);
+	string written = "out: " + StringUtil::BytesToHumanReadableString(total_bytes_sent);
+	string head = "#HEAD: " + to_string(head_count);
+	string get = "#GET: " + to_string(get_count);
+	string put = "#PUT: " + to_string(put_count);
+	string post = "#POST: " + to_string(post_count);
+
+	constexpr idx_t TOTAL_BOX_WIDTH = 39;
+	ss << "┌─────────────────────────────────────┐\n";
+	ss << "│┌───────────────────────────────────┐│\n";
+	ss << "││" + QueryProfiler::DrawPadded("Azure HTTP Stats", TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││                                   ││\n";
+	ss << "││" + QueryProfiler::DrawPadded(read, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(written, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(head, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(get, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(put, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "││" + QueryProfiler::DrawPadded(post, TOTAL_BOX_WIDTH - 4) + "││\n";
+	ss << "│└───────────────────────────────────┘│\n";
+	ss << "└─────────────────────────────────────┘\n";
+}
+
+} // namespace duckdb
diff --git a/src/azure_storage_account_client.cpp b/src/azure_storage_account_client.cpp
index 11ad859..f206ebd 100644
--- a/src/azure_storage_account_client.cpp
+++ b/src/azure_storage_account_client.cpp
@@ -77,7 +77,7 @@ static std::string AccountUrl(const AzureParsedUrl &azure_parsed_url) {
 
 template <typename T>
 static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                         shared_ptr<HTTPState> http_state) {
+                         shared_ptr<AzureHTTPState> http_state) {
 	static_assert(std::is_base_of<Azure::Core::_internal::ClientOptions, T>::value,
 	              "type parameter must be an Azure ClientOptions");
 	T options;
@@ -94,13 +94,13 @@ static T ToClientOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 
 static Azure::Storage::Blobs::BlobClientOptions
 ToBlobClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                    shared_ptr<HTTPState> http_state) {
+                    shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Blobs::BlobClientOptions>(transport_options, std::move(http_state));
 }
 
 static Azure::Storage::Files::DataLake::DataLakeClientOptions
 ToDfsClientOptions(const Azure::Core::Http::Policies::TransportOptions &transport_options,
-                   shared_ptr<HTTPState> http_state) {
+                   shared_ptr<AzureHTTPState> http_state) {
 	return ToClientOptions<Azure::Storage::Files::DataLake::DataLakeClientOptions>(transport_options,
 	                                                                               std::move(http_state));
 }
@@ -112,16 +112,16 @@ ToTokenCredentialOptions(const Azure::Core::Http::Policies::TransportOptions &tr
 	return options;
 }
 
-static shared_ptr<HTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
+static shared_ptr<AzureHTTPState> GetHttpState(optional_ptr<FileOpener> opener) {
 	Value value;
 	bool enable_http_stats = false;
 	if (FileOpener::TryGetCurrentSetting(opener, "azure_http_stats", value)) {
 		enable_http_stats = value.GetValue<bool>();
 	}
 
-	shared_ptr<HTTPState> http_state;
+	shared_ptr<AzureHTTPState> http_state;
 	if (enable_http_stats) {
-		http_state = HTTPState::TryGetState(opener);
+		http_state = AzureHTTPState::TryGetState(opener);
 	}
 
 	return http_state;
diff --git a/src/http_state_policy.cpp b/src/http_state_policy.cpp
index baa3f97..f58b36d 100644
--- a/src/http_state_policy.cpp
+++ b/src/http_state_policy.cpp
@@ -9,7 +9,7 @@ const static std::string CONTENT_LENGTH = "content-length";
 
 namespace duckdb {
 
-HttpStatePolicy::HttpStatePolicy(shared_ptr<HTTPState> http_state) : http_state(std::move(http_state)) {
+HttpStatePolicy::HttpStatePolicy(shared_ptr<AzureHTTPState> http_state) : http_state(std::move(http_state)) {
 }
 
 std::unique_ptr<Azure::Core::Http::RawResponse>
diff --git a/src/include/azure_http_state.hpp b/src/include/azure_http_state.hpp
new file mode 100644
index 0000000..9959628
--- /dev/null
+++ b/src/include/azure_http_state.hpp
@@ -0,0 +1,41 @@
+#pragma once
+
+#include "duckdb/common/atomic.hpp"
+#include "duckdb/common/file_opener.hpp"
+#include "duckdb/common/file_system.hpp"
+#include "duckdb/main/client_context_state.hpp"
+
+namespace duckdb {
+
+class AzureHTTPState : public ClientContextState {
+public:
+	AzureHTTPState() {
+	}
+
+public:
+	//! Reset all counters
+	void Reset();
+	//! Helper functions to get the HTTP state
+	static shared_ptr<AzureHTTPState> TryGetState(ClientContext &context);
+	static shared_ptr<AzureHTTPState> TryGetState(optional_ptr<FileOpener> opener);
+
+	bool IsEmpty() {
+		return head_count == 0 && get_count == 0 && put_count == 0 && post_count == 0 && total_bytes_received == 0 &&
+		       total_bytes_sent == 0;
+	}
+
+	atomic<idx_t> head_count {0};
+	atomic<idx_t> get_count {0};
+	atomic<idx_t> put_count {0};
+	atomic<idx_t> post_count {0};
+	atomic<idx_t> total_bytes_received {0};
+	atomic<idx_t> total_bytes_sent {0};
+
+	//! Called by the ClientContext when the current query ends
+	void QueryEnd(ClientContext &context) override {
+		Reset();
+	}
+	void WriteProfilingInformation(std::ostream &ss) override;
+};
+
+} // namespace duckdb
diff --git a/src/include/http_state_policy.hpp b/src/include/http_state_policy.hpp
index 9db73b6..30563b7 100644
--- a/src/include/http_state_policy.hpp
+++ b/src/include/http_state_policy.hpp
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "duckdb/common/http_state.hpp"
 #include "duckdb/common/shared_ptr.hpp"
+#include "azure_http_state.hpp"
 #include <azure/core/context.hpp>
 #include <azure/core/http/http.hpp>
 #include <azure/core/http/policies/policy.hpp>
@@ -12,7 +12,7 @@ namespace duckdb {
 
 class HttpStatePolicy : public Azure::Core::Http::Policies::HttpPolicy {
 public:
-	HttpStatePolicy(shared_ptr<HTTPState> http_state);
+	HttpStatePolicy(shared_ptr<AzureHTTPState> http_state);
 
 	std::unique_ptr<Azure::Core::Http::RawResponse> Send(Azure::Core::Http::Request &request,
 	                                                     Azure::Core::Http::Policies::NextHttpPolicy next_policy,
@@ -21,7 +21,7 @@ public:
 	std::unique_ptr<Azure::Core::Http::Policies::HttpPolicy> Clone() const override;
 
 private:
-	shared_ptr<HTTPState> http_state;
+	shared_ptr<AzureHTTPState> http_state;
 };
 
 } // namespace duckdb

diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index ded9d4f..6ba3a0e 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -100,7 +100,7 @@ bool AzureBlobStorageFileSystem::CanHandleFile(const string &fpath) {
 	return fpath.rfind(PATH_PREFIX, 0) * fpath.rfind(SHORT_PATH_PREFIX, 0) == 0;
 }
 
-vector<string> AzureBlobStorageFileSystem::Glob(const string &path, FileOpener *opener) {
+vector<OpenFileInfo> AzureBlobStorageFileSystem::Glob(const string &path, FileOpener *opener) {
 	if (opener == nullptr) {
 		throw InternalException("Cannot do Azure storage Glob without FileOpener");
 	}
@@ -118,7 +118,7 @@ vector<string> AzureBlobStorageFileSystem::Glob(const string &path, FileOpener *
 	auto container_client = storage_context->As<AzureBlobContextState>().GetBlobContainerClient(azure_url.container);
 
 	const auto pattern_splits = StringUtil::Split(azure_url.path, "/");
-	vector<string> result;
+	vector<OpenFileInfo> result;
 
 	Azure::Storage::Blobs::ListBlobsOptions options;
 	options.Prefix = shared_path;
diff --git a/src/azure_dfs_filesystem.cpp b/src/azure_dfs_filesystem.cpp
index cb6df74..42171e4 100644
--- a/src/azure_dfs_filesystem.cpp
+++ b/src/azure_dfs_filesystem.cpp
@@ -28,7 +28,7 @@ inline static bool IsDfsScheme(const string &fpath) {
 }
 
 static void Walk(const Azure::Storage::Files::DataLake::DataLakeFileSystemClient &fs, const std::string &path,
-                 const string &path_pattern, std::size_t end_match, std::vector<std::string> *out_result) {
+                 const string &path_pattern, std::size_t end_match, std::vector<OpenFileInfo> *out_result) {
 	auto directory_client = fs.GetDirectoryClient(path);
 
 	bool recursive = false;
@@ -118,7 +118,7 @@ bool AzureDfsStorageFileSystem::CanHandleFile(const string &fpath) {
 	return IsDfsScheme(fpath);
 }
 
-vector<string> AzureDfsStorageFileSystem::Glob(const string &path, FileOpener *opener) {
+vector<OpenFileInfo> AzureDfsStorageFileSystem::Glob(const string &path, FileOpener *opener) {
 	if (opener == nullptr) {
 		throw InternalException("Cannot do Azure storage Glob without FileOpener");
 	}
@@ -141,7 +141,7 @@ vector<string> AzureDfsStorageFileSystem::Glob(const string &path, FileOpener *o
 	}
 	auto shared_path = azure_url.path.substr(0, index_root_dir);
 
-	std::vector<std::string> result;
+	std::vector<OpenFileInfo> result;
 	Walk(dfs_filesystem_client, shared_path,
 	     // pattern to match
 	     azure_url.path, std::min(azure_url.path.length(), azure_url.path.find('/', index_root_dir + 1)),
@@ -155,7 +155,7 @@ vector<string> AzureDfsStorageFileSystem::Glob(const string &path, FileOpener *o
 		                                  : (azure_url.prefix + azure_url.container)) +
 		    '/';
 		for (auto &elt : result) {
-			elt = path_result_prefix + elt;
+			elt = path_result_prefix + elt.path;
 		}
 	}
 
diff --git a/src/include/azure_blob_filesystem.hpp b/src/include/azure_blob_filesystem.hpp
index 638864a..b4c8cdf 100644
--- a/src/include/azure_blob_filesystem.hpp
+++ b/src/include/azure_blob_filesystem.hpp
@@ -35,7 +35,7 @@ public:
 
 class AzureBlobStorageFileSystem : public AzureStorageFileSystem {
 public:
-	vector<string> Glob(const string &path, FileOpener *opener = nullptr) override;
+	vector<OpenFileInfo> Glob(const string &path, FileOpener *opener = nullptr) override;
 
 	// FS methods
 	bool FileExists(const string &filename, optional_ptr<FileOpener> opener = nullptr) override;
diff --git a/src/include/azure_dfs_filesystem.hpp b/src/include/azure_dfs_filesystem.hpp
index 9105b4e..aa43ce1 100644
--- a/src/include/azure_dfs_filesystem.hpp
+++ b/src/include/azure_dfs_filesystem.hpp
@@ -38,7 +38,7 @@ public:
 
 class AzureDfsStorageFileSystem : public AzureStorageFileSystem {
 public:
-	vector<string> Glob(const string &path, FileOpener *opener = nullptr) override;
+	vector<OpenFileInfo> Glob(const string &path, FileOpener *opener = nullptr) override;
 
 	bool CanHandleFile(const string &fpath) override;
 	string GetName() const override {

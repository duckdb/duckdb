diff --git a/src/azure_blob_filesystem.cpp b/src/azure_blob_filesystem.cpp
index ee19c8c..4116a59 100644
--- a/src/azure_blob_filesystem.cpp
+++ b/src/azure_blob_filesystem.cpp
@@ -12,7 +12,7 @@
 #include "duckdb/main/secret/secret_manager.hpp"
 #include "duckdb/function/scalar/string_common.hpp"
 #include "duckdb/function/scalar_function.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/client_data.hpp"
 #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
 #include <azure/storage/blobs.hpp>
@@ -151,8 +151,8 @@ vector<OpenFileInfo> AzureBlobStorageFileSystem::Glob(const string &path, FileOp
 				info.extended_info = make_shared_ptr<ExtendedOpenFileInfo>();
 				auto &options = info.extended_info->options;
 				options.emplace("file_size", Value::BIGINT(key.BlobSize));
-				options.emplace("last_modified", Value::TIMESTAMP(Timestamp::FromTimeT(
-				                                     AzureStorageFileSystem::ToTimeT(key.Details.LastModified))));
+				options.emplace("last_modified", Value::TIMESTAMP(
+				                                     AzureStorageFileSystem::ToTimestamp(key.Details.LastModified)));
 				result.push_back(info);
 			}
 		}
@@ -171,10 +171,10 @@ vector<OpenFileInfo> AzureBlobStorageFileSystem::Glob(const string &path, FileOp
 void AzureBlobStorageFileSystem::LoadRemoteFileInfo(AzureFileHandle &handle) {
 	auto &hfh = handle.Cast<AzureBlobStorageFileHandle>();
 
-	if (hfh.length == 0 && hfh.last_modified == 0) {
+	if (hfh.length == 0 && hfh.last_modified == timestamp_t(0)) {
 		auto res = hfh.blob_client.GetProperties();
 		hfh.length = res.Value.BlobSize;
-		hfh.last_modified = ToTimeT(res.Value.LastModified);
+		hfh.last_modified = ToTimestamp(res.Value.LastModified);
 	}
 }
 
diff --git a/src/azure_dfs_filesystem.cpp b/src/azure_dfs_filesystem.cpp
index 5feb445..af8f03c 100644
--- a/src/azure_dfs_filesystem.cpp
+++ b/src/azure_dfs_filesystem.cpp
@@ -67,8 +67,8 @@ static void Walk(const Azure::Storage::Files::DataLake::DataLakeFileSystemClient
 					info.extended_info = make_shared_ptr<ExtendedOpenFileInfo>();
 					auto &options = info.extended_info->options;
 					options.emplace("file_size", Value::BIGINT(elt.FileSize));
-					options.emplace("last_modified", Value::TIMESTAMP(Timestamp::FromTimeT(
-					                                     AzureStorageFileSystem::ToTimeT(elt.LastModified))));
+					options.emplace("last_modified", Value::TIMESTAMP(
+					                                     AzureStorageFileSystem::ToTimestamp(elt.LastModified)));
 					out_result->push_back(info);
 				}
 			}
@@ -172,10 +172,10 @@ vector<OpenFileInfo> AzureDfsStorageFileSystem::Glob(const string &path, FileOpe
 void AzureDfsStorageFileSystem::LoadRemoteFileInfo(AzureFileHandle &handle) {
 	auto &hfh = handle.Cast<AzureDfsStorageFileHandle>();
 
-	if (hfh.length == 0 && hfh.last_modified == 0) {
+	if (hfh.length == 0 && hfh.last_modified == timestamp_t(0)) {
 		auto res = hfh.file_client.GetProperties();
 		hfh.length = res.Value.FileSize;
-		hfh.last_modified = ToTimeT(res.Value.LastModified);
+		hfh.last_modified = ToTimestamp(res.Value.LastModified);
 	}
 }
 
diff --git a/src/azure_extension.cpp b/src/azure_extension.cpp
index 5ce0b8d..d0758e2 100644
--- a/src/azure_extension.cpp
+++ b/src/azure_extension.cpp
@@ -1,5 +1,3 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "azure_extension.hpp"
 #include "azure_blob_filesystem.hpp"
 #include "azure_dfs_filesystem.hpp"
@@ -7,14 +5,15 @@
 
 namespace duckdb {
 
-static void LoadInternal(DatabaseInstance &instance) {
+static void LoadInternal(ExtensionLoader &loader) {
 	// Load filesystem
+	auto &instance = loader.GetDatabaseInstance();
 	auto &fs = instance.GetFileSystem();
 	fs.RegisterSubSystem(make_uniq<AzureBlobStorageFileSystem>());
 	fs.RegisterSubSystem(make_uniq<AzureDfsStorageFileSystem>());
 
 	// Load Secret functions
-	CreateAzureSecretFunctions::Register(instance);
+	CreateAzureSecretFunctions::Register(loader);
 
 	// Load extension config
 	auto &config = DBConfig::GetConfig(instance);
@@ -77,8 +76,8 @@ static void LoadInternal(DatabaseInstance &instance) {
 	                          Value(nullptr));
 }
 
-void AzureExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void AzureExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 std::string AzureExtension::Name() {
 	return "azure";
@@ -88,15 +87,8 @@ std::string AzureExtension::Name() {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void azure_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
-}
-
-DUCKDB_EXTENSION_API const char *azure_version() {
-	return duckdb::DuckDB::LibraryVersion();
-}
+DUCKDB_CPP_EXTENSION_ENTRY(azure, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
+}
\ No newline at end of file
diff --git a/src/azure_filesystem.cpp b/src/azure_filesystem.cpp
index d7ed201..07f84eb 100644
--- a/src/azure_filesystem.cpp
+++ b/src/azure_filesystem.cpp
@@ -40,7 +40,7 @@ AzureFileHandle::AzureFileHandle(AzureStorageFileSystem &fs, const OpenFileInfo
 		}
 		auto entry2 = info.extended_info->options.find("last_modified");
 		if (entry2 != info.extended_info->options.end()) {
-			last_modified = Timestamp::ToTimeT(entry2->second.GetValue<timestamp_t>());
+			last_modified = entry2->second.GetValue<timestamp_t>();
 		}
 	}
 }
@@ -93,7 +93,7 @@ int64_t AzureStorageFileSystem::GetFileSize(FileHandle &handle) {
 	return afh.length;
 }
 
-time_t AzureStorageFileSystem::GetLastModifiedTime(FileHandle &handle) {
+timestamp_t AzureStorageFileSystem::GetLastModifiedTime(FileHandle &handle) {
 	auto &afh = handle.Cast<AzureFileHandle>();
 	return afh.last_modified;
 }
@@ -228,9 +228,10 @@ AzureReadOptions AzureStorageFileSystem::ParseAzureReadOptions(optional_ptr<File
 	return options;
 }
 
-time_t AzureStorageFileSystem::ToTimeT(const Azure::DateTime &dt) {
+timestamp_t AzureStorageFileSystem::ToTimestamp(const Azure::DateTime &dt) {
 	auto time_point = static_cast<std::chrono::system_clock::time_point>(dt);
-	return std::chrono::system_clock::to_time_t(time_point);
+	auto micros = std::chrono::duration_cast<std::chrono::microseconds>(time_point.time_since_epoch()).count();
+	return timestamp_t(micros);
 }
 
 } // namespace duckdb
diff --git a/src/azure_secret.cpp b/src/azure_secret.cpp
index e9f08f0..7b1919a 100644
--- a/src/azure_secret.cpp
+++ b/src/azure_secret.cpp
@@ -2,7 +2,7 @@
 #include "azure_dfs_filesystem.hpp"
 #include "duckdb/common/types.hpp"
 #include "duckdb/common/unique_ptr.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/main/secret/secret.hpp"
 #include <azure/identity/azure_cli_credential.hpp>
 #include <azure/identity/chained_token_credential.hpp>
@@ -148,7 +148,7 @@ static void RegisterCommonSecretParameters(CreateSecretFunction &function) {
 	function.named_parameters["proxy_password"] = LogicalType::VARCHAR;
 }
 
-void CreateAzureSecretFunctions::Register(DatabaseInstance &instance) {
+void CreateAzureSecretFunctions::Register(ExtensionLoader &loader) {
 	string type = "azure";
 
 	// Register the new type
@@ -156,19 +156,19 @@ void CreateAzureSecretFunctions::Register(DatabaseInstance &instance) {
 	secret_type.name = type;
 	secret_type.deserializer = KeyValueSecret::Deserialize<KeyValueSecret>;
 	secret_type.default_provider = "config";
-	ExtensionUtil::RegisterSecretType(instance, secret_type);
+	loader.RegisterSecretType(secret_type);
 
 	// Register the connection string secret provider
 	CreateSecretFunction connection_string_function = {type, "config", CreateAzureSecretFromConfig};
 	connection_string_function.named_parameters["connection_string"] = LogicalType::VARCHAR;
 	RegisterCommonSecretParameters(connection_string_function);
-	ExtensionUtil::RegisterFunction(instance, connection_string_function);
+	loader.RegisterFunction(connection_string_function);
 
 	// Register the credential_chain secret provider
 	CreateSecretFunction cred_chain_function = {type, "credential_chain", CreateAzureSecretFromCredentialChain};
 	cred_chain_function.named_parameters["chain"] = LogicalType::VARCHAR;
 	RegisterCommonSecretParameters(cred_chain_function);
-	ExtensionUtil::RegisterFunction(instance, cred_chain_function);
+	loader.RegisterFunction(cred_chain_function);
 
 	// Register the service_principal secret provider
 	CreateSecretFunction service_principal_function = {type, "service_principal",
@@ -178,13 +178,13 @@ void CreateAzureSecretFunctions::Register(DatabaseInstance &instance) {
 	service_principal_function.named_parameters["client_secret"] = LogicalType::VARCHAR;
 	service_principal_function.named_parameters["client_certificate_path"] = LogicalType::VARCHAR;
 	RegisterCommonSecretParameters(service_principal_function);
-	ExtensionUtil::RegisterFunction(instance, service_principal_function);
+	loader.RegisterFunction(service_principal_function);
 
 	// Register the access_token secret provider
 	CreateSecretFunction access_token_function = {type, "access_token", CreateAzureSecretFromAccessToken};
 	access_token_function.named_parameters["access_token"] = LogicalType::VARCHAR;
 	RegisterCommonSecretParameters(access_token_function);
-	ExtensionUtil::RegisterFunction(instance, access_token_function);
+	loader.RegisterFunction(access_token_function);
 }
 
 } // namespace duckdb
diff --git a/src/include/azure_extension.hpp b/src/include/azure_extension.hpp
index c9be37e..1a8404f 100644
--- a/src/include/azure_extension.hpp
+++ b/src/include/azure_extension.hpp
@@ -5,7 +5,7 @@
 namespace duckdb {
 class AzureExtension : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 	std::string Name() override;
 };
 
diff --git a/src/include/azure_filesystem.hpp b/src/include/azure_filesystem.hpp
index 32c26bf..e29cf9a 100644
--- a/src/include/azure_filesystem.hpp
+++ b/src/include/azure_filesystem.hpp
@@ -61,7 +61,7 @@ public:
 
 	// File info
 	idx_t length;
-	time_t last_modified;
+	timestamp_t last_modified;
 
 	// Read buffer
 	duckdb::unique_ptr<data_t[]> read_buffer;
@@ -93,7 +93,7 @@ public:
 		return false;
 	}
 	int64_t GetFileSize(FileHandle &handle) override;
-	time_t GetLastModifiedTime(FileHandle &handle) override;
+	timestamp_t GetLastModifiedTime(FileHandle &handle) override;
 	void Seek(FileHandle &handle, idx_t location) override;
 	void FileSync(FileHandle &handle) override;
 
@@ -125,7 +125,7 @@ protected:
 	static AzureReadOptions ParseAzureReadOptions(optional_ptr<FileOpener> opener);
 
 public:
-	static time_t ToTimeT(const Azure::DateTime &dt);
+	static timestamp_t ToTimestamp(const Azure::DateTime &dt);
 };
 
 } // namespace duckdb
diff --git a/src/include/azure_secret.hpp b/src/include/azure_secret.hpp
index 3dc39e9..6b81816 100644
--- a/src/include/azure_secret.hpp
+++ b/src/include/azure_secret.hpp
@@ -18,7 +18,7 @@ class CreateSecretFunction;
 struct CreateAzureSecretFunctions {
 public:
 	//! Register all CreateSecretFunctions
-	static void Register(DatabaseInstance &instance);
+	static void Register(ExtensionLoader &instance);
 };
 
 } // namespace duckdb

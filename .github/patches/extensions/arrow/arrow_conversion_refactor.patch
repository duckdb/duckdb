diff --git a/src/arrow_scan_ipc.cpp b/src/arrow_scan_ipc.cpp
index 693ae6a..e3bf858 100644
--- a/src/arrow_scan_ipc.cpp
+++ b/src/arrow_scan_ipc.cpp
@@ -60,13 +60,15 @@ unique_ptr <FunctionData> ArrowIPCTableFunction::ArrowScanBind(ClientContext &co
         if (!schema.release) {
             throw InvalidInputException("arrow_scan: released schema passed");
         }
+        auto arrow_type = GetArrowLogicalType(schema);
         if (schema.dictionary) {
-            res->arrow_convert_data[col_idx] =
-                    make_uniq<ArrowConvertData>(GetArrowLogicalType(schema, res->arrow_convert_data, col_idx));
-            return_types.emplace_back(GetArrowLogicalType(*schema.dictionary, res->arrow_convert_data, col_idx));
+            auto dictionary_type = GetArrowLogicalType(*schema.dictionary);
+            return_types.emplace_back(dictionary_type->GetDuckType());
+            arrow_type->SetDictionary(std::move(dictionary_type));
         } else {
-            return_types.emplace_back(GetArrowLogicalType(schema, res->arrow_convert_data, col_idx));
+            return_types.emplace_back(arrow_type->GetDuckType());
         }
+        res->arrow_table.AddColumn(col_idx, std::move(arrow_type));
         auto format = string(schema.format);
         auto name = string(schema.name);
         if (name.empty()) {
@@ -97,7 +99,7 @@ void ArrowIPCTableFunction::ArrowScanFunction(ClientContext &context, TableFunct
             MinValue<int64_t>(STANDARD_VECTOR_SIZE, state.chunk->arrow_array.length - state.chunk_offset);
     data.lines_read += output_size;
     output.SetCardinality(output_size);
-    ArrowTableFunction::ArrowToDuckDB(state, data.arrow_convert_data, output, data.lines_read - output_size, false);
+    ArrowTableFunction::ArrowToDuckDB(state, data.arrow_table.GetColumns(), output, data.lines_read - output_size, false);
     output.Verify();
     state.chunk_offset += output.size();
 }

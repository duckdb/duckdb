diff --git a/src/arrow_scan_ipc.cpp b/src/arrow_scan_ipc.cpp
index a60d255..37e0e81 100644
--- a/src/arrow_scan_ipc.cpp
+++ b/src/arrow_scan_ipc.cpp
@@ -15,7 +15,6 @@ TableFunction ArrowIPCTableFunction::GetFunction() {
       ArrowTableFunction::ArrowScanInitLocal);

   scan_arrow_ipc_func.cardinality = ArrowTableFunction::ArrowScanCardinality;
-  scan_arrow_ipc_func.get_batch_index = nullptr; // TODO implement
   scan_arrow_ipc_func.projection_pushdown = true;
   scan_arrow_ipc_func.filter_pushdown = false;

@@ -71,9 +70,12 @@ unique_ptr<FunctionData> ArrowIPCTableFunction::ArrowScanBind(
     if (!schema.release) {
       throw InvalidInputException("arrow_scan: released schema passed");
     }
-    auto arrow_type = GetArrowLogicalType(schema);
+    auto arrow_type =
+       ArrowType::GetArrowLogicalType(DBConfig::GetConfig(context), schema);
+
     if (schema.dictionary) {
-      auto dictionary_type = GetArrowLogicalType(*schema.dictionary);
+      auto dictionary_type = ArrowType::GetArrowLogicalType(
+          DBConfig::GetConfig(context), *schema.dictionary);
       return_types.emplace_back(dictionary_type->GetDuckType());
       arrow_type->SetDictionary(std::move(dictionary_type));
     } else {
diff --git a/src/arrow_to_ipc.cpp b/src/arrow_to_ipc.cpp
index c316d85..905df2b 100644
--- a/src/arrow_to_ipc.cpp
+++ b/src/arrow_to_ipc.cpp
@@ -76,9 +76,9 @@ ToArrowIPCFunction::Bind(ClientContext &context, TableFunctionBindInput &input,

   // Create the Arrow schema
   ArrowSchema schema;
+  auto properties = context.GetClientProperties();
   ArrowConverter::ToArrowSchema(&schema, input.input_table_types,
-                                input.input_table_names,
-                                context.GetClientProperties());
+                                input.input_table_names, properties);
   result->schema = arrow::ImportSchema(&schema).ValueOrDie();

   return std::move(result);
@@ -116,9 +116,10 @@ OperatorResultType ToArrowIPCFunction::Function(ExecutionContext &context,
     output.data[1].SetValue(0, Value::BOOLEAN(1));
   } else {
     if (!local_state.appender) {
-      local_state.appender =
-          make_uniq<ArrowAppender>(input.GetTypes(), data.chunk_size,
-                                   context.client.GetClientProperties());
+      local_state.appender = make_uniq<ArrowAppender>(input.GetTypes(), data.chunk_size,
+                                   context.client.GetClientProperties(),
+                                   ArrowTypeExtensionData::GetExtensionTypes(
+                                       context.client, input.GetTypes()));
     }

     // Append input chunk

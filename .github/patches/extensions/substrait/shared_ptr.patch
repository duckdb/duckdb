diff --git a/src/from_substrait.cpp b/src/from_substrait.cpp
index 566e21d..afbbb0b 100644
--- a/src/from_substrait.cpp
+++ b/src/from_substrait.cpp
@@ -14,6 +14,8 @@
 #include "duckdb/main/connection.hpp"
 #include "duckdb/parser/parser.hpp"
 #include "duckdb/common/exception.hpp"
+#include "duckdb/common/helper.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 #include "duckdb/common/types.hpp"
 #include "duckdb/common/enums/set_operation_type.hpp"
 
@@ -404,25 +406,25 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformJoinOp(const substrait::Rel &so
 		throw InternalException("Unsupported join type");
 	}
 	unique_ptr<ParsedExpression> join_condition = TransformExpr(sjoin.expression());
-	return make_shared<JoinRelation>(TransformOp(sjoin.left())->Alias("left"),
+	return make_shared_ptr<JoinRelation>(TransformOp(sjoin.left())->Alias("left"),
 	                                 TransformOp(sjoin.right())->Alias("right"), std::move(join_condition), djointype);
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformCrossProductOp(const substrait::Rel &sop) {
 	auto &sub_cross = sop.cross();
 
-	return make_shared<CrossProductRelation>(TransformOp(sub_cross.left())->Alias("left"),
+	return make_shared_ptr<CrossProductRelation>(TransformOp(sub_cross.left())->Alias("left"),
 	                                         TransformOp(sub_cross.right())->Alias("right"));
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformFetchOp(const substrait::Rel &sop) {
 	auto &slimit = sop.fetch();
-	return make_shared<LimitRelation>(TransformOp(slimit.input()), slimit.count(), slimit.offset());
+	return make_shared_ptr<LimitRelation>(TransformOp(slimit.input()), slimit.count(), slimit.offset());
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformFilterOp(const substrait::Rel &sop) {
 	auto &sfilter = sop.filter();
-	return make_shared<FilterRelation>(TransformOp(sfilter.input()), TransformExpr(sfilter.condition()));
+	return make_shared_ptr<FilterRelation>(TransformOp(sfilter.input()), TransformExpr(sfilter.condition()));
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformProjectOp(const substrait::Rel &sop) {
@@ -435,7 +437,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformProjectOp(const substrait::Rel
 	for (size_t i = 0; i < expressions.size(); i++) {
 		mock_aliases.push_back("expr_" + to_string(i));
 	}
-	return make_shared<ProjectionRelation>(TransformOp(sop.project().input()), std::move(expressions),
+	return make_shared_ptr<ProjectionRelation>(TransformOp(sop.project().input()), std::move(expressions),
 	                                       std::move(mock_aliases));
 }
 
@@ -463,7 +465,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformAggregateOp(const substrait::Re
 		expressions.push_back(make_uniq<FunctionExpression>(RemapFunctionName(function_name), std::move(children)));
 	}
 
-	return make_shared<AggregateRelation>(TransformOp(sop.aggregate().input()), std::move(expressions),
+	return make_shared_ptr<AggregateRelation>(TransformOp(sop.aggregate().input()), std::move(expressions),
 	                                      std::move(groups));
 }
 
@@ -502,7 +504,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformReadOp(const substrait::Rel &so
 	}
 
 	if (sget.has_filter()) {
-		scan = make_shared<FilterRelation>(std::move(scan), TransformExpr(sget.filter()));
+		scan = make_shared_ptr<FilterRelation>(std::move(scan), TransformExpr(sget.filter()));
 	}
 
 	if (sget.has_projection()) {
@@ -516,7 +518,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformReadOp(const substrait::Rel &so
 			expressions.push_back(make_uniq<PositionalReferenceExpression>(sproj.field() + 1));
 		}
 
-		scan = make_shared<ProjectionRelation>(std::move(scan), std::move(expressions), std::move(aliases));
+		scan = make_shared_ptr<ProjectionRelation>(std::move(scan), std::move(expressions), std::move(aliases));
 	}
 
 	return scan;
@@ -527,7 +529,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformSortOp(const substrait::Rel &so
 	for (auto &sordf : sop.sort().sorts()) {
 		order_nodes.push_back(TransformOrder(sordf));
 	}
-	return make_shared<OrderRelation>(TransformOp(sop.sort().input()), std::move(order_nodes));
+	return make_shared_ptr<OrderRelation>(TransformOp(sop.sort().input()), std::move(order_nodes));
 }
 
 static duckdb::SetOperationType TransformSetOperationType(substrait::SetRel_SetOp setop) {
@@ -562,7 +564,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformSetOp(const substrait::Rel &sop
 	auto lhs = TransformOp(inputs[0]);
 	auto rhs = TransformOp(inputs[1]);
 
-	return make_shared<SetOpRelation>(std::move(lhs), std::move(rhs), type);
+	return make_shared_ptr<SetOpRelation>(std::move(lhs), std::move(rhs), type);
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformOp(const substrait::Rel &sop) {
@@ -599,7 +601,7 @@ shared_ptr<Relation> SubstraitToDuckDB::TransformRootOp(const substrait::RelRoot
 		aliases.push_back(column_name);
 		expressions.push_back(make_uniq<PositionalReferenceExpression>(id++));
 	}
-	return make_shared<ProjectionRelation>(TransformOp(sop.input()), std::move(expressions), aliases);
+	return make_shared_ptr<ProjectionRelation>(TransformOp(sop.input()), std::move(expressions), aliases);
 }
 
 shared_ptr<Relation> SubstraitToDuckDB::TransformPlan() {
diff --git a/src/include/from_substrait.hpp b/src/include/from_substrait.hpp
index 8ea96cd..3a632ce 100644
--- a/src/include/from_substrait.hpp
+++ b/src/include/from_substrait.hpp
@@ -5,6 +5,7 @@
 #include <memory>
 #include "substrait/plan.pb.h"
 #include "duckdb/main/connection.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 
 namespace duckdb {
 class SubstraitToDuckDB {
diff --git a/src/substrait_extension.cpp b/src/substrait_extension.cpp
index fae645c..6422ebd 100644
--- a/src/substrait_extension.cpp
+++ b/src/substrait_extension.cpp
@@ -6,6 +6,7 @@
 
 #ifndef DUCKDB_AMALGAMATION
 #include "duckdb/common/enums/optimizer_type.hpp"
+#include "duckdb/common/shared_ptr.hpp"
 #include "duckdb/function/table_function.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "duckdb/parser/parsed_data/create_pragma_function_info.hpp"

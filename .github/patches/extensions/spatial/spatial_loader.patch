diff --git a/src/spatial/index/rtree/rtree_index_pragmas.cpp b/src/spatial/index/rtree/rtree_index_pragmas.cpp
index 4aa428e..523622e 100644
--- a/src/spatial/index/rtree/rtree_index_pragmas.cpp
+++ b/src/spatial/index/rtree/rtree_index_pragmas.cpp
@@ -9,7 +9,7 @@
 #include "duckdb/catalog/dependency_list.hpp"
 #include "duckdb/common/mutex.hpp"
 #include "duckdb/function/function_set.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/optimizer/matcher/expression_matcher.hpp"
 #include "duckdb/planner/expression_iterator.hpp"
 #include "duckdb/planner/operator/logical_get.hpp"
@@ -229,17 +229,17 @@ static void RTreeIndexDumpExecute(ClientContext &context, TableFunctionInput &da
 //-------------------------------------------------------------------------
 // Register
 //-------------------------------------------------------------------------
-void RTreeModule::RegisterIndexPragmas(DatabaseInstance &db) {
+void RTreeModule::RegisterIndexPragmas(ExtensionLoader &loader) {
 
 	TableFunction info_function("pragma_rtree_index_info", {}, RTreeIndexInfoExecute, RTreeindexInfoBind,
 	                            RTreeIndexInfoInit);
 
-	ExtensionUtil::RegisterFunction(db, info_function);
+	loader.RegisterFunction(info_function);
 
 	TableFunction dump_function("rtree_index_dump", {LogicalType::VARCHAR}, RTreeIndexDumpExecute, RTreeIndexDumpBind,
 	                            RTreeIndexDumpInit);
 
-	ExtensionUtil::RegisterFunction(db, dump_function);
+	loader.RegisterFunction(dump_function);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/index/rtree/rtree_index_scan.cpp b/src/spatial/index/rtree/rtree_index_scan.cpp
index adf0135..e020576 100644
--- a/src/spatial/index/rtree/rtree_index_scan.cpp
+++ b/src/spatial/index/rtree/rtree_index_scan.cpp
@@ -12,7 +12,7 @@
 #include "duckdb/storage/table/scan_state.hpp"
 #include "duckdb/transaction/duck_transaction.hpp"
 #include "duckdb/transaction/local_storage.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/catalog/catalog_entry/duck_index_entry.hpp"
 #include "duckdb/storage/data_table.hpp"
 
@@ -252,8 +252,8 @@ TableFunction RTreeIndexScanFunction::GetFunction() {
 //-------------------------------------------------------------------------
 // Register
 //-------------------------------------------------------------------------
-void RTreeModule::RegisterIndexScan(DatabaseInstance &db) {
-	ExtensionUtil::RegisterFunction(db, RTreeIndexScanFunction::GetFunction());
+void RTreeModule::RegisterIndexScan(ExtensionLoader &loader) {
+	loader.RegisterFunction(RTreeIndexScanFunction::GetFunction());
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/index/rtree/rtree_module.hpp b/src/spatial/index/rtree/rtree_module.hpp
index 532ba4f..808f7ca 100644
--- a/src/spatial/index/rtree/rtree_module.hpp
+++ b/src/spatial/index/rtree/rtree_module.hpp
@@ -3,12 +3,13 @@
 namespace duckdb {
 
 class DatabaseInstance;
+class ExtensionLoader;
 
 struct RTreeModule {
 	static void RegisterIndex(DatabaseInstance &db);
-	static void RegisterIndexScan(DatabaseInstance &db);
+	static void RegisterIndexScan(ExtensionLoader &loader);
 	static void RegisterIndexPlanScan(DatabaseInstance &db);
-	static void RegisterIndexPragmas(DatabaseInstance &db);
+	static void RegisterIndexPragmas(ExtensionLoader &loader);
 };
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/gdal/gdal_module.cpp b/src/spatial/modules/gdal/gdal_module.cpp
index c3c7c7c..b1509dc 100644
--- a/src/spatial/modules/gdal/gdal_module.cpp
+++ b/src/spatial/modules/gdal/gdal_module.cpp
@@ -12,7 +12,7 @@
 #include "duckdb/common/enums/file_glob_options.hpp"
 #include "duckdb/common/multi_file/multi_file_reader.hpp"
 #include "duckdb/function/table/arrow.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
 #include "duckdb/common/types/uuid.hpp"
 #include "duckdb/function/copy_function.hpp"
@@ -1086,7 +1086,7 @@ struct ST_Read : ArrowTableFunction {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		TableFunction func("ST_Read", {LogicalType::VARCHAR}, Execute, Bind, InitGlobal, InitLocal);
 
 		func.cardinality = Cardinality;
@@ -1103,14 +1103,14 @@ struct ST_Read : ArrowTableFunction {
 		func.named_parameters["sequential_layer_scan"] = LogicalType::BOOLEAN;
 		func.named_parameters["max_batch_size"] = LogicalType::INTEGER;
 		func.named_parameters["keep_wkb"] = LogicalType::BOOLEAN;
-		ExtensionUtil::RegisterFunction(db, func);
+		loader.RegisterFunction(func);
 
 		InsertionOrderPreservingMap<string> tags;
 		tags.insert("ext", "spatial");
-		FunctionBuilder::AddTableFunctionDocs(db, "ST_Read", DOCUMENTATION, EXAMPLE, tags);
+		FunctionBuilder::AddTableFunctionDocs(loader, "ST_Read", DOCUMENTATION, EXAMPLE, tags);
 
 		// Replacement scan
-		auto &config = DBConfig::GetConfig(db);
+		auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 		config.replacement_scans.emplace_back(ReplacementScan);
 	}
 };
@@ -1329,13 +1329,13 @@ struct ST_Read_Meta {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		const TableFunction func("ST_Read_Meta", {LogicalType::VARCHAR}, Execute, Bind, Init);
-		ExtensionUtil::RegisterFunction(db, MultiFileReader::CreateFunctionSet(func));
+		loader.RegisterFunction(MultiFileReader::CreateFunctionSet(func));
 
 		InsertionOrderPreservingMap<string> tags;
 		tags.insert("ext", "spatial");
-		FunctionBuilder::AddTableFunctionDocs(db, "ST_Read_Meta", DESCRIPTION, EXAMPLE, tags);
+		FunctionBuilder::AddTableFunctionDocs(loader, "ST_Read_Meta", DESCRIPTION, EXAMPLE, tags);
 	}
 };
 
@@ -1452,13 +1452,13 @@ struct ST_Drivers {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		const TableFunction func("ST_Drivers", {}, Execute, Bind, Init);
-		ExtensionUtil::RegisterFunction(db, func);
+		loader.RegisterFunction(func);
 
 		InsertionOrderPreservingMap<string> tags;
 		tags.insert("ext", "spatial");
-		FunctionBuilder::AddTableFunctionDocs(db, "ST_Drivers", DESCRIPTION, EXAMPLE, tags);
+		FunctionBuilder::AddTableFunctionDocs(loader, "ST_Drivers", DESCRIPTION, EXAMPLE, tags);
 	}
 };
 
@@ -2014,7 +2014,7 @@ struct ST_Write {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		CopyFunction info("GDAL");
 		info.copy_to_bind = Bind;
 		info.copy_to_initialize_local = InitLocal;
@@ -2023,7 +2023,7 @@ struct ST_Write {
 		info.copy_to_combine = Combine;
 		info.copy_to_finalize = Finalize;
 		info.extension = "gdal";
-		ExtensionUtil::RegisterFunction(db, info);
+		loader.RegisterFunction(info);
 	}
 };
 
@@ -2032,7 +2032,7 @@ struct ST_Write {
 //######################################################################################################################
 // Register Module
 //######################################################################################################################
-void RegisterGDALModule(DatabaseInstance &db) {
+void RegisterGDALModule(ExtensionLoader &loader) {
 
 	// Load GDAL (once)
 	static std::once_flag loaded;
@@ -2080,10 +2080,10 @@ void RegisterGDALModule(DatabaseInstance &db) {
 		});
 	});
 
-	ST_Read::Register(db);
-	ST_Read_Meta::Register(db);
-	ST_Drivers::Register(db);
-	ST_Write::Register(db);
+	ST_Read::Register(loader);
+	ST_Read_Meta::Register(loader);
+	ST_Drivers::Register(loader);
+	ST_Write::Register(loader);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/gdal/gdal_module.hpp b/src/spatial/modules/gdal/gdal_module.hpp
index 8485d52..0a1af37 100644
--- a/src/spatial/modules/gdal/gdal_module.hpp
+++ b/src/spatial/modules/gdal/gdal_module.hpp
@@ -2,8 +2,8 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterGDALModule(DatabaseInstance &db);
+void RegisterGDALModule(ExtensionLoader &db);
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/geos/geos_module.cpp b/src/spatial/modules/geos/geos_module.cpp
index d4dc825..79aaa12 100644
--- a/src/spatial/modules/geos/geos_module.cpp
+++ b/src/spatial/modules/geos/geos_module.cpp
@@ -209,8 +209,8 @@ struct ST_Boundary {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Boundary", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Boundary", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -306,9 +306,9 @@ struct ST_Buffer {
 	)";
 	static constexpr auto EXAMPLE = "";
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
-		FunctionBuilder::RegisterScalar(db, "ST_Buffer", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Buffer", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("distance", LogicalType::DOUBLE);
@@ -366,8 +366,8 @@ struct ST_BuildArea {
 
 		Unlike ST_Polygonize, this function does not fill in holes.)";
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_BuildArea", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_BuildArea", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -391,8 +391,8 @@ struct ST_Contains : AsymmetricPreparedBinaryFunction<ST_Contains> {
 		return lhs.contains(rhs);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Contains", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Contains", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -425,8 +425,8 @@ struct ST_ContainsProperly : AsymmetricPreparedBinaryFunction<ST_ContainsProperl
 		return lhs.contains_properly(rhs);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ContainsProperly", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ContainsProperly", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -459,8 +459,8 @@ struct ST_WithinProperly : AsymmetricPreparedBinaryFunction<ST_WithinProperly> {
 		return lhs.contains_properly(rhs);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_WithinProperly", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_WithinProperly", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -494,8 +494,8 @@ struct ST_ConcaveHull {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ConcaveHull", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ConcaveHull", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("ratio", LogicalType::DOUBLE);
@@ -528,8 +528,8 @@ struct ST_ConvexHull {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ConvexHull", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ConvexHull", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -606,8 +606,8 @@ struct ST_CoverageInvalidEdges {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_CoverageInvalidEdges", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_CoverageInvalidEdges", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geoms", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.AddParameter("tolerance", LogicalType::DOUBLE);
@@ -691,8 +691,8 @@ struct ST_CoverageSimplify {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_CoverageSimplify", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_CoverageSimplify", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geoms", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.AddParameter("tolerance", LogicalType::DOUBLE);
@@ -767,8 +767,8 @@ struct ST_CoverageUnion {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_CoverageUnion", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_CoverageUnion", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geoms", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -794,8 +794,8 @@ struct ST_CoveredBy : AsymmetricPreparedBinaryFunction<ST_CoveredBy> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.covered_by(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_CoveredBy", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_CoveredBy", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -819,8 +819,8 @@ struct ST_Covers : AsymmetricPreparedBinaryFunction<ST_Covers> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.covers(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Covers", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Covers", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -844,8 +844,8 @@ struct ST_Crosses : SymmetricPreparedBinaryFunction<ST_Crosses> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.crosses(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Crosses", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Crosses", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -875,8 +875,8 @@ struct ST_Difference {
 		                                                      });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Difference", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Difference", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -900,8 +900,8 @@ struct ST_Disjoint : SymmetricPreparedBinaryFunction<ST_Disjoint> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.disjoint(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Disjoint", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Disjoint", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -925,8 +925,8 @@ struct ST_Distance : SymmetricPreparedBinaryFunction<ST_Distance, double> {
 	static double ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.distance_to(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Distance", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Distance", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1015,8 +1015,8 @@ struct ST_DistanceWithin {
 		}
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_DWithin", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_DWithin", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1048,8 +1048,8 @@ struct ST_Equals {
 			                                                  return lhs.equals(rhs);
 		                                                  });
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Equals", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Equals", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1077,8 +1077,8 @@ struct ST_Envelope {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Envelope", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Envelope", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1107,8 +1107,8 @@ struct ST_Intersection {
 		                                                      });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Intersection", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Intersection", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1134,8 +1134,8 @@ struct ST_Intersects : SymmetricPreparedBinaryFunction<ST_Intersects> {
 		return lhs.intersects(rhs);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Intersects", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Intersects", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1161,8 +1161,8 @@ struct ST_IsRing {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_IsRing", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_IsRing", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -1187,8 +1187,8 @@ struct ST_IsSimple {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_IsSimple", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_IsSimple", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -1219,8 +1219,8 @@ struct ST_IsValid {
 			}
 		});
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_IsValid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_IsValid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -1259,8 +1259,8 @@ struct ST_LineMerge {
 		                                                  });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_LineMerge", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_LineMerge", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1294,8 +1294,8 @@ struct ST_MakeValid {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_MakeValid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MakeValid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1371,12 +1371,12 @@ struct ST_MaximumInscribedCircle {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
 		const auto result_type = LogicalType::STRUCT(
 		    {{"center", GeoTypes::GEOMETRY()}, {"nearest", GeoTypes::GEOMETRY()}, {"radius", LogicalType::DOUBLE}});
 
-		FunctionBuilder::RegisterScalar(db, "ST_MaximumInscribedCircle", [&](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MaximumInscribedCircle", [&](ScalarFunctionBuilder &func) {
 			func.AddVariant([&](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(result_type);
@@ -1416,8 +1416,8 @@ struct ST_MinimumRotatedRectangle {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_MinimumRotatedRectangle", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MinimumRotatedRectangle", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1450,8 +1450,8 @@ struct ST_Node {
 		Returns a "noded" MultiLinestring, produced by combining a collection of input linestrings and adding additional vertices where they intersect.
 	)";
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Node", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Node", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1476,8 +1476,8 @@ struct ST_Normalize {
 			return lstate.Serialize(result, geom);
 		});
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Normalize", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Normalize", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1501,8 +1501,8 @@ struct ST_Overlaps : SymmetricPreparedBinaryFunction<ST_Overlaps> {
 		return lhs.overlaps(rhs);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Overlaps", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Overlaps", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1530,8 +1530,8 @@ struct ST_PointOnSurface {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_PointOnSurface", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_PointOnSurface", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1589,8 +1589,8 @@ struct ST_Polygonize {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Polygonize", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Polygonize", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geometries", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1618,8 +1618,8 @@ struct ST_ReducePrecision {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ReducePrecision", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ReducePrecision", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("precision", LogicalType::DOUBLE);
@@ -1658,8 +1658,8 @@ struct ST_RemoveRepeatedPoints {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_RemoveRepeatedPoints", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_RemoveRepeatedPoints", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1695,8 +1695,8 @@ struct ST_Reverse {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Reverse", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Reverse", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1724,8 +1724,8 @@ struct ST_ShortestLine {
 		                                                      });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ShortestLine", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ShortestLine", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1752,8 +1752,8 @@ struct ST_Simplify {
 			                                                    return lstate.Serialize(result, simplified);
 		                                                    });
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Simplify", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Simplify", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("tolerance", LogicalType::DOUBLE);
@@ -1781,8 +1781,8 @@ struct ST_SimplifyPreserveTopology {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_SimplifyPreserveTopology", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_SimplifyPreserveTopology", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("tolerance", LogicalType::DOUBLE);
@@ -1806,8 +1806,8 @@ struct ST_Touches : SymmetricPreparedBinaryFunction<ST_Touches> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.touches(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Touches", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Touches", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1836,8 +1836,8 @@ struct ST_Union {
 			                                                      return lstate.Serialize(result, unioned);
 		                                                      });
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Union", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Union", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -1865,8 +1865,8 @@ struct ST_VoronoiDiagram {
 		});
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_VoronoiDiagram", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_VoronoiDiagram", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1889,8 +1889,8 @@ struct ST_Within : AsymmetricPreparedBinaryFunction<ST_Within> {
 	static bool ExecutePredicatePrepared(const PreparedGeosGeometry &lhs, const GeosGeometry &rhs) {
 		return lhs.within(rhs);
 	}
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Within", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Within", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -2019,12 +2019,12 @@ struct ST_Union_Agg : GeosUnaryAggFunction {
 		return GEOSUnion_r(context, curr, next);
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		const auto agg =
 		    AggregateFunction::UnaryAggregateDestructor<GeosUnaryAggState, string_t, string_t, ST_Union_Agg>(
 		        GeoTypes::GEOMETRY(), GeoTypes::GEOMETRY());
 
-		FunctionBuilder::RegisterAggregate(db, "ST_Union_Agg", [&](AggregateFunctionBuilder &func) {
+		FunctionBuilder::RegisterAggregate(loader, "ST_Union_Agg", [&](AggregateFunctionBuilder &func) {
 			func.SetFunction(agg);
 			func.SetDescription("Computes the union of a set of input geometries");
 
@@ -2043,12 +2043,12 @@ struct ST_Intersection_Agg : GeosUnaryAggFunction {
 		return GEOSIntersection_r(context, curr, next);
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		const auto agg =
 		    AggregateFunction::UnaryAggregateDestructor<GeosUnaryAggState, string_t, string_t, ST_Intersection_Agg>(
 		        GeoTypes::GEOMETRY(), GeoTypes::GEOMETRY());
 
-		FunctionBuilder::RegisterAggregate(db, "ST_Intersection_Agg", [&](AggregateFunctionBuilder &func) {
+		FunctionBuilder::RegisterAggregate(loader, "ST_Intersection_Agg", [&](AggregateFunctionBuilder &func) {
 			func.SetFunction(agg);
 			func.SetDescription("Computes the intersection of a set of geometries");
 
@@ -2307,13 +2307,13 @@ struct ST_CoverageSimplify_Agg : GEOSCoverageAggFunction {
 		GEOSGeom_destroy_r(state.context, simplified);
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		using SELF = ST_CoverageSimplify_Agg;
 
 		AggregateFunction agg({GeoTypes::GEOMETRY(), LogicalType::DOUBLE}, GeoTypes::GEOMETRY(), StateSize, Initialize,
 		                      Update, Combine, Finalize<SELF>, nullptr, Bind, Destroy);
 
-		FunctionBuilder::RegisterAggregate(db, "ST_CoverageSimplify_Agg", [&](AggregateFunctionBuilder &func) {
+		FunctionBuilder::RegisterAggregate(loader, "ST_CoverageSimplify_Agg", [&](AggregateFunctionBuilder &func) {
 			func.SetFunction(agg);
 			func.SetDescription("Simplifies a set of geometries while maintaining coverage");
 
@@ -2378,13 +2378,13 @@ struct ST_CoverageUnion_Agg : GEOSCoverageAggFunction {
 		GEOSGeom_destroy_r(state.context, coverage);
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		using SELF = ST_CoverageUnion_Agg;
 
 		const AggregateFunction agg({GeoTypes::GEOMETRY()}, GeoTypes::GEOMETRY(), StateSize, Initialize, Update,
 		                            Combine, Finalize<SELF>, nullptr, nullptr, Destroy);
 
-		FunctionBuilder::RegisterAggregate(db, "ST_CoverageUnion_Agg", [&](AggregateFunctionBuilder &func) {
+		FunctionBuilder::RegisterAggregate(loader, "ST_CoverageUnion_Agg", [&](AggregateFunctionBuilder &func) {
 			func.SetFunction(agg);
 			func.SetDescription("Unions a set of geometries while maintaining coverage");
 
@@ -2468,13 +2468,13 @@ struct ST_CoverageInvalidEdges_Agg : GEOSCoverageAggFunction {
 		GEOSGeom_destroy_r(state.context, edges);
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		using SELF = ST_CoverageInvalidEdges_Agg;
 
 		AggregateFunction agg({GeoTypes::GEOMETRY()}, GeoTypes::GEOMETRY(), StateSize, Initialize, Update, Combine,
 		                      Finalize<SELF>, nullptr, Bind, Destroy, nullptr);
 
-		FunctionBuilder::RegisterAggregate(db, "ST_CoverageInvalidEdges_Agg", [&](AggregateFunctionBuilder &func) {
+		FunctionBuilder::RegisterAggregate(loader, "ST_CoverageInvalidEdges_Agg", [&](AggregateFunctionBuilder &func) {
 			func.SetFunction(agg);
 
 			// TODO: this is a hack
@@ -2495,62 +2495,62 @@ struct ST_CoverageInvalidEdges_Agg : GEOSCoverageAggFunction {
 // Register Module
 //######################################################################################################################
 
-void RegisterGEOSModule(DatabaseInstance &db) {
+void RegisterGEOSModule(ExtensionLoader &loader) {
 
 	// Scalar Functions
-	ST_Boundary::Register(db);
-	ST_Buffer::Register(db);
-	ST_BuildArea::Register(db);
-	ST_Contains::Register(db);
-	ST_ContainsProperly::Register(db);
-	ST_WithinProperly::Register(db);
-	ST_ConcaveHull::Register(db);
-	ST_ConvexHull::Register(db);
-	ST_CoverageInvalidEdges::Register(db);
-	ST_CoverageSimplify::Register(db);
-	ST_CoverageUnion::Register(db);
-	ST_CoveredBy::Register(db);
-	ST_Covers::Register(db);
-	ST_Crosses::Register(db);
-	ST_Difference::Register(db);
-	ST_Disjoint::Register(db);
-	ST_Distance::Register(db);
-	ST_DistanceWithin::Register(db);
-	ST_Equals::Register(db);
-	ST_Envelope::Register(db);
-	ST_Intersection::Register(db);
-	ST_Intersects::Register(db);
-	ST_IsRing::Register(db);
-	ST_IsSimple::Register(db);
-	ST_IsValid::Register(db);
-	ST_LineMerge::Register(db);
-	ST_MakeValid::Register(db);
-	ST_MaximumInscribedCircle::Register(db);
-	ST_MinimumRotatedRectangle::Register(db);
-	ST_Node::Register(db);
-	ST_Normalize::Register(db);
-	ST_Overlaps::Register(db);
-	ST_PointOnSurface::Register(db);
-	ST_Polygonize::Register(db);
-	ST_ReducePrecision::Register(db);
-	ST_RemoveRepeatedPoints::Register(db);
-	ST_Reverse::Register(db);
-	ST_ShortestLine::Register(db);
-	ST_Simplify::Register(db);
-	ST_SimplifyPreserveTopology::Register(db);
-	ST_Touches::Register(db);
-	ST_Union::Register(db);
-	ST_VoronoiDiagram::Register(db);
-	ST_Within::Register(db);
+	ST_Boundary::Register(loader);
+	ST_Buffer::Register(loader);
+	ST_BuildArea::Register(loader);
+	ST_Contains::Register(loader);
+	ST_ContainsProperly::Register(loader);
+	ST_WithinProperly::Register(loader);
+	ST_ConcaveHull::Register(loader);
+	ST_ConvexHull::Register(loader);
+	ST_CoverageInvalidEdges::Register(loader);
+	ST_CoverageSimplify::Register(loader);
+	ST_CoverageUnion::Register(loader);
+	ST_CoveredBy::Register(loader);
+	ST_Covers::Register(loader);
+	ST_Crosses::Register(loader);
+	ST_Difference::Register(loader);
+	ST_Disjoint::Register(loader);
+	ST_Distance::Register(loader);
+	ST_DistanceWithin::Register(loader);
+	ST_Equals::Register(loader);
+	ST_Envelope::Register(loader);
+	ST_Intersection::Register(loader);
+	ST_Intersects::Register(loader);
+	ST_IsRing::Register(loader);
+	ST_IsSimple::Register(loader);
+	ST_IsValid::Register(loader);
+	ST_LineMerge::Register(loader);
+	ST_MakeValid::Register(loader);
+	ST_MaximumInscribedCircle::Register(loader);
+	ST_MinimumRotatedRectangle::Register(loader);
+	ST_Node::Register(loader);
+	ST_Normalize::Register(loader);
+	ST_Overlaps::Register(loader);
+	ST_PointOnSurface::Register(loader);
+	ST_Polygonize::Register(loader);
+	ST_ReducePrecision::Register(loader);
+	ST_RemoveRepeatedPoints::Register(loader);
+	ST_Reverse::Register(loader);
+	ST_ShortestLine::Register(loader);
+	ST_Simplify::Register(loader);
+	ST_SimplifyPreserveTopology::Register(loader);
+	ST_Touches::Register(loader);
+	ST_Union::Register(loader);
+	ST_VoronoiDiagram::Register(loader);
+	ST_Within::Register(loader);
 
 	// Aggregate Functions
-	ST_Union_Agg::Register(db);
-	ST_Intersection_Agg::Register(db);
+	ST_Union_Agg::Register(loader);
+	ST_Intersection_Agg::Register(loader);
 
 	// Coverage Aggregate Functions
-	ST_CoverageInvalidEdges_Agg::Register(db);
-	ST_CoverageUnion_Agg::Register(db);
-	ST_CoverageSimplify_Agg::Register(db);
+	ST_CoverageInvalidEdges_Agg::Register(loader);
+	ST_CoverageUnion_Agg::Register(loader);
+	ST_CoverageSimplify_Agg::Register(loader);
 }
 
 } // namespace duckdb
diff --git a/src/spatial/modules/geos/geos_module.hpp b/src/spatial/modules/geos/geos_module.hpp
index 92bf058..51e87b8 100644
--- a/src/spatial/modules/geos/geos_module.hpp
+++ b/src/spatial/modules/geos/geos_module.hpp
@@ -2,8 +2,8 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterGEOSModule(DatabaseInstance &db);
+void RegisterGEOSModule(ExtensionLoader &loader);
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/main/spatial_functions.hpp b/src/spatial/modules/main/spatial_functions.hpp
index 09a7482..c41d300 100644
--- a/src/spatial/modules/main/spatial_functions.hpp
+++ b/src/spatial/modules/main/spatial_functions.hpp
@@ -4,12 +4,12 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterSpatialScalarFunctions(DatabaseInstance &db);
-void RegisterSpatialAggregateFunctions(DatabaseInstance &db);
-void RegisterSpatialCastFunctions(DatabaseInstance &db);
-void RegisterSpatialTableFunctions(DatabaseInstance &db);
+void RegisterSpatialScalarFunctions(ExtensionLoader &loader);
+void RegisterSpatialAggregateFunctions(ExtensionLoader &loader);
+void RegisterSpatialCastFunctions(ExtensionLoader &loader);
+void RegisterSpatialTableFunctions(ExtensionLoader &loader);
 
 // TODO: Move these
 class Vector;
diff --git a/src/spatial/modules/main/spatial_functions_aggregate.cpp b/src/spatial/modules/main/spatial_functions_aggregate.cpp
index be832f8..0d293e5 100644
--- a/src/spatial/modules/main/spatial_functions_aggregate.cpp
+++ b/src/spatial/modules/main/spatial_functions_aggregate.cpp
@@ -139,13 +139,13 @@ static constexpr const char *DOC_ALIAS_DESCRIPTION = R"(
 //------------------------------------------------------------------------
 // Register
 //------------------------------------------------------------------------
-void RegisterSpatialAggregateFunctions(DatabaseInstance &db) {
+void RegisterSpatialAggregateFunctions(ExtensionLoader &loader) {
 
 	// TODO: Dont use geometry_t here
 	const auto agg = AggregateFunction::UnaryAggregate<ExtentAggState, string_t, string_t, ExtentAggFunction>(
 	    GeoTypes::GEOMETRY(), GeoTypes::GEOMETRY());
 
-	FunctionBuilder::RegisterAggregate(db, "ST_Extent_Agg", [&](AggregateFunctionBuilder &func) {
+	FunctionBuilder::RegisterAggregate(loader, "ST_Extent_Agg", [&](AggregateFunctionBuilder &func) {
 		func.SetFunction(agg);
 		func.SetDescription(DOC_DESCRIPTION);
 		func.SetExample(DOC_EXAMPLE);
@@ -154,7 +154,7 @@ void RegisterSpatialAggregateFunctions(DatabaseInstance &db) {
 		func.SetTag("category", "construction");
 	});
 
-	FunctionBuilder::RegisterAggregate(db, "ST_Envelope_Agg", [&](AggregateFunctionBuilder &func) {
+	FunctionBuilder::RegisterAggregate(loader, "ST_Envelope_Agg", [&](AggregateFunctionBuilder &func) {
 		func.SetFunction(agg);
 		func.SetDescription(DOC_ALIAS_DESCRIPTION);
 		func.SetExample(DOC_EXAMPLE);
diff --git a/src/spatial/modules/main/spatial_functions_cast.cpp b/src/spatial/modules/main/spatial_functions_cast.cpp
index a3d57a8..db50a43 100644
--- a/src/spatial/modules/main/spatial_functions_cast.cpp
+++ b/src/spatial/modules/main/spatial_functions_cast.cpp
@@ -9,7 +9,7 @@
 #include "duckdb/common/error_data.hpp"
 #include "duckdb/common/operator/cast_operators.hpp"
 #include "duckdb/common/vector_operations/generic_executor.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 
 namespace duckdb {
 
@@ -182,29 +182,29 @@ struct GeometryCasts {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		const auto wkb_type = GeoTypes::WKB_BLOB();
 		const auto geom_type = GeoTypes::GEOMETRY();
 
 		// VARCHAR -> Geometry is explicitly castable
-		ExtensionUtil::RegisterCastFunction(db, geom_type, LogicalType::VARCHAR, BoundCastInfo(ToVarcharCast), 1);
+		loader.RegisterCastFunction(geom_type, LogicalType::VARCHAR, BoundCastInfo(ToVarcharCast), 1);
 
 		// Geometry -> VARCHAR is implicitly castable
-		ExtensionUtil::RegisterCastFunction(db, LogicalType::VARCHAR, geom_type,
+		loader.RegisterCastFunction(LogicalType::VARCHAR, geom_type,
 		                                    BoundCastInfo(FromVarcharCast, nullptr, LocalState::InitCast));
 
 		// Geometry -> WKB is explicitly castable
-		ExtensionUtil::RegisterCastFunction(db, geom_type, wkb_type, BoundCastInfo(ToWKBCast));
+		loader.RegisterCastFunction(geom_type, wkb_type, BoundCastInfo(ToWKBCast));
 
 		// Geometry -> BLOB is explicitly castable
-		ExtensionUtil::RegisterCastFunction(db, geom_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast);
+		loader.RegisterCastFunction(geom_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast);
 
 		// WKB -> Geometry is explicitly castable
-		ExtensionUtil::RegisterCastFunction(db, wkb_type, geom_type,
+		loader.RegisterCastFunction(wkb_type, geom_type,
 		                                    BoundCastInfo(FromWKBCast, nullptr, LocalState::InitCast));
 
 		// WKB -> BLOB is implicitly castable
-		ExtensionUtil::RegisterCastFunction(db, wkb_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast, 1);
+		loader.RegisterCastFunction(wkb_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast, 1);
 	}
 };
 
@@ -292,20 +292,20 @@ struct PointCasts {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// POINT_2D -> VARCHAR
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POINT_2D(), LogicalType::VARCHAR,
+		loader.RegisterCastFunction(GeoTypes::POINT_2D(), LogicalType::VARCHAR,
 		                                    BoundCastInfo(ToVarcharCast), 1);
 		// POINT_2D -> GEOMETRY
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POINT_2D(), GeoTypes::GEOMETRY(),
+		loader.RegisterCastFunction(GeoTypes::POINT_2D(), GeoTypes::GEOMETRY(),
 		                                    BoundCastInfo(ToGeometryCast, nullptr, LocalState::InitCast), 1);
 		// GEOMETRY -> POINT_2D
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::GEOMETRY(), GeoTypes::POINT_2D(),
+		loader.RegisterCastFunction(GeoTypes::GEOMETRY(), GeoTypes::POINT_2D(),
 		                                    BoundCastInfo(FromGeometryCast, nullptr, LocalState::InitCast), 1);
 		// POINT_3D -> POINT_2D
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POINT_3D(), GeoTypes::POINT_2D(), ToPoint2DCast, 1);
+		loader.RegisterCastFunction(GeoTypes::POINT_3D(), GeoTypes::POINT_2D(), ToPoint2DCast, 1);
 		// POINT_4D -> POINT_2D
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POINT_4D(), GeoTypes::POINT_2D(), ToPoint2DCast, 1);
+		loader.RegisterCastFunction(GeoTypes::POINT_4D(), GeoTypes::POINT_2D(), ToPoint2DCast, 1);
 	}
 };
 
@@ -396,15 +396,15 @@ struct LinestringCasts {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// LINESTRING_2D -> VARCHAR
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::LINESTRING_2D(), LogicalType::VARCHAR,
+		loader.RegisterCastFunction(GeoTypes::LINESTRING_2D(), LogicalType::VARCHAR,
 		                                    BoundCastInfo(ToVarcharCast), 1);
 		// LINESTRING_2D -> GEOMETRY
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::LINESTRING_2D(), GeoTypes::GEOMETRY(),
+		loader.RegisterCastFunction(GeoTypes::LINESTRING_2D(), GeoTypes::GEOMETRY(),
 		                                    BoundCastInfo(ToGeometryCast, nullptr, LocalState::InitCast), 1);
 		// GEOMETRY -> LINESTRING_2D
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::GEOMETRY(), GeoTypes::LINESTRING_2D(),
+		loader.RegisterCastFunction(GeoTypes::GEOMETRY(), GeoTypes::LINESTRING_2D(),
 		                                    BoundCastInfo(FromGeometryCast, nullptr, LocalState::InitCast), 1);
 	}
 };
@@ -538,15 +538,15 @@ struct PolygonCasts {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// POLYGON_2D -> VARCHAR
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POLYGON_2D(), LogicalType::VARCHAR,
+		loader.RegisterCastFunction(GeoTypes::POLYGON_2D(), LogicalType::VARCHAR,
 		                                    BoundCastInfo(ToVarcharCast), 1);
 		// POLYGON_2D -> GEOMETRY
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::POLYGON_2D(), GeoTypes::GEOMETRY(),
+		loader.RegisterCastFunction(GeoTypes::POLYGON_2D(), GeoTypes::GEOMETRY(),
 		                                    BoundCastInfo(ToGeometryCast, nullptr, LocalState::InitCast), 1);
 		// GEOMETRY -> POLYGON_2D
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::GEOMETRY(), GeoTypes::POLYGON_2D(),
+		loader.RegisterCastFunction(GeoTypes::GEOMETRY(), GeoTypes::POLYGON_2D(),
 		                                    BoundCastInfo(FromGeometryCast, nullptr, LocalState::InitCast), 1);
 	}
 };
@@ -613,17 +613,17 @@ struct BoxCasts {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// BOX_2D -> VARCHAR
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::BOX_2D(), LogicalType::VARCHAR, BoundCastInfo(ToVarcharCast),
+		loader.RegisterCastFunction(GeoTypes::BOX_2D(), LogicalType::VARCHAR, BoundCastInfo(ToVarcharCast),
 		                                    1);
 
 		// BOX_2D -> GEOMETRY
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::BOX_2D(), GeoTypes::GEOMETRY(),
+		loader.RegisterCastFunction(GeoTypes::BOX_2D(), GeoTypes::GEOMETRY(),
 		                                    BoundCastInfo(ToGeometryCast2D, nullptr, LocalState::InitCast), 1);
 
 		// BOX_2F -> GEOMETRY
-		ExtensionUtil::RegisterCastFunction(db, GeoTypes::BOX_2DF(), GeoTypes::GEOMETRY(),
+		loader.RegisterCastFunction(GeoTypes::BOX_2DF(), GeoTypes::GEOMETRY(),
 		                                    BoundCastInfo(ToGeometryCast2F, nullptr, LocalState::InitCast), 1);
 	}
 };
@@ -945,12 +945,12 @@ void CoreVectorOperations::GeometryToVarchar(Vector &source, Vector &result, idx
 // Register
 //######################################################################################################################
 
-void RegisterSpatialCastFunctions(DatabaseInstance &db) {
-	GeometryCasts::Register(db);
-	PointCasts::Register(db);
-	LinestringCasts::Register(db);
-	PolygonCasts::Register(db);
-	BoxCasts::Register(db);
+void RegisterSpatialCastFunctions(ExtensionLoader &loader) {
+	GeometryCasts::Register(loader);
+	PointCasts::Register(loader);
+	LinestringCasts::Register(loader);
+	PolygonCasts::Register(loader);
+	BoxCasts::Register(loader);
 }
 
 } // namespace duckdb
diff --git a/src/spatial/modules/main/spatial_functions_scalar.cpp b/src/spatial/modules/main/spatial_functions_scalar.cpp
index a4ff26e..5f3ba89 100644
--- a/src/spatial/modules/main/spatial_functions_scalar.cpp
+++ b/src/spatial/modules/main/spatial_functions_scalar.cpp
@@ -14,6 +14,7 @@
 #include "duckdb/execution/expression_executor.hpp"
 #include "duckdb/planner/expression/bound_function_expression.hpp"
 #include "duckdb/common/vector_operations/septenary_executor.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 
 // Extra
 #include "yyjson.h"
@@ -209,8 +210,8 @@ struct ST_Affine {
 		    });
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Affine", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Affine", [](ScalarFunctionBuilder &func) {
 			// GEOMETRY (3D)
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
@@ -270,7 +271,7 @@ struct ST_Affine {
 		});
 
 		// Add helper macros
-		FunctionBuilder::RegisterMacro(db, "ST_Scale", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_Scale", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition(
 			    {"geom", "xs", "ys", "zs"}, "ST_Affine(geom, xs, 0, 0, 0, ys, 0, 0, 0, zs, 0, 0, 0)",
 			    "Scales a geometry in X, Y and Z direction. This is a shorthand macro for calling ST_Affine.");
@@ -279,7 +280,7 @@ struct ST_Affine {
 			    "Scales a geometry in X and Y direction. This is a shorthand macro for calling ST_Affine.");
 		});
 
-		FunctionBuilder::RegisterMacro(db, "ST_Translate", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_Translate", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition(
 			    {"geom", "dx", "dy", "dz"}, "ST_Affine(geom, 1, 0, dx, 0, 1, dy, 0, 0, 1, dz, 0, 0)",
 			    "Translates a geometry in X, Y and Z direction. This is a shorthand macro for calling ST_Affine.");
@@ -288,28 +289,28 @@ struct ST_Affine {
 			    "Translates a geometry in X and Y direction. This is a shorthand macro for calling ST_Affine.");
 		});
 
-		FunctionBuilder::RegisterMacro(db, "ST_TransScale", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_TransScale", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition({"geom", "dx", "dy", "xs", "ys"},
 			                      "ST_Affine(geom, xs, 0, 0, 0, ys, 0, 0, 0, 1, dx * xs, dy * ys, 0)",
 			                      "Translates and then scales a geometry in X and Y direction. This is a shorthand "
 			                      "macro for calling ST_Affine.");
 		});
 
-		FunctionBuilder::RegisterMacro(db, "ST_RotateX", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_RotateX", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition(
 			    {"geom", "radians"},
 			    "ST_Affine(geom, 1, 0, 0, 0, COS(radians), -SIN(radians), 0, SIN(radians), COS(radians), 0, 0, 0)",
 			    "Rotates a geometry around the X axis. This is a shorthand macro for calling ST_Affine.");
 		});
 
-		FunctionBuilder::RegisterMacro(db, "ST_RotateY", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_RotateY", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition(
 			    {"geom", "radians"},
 			    "ST_Affine(geom, COS(radians), 0, SIN(radians), 0, 1, 0, -SIN(radians), 0, COS(radians), 0, 0, 0)",
 			    "Rotates a geometry around the Y axis. This is a shorthand macro for calling ST_Affine.");
 		});
 
-		FunctionBuilder::RegisterMacro(db, "ST_RotateZ", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_RotateZ", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition(
 			    {"geom", "radians"},
 			    "ST_Affine(geom, COS(radians), -SIN(radians), 0, SIN(radians), COS(radians), 0, 0, 0, 1, 0, 0, 0)",
@@ -317,7 +318,7 @@ struct ST_Affine {
 		});
 
 		// Alias for ST_RotateZ
-		FunctionBuilder::RegisterMacro(db, "ST_Rotate", [](MacroFunctionBuilder &builder) {
+		FunctionBuilder::RegisterMacro(loader, "ST_Rotate", [](MacroFunctionBuilder &builder) {
 			builder.AddDefinition({"geom", "radians"}, "ST_RotateZ(geom, radians)", "Alias of ST_RotateZ");
 		});
 	}
@@ -449,9 +450,9 @@ struct ST_Area {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
-		FunctionBuilder::RegisterScalar(db, "ST_Area", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Area", [](ScalarFunctionBuilder &func) {
 			// GEOMETRY
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
@@ -787,8 +788,8 @@ struct ST_AsGeoJSON {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_AsGeoJSON", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_AsGeoJSON", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::JSON());
@@ -881,8 +882,8 @@ struct ST_AsText {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_AsText", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_AsText", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::VARCHAR);
@@ -955,8 +956,8 @@ struct ST_AsWKB {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_AsWKB", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_AsWKB", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::WKB_BLOB());
@@ -1022,8 +1023,8 @@ struct ST_AsHEXWKB {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_AsHEXWKB", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_AsHEXWKB", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::VARCHAR);
@@ -1259,8 +1260,8 @@ struct ST_AsSVG {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_AsSVG", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_AsSVG", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("relative", LogicalType::BOOLEAN);
@@ -1511,8 +1512,8 @@ struct ST_Centroid {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Centroid", [&](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Centroid", [&](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1711,8 +1712,8 @@ struct ST_Collect {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Collect", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Collect", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geoms", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -1896,8 +1897,8 @@ struct ST_CollectionExtract {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_CollectionExtract", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_CollectionExtract", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("type", LogicalType::INTEGER);
@@ -2065,8 +2066,8 @@ struct ST_Contains {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Contains", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Contains", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::POLYGON_2D());
 				variant.AddParameter("geom2", GeoTypes::POINT_2D());
@@ -2125,8 +2126,8 @@ struct ST_Dimension {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Dimension", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Dimension", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::INTEGER);
@@ -2292,8 +2293,8 @@ struct ST_Distance {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Distance", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Distance", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("point1", GeoTypes::POINT_2D());
 				variant.AddParameter("point2", GeoTypes::POINT_2D());
@@ -2493,9 +2494,9 @@ struct ST_Dump {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
-		FunctionBuilder::RegisterScalar(db, "ST_Dump", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Dump", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 
@@ -2646,8 +2647,8 @@ struct ST_Extent {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Extent", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Extent", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::BOX_2D());
@@ -2731,8 +2732,8 @@ struct ST_Extent_Approx {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Extent_Approx", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Extent_Approx", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::BOX_2DF());
@@ -2873,8 +2874,8 @@ struct ST_ExteriorRing {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ExteriorRing", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ExteriorRing", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -3192,8 +3193,8 @@ struct ST_FlipCoordinates {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_FlipCoordinates", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_FlipCoordinates", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -3304,8 +3305,8 @@ struct ST_ForceBase {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, IMPL::NAME, [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, IMPL::NAME, [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 
@@ -3519,8 +3520,8 @@ struct ST_GeometryType {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_GeometryType", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_GeometryType", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalTypeId::ANY);
@@ -3657,7 +3658,7 @@ struct ST_GeomFromHEXWKB {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
 		// Our WKB reader also parses EWKB, even though it will just ignore SRID's.
 		// so we'll just add an alias for now. In the future, once we actually handle
@@ -3665,7 +3666,7 @@ struct ST_GeomFromHEXWKB {
 		// the two formats.
 
 		for (const auto &alias : {"ST_GeomFromHEXWKB", "ST_GeomFromHEXEWKB"}) {
-			FunctionBuilder::RegisterScalar(db, alias, [](ScalarFunctionBuilder &func) {
+			FunctionBuilder::RegisterScalar(loader, alias, [](ScalarFunctionBuilder &func) {
 				func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 					variant.AddParameter("hexwkb", LogicalType::VARCHAR);
 					variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4077,8 +4078,8 @@ struct ST_GeomFromGeoJSON {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_GeomFromGeoJSON", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_GeomFromGeoJSON", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geojson", LogicalType::JSON());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4211,8 +4212,8 @@ struct ST_GeomFromText {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_GeomFromText", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_GeomFromText", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("wkt", LogicalType::VARCHAR);
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4527,8 +4528,8 @@ struct ST_GeomFromWKB {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Point2DFromWKB", [](ScalarFunctionBuilder &builder) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Point2DFromWKB", [](ScalarFunctionBuilder &builder) {
 			builder.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("point", GeoTypes::POINT_2D());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4543,7 +4544,7 @@ struct ST_GeomFromWKB {
 			builder.SetTag("category", "conversion");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_LineString2DFromWKB", [](ScalarFunctionBuilder &builder) {
+		FunctionBuilder::RegisterScalar(loader, "ST_LineString2DFromWKB", [](ScalarFunctionBuilder &builder) {
 			builder.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("linestring", GeoTypes::LINESTRING_2D());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4558,7 +4559,7 @@ struct ST_GeomFromWKB {
 			builder.SetTag("category", "conversion");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_Polygon2DFromWKB", [](ScalarFunctionBuilder &builder) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Polygon2DFromWKB", [](ScalarFunctionBuilder &builder) {
 			builder.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("polygon", GeoTypes::POLYGON_2D());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4573,7 +4574,7 @@ struct ST_GeomFromWKB {
 			builder.SetTag("category", "conversion");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_GeomFromWKB", [](ScalarFunctionBuilder &builder) {
+		FunctionBuilder::RegisterScalar(loader, "ST_GeomFromWKB", [](ScalarFunctionBuilder &builder) {
 			builder.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("wkb", GeoTypes::WKB_BLOB());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -4665,8 +4666,8 @@ struct ST_HasZ {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_HasZ", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_HasZ", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -4758,8 +4759,8 @@ struct ST_HasM {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_HasM", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_HasM", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -4827,8 +4828,8 @@ struct ST_LineInterpolatePoint {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_LineInterpolatePoint", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_LineInterpolatePoint", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("line", GeoTypes::GEOMETRY());
 				variant.AddParameter("fraction", LogicalType::DOUBLE);
@@ -4903,8 +4904,8 @@ struct ST_LineInterpolatePoints {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_LineInterpolatePoints", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_LineInterpolatePoints", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("line", GeoTypes::GEOMETRY());
 				variant.AddParameter("fraction", LogicalType::DOUBLE);
@@ -4964,8 +4965,8 @@ struct ST_LineSubstring {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_LineSubstring", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_LineSubstring", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("line", GeoTypes::GEOMETRY());
 				variant.AddParameter("start_fraction", LogicalType::DOUBLE);
@@ -5080,8 +5081,8 @@ struct ST_ZMFlag {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_ZMFlag", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_ZMFlag", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::UTINYINT);
@@ -5176,8 +5177,8 @@ struct ST_Distance_Sphere {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Distance_Sphere", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Distance_Sphere", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -5340,10 +5341,10 @@ struct ST_Hilbert {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// TODO: All of these needs examples and docs
 
-		FunctionBuilder::RegisterScalar(db, "ST_Hilbert", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Hilbert", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("x", LogicalType::DOUBLE);
 				variant.AddParameter("y", LogicalType::DOUBLE);
@@ -5425,8 +5426,8 @@ struct ST_Intersects {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Intersects", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Intersects", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("box1", GeoTypes::BOX_2D());
 				variant.AddParameter("box2", GeoTypes::BOX_2D());
@@ -5493,8 +5494,8 @@ struct ST_IntersectsExtent {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Intersects_Extent", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Intersects_Extent", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::GEOMETRY());
 				variant.AddParameter("geom2", GeoTypes::GEOMETRY());
@@ -5551,8 +5552,8 @@ struct ST_IsClosed {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_IsClosed", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_IsClosed", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -5618,8 +5619,8 @@ struct ST_IsEmpty {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_IsEmpty", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_IsEmpty", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::BOOLEAN);
@@ -5717,8 +5718,8 @@ struct ST_Length {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Length", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Length", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -5796,8 +5797,8 @@ struct ST_MakeEnvelope {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_MakeEnvelope", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MakeEnvelope", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("min_x", LogicalType::DOUBLE);
 				variant.AddParameter("min_y", LogicalType::DOUBLE);
@@ -6000,8 +6001,8 @@ struct ST_MakeLine {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_MakeLine", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MakeLine", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geoms", LogicalType::LIST(GeoTypes::GEOMETRY()));
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -6150,8 +6151,8 @@ struct ST_MakePolygon {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_MakePolygon", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_MakePolygon", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("shell", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -6253,8 +6254,8 @@ struct ST_Multi {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Multi", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Multi", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -6321,10 +6322,10 @@ struct ST_NGeometries {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// TODO: Maybe make a macro for the aliases
 		for (auto &alias : {"ST_NumGeometries", "ST_NGeometries"}) {
-			FunctionBuilder::RegisterScalar(db, alias, [](ScalarFunctionBuilder &func) {
+			FunctionBuilder::RegisterScalar(loader, alias, [](ScalarFunctionBuilder &func) {
 				func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 					variant.AddParameter("geom", GeoTypes::GEOMETRY());
 					variant.SetReturnType(LogicalType::INTEGER);
@@ -6394,10 +6395,10 @@ struct ST_NInteriorRings {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// TODO: maybe make a macro for the aliases
 		for (auto &alias : {"ST_NumInteriorRings", "ST_NInteriorRings"}) {
-			FunctionBuilder::RegisterScalar(db, alias, [](ScalarFunctionBuilder &func) {
+			FunctionBuilder::RegisterScalar(loader, alias, [](ScalarFunctionBuilder &func) {
 				func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 					variant.AddParameter("geom", GeoTypes::GEOMETRY());
 					variant.SetReturnType(LogicalType::INTEGER);
@@ -6510,10 +6511,10 @@ struct ST_NPoints {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 
 		for (const auto &alias : {"ST_NumPoints", "ST_NPoints"}) {
-			FunctionBuilder::RegisterScalar(db, alias, [](ScalarFunctionBuilder &func) {
+			FunctionBuilder::RegisterScalar(loader, alias, [](ScalarFunctionBuilder &func) {
 				func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 					variant.AddParameter("geom", GeoTypes::GEOMETRY());
 					variant.SetReturnType(LogicalType::UINTEGER);
@@ -6645,8 +6646,8 @@ struct ST_Perimeter {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Perimeter", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Perimeter", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -6800,8 +6801,8 @@ struct ST_Point {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Point", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Point", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("x", LogicalType::DOUBLE);
 				variant.AddParameter("y", LogicalType::DOUBLE);
@@ -6818,7 +6819,7 @@ struct ST_Point {
 			func.SetTag("category", "construction");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_Point2D", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Point2D", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("x", LogicalType::DOUBLE);
 				variant.AddParameter("y", LogicalType::DOUBLE);
@@ -6832,7 +6833,7 @@ struct ST_Point {
 			func.SetTag("category", "construction");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_Point3D", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Point3D", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("x", LogicalType::DOUBLE);
 				variant.AddParameter("y", LogicalType::DOUBLE);
@@ -6847,7 +6848,7 @@ struct ST_Point {
 			func.SetTag("category", "construction");
 		});
 
-		FunctionBuilder::RegisterScalar(db, "ST_Point4D", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Point4D", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("x", LogicalType::DOUBLE);
 				variant.AddParameter("y", LogicalType::DOUBLE);
@@ -6978,8 +6979,8 @@ struct ST_PointN {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_PointN", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_PointN", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.AddParameter("index", LogicalType::INTEGER);
@@ -7065,8 +7066,8 @@ struct ST_Points {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Points", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Points", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -7193,8 +7194,8 @@ struct ST_QuadKey {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_QuadKey", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_QuadKey", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("longitude", LogicalType::DOUBLE);
 				variant.AddParameter("latitude", LogicalType::DOUBLE);
@@ -7493,8 +7494,8 @@ struct ST_RemoveRepeatedPoints {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_RemoveRepeatedPoints", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_RemoveRepeatedPoints", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("line", GeoTypes::LINESTRING_2D());
 				variant.SetReturnType(GeoTypes::LINESTRING_2D());
@@ -7613,8 +7614,8 @@ struct ST_StartPoint {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_StartPoint", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_StartPoint", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -7737,8 +7738,8 @@ struct ST_EndPoint {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_EndPoint", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_EndPoint", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(GeoTypes::GEOMETRY());
@@ -7790,9 +7791,9 @@ struct ST_Within {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// ST_Within is the inverse of ST_Contains
-		FunctionBuilder::RegisterScalar(db, "ST_Within", [](ScalarFunctionBuilder &func) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Within", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom1", GeoTypes::POINT_2D());
 				variant.AddParameter("geom2", GeoTypes::POLYGON_2D());
@@ -7877,8 +7878,8 @@ struct PointAccessFunctionBase {
 		result.Reference(*n_child);
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, OP::NAME, [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, OP::NAME, [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -7894,7 +7895,7 @@ struct PointAccessFunctionBase {
 		});
 
 		if (OP::ORDINATE == VertexOrdinate::X || OP::ORDINATE == VertexOrdinate::Y) {
-			FunctionBuilder::RegisterScalar(db, OP::NAME, [](ScalarFunctionBuilder &func) {
+			FunctionBuilder::RegisterScalar(loader, OP::NAME, [](ScalarFunctionBuilder &func) {
 				func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 					variant.AddParameter("point", GeoTypes::POINT_2D());
 					variant.SetReturnType(LogicalType::DOUBLE);
@@ -8105,8 +8106,8 @@ struct VertexAggFunctionBase {
 		}
 	}
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, OP::NAME, [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, OP::NAME, [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -8252,75 +8253,75 @@ struct ST_MMin : VertexAggFunctionBase<ST_MMin, VertexMinAggOp> {
 // Register
 //######################################################################################################################
 
-void RegisterSpatialScalarFunctions(DatabaseInstance &db) {
-	ST_Affine::Register(db);
-	ST_Area::Register(db);
-	ST_AsGeoJSON::Register(db);
-	ST_AsText::Register(db);
-	ST_AsWKB::Register(db);
-	ST_AsHEXWKB::Register(db);
-	ST_AsSVG::Register(db);
-	ST_Centroid::Register(db);
-	ST_Collect::Register(db);
-	ST_CollectionExtract::Register(db);
-	ST_Contains::Register(db);
-	ST_Dimension::Register(db);
-	ST_Distance::Register(db);
-	ST_Dump::Register(db);
-	ST_EndPoint::Register(db);
-	ST_Extent::Register(db);
-	ST_Extent_Approx::Register(db);
-	ST_ExteriorRing::Register(db);
-	ST_FlipCoordinates::Register(db);
-	ST_Force2D::Register(db);
-	ST_Force3DZ::Register(db);
-	ST_Force3DM::Register(db);
-	ST_Force4D::Register(db);
-	ST_GeometryType::Register(db);
-	ST_GeomFromHEXWKB::Register(db);
-	ST_GeomFromGeoJSON::Register(db);
-	ST_GeomFromText::Register(db);
-	ST_GeomFromWKB::Register(db);
-	ST_HasZ::Register(db);
-	ST_HasM::Register(db);
-	ST_LineInterpolatePoint::Register(db);
-	ST_LineInterpolatePoints::Register(db);
-	ST_LineSubstring::Register(db);
-	ST_ZMFlag::Register(db);
-	ST_Distance_Sphere::Register(db);
-	ST_Hilbert::Register(db);
-	ST_Intersects::Register(db);
-	ST_IntersectsExtent::Register(db);
-	ST_IsClosed::Register(db);
-	ST_IsEmpty::Register(db);
-	ST_Length::Register(db);
-	ST_MakeEnvelope::Register(db);
-	ST_MakeLine::Register(db);
-	ST_MakePolygon::Register(db);
-	ST_Multi::Register(db);
-	ST_NGeometries::Register(db);
-	ST_NInteriorRings::Register(db);
-	ST_NPoints::Register(db);
-	ST_Perimeter::Register(db);
-	ST_Point::Register(db);
-	ST_PointN::Register(db);
-	ST_Points::Register(db);
-	ST_QuadKey::Register(db);
-	ST_RemoveRepeatedPoints::Register(db);
-	ST_StartPoint::Register(db);
-	ST_Within::Register(db);
-	ST_X::Register(db);
-	ST_XMax::Register(db);
-	ST_XMin::Register(db);
-	ST_Y::Register(db);
-	ST_YMax::Register(db);
-	ST_YMin::Register(db);
-	ST_Z::Register(db);
-	ST_ZMax::Register(db);
-	ST_ZMin::Register(db);
-	ST_M::Register(db);
-	ST_MMax::Register(db);
-	ST_MMin::Register(db);
+void RegisterSpatialScalarFunctions(ExtensionLoader &loader) {
+	ST_Affine::Register(loader);
+	ST_Area::Register(loader);
+	ST_AsGeoJSON::Register(loader);
+	ST_AsText::Register(loader);
+	ST_AsWKB::Register(loader);
+	ST_AsHEXWKB::Register(loader);
+	ST_AsSVG::Register(loader);
+	ST_Centroid::Register(loader);
+	ST_Collect::Register(loader);
+	ST_CollectionExtract::Register(loader);
+	ST_Contains::Register(loader);
+	ST_Dimension::Register(loader);
+	ST_Distance::Register(loader);
+	ST_Dump::Register(loader);
+	ST_EndPoint::Register(loader);
+	ST_Extent::Register(loader);
+	ST_Extent_Approx::Register(loader);
+	ST_ExteriorRing::Register(loader);
+	ST_FlipCoordinates::Register(loader);
+	ST_Force2D::Register(loader);
+	ST_Force3DZ::Register(loader);
+	ST_Force3DM::Register(loader);
+	ST_Force4D::Register(loader);
+	ST_GeometryType::Register(loader);
+	ST_GeomFromHEXWKB::Register(loader);
+	ST_GeomFromGeoJSON::Register(loader);
+	ST_GeomFromText::Register(loader);
+	ST_GeomFromWKB::Register(loader);
+	ST_HasZ::Register(loader);
+	ST_HasM::Register(loader);
+	ST_LineInterpolatePoint::Register(loader);
+	ST_LineInterpolatePoints::Register(loader);
+	ST_LineSubstring::Register(loader);
+	ST_ZMFlag::Register(loader);
+	ST_Distance_Sphere::Register(loader);
+	ST_Hilbert::Register(loader);
+	ST_Intersects::Register(loader);
+	ST_IntersectsExtent::Register(loader);
+	ST_IsClosed::Register(loader);
+	ST_IsEmpty::Register(loader);
+	ST_Length::Register(loader);
+	ST_MakeEnvelope::Register(loader);
+	ST_MakeLine::Register(loader);
+	ST_MakePolygon::Register(loader);
+	ST_Multi::Register(loader);
+	ST_NGeometries::Register(loader);
+	ST_NInteriorRings::Register(loader);
+	ST_NPoints::Register(loader);
+	ST_Perimeter::Register(loader);
+	ST_Point::Register(loader);
+	ST_PointN::Register(loader);
+	ST_Points::Register(loader);
+	ST_QuadKey::Register(loader);
+	ST_RemoveRepeatedPoints::Register(loader);
+	ST_StartPoint::Register(loader);
+	ST_Within::Register(loader);
+	ST_X::Register(loader);
+	ST_XMax::Register(loader);
+	ST_XMin::Register(loader);
+	ST_Y::Register(loader);
+	ST_YMax::Register(loader);
+	ST_YMin::Register(loader);
+	ST_Z::Register(loader);
+	ST_ZMax::Register(loader);
+	ST_ZMin::Register(loader);
+	ST_M::Register(loader);
+	ST_MMax::Register(loader);
+	ST_MMin::Register(loader);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/main/spatial_functions_table.cpp b/src/spatial/modules/main/spatial_functions_table.cpp
index 2530526..1681f6c 100644
--- a/src/spatial/modules/main/spatial_functions_table.cpp
+++ b/src/spatial/modules/main/spatial_functions_table.cpp
@@ -1,4 +1,4 @@
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "spatial/geometry/bbox.hpp"
 #include "spatial/modules/main/spatial_functions.hpp"
 #include "spatial/spatial_types.hpp"
@@ -120,7 +120,7 @@ struct ST_GeneratePoints {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		// TODO: Dont overload, make seed named parameter instead
 		TableFunctionSet set("ST_GeneratePoints");
 
@@ -133,11 +133,11 @@ struct ST_GeneratePoints {
 		// Overload with seed
 		generate_points.arguments = {GeoTypes::BOX_2D(), LogicalType::BIGINT, LogicalType::BIGINT};
 		set.AddFunction(generate_points);
-		ExtensionUtil::RegisterFunction(db, set);
+		loader.RegisterFunction(set);
 
 		InsertionOrderPreservingMap<string> tags;
 		tags.insert("ext", "spatial");
-		FunctionBuilder::AddTableFunctionDocs(db, "ST_GeneratePoints", DESCRIPTION, EXAMPLE, tags);
+		FunctionBuilder::AddTableFunctionDocs(loader, "ST_GeneratePoints", DESCRIPTION, EXAMPLE, tags);
 	}
 };
 
@@ -146,8 +146,8 @@ struct ST_GeneratePoints {
 //######################################################################################################################
 // Register
 //######################################################################################################################
-void RegisterSpatialTableFunctions(DatabaseInstance &db) {
-	ST_GeneratePoints::Register(db);
+void RegisterSpatialTableFunctions(ExtensionLoader &loader) {
+	ST_GeneratePoints::Register(loader);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/osm/osm_module.cpp b/src/spatial/modules/osm/osm_module.cpp
index 397c952..9f7c776 100644
--- a/src/spatial/modules/osm/osm_module.cpp
+++ b/src/spatial/modules/osm/osm_module.cpp
@@ -2,7 +2,7 @@
 
 #include "duckdb/function/replacement_scan.hpp"
 #include "duckdb/main/database.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/expression/constant_expression.hpp"
 #include "duckdb/parser/expression/function_expression.hpp"
 #include "duckdb/parser/tableref/table_function_ref.hpp"
@@ -893,20 +893,20 @@ static constexpr const char *DOC_EXAMPLE = R"(
 //------------------------------------------------------------------------------
 //  Register
 //------------------------------------------------------------------------------
-void RegisterOSMModule(DatabaseInstance &db) {
+void RegisterOSMModule(ExtensionLoader &loader) {
 	TableFunction read("ST_ReadOSM", {LogicalType::VARCHAR}, Execute, Bind, InitGlobal, InitLocal);
 
 	read.get_partition_data = GetPartitionData;
 	read.table_scan_progress = Progress;
 
-	ExtensionUtil::RegisterFunction(db, read);
+	loader.RegisterFunction(read);
 
 	InsertionOrderPreservingMap<string> tags;
 	tags.insert("ext", "spatial");
-	FunctionBuilder::AddTableFunctionDocs(db, "ST_ReadOSM", DOC_DESCRIPTION, DOC_EXAMPLE, tags);
+	FunctionBuilder::AddTableFunctionDocs(loader, "ST_ReadOSM", DOC_DESCRIPTION, DOC_EXAMPLE, tags);
 
 	// Replacement scan
-	auto &config = DBConfig::GetConfig(db);
+	auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 	config.replacement_scans.emplace_back(ReadOsmPBFReplacementScan);
 }
 
diff --git a/src/spatial/modules/osm/osm_module.hpp b/src/spatial/modules/osm/osm_module.hpp
index 2bbbffa..5016ebf 100644
--- a/src/spatial/modules/osm/osm_module.hpp
+++ b/src/spatial/modules/osm/osm_module.hpp
@@ -2,8 +2,8 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterOSMModule(DatabaseInstance &db);
+void RegisterOSMModule(ExtensionLoader &loader);
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/proj/proj_module.cpp b/src/spatial/modules/proj/proj_module.cpp
index e68518c..1ef8aa0 100644
--- a/src/spatial/modules/proj/proj_module.cpp
+++ b/src/spatial/modules/proj/proj_module.cpp
@@ -43,7 +43,7 @@ namespace {
 //######################################################################################################################
 
 struct ProjModule {
-	static void RegisterVFS(DatabaseInstance &db);
+	static void RegisterVFS(ExtensionLoader &loader);
 	static PJ_CONTEXT *GetThreadProjContext();
 };
 
@@ -73,7 +73,7 @@ PJ_CONTEXT *ProjModule::GetThreadProjContext() {
 }
 
 // IMPORTANT: Make sure this module is loaded before any other modules that use proj (like GDAL)
-void ProjModule::RegisterVFS(DatabaseInstance &db) {
+void ProjModule::RegisterVFS(ExtensionLoader &loader) {
 
 	// Initialization lock around global proj state
 	static mutex lock;
@@ -401,8 +401,8 @@ struct ST_Transform {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Transform", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Transform", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([&](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("box", GeoTypes::BOX_2D());
 				variant.AddParameter("source_crs", LogicalType::VARCHAR);
@@ -674,8 +674,8 @@ struct ST_Area_Spheroid {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Area_Spheroid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Area_Spheroid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -830,8 +830,8 @@ struct ST_Perimeter_Spheroid {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Perimeter_Spheroid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Perimeter_Spheroid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -964,8 +964,8 @@ struct ST_Length_Spheroid {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Length_Spheroid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Length_Spheroid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("geom", GeoTypes::GEOMETRY());
 				variant.SetReturnType(LogicalType::DOUBLE);
@@ -1029,8 +1029,8 @@ struct ST_Distance_Spheroid {
 	-- Roughly 5863km!
 	)";
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_Distance_Spheroid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_Distance_Spheroid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("p1", GeoTypes::POINT_2D());
 				variant.AddParameter("p2", GeoTypes::POINT_2D());
@@ -1081,8 +1081,8 @@ struct ST_DWithin_Spheroid {
 	// TODO: add example
 	static constexpr auto EXAMPLE = "";
 
-	static void Register(DatabaseInstance &db) {
-		FunctionBuilder::RegisterScalar(db, "ST_DWithin_Spheroid", [](ScalarFunctionBuilder &func) {
+	static void Register(ExtensionLoader &loader) {
+		FunctionBuilder::RegisterScalar(loader, "ST_DWithin_Spheroid", [](ScalarFunctionBuilder &func) {
 			func.AddVariant([](ScalarFunctionVariantBuilder &variant) {
 				variant.AddParameter("p1", GeoTypes::POINT_2D());
 				variant.AddParameter("p2", GeoTypes::POINT_2D());
@@ -1107,20 +1107,20 @@ struct ST_DWithin_Spheroid {
 //######################################################################################################################
 // Module Registration
 //######################################################################################################################
-void RegisterProjModule(DatabaseInstance &db) {
+void RegisterProjModule(ExtensionLoader &loader) {
 
 	// Register the VFS for the proj.db database
-	ProjModule::RegisterVFS(db);
+	ProjModule::RegisterVFS(loader);
 
 	// Coordinate Transform Function
-	ST_Transform::Register(db);
+	ST_Transform::Register(loader);
 
 	// Geodesic Functions
-	ST_Area_Spheroid::Register(db);
-	ST_Perimeter_Spheroid::Register(db);
-	ST_Length_Spheroid::Register(db);
-	ST_Distance_Spheroid::Register(db);
-	ST_DWithin_Spheroid::Register(db);
+	ST_Area_Spheroid::Register(loader);
+	ST_Perimeter_Spheroid::Register(loader);
+	ST_Length_Spheroid::Register(loader);
+	ST_Distance_Spheroid::Register(loader);
+	ST_DWithin_Spheroid::Register(loader);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/proj/proj_module.hpp b/src/spatial/modules/proj/proj_module.hpp
index 9292ced..334541b 100644
--- a/src/spatial/modules/proj/proj_module.hpp
+++ b/src/spatial/modules/proj/proj_module.hpp
@@ -2,8 +2,8 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterProjModule(DatabaseInstance &db);
+void RegisterProjModule(ExtensionLoader &loader);
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/shapefile/shapefile_module.cpp b/src/spatial/modules/shapefile/shapefile_module.cpp
index a0bf5cb..f17ad50 100644
--- a/src/spatial/modules/shapefile/shapefile_module.cpp
+++ b/src/spatial/modules/shapefile/shapefile_module.cpp
@@ -5,7 +5,7 @@
 
 #include "duckdb/common/multi_file/multi_file_reader.hpp"
 #include "duckdb/function/replacement_scan.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "duckdb/parser/expression/constant_expression.hpp"
 #include "duckdb/parser/expression/function_expression.hpp"
 #include "duckdb/parser/tableref/table_function_ref.hpp"
@@ -888,17 +888,17 @@ struct ST_ReadSHP {
 	//------------------------------------------------------------------------------------------------------------------
 	// Register
 	//------------------------------------------------------------------------------------------------------------------
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		TableFunction read_func("ST_ReadSHP", {LogicalType::VARCHAR}, Execute, Bind, InitGlobal);
 
 		read_func.named_parameters["encoding"] = LogicalType::VARCHAR;
 		read_func.table_scan_progress = GetProgress;
 		read_func.cardinality = GetCardinality;
 		read_func.projection_pushdown = true;
-		ExtensionUtil::RegisterFunction(db, read_func);
+		loader.RegisterFunction(read_func);
 
 		// Replacement scan
-		auto &config = DBConfig::GetConfig(db);
+		auto &config = DBConfig::GetConfig(loader.GetDatabaseInstance());
 		config.replacement_scans.emplace_back(GetReplacementScan);
 	}
 };
@@ -1057,11 +1057,11 @@ struct Shapefile_Meta {
 		return result;
 	}
 
-	static void Register(DatabaseInstance &db) {
+	static void Register(ExtensionLoader &loader) {
 		TableFunction meta_func("shapefile_meta", {LogicalType::VARCHAR}, Execute, Bind, InitGlobal);
 		meta_func.table_scan_progress = GetProgress;
 		meta_func.cardinality = GetCardinality;
-		ExtensionUtil::RegisterFunction(db, MultiFileReader::CreateFunctionSet(meta_func));
+		loader.RegisterFunction(MultiFileReader::CreateFunctionSet(meta_func));
 	}
 };
 
@@ -1071,9 +1071,9 @@ struct Shapefile_Meta {
 // Module Registration
 //######################################################################################################################
 
-void RegisterShapefileModule(DatabaseInstance &db) {
-	ST_ReadSHP::Register(db);
-	Shapefile_Meta::Register(db);
+void RegisterShapefileModule(ExtensionLoader &loader) {
+	ST_ReadSHP::Register(loader);
+	Shapefile_Meta::Register(loader);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/modules/shapefile/shapefile_module.hpp b/src/spatial/modules/shapefile/shapefile_module.hpp
index 36b96d0..0e80217 100644
--- a/src/spatial/modules/shapefile/shapefile_module.hpp
+++ b/src/spatial/modules/shapefile/shapefile_module.hpp
@@ -2,8 +2,8 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
-void RegisterShapefileModule(DatabaseInstance &db);
+void RegisterShapefileModule(ExtensionLoader &loader);
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/spatial_extension.cpp b/src/spatial/spatial_extension.cpp
index b26c527..b92bd52 100644
--- a/src/spatial/spatial_extension.cpp
+++ b/src/spatial/spatial_extension.cpp
@@ -1,5 +1,3 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "spatial/spatial_extension.hpp"
 
 #include "duckdb.hpp"
@@ -21,36 +19,36 @@
 
 namespace duckdb {
 
-static void LoadInternal(DatabaseInstance &instance) {
+static void LoadInternal(ExtensionLoader &loader) {
 
 	// Register the types
-	GeoTypes::Register(instance);
+	GeoTypes::Register(loader);
 
-	RegisterSpatialCastFunctions(instance);
-	RegisterSpatialScalarFunctions(instance);
-	RegisterSpatialAggregateFunctions(instance);
-	RegisterSpatialTableFunctions(instance);
-	SpatialJoinOptimizer::Register(instance);
-	GeoArrow::Register(instance);
+	RegisterSpatialCastFunctions(loader);
+	RegisterSpatialScalarFunctions(loader);
+	RegisterSpatialAggregateFunctions(loader);
+	RegisterSpatialTableFunctions(loader);
+	SpatialJoinOptimizer::Register(loader.GetDatabaseInstance());
+	GeoArrow::Register(loader);
 
-	RegisterProjModule(instance);
-	RegisterGDALModule(instance);
+	RegisterProjModule(loader);
+	RegisterGDALModule(loader);
 #if SPATIAL_USE_GEOS
-	RegisterGEOSModule(instance);
+	RegisterGEOSModule(loader);
 #endif
-	RegisterOSMModule(instance);
-	RegisterShapefileModule(instance);
+	RegisterOSMModule(loader);
+	RegisterShapefileModule(loader);
 
-	RTreeModule::RegisterIndex(instance);
-	RTreeModule::RegisterIndexPragmas(instance);
-	RTreeModule::RegisterIndexScan(instance);
-	RTreeModule::RegisterIndexPlanScan(instance);
+	RTreeModule::RegisterIndex(loader.GetDatabaseInstance());
+	RTreeModule::RegisterIndexPragmas(loader);
+	RTreeModule::RegisterIndexScan(loader);
+	RTreeModule::RegisterIndexPlanScan(loader.GetDatabaseInstance());
 
-	RegisterSpatialOperatorExtension(instance);;
+	RegisterSpatialOperatorExtension(loader.GetDatabaseInstance());
 }
 
-void SpatialExtension::Load(DuckDB &db) {
-	LoadInternal(*db.instance);
+void SpatialExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 
 std::string SpatialExtension::Name() {
@@ -61,15 +59,9 @@ std::string SpatialExtension::Name() {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void spatial_init(duckdb::DatabaseInstance &db) {
-	LoadInternal(db);
+DUCKDB_CPP_EXTENSION_ENTRY(spatial, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-DUCKDB_EXTENSION_API const char *spatial_version() {
-	return duckdb::DuckDB::LibraryVersion();
-}
 }
 
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
diff --git a/src/spatial/spatial_extension.hpp b/src/spatial/spatial_extension.hpp
index 982bd0b..fcfbf89 100644
--- a/src/spatial/spatial_extension.hpp
+++ b/src/spatial/spatial_extension.hpp
@@ -6,7 +6,7 @@ namespace duckdb {
 
 class SpatialExtension final : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &loader) override;
 	std::string Name() override;
 };
 
diff --git a/src/spatial/spatial_geoarrow.cpp b/src/spatial/spatial_geoarrow.cpp
index 2bebaf7..6b5e708 100644
--- a/src/spatial/spatial_geoarrow.cpp
+++ b/src/spatial/spatial_geoarrow.cpp
@@ -5,7 +5,7 @@
 #include "duckdb/function/table/arrow/arrow_duck_schema.hpp"
 #include "duckdb/function/table_function.hpp"
 #include "duckdb/main/database.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include "geometry/geometry_serialization.hpp"
 #include "spatial/geometry/geometry_type.hpp"
 #include "spatial/geometry/sgl.hpp"
@@ -161,9 +161,9 @@ void GeoArrowRegisterScan(ClientContext &context, TableFunctionInput &data_p, Da
 
 } // namespace
 
-void GeoArrow::Register(DatabaseInstance &db) {
+void GeoArrow::Register(ExtensionLoader &loader) {
 	TableFunction register_func("register_geoarrow_extensions", {}, GeoArrowRegisterScan, GeoArrowRegisterBind);
-	ExtensionUtil::RegisterFunction(db, register_func);
+	loader.RegisterFunction(register_func);
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/spatial_geoarrow.hpp b/src/spatial/spatial_geoarrow.hpp
index b006982..c47650d 100644
--- a/src/spatial/spatial_geoarrow.hpp
+++ b/src/spatial/spatial_geoarrow.hpp
@@ -2,10 +2,10 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 
 struct GeoArrow {
-	static void Register(DatabaseInstance &db);
+	static void Register(ExtensionLoader &loader);
 };
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/spatial_types.cpp b/src/spatial/spatial_types.cpp
index 9b52e54..4f5c558 100644
--- a/src/spatial/spatial_types.cpp
+++ b/src/spatial/spatial_types.cpp
@@ -1,5 +1,6 @@
 #include "spatial/spatial_types.hpp"
-#include "duckdb/main/extension_util.hpp"
+
+#include "duckdb/main/extension/extension_loader.hpp"
 
 namespace duckdb {
 
@@ -80,34 +81,34 @@ LogicalType GeoTypes::CreateEnumType(const string &name, const vector<string> &m
 	return enum_type;
 }
 
-void GeoTypes::Register(DatabaseInstance &db) {
+void GeoTypes::Register(ExtensionLoader &loader) {
 
 	// POINT_2D
-	ExtensionUtil::RegisterType(db, "POINT_2D", GeoTypes::POINT_2D());
+	loader.RegisterType("POINT_2D", GeoTypes::POINT_2D());
 
 	// POINT_3D
-	ExtensionUtil::RegisterType(db, "POINT_3D", GeoTypes::POINT_3D());
+	loader.RegisterType("POINT_3D", GeoTypes::POINT_3D());
 
 	// POINT_4D
-	ExtensionUtil::RegisterType(db, "POINT_4D", GeoTypes::POINT_4D());
+	loader.RegisterType("POINT_4D", GeoTypes::POINT_4D());
 
 	// LineString2D
-	ExtensionUtil::RegisterType(db, "LINESTRING_2D", GeoTypes::LINESTRING_2D());
+	loader.RegisterType("LINESTRING_2D", GeoTypes::LINESTRING_2D());
 
 	// Polygon2D
-	ExtensionUtil::RegisterType(db, "POLYGON_2D", GeoTypes::POLYGON_2D());
+	loader.RegisterType("POLYGON_2D", GeoTypes::POLYGON_2D());
 
 	// Box2D
-	ExtensionUtil::RegisterType(db, "BOX_2D", GeoTypes::BOX_2D());
+	loader.RegisterType("BOX_2D", GeoTypes::BOX_2D());
 
 	// Box2DF
-	ExtensionUtil::RegisterType(db, "BOX_2DF", GeoTypes::BOX_2DF());
+	loader.RegisterType("BOX_2DF", GeoTypes::BOX_2DF());
 
 	// GEOMETRY
-	ExtensionUtil::RegisterType(db, "GEOMETRY", GeoTypes::GEOMETRY());
+	loader.RegisterType("GEOMETRY", GeoTypes::GEOMETRY());
 
 	// WKB_BLOB
-	ExtensionUtil::RegisterType(db, "WKB_BLOB", GeoTypes::WKB_BLOB());
+	loader.RegisterType("WKB_BLOB", GeoTypes::WKB_BLOB());
 }
 
 } // namespace duckdb
\ No newline at end of file
diff --git a/src/spatial/spatial_types.hpp b/src/spatial/spatial_types.hpp
index 31b81ea..00d0686 100644
--- a/src/spatial/spatial_types.hpp
+++ b/src/spatial/spatial_types.hpp
@@ -5,7 +5,7 @@
 
 namespace duckdb {
 
-class DatabaseInstance;
+class ExtensionLoader;
 struct LogicalType;
 
 struct GeoTypes {
@@ -19,7 +19,7 @@ struct GeoTypes {
 	static LogicalType GEOMETRY();
 	static LogicalType WKB_BLOB();
 
-	static void Register(DatabaseInstance &db);
+	static void Register(ExtensionLoader &loader);
 
 	static LogicalType CreateEnumType(const string &name, const vector<string> &members);
 };
diff --git a/src/spatial/util/function_builder.cpp b/src/spatial/util/function_builder.cpp
index cc24db8..fe39b6e 100644
--- a/src/spatial/util/function_builder.cpp
+++ b/src/spatial/util/function_builder.cpp
@@ -1,7 +1,7 @@
 #include "spatial/util/function_builder.hpp"
 
 #include "duckdb/catalog/catalog_entry/function_entry.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 
 #include <duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp>
 
@@ -58,9 +58,11 @@ string FunctionBuilder::RemoveIndentAndTrailingWhitespace(const char *ptr) {
 	return result;
 }
 
-void FunctionBuilder::Register(DatabaseInstance &db, const char *name, ScalarFunctionBuilder &builder) {
+void FunctionBuilder::Register(ExtensionLoader &loader, const char *name, ScalarFunctionBuilder &builder) {
 	// Register the function
-	ExtensionUtil::RegisterFunction(db, std::move(builder.set));
+	loader.RegisterFunction(std::move(builder.set));
+
+	auto &db = loader.GetDatabaseInstance();
 
 	// Also add the parameter names. We need to access the catalog entry for this.
 	auto &catalog = Catalog::GetSystemCatalog(db);
@@ -101,11 +103,12 @@ void FunctionBuilder::Register(DatabaseInstance &db, const char *name, ScalarFun
 	}
 }
 
-void FunctionBuilder::Register(DatabaseInstance &db, const char *name, AggregateFunctionBuilder &builder) {
+void FunctionBuilder::Register(ExtensionLoader &loader, const char *name, AggregateFunctionBuilder &builder) {
 	// Register the function
-	ExtensionUtil::RegisterFunction(db, std::move(builder.set));
-
+	loader.RegisterFunction(std::move(builder.set));
 	// Also add the parameter names. We need to access the catalog entry for this.
+	auto &db = loader.GetDatabaseInstance();
+
 	auto &catalog = Catalog::GetSystemCatalog(db);
 	auto transaction = CatalogTransaction::GetSystemTransaction(db);
 	auto &schema = catalog.GetSchema(transaction, DEFAULT_SCHEMA);
@@ -130,7 +133,7 @@ void FunctionBuilder::Register(DatabaseInstance &db, const char *name, Aggregate
 	}
 }
 
-void FunctionBuilder::Register(DatabaseInstance &db, const char *name, MacroFunctionBuilder &builder) {
+void FunctionBuilder::Register(ExtensionLoader &loader, const char *name, MacroFunctionBuilder &builder) {
 	// Register the function
 	vector<DefaultMacro> macros;
 	vector<FunctionDescription> descriptions;
@@ -165,11 +168,12 @@ void FunctionBuilder::Register(DatabaseInstance &db, const char *name, MacroFunc
 	const auto info = DefaultFunctionGenerator::CreateInternalMacroInfo(macro_ptr);
 	info->descriptions = descriptions;
 
-	ExtensionUtil::RegisterFunction(db, *info);
+	loader.RegisterFunction(*info);
 }
 
-void FunctionBuilder::AddTableFunctionDocs(DatabaseInstance &db, const char *name, const char *desc,
+void FunctionBuilder::AddTableFunctionDocs(ExtensionLoader &loader, const char *name, const char *desc,
                                            const char *example, const InsertionOrderPreservingMap<string> &tags) {
+	auto &db = loader.GetDatabaseInstance();
 
 	auto &catalog = Catalog::GetSystemCatalog(db);
 	auto transaction = CatalogTransaction::GetSystemTransaction(db);
diff --git a/src/spatial/util/function_builder.hpp b/src/spatial/util/function_builder.hpp
index d58db78..3441765 100644
--- a/src/spatial/util/function_builder.hpp
+++ b/src/spatial/util/function_builder.hpp
@@ -21,24 +21,24 @@ class MacroFunctionBuilder;
 class FunctionBuilder {
 public:
 	template <class CALLBACK>
-	static void RegisterScalar(DatabaseInstance &db, const char *name, CALLBACK &&callback);
+	static void RegisterScalar(ExtensionLoader &loader, const char *name, CALLBACK &&callback);
 
 	template <class CALLBACK>
-	static void RegisterAggregate(DatabaseInstance &db, const char *name, CALLBACK &&callback);
+	static void RegisterAggregate(ExtensionLoader &loader, const char *name, CALLBACK &&callback);
 
 	template <class CALLBACK>
-	static void RegisterMacro(DatabaseInstance &db, const char *name, CALLBACK &&callback);
+	static void RegisterMacro(ExtensionLoader &loader, const char *name, CALLBACK &&callback);
 
 	// TODO:
-	static void AddTableFunctionDocs(DatabaseInstance &db, const char *name, const char *desc, const char *example,
+	static void AddTableFunctionDocs(ExtensionLoader &loader, const char *name, const char *desc, const char *example,
 	                                 const InsertionOrderPreservingMap<string> &tags);
 
 	static string RemoveIndentAndTrailingWhitespace(const char *str);
 
 private:
-	static void Register(DatabaseInstance &db, const char *name, ScalarFunctionBuilder &builder);
-	static void Register(DatabaseInstance &db, const char *name, AggregateFunctionBuilder &builder);
-	static void Register(DatabaseInstance &db, const char *name, MacroFunctionBuilder &builder);
+	static void Register(ExtensionLoader &loader, const char *name, ScalarFunctionBuilder &builder);
+	static void Register(ExtensionLoader &loader, const char *name, AggregateFunctionBuilder &builder);
+	static void Register(ExtensionLoader &loader, const char *name, MacroFunctionBuilder &builder);
 };
 
 //------------------------------------------------------------------------------
@@ -216,25 +216,25 @@ inline void AggregateFunctionBuilder::SetTag(const string &key, const string &va
 //------------------------------------------------------------------------------
 
 template <class CALLBACK>
-void FunctionBuilder::RegisterScalar(DatabaseInstance &db, const char *name, CALLBACK &&callback) {
+void FunctionBuilder::RegisterScalar(ExtensionLoader &loader, const char *name, CALLBACK &&callback) {
 	ScalarFunctionBuilder builder(name);
 	callback(builder);
 
-	Register(db, name, builder);
+	Register(loader, name, builder);
 }
 
 template <class CALLBACK>
-void FunctionBuilder::RegisterAggregate(DatabaseInstance &db, const char *name, CALLBACK &&callback) {
+void FunctionBuilder::RegisterAggregate(ExtensionLoader &loader, const char *name, CALLBACK &&callback) {
 	AggregateFunctionBuilder builder(name);
 	callback(builder);
-	Register(db, name, builder);
+	Register(loader, name, builder);
 }
 
 template <class CALLBACK>
-void FunctionBuilder::RegisterMacro(DatabaseInstance &db, const char *name, CALLBACK &&callback) {
+void FunctionBuilder::RegisterMacro(ExtensionLoader &loader, const char *name, CALLBACK &&callback) {
 	MacroFunctionBuilder builder;
 	callback(builder);
-	Register(db, name, builder);
+	Register(loader, name, builder);
 }
 
 } // namespace duckdb
\ No newline at end of file

diff --git a/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp b/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
index da3fe1e..d42342a 100644
--- a/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
+++ b/spatial/src/spatial/core/io/shapefile/read_shapefile_meta.cpp
@@ -47,8 +47,11 @@ static ShapeTypeEntry shape_type_map[] = {
 static unique_ptr<FunctionData> ShapeFileMetaBind(ClientContext &context, TableFunctionBindInput &input,
                                                   vector<LogicalType> &return_types, vector<string> &names) {
 	auto result = make_uniq<ShapeFileMetaBindData>();
-	auto files = MultiFileReader::GetFileList(context, input.inputs[0], "ShapeFiles", FileGlobOptions::ALLOW_EMPTY);
-	for (auto &file : files) {
+
+	auto multi_file_reader = MultiFileReader::Create(input.table_function);
+	auto file_list = multi_file_reader->CreateFileList(context, input.inputs[0], FileGlobOptions::ALLOW_EMPTY);
+
+	for (auto &file : file_list->Files()) {
 		if (StringUtil::EndsWith(StringUtil::Lower(file), ".shp")) {
 			result->files.push_back(file);
 		}
diff --git a/spatial/src/spatial/gdal/functions/st_read_meta.cpp b/spatial/src/spatial/gdal/functions/st_read_meta.cpp
index 2293072..2ec83cf 100644
--- a/spatial/src/spatial/gdal/functions/st_read_meta.cpp
+++ b/spatial/src/spatial/gdal/functions/st_read_meta.cpp
@@ -56,12 +56,10 @@ static LogicalType LAYER_TYPE = LogicalType::STRUCT({
 
 static unique_ptr<FunctionData> Bind(ClientContext &context, TableFunctionBindInput &input,
                                      vector<LogicalType> &return_types, vector<string> &names) {
-
-	auto file_name = input.inputs[0].GetValue<string>();
 	auto result = make_uniq<GDALMetadataBindData>();
 
-	result->file_names =
-	    MultiFileReader::GetFileList(context, input.inputs[0], "gdal metadata", FileGlobOptions::ALLOW_EMPTY);
+	auto multi_file_reader = MultiFileReader::Create(input.table_function);
+	result->file_names = multi_file_reader->CreateFileList(context, input.inputs[0], FileGlobOptions::ALLOW_EMPTY)->GetAllFiles();
 
 	names.push_back("file_name");
 	return_types.push_back(LogicalType::VARCHAR);

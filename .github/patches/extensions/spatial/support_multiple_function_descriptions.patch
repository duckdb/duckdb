diff --git a/spatial/include/spatial/doc_util.hpp b/spatial/include/spatial/doc_util.hpp
index 6262c18..5745f67 100644
--- a/spatial/include/spatial/doc_util.hpp
+++ b/spatial/include/spatial/doc_util.hpp
@@ -12,21 +12,18 @@ struct DocTag {
 struct DocUtil {
 	static void AddDocumentation(duckdb::DatabaseInstance &db, const char *function_name, const char *description,
 	                             const char *example,
-	                             const duckdb::unordered_map<duckdb::string, duckdb::string> &tags);
+	                             const duckdb::unordered_map<duckdb::string, duckdb::string> &tags, duckdb::vector<duckdb::string> parameter_names = {});
 
 	// Abuse adding tags as a comment
 	template <size_t N>
 	static void AddDocumentation(duckdb::DatabaseInstance &db, const char *function_name, const char *description,
-	                             const char *example, const DocTag (&tags)[N]) {
+	                             const char *example, const DocTag (&tags)[N], duckdb::vector<duckdb::string> parameter_names = {}) {
 		duckdb::unordered_map<duckdb::string, duckdb::string> tag_map;
 		for (size_t i = 0; i < N; i++) {
 			tag_map[tags[i].key] = tags[i].value;
 		}
-		AddDocumentation(db, function_name, description, example, tag_map);
+		AddDocumentation(db, function_name, description, example, tag_map, parameter_names);
 	}
-
-	static void AddFunctionParameterNames(duckdb::DatabaseInstance &db, const char *function_name,
-	                                      duckdb::vector<duckdb::string> names);
 };
 
-} // namespace spatial
\ No newline at end of file
+} // namespace spatial
diff --git a/spatial/src/spatial/core/functions/scalar/st_collectionextract.cpp b/spatial/src/spatial/core/functions/scalar/st_collectionextract.cpp
index 78c3f7d..82ad459 100644
--- a/spatial/src/spatial/core/functions/scalar/st_collectionextract.cpp
+++ b/spatial/src/spatial/core/functions/scalar/st_collectionextract.cpp
@@ -196,10 +196,9 @@ void CoreScalarFunctions::RegisterStCollectionExtract(DatabaseInstance &db) {
 	                               GeometryFunctionLocalState::Init));
 
 	ExtensionUtil::RegisterFunction(db, set);
-	DocUtil::AddDocumentation(db, "ST_CollectionExtract", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS);
-	DocUtil::AddFunctionParameterNames(db, "ST_CollectionExtract", {"geom", "type"});
+	DocUtil::AddDocumentation(db, "ST_CollectionExtract", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS, {"geom", "type"});
 }
 
 } // namespace core
 
-} // namespace spatial
\ No newline at end of file
+} // namespace spatial
diff --git a/spatial/src/spatial/geos/functions/scalar/st_buffer.cpp b/spatial/src/spatial/geos/functions/scalar/st_buffer.cpp
index 9d5730d..78b034e 100644
--- a/spatial/src/spatial/geos/functions/scalar/st_buffer.cpp
+++ b/spatial/src/spatial/geos/functions/scalar/st_buffer.cpp
@@ -130,9 +130,7 @@ void GEOSScalarFunctions::RegisterStBuffer(DatabaseInstance &db) {
 	                               GEOSFunctionLocalState::Init));
 
 	ExtensionUtil::RegisterFunction(db, set);
-	DocUtil::AddDocumentation(db, "ST_Buffer", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS);
-	DocUtil::AddFunctionParameterNames(db, "ST_Buffer",
-	                                   {"geom", "distance", "num_triangles", "join_style", "cap_style", "mitre_limit"});
+	DocUtil::AddDocumentation(db, "ST_Buffer", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS, {"geom", "distance", "num_triangles", "join_style", "cap_style", "mitre_limit"});
 }
 
 } // namespace geos
diff --git a/spatial/src/spatial/proj/functions.cpp b/spatial/src/spatial/proj/functions.cpp
index 7baf0e4..554c77a 100644
--- a/spatial/src/spatial/proj/functions.cpp
+++ b/spatial/src/spatial/proj/functions.cpp
@@ -510,12 +510,10 @@ void ProjFunctions::Register(DatabaseInstance &db) {
 	    GeometryTransformFunction, TransformBind, nullptr, nullptr, ProjFunctionLocalState::Init));
 
 	ExtensionUtil::RegisterFunction(db, set);
-	DocUtil::AddDocumentation(db, "ST_Transform", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS);
-	DocUtil::AddFunctionParameterNames(db, "ST_Transform", {"geom", "source_crs", "target_crs", "always_xy"});
-
+	DocUtil::AddDocumentation(db, "ST_Transform", DOC_DESCRIPTION, DOC_EXAMPLE, DOC_TAGS, {"geom", "source_crs", "target_crs", "always_xy"});
 	GenerateSpatialRefSysTable::Register(db);
 }
 
 } // namespace proj
 
-} // namespace spatial
\ No newline at end of file
+} // namespace spatial
diff --git a/spatial/src/spatial_extension.cpp b/spatial/src/spatial_extension.cpp
index d07319f..488cd1f 100644
--- a/spatial/src/spatial_extension.cpp
+++ b/spatial/src/spatial_extension.cpp
@@ -53,7 +53,8 @@ static string RemoveIndentAndTrailingWhitespace(const char *text) {
 
 void spatial::DocUtil::AddDocumentation(duckdb::DatabaseInstance &db, const char *function_name,
                                         const char *description, const char *example,
-                                        const duckdb::unordered_map<duckdb::string, duckdb::string> &tags) {
+                                        const duckdb::unordered_map<duckdb::string, duckdb::string> &tags,
+										duckdb::vector<duckdb::string> parameter_names) {
 
 	auto &system_catalog = Catalog::GetSystemCatalog(db);
 	auto data = CatalogTransaction::GetSystemTransaction(db);
@@ -73,40 +74,22 @@ void spatial::DocUtil::AddDocumentation(duckdb::DatabaseInstance &db, const char
 	}
 
 	auto &func_entry = catalog_entry->Cast<FunctionEntry>();
+	FunctionDescription func_description;
 	if (description != nullptr) {
-		func_entry.description = RemoveIndentAndTrailingWhitespace(description);
+		func_description.description = RemoveIndentAndTrailingWhitespace(description);
 	}
 	if (example != nullptr) {
-		func_entry.example = RemoveIndentAndTrailingWhitespace(example);
+		func_description.examples.push_back(RemoveIndentAndTrailingWhitespace(example));
 	}
+	if (!parameter_names.empty()) {
+		func_description.parameter_names = std::move(parameter_names);
+	}
+	func_entry.descriptions.push_back(std::move(func_description));
 	if (!tags.empty()) {
 		func_entry.tags = tags;
 	}
 }
 
-void spatial::DocUtil::AddFunctionParameterNames(duckdb::DatabaseInstance &db, const char *function_name,
-                                                 duckdb::vector<duckdb::string> names) {
-	auto &system_catalog = Catalog::GetSystemCatalog(db);
-	auto data = CatalogTransaction::GetSystemTransaction(db);
-	auto &schema = system_catalog.GetSchema(data, DEFAULT_SCHEMA);
-	auto catalog_entry = schema.GetEntry(data, CatalogType::SCALAR_FUNCTION_ENTRY, function_name);
-	if (!catalog_entry) {
-		// Try get a aggregate function
-		catalog_entry = schema.GetEntry(data, CatalogType::AGGREGATE_FUNCTION_ENTRY, function_name);
-		if (!catalog_entry) {
-			// Try get a table function
-			catalog_entry = schema.GetEntry(data, CatalogType::TABLE_FUNCTION_ENTRY, function_name);
-			if (!catalog_entry) {
-				throw duckdb::InvalidInputException("Function with name \"%s\" not found in DocUtil::AddDocumentation",
-				                                    function_name);
-			}
-		}
-	}
-
-	auto &func_entry = catalog_entry->Cast<FunctionEntry>();
-	func_entry.parameter_names = std::move(names);
-}
-
 namespace duckdb {
 
 static void LoadInternal(DatabaseInstance &instance) {

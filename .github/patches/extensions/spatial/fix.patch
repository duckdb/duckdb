diff --git a/src/spatial/modules/gdal/gdal_module.cpp b/src/spatial/modules/gdal/gdal_module.cpp
index 7143df8..b62bb6b 100644
--- a/src/spatial/modules/gdal/gdal_module.cpp
+++ b/src/spatial/modules/gdal/gdal_module.cpp
@@ -375,7 +375,7 @@ public:
 
 		auto file_vector = fs.Glob(file_glob);
 		for (auto &file : file_vector) {
-			auto tmp = AddPrefix(file);
+			auto tmp = AddPrefix(file.path);
 			files.AddString(tmp.c_str());
 		}
 		return files.StealList();
@@ -1153,9 +1153,9 @@ struct ST_Read_Meta {
 	// Bind
 	//------------------------------------------------------------------------------------------------------------------
 	struct BindData final : TableFunctionData {
-		vector<string> file_names;
+		vector<OpenFileInfo> file_names;
 
-		explicit BindData(vector<string> file_names_p) : file_names(std::move(file_names_p)) {
+		explicit BindData(vector<OpenFileInfo> file_names_p) : file_names(std::move(file_names_p)) {
 		}
 	};
 
@@ -1276,8 +1276,8 @@ struct ST_Read_Meta {
 		auto out_size = MinValue<idx_t>(STANDARD_VECTOR_SIZE, bind_data.file_names.size() - state.current_idx);
 
 		for (idx_t out_idx = 0; out_idx < out_size; out_idx++, state.current_idx++) {
-			auto file_name = bind_data.file_names[state.current_idx];
-			auto prefixed_file_name = GDALClientContextState::GetOrCreate(context).GetPrefix(file_name);
+			auto &file = bind_data.file_names[state.current_idx];
+			auto prefixed_file_name = GDALClientContextState::GetOrCreate(context).GetPrefix(file.path);
 
 			GDALDatasetUniquePtr dataset;
 			try {
@@ -1290,7 +1290,7 @@ struct ST_Read_Meta {
 				continue;
 			}
 
-			output.data[0].SetValue(out_idx, file_name);
+			output.data[0].SetValue(out_idx, file.path);
 			output.data[1].SetValue(out_idx, dataset->GetDriver()->GetDescription());
 			output.data[2].SetValue(out_idx, dataset->GetDriver()->GetMetadataItem(GDAL_DMD_LONGNAME));
 			output.data[3].SetValue(out_idx, GetLayerData(dataset));
diff --git a/src/spatial/modules/shapefile/shapefile_module.cpp b/src/spatial/modules/shapefile/shapefile_module.cpp
index 4b51d75..a0bf5cb 100644
--- a/src/spatial/modules/shapefile/shapefile_module.cpp
+++ b/src/spatial/modules/shapefile/shapefile_module.cpp
@@ -935,7 +935,7 @@ constexpr ShapeTypeEntry shape_type_map[] = {
 struct Shapefile_Meta {
 
 	struct ShapeFileMetaBindData final : TableFunctionData {
-		vector<string> files;
+		vector<OpenFileInfo> files;
 	};
 
 	static unique_ptr<FunctionData> Bind(ClientContext &context, TableFunctionBindInput &input,
@@ -947,7 +947,7 @@ struct Shapefile_Meta {
 		auto file_list = multi_file_reader->CreateFileList(context, input.inputs[0], FileGlobOptions::ALLOW_EMPTY);
 
 		for (auto &file : file_list->Files()) {
-			if (StringUtil::EndsWith(StringUtil::Lower(file), ".shp")) {
+			if (StringUtil::EndsWith(StringUtil::Lower(file.path), ".shp")) {
 				result->files.push_back(file);
 			}
 		}
@@ -977,7 +977,7 @@ struct Shapefile_Meta {
 		ShapeFileMetaGlobalState() : current_file_idx(0) {
 		}
 		idx_t current_file_idx;
-		vector<string> files;
+		vector<OpenFileInfo> files;
 	};
 
 	static unique_ptr<GlobalTableFunctionState> InitGlobal(ClientContext &context, TableFunctionInitInput &input) {
@@ -1011,17 +1011,17 @@ struct Shapefile_Meta {
 		auto output_count = MinValue<idx_t>(STANDARD_VECTOR_SIZE, bind_data.files.size() - state.current_file_idx);
 
 		for (idx_t out_idx = 0; out_idx < output_count; out_idx++) {
-			auto &file_name = bind_data.files[state.current_file_idx + out_idx];
+			auto &file = bind_data.files[state.current_file_idx + out_idx];
 
-			auto file_handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ);
-			auto shp_handle = OpenSHPFile(fs, file_name.c_str());
+			auto file_handle = fs.OpenFile(file, FileFlags::FILE_FLAGS_READ);
+			auto shp_handle = OpenSHPFile(fs, file.path.c_str());
 
 			double min_bound[4];
 			double max_bound[4];
 			int shape_type;
 			int record_count;
 			SHPGetInfo(shp_handle.get(), &record_count, &shape_type, min_bound, max_bound);
-			file_name_data[out_idx] = StringVector::AddString(file_name_vector, file_name);
+			file_name_data[out_idx] = StringVector::AddString(file_name_vector, file.path);
 			shape_type_data[out_idx] = 0;
 			for (size_t shape_type_idx = 0; shape_type_idx < sizeof(shape_type_map) / sizeof(ShapeTypeEntry);
 			     shape_type_idx++) {

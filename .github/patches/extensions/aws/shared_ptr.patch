diff --git a/src/aws_secret.cpp b/src/aws_secret.cpp
index 75062b9..179cc29 100644
--- a/src/aws_secret.cpp
+++ b/src/aws_secret.cpp
@@ -40,24 +40,24 @@ public:
 
 		for (const auto &item : chain_list) {
 			if (item == "sts") {
-				AddProvider(make_shared<Aws::Auth::STSAssumeRoleWebIdentityCredentialsProvider>());
+				AddProvider(std::make_shared<Aws::Auth::STSAssumeRoleWebIdentityCredentialsProvider>());
 			} else if (item == "sso") {
 				if (profile.empty()) {
-					AddProvider(make_shared<Aws::Auth::SSOCredentialsProvider>());
+					AddProvider(std::make_shared<Aws::Auth::SSOCredentialsProvider>());
 				} else {
-					AddProvider(make_shared<Aws::Auth::SSOCredentialsProvider>(profile));
+					AddProvider(std::make_shared<Aws::Auth::SSOCredentialsProvider>(profile));
 				}
 			} else if (item == "env") {
-				AddProvider(make_shared<Aws::Auth::EnvironmentAWSCredentialsProvider>());
+				AddProvider(std::make_shared<Aws::Auth::EnvironmentAWSCredentialsProvider>());
 			} else if (item == "instance") {
-				AddProvider(make_shared<Aws::Auth::InstanceProfileCredentialsProvider>());
+				AddProvider(std::make_shared<Aws::Auth::InstanceProfileCredentialsProvider>());
 			} else if (item == "process") {
-				AddProvider(make_shared<Aws::Auth::ProcessCredentialsProvider>());
+				AddProvider(std::make_shared<Aws::Auth::ProcessCredentialsProvider>());
 			} else if (item == "config") {
 				if (profile.empty()) {
-					AddProvider(make_shared<Aws::Auth::ProfileConfigFileAWSCredentialsProvider>());
+					AddProvider(std::make_shared<Aws::Auth::ProfileConfigFileAWSCredentialsProvider>());
 				} else {
-					AddProvider(make_shared<Aws::Auth::ProfileConfigFileAWSCredentialsProvider>(profile.c_str()));
+					AddProvider(std::make_shared<Aws::Auth::ProfileConfigFileAWSCredentialsProvider>(profile.c_str()));
 				}
 			} else {
 				throw InvalidInputException("Unknown provider found while parsing AWS credential chain string: '%s'",

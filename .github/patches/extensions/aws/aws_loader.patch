diff --git a/src/aws_extension.cpp b/src/aws_extension.cpp
index 1130a1b..08c2e69 100644
--- a/src/aws_extension.cpp
+++ b/src/aws_extension.cpp
@@ -1,12 +1,10 @@
-#define DUCKDB_EXTENSION_MAIN
-
 #include "aws_secret.hpp"
 #include "aws_extension.hpp"
 
 #include "duckdb.hpp"
 #include "duckdb/common/exception.hpp"
 #include "duckdb/catalog/catalog.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 #include <duckdb/parser/parsed_data/create_scalar_function_info.hpp>
 #include <aws/core/Aws.h>
 #include <aws/core/auth/AWSCredentialsProviderChain.h>
@@ -117,11 +115,11 @@ static void LoadAWSCredentialsFun(ClientContext &context, TableFunctionInput &da
 
 	data.finished = true;
 }
-static void LoadInternal(DuckDB &db) {
+static void LoadInternal(ExtensionLoader &loader) {
 	Aws::SDKOptions options;
 	Aws::InitAPI(options);
 
-	CreateAwsSecretFunctions::InitializeCurlCertificates(*db.instance);
+	CreateAwsSecretFunctions::InitializeCurlCertificates(loader.GetDatabaseInstance());
 
 	TableFunctionSet function_set("load_aws_credentials");
 	auto base_fun = TableFunction("load_aws_credentials", {}, LoadAWSCredentialsFun, LoadAWSCredentialsBind);
@@ -136,13 +134,13 @@ static void LoadInternal(DuckDB &db) {
 	function_set.AddFunction(base_fun);
 	function_set.AddFunction(profile_fun);
 
-	ExtensionUtil::RegisterFunction(*db.instance, function_set);
+	loader.RegisterFunction(function_set);
 
-	CreateAwsSecretFunctions::Register(*db.instance);
+	CreateAwsSecretFunctions::Register(loader);
 }
 
-void AwsExtension::Load(DuckDB &db) {
-	LoadInternal(db);
+void AwsExtension::Load(ExtensionLoader &loader) {
+	LoadInternal(loader);
 }
 std::string AwsExtension::Name() {
 	return "aws";
@@ -152,16 +150,8 @@ std::string AwsExtension::Name() {
 
 extern "C" {
 
-DUCKDB_EXTENSION_API void aws_init(duckdb::DatabaseInstance &db) {
-	duckdb::DuckDB db_wrapper(db);
-	db_wrapper.LoadExtension<duckdb::AwsExtension>();
-}
-
-DUCKDB_EXTENSION_API const char *aws_version() {
-	return duckdb::DuckDB::LibraryVersion();
-}
+DUCKDB_CPP_EXTENSION_ENTRY(aws, loader) {
+	duckdb::LoadInternal(loader);
 }
 
-#ifndef DUCKDB_EXTENSION_MAIN
-#error DUCKDB_EXTENSION_MAIN not defined
-#endif
+}
\ No newline at end of file
diff --git a/src/aws_secret.cpp b/src/aws_secret.cpp
index bbfc852..87de1bb 100644
--- a/src/aws_secret.cpp
+++ b/src/aws_secret.cpp
@@ -1,7 +1,7 @@
 #include "aws_secret.hpp"
 
 #include "duckdb/common/case_insensitive_map.hpp"
-#include "duckdb/main/extension_util.hpp"
+#include "duckdb/main/extension/extension_loader.hpp"
 
 #include <aws/core/Aws.h>
 #include <aws/core/auth/AWSCredentialsProviderChain.h>
@@ -243,7 +243,7 @@ void CreateAwsSecretFunctions::InitializeCurlCertificates(DatabaseInstance &db)
 	}
 }
 
-void CreateAwsSecretFunctions::Register(DatabaseInstance &instance) {
+void CreateAwsSecretFunctions::Register(ExtensionLoader &loader) {
 	vector<string> types = {"s3", "r2", "gcs", "aws"};
 
 	for (const auto &type : types) {
@@ -275,7 +275,7 @@ void CreateAwsSecretFunctions::Register(DatabaseInstance &instance) {
 		// Params for configuring the credential loading
 		cred_chain_function.named_parameters["profile"] = LogicalType::VARCHAR;
 
-		ExtensionUtil::RegisterFunction(instance, cred_chain_function);
+		loader.RegisterFunction(cred_chain_function);
 	}
 }
 
diff --git a/src/include/aws_extension.hpp b/src/include/aws_extension.hpp
index eeb7b57..fcd695e 100644
--- a/src/include/aws_extension.hpp
+++ b/src/include/aws_extension.hpp
@@ -13,7 +13,7 @@ struct AwsSetCredentialsResult {
 
 class AwsExtension : public Extension {
 public:
-	void Load(DuckDB &db) override;
+	void Load(ExtensionLoader &db) override;
 	std::string Name() override;
 };
 
diff --git a/src/include/aws_secret.hpp b/src/include/aws_secret.hpp
index e16c301..f593e6e 100644
--- a/src/include/aws_secret.hpp
+++ b/src/include/aws_secret.hpp
@@ -6,10 +6,12 @@
 
 namespace duckdb {
 
+class ExtensionLoader;
+
 struct CreateAwsSecretFunctions {
 public:
 	//! Register all CreateSecretFunctions
-	static void Register(DatabaseInstance &instance);
+	static void Register(ExtensionLoader &instance);
 
 	//! WARNING: not thread-safe, to be called on extension initialization once
 	static void InitializeCurlCertificates(DatabaseInstance &db);

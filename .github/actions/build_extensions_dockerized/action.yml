name: "Build Extensions using Docker"
description: "Build and test the DuckDB extensions"
inputs:
  # Build config
  run_tests:
    description: 'Run extension tests after build'
    default: 1
  duckdb_arch:
    description: 'Provide DUCKDB_PLATFORM to build system for cross compilation'
    default: ''
  vcpkg_target_triplet:
    description: 'Target triplet for installing vcpkg dependencies'
    default: ''
  override_git_describe:
    description: 'Override git describe'
    default: ''

runs:
  using: "composite"
  steps:
      - uses: actions/checkout@v4
        with:
          path: 'duckdb'
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - uses: actions/checkout@v4
        name: Checkout Extension CI tools
        with:
          path: 'extension-ci-tools'
          ref: 'main'
          repository: 'duckdb/extension-ci-tools'
          fetch-depth: 0

      - name: Populate composed extension
        shell: bash
        run: |
          cat duckdb/.github/config/in_tree_extensions.cmake duckdb/.github/config/out_of_tree_extensions.cmake > extension_config.cmake
          echo "{\"dependencies\": []}" > vcpkg.json
          cp duckdb/.github/helper_makefile/build_all_extensions Makefile

      - name: Build Docker image
        shell: bash
        run: |
          docker build \
            --build-arg 'vcpkg_url=https://github.com/microsoft/vcpkg.git' \
            --build-arg 'vcpkg_commit=5e5d0e1cd7785623065e77eff011afdeec1a3574' \
            --build-arg 'extra_toolchains=;python3;' \
            -t duckdb/${{ inputs.duckdb_arch }} \
            ./extension-ci-tools/docker/${{ inputs.duckdb_arch }}

      - name: Create env file for docker
        shell: bash
        run: |
          touch docker_env.txt
          echo "VCPKG_TARGET_TRIPLET=${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt 
          echo "BUILD_SHELL=1" >> docker_env.txt
          echo "OPENSSL_ROOT_DIR=/duckdb_build_dir/build/release/vcpkg_installed/${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt
          echo "OPENSSL_DIR=/duckdb_build_dir/build/release/vcpkg_installed/${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt
          echo "OPENSSL_USE_STATIC_LIBS=true" >> docker_env.txt
          # TODO this should also turn into a check
          echo "DUCKDB_PLATFORM=${{ inputs.duckdb_arch }}" >> docker_env.txt
          echo "OVERRIDE_GIT_DESCRIBE=${{ inputs.override_git_describe }}" >> docker_env.txt
          echo "LINUX_CI_IN_DOCKER=1" >> docker_env.txt
          # TODO: no more cross compilation for extension builds
          echo "TOOLCHAIN_FLAGS=${{ inputs.duckdb_arch == 'linux_arm64' && '-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_Fortran_COMPILER=aarch64-linux-gnu-gfortran' || '' }}" >> docker_env.txt
          echo "CC=${{ inputs.duckdb_arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}" >> docker_env.txt
          echo "CXX=${{ inputs.duckdb_arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}" >> docker_env.txt 

      - name: Generate timestamp for Ccache entry
        shell: bash
        id: ccache_timestamp
        run: |
          date --utc +'timestamp=%Y-%m-%d-%H;%M;%S' >> "$GITHUB_OUTPUT"

      - name: Create Ccache directory
        shell: bash
        run: |
          mkdir ccache_dir

      - name: Load Ccache
        uses: actions/cache@v4
        with:
          path: ./ccache_dir
          key: ccache-extension-distribution-${{ inputs.duckdb_arch }}-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-extension-distribution-${{ inputs.duckdb_arch }}-

      - name: Run configure (inside Docker)
        shell: bash
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make configure_ci

      - name: Build extension (inside Docker)
        shell: bash
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make release

      - name: Test extension (inside docker)
        shell: bash
        if: ${{ inputs.run_tests == 1 && inputs.duckdb_arch != 'linux_arm64'}}
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make test_release

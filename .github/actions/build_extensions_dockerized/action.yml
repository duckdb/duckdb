name: "Build Extensions"
description: "Build, test and deploy the DuckDB extensions"
inputs:
  # Test config
  run_tests:
    description: 'Run extension tests after build'
    default: 1
  run_autoload_tests:
    description: 'Runs the autoloading tests'
    default: 1

  # Deploy config
  deploy_as:
    description: 'Binary architecture name for deploy step'
    default: ''
  deploy_version:
    description: 'Version tag or commit short hash for deploy step'
    default: ''
  s3_id:
    description: 'S3 key ID'
    default: ''
  s3_key:
    description: 'S3 key secret'
    default: ''
  signing_pk:
    description: 'Extension signing RSA private key'
    default: ''

  # Build config
  duckdb_arch:
    description: 'Provide DUCKDB_PLATFORM to build system for cross compilation'
    default: ''
  static_link_build:
    description: 'Links DuckDB statically to the loadable extensions'
    default: 1
  no_static_linking:
    description: 'Disables linking extensions into DuckDB for testing'
    default: 0
  vcpkg_build:
    description: 'Installs vcpkg and pass its toolchain to CMakes'
    default: 1
  build_dir:
    description: 'DuckDB source directory to run the build in'
    default: '.'
  ninja:
    description: 'Use ninja for building'
    default: 0
  openssl_path:
    description: 'Directory of OpenSSL installation'
    default: ''
  post_install:
    description: 'Post-install scripts to run'
    default: ''
  treat_warn_as_error:
    description: 'Treat compilation warnings as errors'
    default: 1
  build_in_tree_extensions:
    description: 'Build in-tree extensions'
    default: 1
  build_out_of_tree_extensions:
    description: 'Build out-of-tree extensions'
    default: 1
  osx_universal:
    description: 'Build Universal Binary for OSX'
    default: 0
  osx_arch:
    description: 'Build specific architecture for OSX'
    default: ''
  aarch64_cross_compile:
    description: 'Enable Linux aarch64 cross-compiling'
    default: 0
  vcpkg_target_triplet:
    description: 'Target triplet for installing vcpkg dependencies'
    default: ''
  override_cc:
    description: 'Override C Compiler'
    default: ''
  override_cxx:
    description: 'Override CXX Compiler'
    default: ''
  unittest_script:
    description: 'Script/program to execute the unittests'
    default: 'python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest'
  cmake_flags:
    description: 'Flags to be passed to cmake'
    default: ''

runs:
  using: "composite"
  steps:
      - uses: actions/checkout@v4
        with:
          path: 'duckdb'
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - uses: actions/checkout@v4
        name: Checkout Extension CI tools
        with:
          path: 'extension-ci-tools'
          ref: 'main'
          repository: 'duckdb/extension-ci-tools'
          fetch-depth: 0

      - name: Populate composed extension
        shell: bash
        run: |
          cat duckdb/.github/config/in_tree_extensions.cmake duckdb/.github/config/out_of_tree_extensions.cmake > extension_config.cmake
          echo "{\"dependencies\": []}" > vcpkg.json
          cp duckdb/.github/helper_makefile/build_all_extensions Makefile

      - name: Build Docker image
        shell: bash
        run: |
          docker build \
            --build-arg 'vcpkg_url=https://github.com/microsoft/vcpkg.git' \
            --build-arg 'vcpkg_commit=5e5d0e1cd7785623065e77eff011afdeec1a3574' \
            --build-arg 'extra_toolchains=;python3;' \
            -t duckdb/${{ inputs.duckdb_arch }} \
            ./extension-ci-tools/docker/${{ inputs.duckdb_arch }}

      - name: Create env file for docker
        shell: bash
        run: |
          touch docker_env.txt
          echo "VCPKG_TARGET_TRIPLET=${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt 
          echo "BUILD_SHELL=1" >> docker_env.txt
          echo "OPENSSL_ROOT_DIR=/duckdb_build_dir/build/release/vcpkg_installed/${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt
          echo "OPENSSL_DIR=/duckdb_build_dir/build/release/vcpkg_installed/${{ inputs.vcpkg_target_triplet }}" >> docker_env.txt
          echo "OPENSSL_USE_STATIC_LIBS=true" >> docker_env.txt
          echo "DUCKDB_PLATFORM=${{ inputs.duckdb_arch }}" >> docker_env.txt
          echo "DUCKDB_GIT_VERSION=${{ inputs.override_git_describe }}" >> docker_env.txt
          echo "LINUX_CI_IN_DOCKER=1" >> docker_env.txt
          echo "TOOLCHAIN_FLAGS=''" >> docker_env.txt

      - name: Generate timestamp for Ccache entry
        shell: cmake -P {0}
        id: ccache_timestamp
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Create Ccache directory
        shell: bash
        run: |
          mkdir ccache_dir

      - name: Load Ccache
        uses: actions/cache@v4
        with:
          path: ./ccache_dir
          key: ccache-extension-distribution-${{ inputs.duckdb_arch }}-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-extension-distribution-${{ inputs.duckdb_arch }}-

      - name: Run configure (inside Docker)
        shell: bash
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make configure_ci

      - name: Build extension (inside Docker)
        shell: bash
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make release

      - name: Test extension (inside docker)
        shell: bash
        run: |
          docker run --env-file=docker_env.txt -v `pwd`:/duckdb_build_dir -v `pwd`/ccache_dir:/ccache_dir duckdb/${{ inputs.duckdb_arch }} make test_release

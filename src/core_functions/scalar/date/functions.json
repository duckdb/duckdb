[
    {
        "name": "age",
        "parameters": "timestamp,timestamp",
        "description": "Subtracts the second argument from the first, resulting in the time difference between the two timestamps.",
        "example": "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')",
        "type": "scalar_function_set"
    },
    {
        "name": "century",
        "parameters": "ts",
        "description": "Extracts the century component from a temporal type.",
        "example": "century(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "current_date",
        "description": "Returns the current date.",
        "example": "current_date()",
        "type": "scalar_function",
        "aliases": ["today"]
    },
    {
        "name": "date_diff",
        "parameters": "part,startdate,enddate",
        "description": "The number of partition boundaries between the timestamps.",
        "example": "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')",
        "type": "scalar_function_set",
        "aliases": ["datediff"]
    },
    {
        "name": "date_part",
        "parameters": "ts",
        "description": "Gets subfield (equivalent to `extract`).",
        "example": "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')",
        "type": "scalar_function_set",
        "aliases": ["datepart"]
    },
    {
        "name": "date_sub",
        "parameters": "part,startdate,enddate",
        "description": "The number of complete partitions between the timestamps.",
        "example": "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')",
        "type": "scalar_function_set",
        "aliases": ["datesub"]
    },
    {
        "name": "date_trunc",
        "parameters": "part,timestamp",
        "description": "Truncates to specified precision.",
        "example": "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')",
        "type": "scalar_function_set",
        "aliases": ["datetrunc"]
    },
    {
        "name": "day",
        "parameters": "ts",
        "description": "Extracts the day of the month from a temporal type.",
        "example": "day(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayNameFun",
        "name": "dayname",
        "parameters": "ts",
        "description": "The (English) name of the weekday.",
        "example": "dayname(TIMESTAMP '1992-03-22')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfMonthFun",
        "name": "dayofmonth",
        "parameters": "ts",
        "description": "Extracts the day of the month from a temporal type.",
        "example": "dayofmonth(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfWeekFun",
        "name": "dayofweek",
        "parameters": "ts",
        "description": "Extracts the dayofweek component from a temporal type.",
        "example": "dayofweek(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfYearFun",
        "name": "dayofyear",
        "parameters": "ts",
        "description": "Extracts the day of the year. Indexing starts from 1, i.e., January 1 corresponds to 1.",
        "example": "dayofyear(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "decade",
        "parameters": "ts",
        "description": "Extracts the decade component from a temporal type.",
        "example": "decade(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch",
        "parameters": "temporal",
        "description": "Extracts the epoch component in seconds from a temporal type. The epoch is defined as the time elapsed since 1970-01-01.",
        "example": "epoch(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_ms",
        "parameters": "temporal",
        "description": "Extracts the epoch component in milliseconds from a temporal type. The epoch is defined as the time elapsed since 1970-01-01.",
        "example": "epoch_ms(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_us",
        "parameters": "temporal",
        "description": "Extracts the epoch component in microseconds from a temporal type. The epoch is defined as the time elapsed since 1970-01-01.",
        "example": "epoch_us(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_ns",
        "parameters": "temporal",
        "description": "Extracts the epoch component in nanoseconds from a temporal type. The epoch is defined as the time elapsed since 1970-01-01.",
        "example": "epoch_ns(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "era",
        "parameters": "ts",
        "description": "Extracts the Gregorian era (CE/AD = 0, BCE/BC = 1) component from a temporal type.",
        "example": "era(TIMESTAMP '0000-01-01 11:59:44.123456'",
        "type": "scalar_function_set"
    },
    {
        "struct": "CurrentTimeFun",
        "name": "get_current_time",
        "description": "Returns the current time.",
        "example": "get_current_time()",
        "type": "scalar_function"
    },
    {
        "name": "get_current_timestamp",
        "description": "Returns the current timestamp.",
        "example": "get_current_timestamp()",
        "type": "scalar_function",
        "aliases": ["now", "transaction_timestamp"]
    },
    {
        "struct": "HoursFun",
        "name": "hour",
        "parameters": "ts",
        "description": "Extracts the hour component from a temporal type.",
        "example": "hour(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "ISODayOfWeekFun",
        "name": "isodow",
        "parameters": "ts",
        "description": "Extracts the ISO day of week component from a temporal type.",
        "example": "isodow(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "ISOYearFun",
        "name": "isoyear",
        "parameters": "ts",
        "description": "Extracts the ISO year component from a temporal type. The ISO year starts on Monday of week containing January 4th.",
        "example": "isoyear(DATE '2022-01-01')",
        "type": "scalar_function_set"
    },
    {
        "struct": "JulianDayFun",
        "name": "julian",
        "parameters": "ts",
        "description": "Extracts the Julian Day number from a temporal type.",
        "example": "julian(TIMESTAMP '2006-01-01 12:00')",
        "type": "scalar_function_set"
    },
    {
        "name": "last_day",
        "parameters": "ts",
        "description": "Returns the last day of the month.",
        "example": "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')",
        "type": "scalar_function_set"
    },
    {
        "name": "make_date",
        "parameters": "year,month,day",
        "description": "The date for the given parts.",
        "example": "make_date(1992, 9, 20)",
        "type": "scalar_function_set"
    },
    {
        "name": "make_time",
        "parameters": "hour,minute,seconds",
        "description": "The time for the given parts.",
        "example": "make_time(13, 34, 27.123456)",
        "type": "scalar_function"
    },
    {
        "name": "make_timestamp",
        "parameters": "year,month,day,hour,minute,seconds",
        "description": "Creates a `TIMESTAMP` for the given parts.",
        "example": "make_timestamp(1992, 9, 20, 13, 34, 27.123456)",
        "type": "scalar_function_set"
    },
    {
        "struct": "MicrosecondsFun",
        "name": "microsecond",
        "parameters": "ts",
        "description": "Extracts the microsecond component from a temporal type.",
        "example": "microsecond(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "millennium",
        "parameters": "ts",
        "description": "Extracts the millennium component from a temporal type.",
        "example": "millennium(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MillisecondsFun",
        "name": "millisecond",
        "parameters": "ts",
        "description": "Extracts the millisecond component from a temporal type.",
        "example": "millisecond(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MinutesFun",
        "name": "minute",
        "parameters": "ts",
        "description": "Extracts the minute component from a temporal type.",
        "example": "minute(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "month",
        "parameters": "ts",
        "description": "Extracts the month component from a temporal type.",
        "example": "month(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MonthNameFun",
        "name": "monthname",
        "parameters": "ts",
        "description": "The (English) name of the month.",
        "example": "monthname(TIMESTAMP '1992-09-20')",
        "type": "scalar_function_set"
    },
    {
        "struct": "NanosecondsFun",
        "name": "nanosecond",
        "parameters": "tsns",
        "description": "Extracts the nanosecond component from a temporal type.",
        "example": "nanosecond(TIMESTAMP_NS '2024-08-15 11:59:44.123456789') => 44123456789",
        "type": "scalar_function_set"
    },
    {
        "name": "quarter",
        "parameters": "ts",
        "description": "Extracts the quarter component from a temporal type.",
        "example": "quarter(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "SecondsFun",
        "name": "second",
        "parameters": "ts",
        "description": "Extracts the second component from a temporal type.",
        "example": "second(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "StrfTimeFun",
        "name": "strftime",
        "parameters": "timestamp,format",
        "description": "Converts the `timestamp` to string according to the `format` string.",
        "example": "strftime(TIMESTAMP '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')",
        "type": "scalar_function_set"
    },
    {
        "struct": "StrpTimeFun",
        "name": "strptime",
        "parameters": "text,format",
        "description": "Converts `text` to `TIMESTAMP` with time zone according to the format string if `%Z` is specified.",
        "example": "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')",
        "type": "scalar_function_set"
    },
    {
        "name": "time_bucket",
        "parameters": "bucket_width,timestamp,origin",
        "description": "Truncates `TIMESTAMPTZ` by the specified interval `bucket_width`. Buckets are aligned relative to origin `TIMESTAMPTZ`. The origin defaults to 2000-01-03 00:00:00+00 for buckets that do not include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets.",
        "example": "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone",
        "parameters": "ts",
        "description": "Extracts the timezone component from a temporal type.",
        "example": "timezone(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone_hour",
        "parameters": "ts",
        "description": "Extracts the timezone_hour component (the time zone offset's hour portion) from a temporal type.",
        "example": "timezone_hour(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone_minute",
        "parameters": "ts",
        "description": "Extracts the timezone_minute component (the time zone offset's minutes portion) from a temporal type.",
        "example": "timezone_minute(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "TimeTZSortKeyFun",
        "name": "timetz_byte_comparable",
        "parameters": "time_tz",
        "description": "Converts a `TIME WITH TIME ZONE` to an `INTEGER` sort key.",
        "example": "timetz_byte_comparable('18:18:16.21-07:00'::TIME_TZ)",
        "type": "scalar_function"
    },
    {
        "name": "to_centuries",
        "parameters": "integer",
        "description": "Constructs a century `INTERVAL`.",
        "example": "to_centuries(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_days",
        "parameters": "integer",
        "description": "Constructs a day `INTERVAL`.",
        "example": "to_days(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_decades",
        "parameters": "integer",
        "description": "Constructs a decade `INTERVAL`.",
        "example": "to_decades(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_hours",
        "parameters": "integer",
        "description": "Constructs a hour `INTERVAL`.",
        "example": "to_hours(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_microseconds",
        "parameters": "integer",
        "description": "Constructs a microsecond `INTERVAL`.",
        "example": "to_microseconds(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_millennia",
        "parameters": "integer",
        "description": "Constructs a millenium `INTERVAL`.",
        "example": "to_millennia(1)",
        "type": "scalar_function"
    },
    {
        "name": "to_milliseconds",
        "parameters": "double",
        "description": "Constructs a millisecond `INTERVAL`.",
        "example": "to_milliseconds(5.5)",
        "type": "scalar_function"
    },
    {
        "name": "to_minutes",
        "parameters": "integer",
        "description": "Constructs a minute `INTERVAL`.",
        "example": "to_minutes(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_months",
        "parameters": "integer",
        "description": "Constructs a month `INTERVAL`.",
        "example": "to_months(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_quarters",
        "parameters": "integer",
        "description": "Constructs a quarter `INTERVAL`.",
        "example": "to_quarters(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_seconds",
        "parameters": "double",
        "description": "Constructs a second `INTERVAL`.",
        "example": "to_seconds(5.5)",
        "type": "scalar_function"
    },
    {
        "name": "to_timestamp",
        "parameters": "sec",
        "description": "Converts secs since epoch to a `TIMESTAMP WITH TIME ZONE`.",
        "example": "to_timestamp(1284352323.5)",
        "type": "scalar_function"
    },
    {
        "name": "to_weeks",
        "parameters": "integer",
        "description": "Constructs a week `INTERVAL`.",
        "example": "to_weeks(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_years",
        "parameters": "integer",
        "description": "Constructs a year `INTERVAL`.",
        "example": "to_years(5)",
        "type": "scalar_function"
    },
    {
        "struct": "TryStrpTimeFun",
        "name": "try_strptime",
        "parameters": "text,format",
        "description": "Converts the `text` string to `TIMESTAMP` using the `format` string (`TIMESTAMP WITH TIME ZONE` if %Z is specified). Returns `NULL` on failure.",
        "example": "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')",
        "type": "scalar_function_set"
    },
    {
        "name": "week",
        "parameters": "ts",
        "description": "Extracts the ISO week component from a temporal type. Indexing starts from 1.",
        "example": "week(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "WeekDayFun",
        "name": "weekday",
        "parameters": "ts",
        "description": "Extracts the weekday component from a temporal type. The indexing is as follows: Sunday = 0, Monday = 1, ..., Saturday = 6.",
        "example": "weekday(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "WeekOfYearFun",
        "name": "weekofyear",
        "parameters": "ts",
        "description": "Extracts the weekofyear component from a temporal type.",
        "example": "weekofyear(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "year",
        "parameters": "ts",
        "description": "Extracts the year component from a temporal type.",
        "example": "year(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "YearWeekFun",
        "name": "yearweek",
        "parameters": "ts",
        "description": "Extracts the yearweek component from a temporal type. The yearweek is a `BIGINT` value of combined ISO year number and 2-digit version of ISO week number.",
        "example": "yearweek(TIMESTAMP '2024-08-15 11:59:44.123456')",
        "type": "scalar_function_set"
    }
]

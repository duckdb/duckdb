[
    {
        "name": "age",
        "parameters": "timestamp,timestamp",
        "description": "Subtract arguments, resulting in the time difference between the two timestamps",
        "example": "age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')",
        "type": "scalar_function_set"
    },
    {
        "name": "century",
        "parameters": "ts",
        "description": "Extract the century component from a date or timestamp",
        "example": "century(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "current_date",
        "description": "Returns the current date",
        "example": "current_date()",
        "type": "scalar_function",
        "aliases": ["today"]
    },
    {
        "name": "date_diff",
        "parameters": "part,startdate,enddate",
        "description": "The number of partition boundaries between the timestamps",
        "example": "date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')",
        "type": "scalar_function_set",
        "aliases": ["datediff"]
    },
    {
        "name": "date_part",
        "parameters": "ts",
        "description": "Get subfield (equivalent to extract)",
        "example": "date_part('minute', TIMESTAMP '1992-09-20 20:38:40')",
        "type": "scalar_function_set",
        "aliases": ["datepart"]
    },
    {
        "name": "date_sub",
        "parameters": "part,startdate,enddate",
        "description": "The number of complete partitions between the timestamps",
        "example": "date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')",
        "type": "scalar_function_set",
        "aliases": ["datesub"]
    },
    {
        "name": "date_trunc",
        "parameters": "part,timestamp",
        "description": "Truncate to specified precision",
        "example": "date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')",
        "type": "scalar_function_set",
        "aliases": ["datetrunc"]
    },
    {
        "name": "day",
        "parameters": "ts",
        "description": "Extract the day component from a date or timestamp",
        "example": "day(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayNameFun",
        "name": "dayname",
        "parameters": "ts",
        "description": "The (English) name of the weekday.",
        "example": "dayname(TIMESTAMP '1992-03-22')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfMonthFun",
        "name": "dayofmonth",
        "parameters": "ts",
        "description": "Extract the dayofmonth component from a date or timestamp",
        "example": "dayofmonth(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfWeekFun",
        "name": "dayofweek",
        "parameters": "ts",
        "description": "Extract the dayofweek component from a date or timestamp",
        "example": "dayofweek(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "DayOfYearFun",
        "name": "dayofyear",
        "parameters": "ts",
        "description": "Extract the dayofyear component from a date or timestamp",
        "example": "dayofyear(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "decade",
        "parameters": "ts",
        "description": "Extract the decade component from a date or timestamp",
        "example": "decade(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch",
        "parameters": "temporal",
        "description": "Extract the epoch component from a temporal type",
        "example": "epoch(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_ms",
        "parameters": "temporal",
        "description": "Extract the epoch component in milliseconds from a temporal type",
        "example": "epoch_ms(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_us",
        "parameters": "temporal",
        "description": "Extract the epoch component in microseconds from a temporal type",
        "example": "epoch_us(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "epoch_ns",
        "parameters": "temporal",
        "description": "Extract the epoch component in nanoseconds from a temporal type",
        "example": "epoch_ns(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "era",
        "parameters": "ts",
        "description": "Extract the era component from a date or timestamp",
        "example": "era(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "CurrentTimeFun",
        "name": "get_current_time",
        "description": "Returns the current time",
        "example": "get_current_time()",
        "type": "scalar_function"
    },
    {
        "name": "get_current_timestamp",
        "description": "Returns the current timestamp",
        "example": "get_current_timestamp()",
        "type": "scalar_function",
        "aliases": ["now", "transaction_timestamp"]
    },
    {
        "struct": "HoursFun",
        "name": "hour",
        "parameters": "ts",
        "description": "Extract the hour component from a date or timestamp",
        "example": "hour(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "ISODayOfWeekFun",
        "name": "isodow",
        "parameters": "ts",
        "description": "Extract the isodow component from a date or timestamp",
        "example": "isodow(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "ISOYearFun",
        "name": "isoyear",
        "parameters": "ts",
        "description": "Extract the isoyear component from a date or timestamp",
        "example": "isoyear(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "JulianDayFun",
        "name": "julian",
        "parameters": "ts",
        "description": "Extract the Julian Day number from a date or timestamp",
        "example": "julian(timestamp '2006-01-01 12:00')",
        "type": "scalar_function_set"
    },
    {
        "name": "last_day",
        "parameters": "ts",
        "description": "Returns the last day of the month",
        "example": "last_day(TIMESTAMP '1992-03-22 01:02:03.1234')",
        "type": "scalar_function_set"
    },
    {
        "name": "make_date",
        "parameters": "year,month,day",
        "description": "The date for the given parts",
        "example": "make_date(1992, 9, 20)",
        "type": "scalar_function_set"
    },
    {
        "name": "make_time",
        "parameters": "hour,minute,seconds",
        "description": "The time for the given parts",
        "example": "make_time(13, 34, 27.123456)",
        "type": "scalar_function"
    },
    {
        "name": "make_timestamp",
        "parameters": "year,month,day,hour,minute,seconds",
        "description": "The timestamp for the given parts",
        "example": "make_timestamp(1992, 9, 20, 13, 34, 27.123456)",
        "type": "scalar_function_set"
    },
    {
        "struct": "MicrosecondsFun",
        "name": "microsecond",
        "parameters": "ts",
        "description": "Extract the microsecond component from a date or timestamp",
        "example": "microsecond(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "millennium",
        "parameters": "ts",
        "description": "Extract the millennium component from a date or timestamp",
        "example": "millennium(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MillisecondsFun",
        "name": "millisecond",
        "parameters": "ts",
        "description": "Extract the millisecond component from a date or timestamp",
        "example": "millisecond(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MinutesFun",
        "name": "minute",
        "parameters": "ts",
        "description": "Extract the minute component from a date or timestamp",
        "example": "minute(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "month",
        "parameters": "ts",
        "description": "Extract the month component from a date or timestamp",
        "example": "month(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "MonthNameFun",
        "name": "monthname",
        "parameters": "ts",
        "description": "The (English) name of the month.",
        "example": "monthname(TIMESTAMP '1992-09-20')",
        "type": "scalar_function_set"
    },
    {
        "name": "quarter",
        "parameters": "ts",
        "description": "Extract the quarter component from a date or timestamp",
        "example": "quarter(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "SecondsFun",
        "name": "second",
        "parameters": "ts",
        "description": "Extract the second component from a date or timestamp",
        "example": "second(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "StrfTimeFun",
        "name": "strftime",
        "parameters": "text,format",
        "description": "Converts timestamp to string according to the format string",
        "example": "strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')",
        "type": "scalar_function_set"
    },
    {
        "struct": "StrpTimeFun",
        "name": "strptime",
        "parameters": "text,format",
        "description": "Converts string to timestamp with time zone according to the format string if %Z is specified.",
        "example": "strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')",
        "type": "scalar_function_set"
    },
    {
        "name": "time_bucket",
        "parameters": "bucket_width,timestamp,origin",
        "description": "Truncate timestamptz by the specified interval bucket_width. Buckets are aligned relative to origin timestamptz. origin defaults to 2000-01-03 00:00:00+00 for buckets that don\u2019t include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets.",
        "example": "time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone",
        "parameters": "ts",
        "description": "Extract the timezone component from a date or timestamp",
        "example": "timezone(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone_hour",
        "parameters": "ts",
        "description": "Extract the timezone_hour component from a date or timestamp",
        "example": "timezone_hour(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "timezone_minute",
        "parameters": "ts",
        "description": "Extract the timezone_minute component from a date or timestamp",
        "example": "timezone_minute(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "to_days",
        "parameters": "integer",
        "description": "Construct a day interval",
        "example": "to_days(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_hours",
        "parameters": "integer",
        "description": "Construct a hour interval",
        "example": "to_hours(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_microseconds",
        "parameters": "integer",
        "description": "Construct a microsecond interval",
        "example": "to_microseconds(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_milliseconds",
        "parameters": "integer",
        "description": "Construct a millisecond interval",
        "example": "to_milliseconds(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_minutes",
        "parameters": "integer",
        "description": "Construct a minute interval",
        "example": "to_minutes(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_months",
        "parameters": "integer",
        "description": "Construct a month interval",
        "example": "to_months(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_seconds",
        "parameters": "integer",
        "description": "Construct a second interval",
        "example": "to_seconds(5)",
        "type": "scalar_function"
    },
    {
        "name": "to_timestamp",
        "parameters": "sec",
        "description": "Converts secs since epoch to a timestamp with time zone",
        "example": "to_timestamp(1284352323.5)",
        "type": "scalar_function"
    },
    {
        "name": "to_years",
        "parameters": "integer",
        "description": "Construct a year interval",
        "example": "to_years(5)",
        "type": "scalar_function"
    },
    {
        "struct": "TryStrpTimeFun",
        "name": "try_strptime",
        "parameters": "text,format",
        "description": "Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure.",
        "example": "try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')",
        "type": "scalar_function_set"
    },
    {
        "name": "week",
        "parameters": "ts",
        "description": "Extract the week component from a date or timestamp",
        "example": "week(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "WeekDayFun",
        "name": "weekday",
        "parameters": "ts",
        "description": "Extract the weekday component from a date or timestamp",
        "example": "weekday(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "WeekOfYearFun",
        "name": "weekofyear",
        "parameters": "ts",
        "description": "Extract the weekofyear component from a date or timestamp",
        "example": "weekofyear(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "name": "year",
        "parameters": "ts",
        "description": "Extract the year component from a date or timestamp",
        "example": "year(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    },
    {
        "struct": "YearWeekFun",
        "name": "yearweek",
        "parameters": "ts",
        "description": "Extract the yearweek component from a date or timestamp",
        "example": "yearweek(timestamp '2021-08-03 11:59:44.123456')",
        "type": "scalar_function_set"
    }
]

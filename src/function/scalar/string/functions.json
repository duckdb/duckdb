[
    {
        "name": "upper",
        "parameters": "string",
        "description": "Convert string to upper case.",
        "example": "upper('Hello')",
        "type": "scalar_function",
        "struct": "UpperFun",
        "aliases": ["ucase"]
    },
    {
        "name": "lower",
        "parameters": "string",
        "description": "Convert string to lower case",
        "example": "lower('Hello')",
        "type": "scalar_function",
        "struct": "LowerFun",
        "aliases": ["lcase"]
    },
    {
        "name": "concat_ws",
        "parameters": "separator,string,...",
        "description": "Concatenate strings together separated by the specified separator.",
        "example": "concat_ws(', ', 'Banana', 'Apple', 'Melon')",
        "type": "scalar_function"
    },
    {
        "name": "concat",
        "parameters": "string,...",
        "description": "Concatenate many strings together.",
        "example": "concat('Hello', ' ', 'World')",
        "type": "scalar_function"
    },
    {
        "name": "list_concat",
        "parameters": "list1,list2",
        "description": "Concatenates two lists.",
        "example": "list_concat([2, 3], [4, 5, 6])",
        "type": "scalar_function",
        "aliases": ["list_cat","array_concat","array_cat"]
    },
    {
        "name": "||",
        "parameters": "list1,list2",
        "description": "Concatenates two lists.",
        "example": "list_concat([2, 3], [4, 5, 6])",
        "type": "scalar_function",
        "struct": "ConcatOperatorFun"
    },
    {
        "name": "prefix",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function"
    },
    {
        "name": "suffix",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function"
    },
    {
        "name": "contains",
        "parameters": "string,search_string",
        "description": "Return true if search_string is found within string.",
        "example": "contains('abc', 'a')",
        "type": "scalar_function_set"
    },
    {
        "name": "strip_accents",
        "parameters": "string",
        "description": "Strips accents from string.",
        "example": "strip_accents('m√ºhleisen')",
        "type": "scalar_function"
    },
    {
        "name": "nfc_normalize",
        "parameters": "string",
        "description": "Convert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not.",
        "example": "nfc_normalize('ard√®ch')",
        "type": "scalar_function",
        "struct": "NFCNormalizeFun"
    },
    {
        "name": "length",
        "parameters": "string",
        "description": "Number of characters in string.",
        "example": "length('Helloü¶Ü')",
        "type": "scalar_function_set",
        "aliases": ["len"]
    },
    {
        "name": "strlen",
        "parameters": "string",
        "description": "Number of bytes in string.",
        "example": "strlen('ü¶Ü')",
        "type": "scalar_function"
    },
    {
        "name": "bit_length",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function_set"
    },
    {
        "name": "octet_length",
        "parameters": "blob",
        "description": "Number of bytes in blob.",
        "example": "octet_length('\\xAA\\xBB'::BLOB)",
        "type": "scalar_function_set"
    },
    {
        "name": "length_grapheme",
        "parameters": "string",
        "description": "Number of grapheme clusters in string.",
        "example": "length_grapheme('ü§¶üèº‚Äç‚ôÇÔ∏èü§¶üèΩ‚Äç‚ôÄÔ∏è')",
        "type": "scalar_function_set"
    },
    {
        "name": "array_length",
        "parameters": "list",
        "description": "Returns the length of the list.",
        "example": "array_length([1,2,3])",
        "type": "scalar_function_set"
    },
    {
        "name": "substring",
        "parameters": "string,start,length",
        "description": "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.",
        "example": "substring('Hello', 2, 2)",
        "type": "scalar_function_set",
        "aliases": ["substr"]
    },
    {
        "name": "substring_grapheme",
        "parameters": "string,start,length",
        "description": "Extract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string.",
        "example": "substring_grapheme('ü¶Üü§¶üèº‚Äç‚ôÇÔ∏èü§¶üèΩ‚Äç‚ôÄÔ∏èü¶Ü', 3, 2)",
        "type": "scalar_function_set"
    },
    {
        "name": "string_split",
        "parameters": "string,separator",
        "description": "Splits the string along the separator",
        "example": "string_split('hello-world', '-')",
        "type": "scalar_function",
        "aliases": ["str_split", "string_to_array", "split"]
    },
    {
        "name": "string_split_regex",
        "parameters": "string,separator",
        "description": "Splits the string along the regex",
        "example": "string_split_regex('hello‚ê£world; 42', ';?‚ê£')",
        "type": "scalar_function_set",
        "aliases": ["str_split_regex", "regexp_split_to_array"]
    },
    {
        "name": "regexp_full_match",
        "parameters": "string,regex[,options]",
        "description": "Returns true if the entire string matches the regex. A set of optional options can be set.",
        "example": "regexp_full_match('anabanana', '(an)*')",
        "type": "scalar_function_set",
        "struct": "RegexpFun"
    },
    {
        "name": "regexp_matches",
        "parameters": "string,pattern[,options]",
        "description": "Returns true if string contains the regexp pattern, false otherwise. A set of optional options can be set.",
        "example": "regexp_matches('anabanana', '(an)*')",
        "type": "scalar_function_set"
    },
    {
        "name": "regexp_replace",
        "parameters": "string,pattern,replacement[,options]",
        "description": "If string contains the regexp pattern, replaces the matching part with replacement. A set of optional options can be set.",
        "example": "regexp_replace('hello', '[lo]', '-')",
        "type": "scalar_function_set"
    },
    {
        "name": "regexp_extract",
        "parameters": "string,pattern[,group = 0][,options]",
        "description": "If string contains the regexp pattern, returns the capturing group specified by optional parameter group. The group must be a constant value. If no group is given, it defaults to 0. A set of optional options can be set.",
        "example": "regexp_extract('abc', '([a-z])(b)', 1)",
        "type": "scalar_function_set"
    },
    {
        "name": "regexp_extract_all",
        "parameters": "string, regex[, group = 0][, options]",
        "description": "Split the string along the regex and extract all occurrences of group. A set of optional options can be set.",
        "example": "regexp_extract_all('hello_world', '([a-z ]+)_?', 1)",
        "type": "scalar_function_set"
    },
    {
        "name": "regexp_escape",
        "parameters": "string",
        "description": "Escapes all potentially meaningful regexp characters in the input string",
        "example": "regexp_escape('https://duckdb.org')",
        "type": "scalar_function",
        "struct": "RegexpEscapeFun"
    },
    {
        "name": "~~",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function",
        "struct": "LikeFun"
    },
    {
        "name": "!~~",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function",
        "struct": "NotLikeFun"
    },
    {
        "name": "~~~",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function",
        "struct": "GlobPatternFun"
    },
    {
        "name": "~~*",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function",
        "struct": "ILikeFun"
    },
    {
        "name": "!~~*",
        "parameters": "",
        "description": "",
        "example": "",
        "type": "scalar_function",
        "struct": "NotILikeFun"
    },
    {
        "name": "like_escape",
        "parameters": "string,like_specifier,escape_character",
        "description": "Returns true if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string.",
        "example": "like_escape('a%c', 'a$%c', '$')",
        "type": "scalar_function"
    },
    {
        "name": "not_like_escape",
        "parameters": "string,like_specifier,escape_character",
        "description": "Returns false if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string.",
        "example": "not_like_escape('a%c', 'a$%c', '$')",
        "type": "scalar_function"
    },
    {
        "name": "ilike_escape",
        "parameters": "string,like_specifier,escape_character",
        "description": "Returns true if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string.",
        "example": "ilike_escape('A%c', 'a$%C', '$')",
        "type": "scalar_function"
    },
    {
        "name": "not_ilike_escape",
        "parameters": "string,like_specifier,escape_character",
        "description": "Returns false if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string.",
        "example": "not_ilike_escape('A%c', 'a$%C', '$')",
        "type": "scalar_function"
    },
    {
        "name": "md5",
        "parameters": "value",
        "description": "Returns the MD5 hash of the value as a string",
        "example": "md5('123')",
        "type": "scalar_function_set",
        "struct": "MD5Fun"
    },
    {
        "name": "md5_number",
        "parameters": "value",
        "description": "Returns the MD5 hash of the value as an INT128",
        "example": "md5_number('123')",
        "type": "scalar_function_set",
        "struct": "MD5NumberFun"
    },
    {
        "name": "sha1",
        "parameters": "value",
        "description": "Returns the SHA1 hash of the value",
        "example": "sha1('hello')",
        "type": "scalar_function_set",
        "struct": "SHA1Fun"
    },
    {
        "name": "sha256",
        "parameters": "value",
        "description": "Returns the SHA256 hash of the value",
        "example": "sha256('hello')",
        "type": "scalar_function_set",
        "struct": "SHA256Fun"
    }
]

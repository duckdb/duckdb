[
    {
        "name": "struct_extract",
        "parameters": "struct,'entry'",
        "description": "Extract the named entry from the STRUCT.",
        "example": "struct_extract({'i': 3, 'v2': 3, 'v3': 0}, 'i')",
        "type": "scalar_function_set"
    },
    {
        "name": "struct_extract_at",
        "parameters": "struct,'entry'",
        "description": "Extract the entry from the STRUCT by position (starts at 1!).",
        "example": "struct_extract_at({'i': 3, 'v2': 3, 'v3': 0}, 2)",
        "type": "scalar_function",
        "extra_functions": ["static unique_ptr<FunctionData> GetBindData(idx_t index);"]
    },
    {
        "name": "struct_pack",
        "parameters": "name:=any,...",
        "description": "Create a STRUCT containing the argument values. The entry name will be the bound variable name.",
        "example": "struct_pack(i := 4, s := 'string')",
        "type": "scalar_function"
    },
    {
        "name": "row",
        "parameters": "any,...",
        "description": "Create an unnamed STRUCT (tuple) containing the argument values.",
        "example": "row(i, i % 4, i / 4)",
        "type": "scalar_function"
    },
    {
        "name": "remap_struct",
        "parameters": "input,target_type,mapping,defaults",
        "description": "Map a struct to another struct type, potentially re-ordering, renaming and casting members and filling in defaults for missing values",
        "example": "remap_struct({'i': 1, 'j': 2}, NULL::ROW(v1 INT, v2 INT, v3 INT), {'v1': 'j', 'v3': 'i'}, {'v2': NULL::INTEGER})",
        "type": "scalar_function"
    },
    {
        "name": "struct_concat",
        "parameters": "struct,struct,...",
        "description": "Merge the multiple STRUCTs into a single STRUCT.",
        "example": "struct_concat(struct_pack(i := 4), struct_pack(s := 'string'))",
        "type": "scalar_function"
    },
    {
        "name": "struct_contains",
        "parameters": "struct,'entry'",
        "description": "Check if an unnamed STRUCT contains the value.",
        "example": "struct_contains(ROW(3, 3, 0), 3)",
        "type": "scalar_function",
        "aliases": ["struct_has"]
    },
    {
        "name": "struct_position",
        "parameters": "struct,'entry'",
        "description": "Get the position of the entry in an unnamed STRUCT, starting at 1.",
        "example": "struct_position(ROW(3, 3, 0), 3)",
        "type": "scalar_function",
        "aliases": ["struct_indexof"]
    }
]

//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/format_serializer.hpp"
#include "duckdb/common/serializer/format_deserializer.hpp"
#include "duckdb/function/macro_function.hpp"
#include "duckdb/function/scalar_macro_function.hpp"
#include "duckdb/function/table_macro_function.hpp"

namespace duckdb {

void MacroFunction::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty("type", type);
	serializer.WriteProperty("parameters", parameters);
	serializer.WriteProperty("default_parameters", default_parameters);
}

unique_ptr<MacroFunction> MacroFunction::FormatDeserialize(FormatDeserializer &deserializer) {
	auto type = deserializer.ReadProperty<MacroType>("type");
	auto parameters = deserializer.ReadProperty<vector<unique_ptr<ParsedExpression>>>("parameters");
	auto default_parameters = deserializer.ReadProperty<unordered_map<string, unique_ptr<ParsedExpression>>>("default_parameters");
	unique_ptr<MacroFunction> result;
	switch (type) {
	case MacroType::SCALAR_MACRO:
		result = ScalarMacroFunction::FormatDeserialize(deserializer);
		break;
	case MacroType::TABLE_MACRO:
		result = TableMacroFunction::FormatDeserialize(deserializer);
		break;
	default:
		throw SerializationException("Unsupported type for deserialization of MacroFunction!");
	}
	result->parameters = std::move(parameters);
	result->default_parameters = std::move(default_parameters);
	return result;
}

void ScalarMacroFunction::FormatSerialize(FormatSerializer &serializer) const {
	MacroFunction::FormatSerialize(serializer);
	serializer.WriteProperty("expression", *expression);
}

unique_ptr<MacroFunction> ScalarMacroFunction::FormatDeserialize(FormatDeserializer &deserializer) {
	auto result = duckdb::unique_ptr<ScalarMacroFunction>(new ScalarMacroFunction());
	deserializer.ReadProperty("expression", result->expression);
	return std::move(result);
}

void TableMacroFunction::FormatSerialize(FormatSerializer &serializer) const {
	MacroFunction::FormatSerialize(serializer);
	serializer.WriteProperty("query_node", *query_node);
}

unique_ptr<MacroFunction> TableMacroFunction::FormatDeserialize(FormatDeserializer &deserializer) {
	auto result = duckdb::unique_ptr<TableMacroFunction>(new TableMacroFunction());
	deserializer.ReadProperty("query_node", result->query_node);
	return std::move(result);
}

} // namespace duckdb

//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/format_serializer.hpp"
#include "duckdb/common/serializer/format_deserializer.hpp"
#include "duckdb/storage/block.hpp"
#include "duckdb/storage/statistics/distinct_statistics.hpp"

namespace duckdb {

void DistinctStatistics::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty(100, "sample_count", sample_count);
	serializer.WriteProperty(101, "total_count", total_count);
	serializer.WriteProperty(102, "log", log);
}

unique_ptr<DistinctStatistics> DistinctStatistics::FormatDeserialize(FormatDeserializer &deserializer) {
	auto sample_count = deserializer.ReadProperty<idx_t>(100, "sample_count");
	auto total_count = deserializer.ReadProperty<idx_t>(101, "total_count");
	auto log = deserializer.ReadProperty<unique_ptr<HyperLogLog>>(102, "log");
	auto result = duckdb::unique_ptr<DistinctStatistics>(new DistinctStatistics(std::move(log), sample_count, total_count));
	return result;
}

void MetaBlockPointer::FormatSerialize(FormatSerializer &serializer) const {
	serializer.WriteProperty(100, "block_pointer", block_pointer);
	serializer.WriteProperty(101, "offset", offset);
}

MetaBlockPointer MetaBlockPointer::FormatDeserialize(FormatDeserializer &deserializer) {
	auto block_pointer = deserializer.ReadProperty<idx_t>(100, "block_pointer");
	auto offset = deserializer.ReadProperty<uint32_t>(101, "offset");
	MetaBlockPointer result(block_pointer, offset);
	return result;
}

} // namespace duckdb

//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/serializer.hpp"
#include "duckdb/common/serializer/deserializer.hpp"
#include "duckdb/parser/tableref/list.hpp"

namespace duckdb {

void TableRef::Serialize(Serializer &serializer) const {
	serializer.WriteProperty(100, "type", type);
	serializer.WriteProperty(101, "alias", alias);
	serializer.WritePropertyWithDefault(102, "sample", sample, unique_ptr<SampleOptions>());
}

unique_ptr<TableRef> TableRef::Deserialize(Deserializer &deserializer) {
	auto type = deserializer.ReadProperty<TableReferenceType>(100, "type");
	auto alias = deserializer.ReadProperty<string>(101, "alias");
	auto sample = deserializer.ReadPropertyWithDefault<unique_ptr<SampleOptions>>(102, "sample", unique_ptr<SampleOptions>());
	unique_ptr<TableRef> result;
	switch (type) {
	case TableReferenceType::BASE_TABLE:
		result = BaseTableRef::Deserialize(deserializer);
		break;
	case TableReferenceType::EMPTY:
		result = EmptyTableRef::Deserialize(deserializer);
		break;
	case TableReferenceType::EXPRESSION_LIST:
		result = ExpressionListRef::Deserialize(deserializer);
		break;
	case TableReferenceType::JOIN:
		result = JoinRef::Deserialize(deserializer);
		break;
	case TableReferenceType::PIVOT:
		result = PivotRef::Deserialize(deserializer);
		break;
	case TableReferenceType::SUBQUERY:
		result = SubqueryRef::Deserialize(deserializer);
		break;
	case TableReferenceType::TABLE_FUNCTION:
		result = TableFunctionRef::Deserialize(deserializer);
		break;
	default:
		throw SerializationException("Unsupported type for deserialization of TableRef!");
	}
	result->alias = std::move(alias);
	result->sample = std::move(sample);
	return result;
}

void BaseTableRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "schema_name", schema_name);
	serializer.WriteProperty(201, "table_name", table_name);
	serializer.WriteProperty(202, "column_name_alias", column_name_alias);
	serializer.WriteProperty(203, "catalog_name", catalog_name);
}

unique_ptr<TableRef> BaseTableRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<BaseTableRef>(new BaseTableRef());
	deserializer.ReadProperty(200, "schema_name", result->schema_name);
	deserializer.ReadProperty(201, "table_name", result->table_name);
	deserializer.ReadProperty(202, "column_name_alias", result->column_name_alias);
	deserializer.ReadProperty(203, "catalog_name", result->catalog_name);
	return std::move(result);
}

void EmptyTableRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
}

unique_ptr<TableRef> EmptyTableRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<EmptyTableRef>(new EmptyTableRef());
	return std::move(result);
}

void ExpressionListRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "expected_names", expected_names);
	serializer.WriteProperty(201, "expected_types", expected_types);
	serializer.WriteProperty(202, "values", values);
}

unique_ptr<TableRef> ExpressionListRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<ExpressionListRef>(new ExpressionListRef());
	deserializer.ReadProperty(200, "expected_names", result->expected_names);
	deserializer.ReadProperty(201, "expected_types", result->expected_types);
	deserializer.ReadProperty(202, "values", result->values);
	return std::move(result);
}

void JoinRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "left", left);
	serializer.WriteProperty(201, "right", right);
	serializer.WritePropertyWithDefault(202, "condition", condition, unique_ptr<ParsedExpression>());
	serializer.WriteProperty(203, "join_type", type);
	serializer.WriteProperty(204, "ref_type", ref_type);
	serializer.WriteProperty(205, "using_columns", using_columns);
}

unique_ptr<TableRef> JoinRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<JoinRef>(new JoinRef());
	deserializer.ReadProperty(200, "left", result->left);
	deserializer.ReadProperty(201, "right", result->right);
	deserializer.ReadPropertyWithDefault(202, "condition", result->condition, unique_ptr<ParsedExpression>());
	deserializer.ReadProperty(203, "join_type", result->type);
	deserializer.ReadProperty(204, "ref_type", result->ref_type);
	deserializer.ReadProperty(205, "using_columns", result->using_columns);
	return std::move(result);
}

void PivotRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "source", source);
	serializer.WriteProperty(201, "aggregates", aggregates);
	serializer.WriteProperty(202, "unpivot_names", unpivot_names);
	serializer.WriteProperty(203, "pivots", pivots);
	serializer.WriteProperty(204, "groups", groups);
	serializer.WriteProperty(205, "column_name_alias", column_name_alias);
	serializer.WriteProperty(206, "include_nulls", include_nulls);
}

unique_ptr<TableRef> PivotRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<PivotRef>(new PivotRef());
	deserializer.ReadProperty(200, "source", result->source);
	deserializer.ReadProperty(201, "aggregates", result->aggregates);
	deserializer.ReadProperty(202, "unpivot_names", result->unpivot_names);
	deserializer.ReadProperty(203, "pivots", result->pivots);
	deserializer.ReadProperty(204, "groups", result->groups);
	deserializer.ReadProperty(205, "column_name_alias", result->column_name_alias);
	deserializer.ReadProperty(206, "include_nulls", result->include_nulls);
	return std::move(result);
}

void SubqueryRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "subquery", subquery);
	serializer.WriteProperty(201, "column_name_alias", column_name_alias);
}

unique_ptr<TableRef> SubqueryRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<SubqueryRef>(new SubqueryRef());
	deserializer.ReadProperty(200, "subquery", result->subquery);
	deserializer.ReadProperty(201, "column_name_alias", result->column_name_alias);
	return std::move(result);
}

void TableFunctionRef::Serialize(Serializer &serializer) const {
	TableRef::Serialize(serializer);
	serializer.WriteProperty(200, "function", function);
	serializer.WriteProperty(201, "column_name_alias", column_name_alias);
}

unique_ptr<TableRef> TableFunctionRef::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<TableFunctionRef>(new TableFunctionRef());
	deserializer.ReadProperty(200, "function", result->function);
	deserializer.ReadProperty(201, "column_name_alias", result->column_name_alias);
	return std::move(result);
}

} // namespace duckdb

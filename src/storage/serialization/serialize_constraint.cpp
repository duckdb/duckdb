//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/serializer.hpp"
#include "duckdb/common/serializer/deserializer.hpp"
#include "duckdb/parser/constraints/list.hpp"

namespace duckdb {

void Constraint::Serialize(Serializer &serializer) const {
	serializer.WriteProperty(100, "type", type);
}

unique_ptr<Constraint> Constraint::Deserialize(Deserializer &deserializer) {
	auto type = deserializer.ReadProperty<ConstraintType>(100, "type");
	unique_ptr<Constraint> result;
	switch (type) {
	case ConstraintType::CHECK:
		result = CheckConstraint::Deserialize(deserializer);
		break;
	case ConstraintType::FOREIGN_KEY:
		result = ForeignKeyConstraint::Deserialize(deserializer);
		break;
	case ConstraintType::NOT_NULL:
		result = NotNullConstraint::Deserialize(deserializer);
		break;
	case ConstraintType::UNIQUE:
		result = UniqueConstraint::Deserialize(deserializer);
		break;
	default:
		throw SerializationException("Unsupported type for deserialization of Constraint!");
	}
	return result;
}

void CheckConstraint::Serialize(Serializer &serializer) const {
	Constraint::Serialize(serializer);
	serializer.WriteProperty(200, "expression", expression);
}

unique_ptr<Constraint> CheckConstraint::Deserialize(Deserializer &deserializer) {
	auto expression = deserializer.ReadProperty<unique_ptr<ParsedExpression>>(200, "expression");
	auto result = duckdb::unique_ptr<CheckConstraint>(new CheckConstraint(std::move(expression)));
	return std::move(result);
}

void ForeignKeyConstraint::Serialize(Serializer &serializer) const {
	Constraint::Serialize(serializer);
	serializer.WriteProperty(200, "pk_columns", pk_columns);
	serializer.WriteProperty(201, "fk_columns", fk_columns);
	serializer.WriteProperty(202, "fk_type", info.type);
	serializer.WriteProperty(203, "schema", info.schema);
	serializer.WriteProperty(204, "table", info.table);
	serializer.WriteProperty(205, "pk_keys", info.pk_keys);
	serializer.WriteProperty(206, "fk_keys", info.fk_keys);
}

unique_ptr<Constraint> ForeignKeyConstraint::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<ForeignKeyConstraint>(new ForeignKeyConstraint());
	deserializer.ReadProperty(200, "pk_columns", result->pk_columns);
	deserializer.ReadProperty(201, "fk_columns", result->fk_columns);
	deserializer.ReadProperty(202, "fk_type", result->info.type);
	deserializer.ReadProperty(203, "schema", result->info.schema);
	deserializer.ReadProperty(204, "table", result->info.table);
	deserializer.ReadProperty(205, "pk_keys", result->info.pk_keys);
	deserializer.ReadProperty(206, "fk_keys", result->info.fk_keys);
	return std::move(result);
}

void NotNullConstraint::Serialize(Serializer &serializer) const {
	Constraint::Serialize(serializer);
	serializer.WriteProperty(200, "index", index);
}

unique_ptr<Constraint> NotNullConstraint::Deserialize(Deserializer &deserializer) {
	auto index = deserializer.ReadProperty<LogicalIndex>(200, "index");
	auto result = duckdb::unique_ptr<NotNullConstraint>(new NotNullConstraint(index));
	return std::move(result);
}

void UniqueConstraint::Serialize(Serializer &serializer) const {
	Constraint::Serialize(serializer);
	serializer.WriteProperty(200, "is_primary_key", is_primary_key);
	serializer.WriteProperty(201, "index", index);
	serializer.WriteProperty(202, "columns", columns);
}

unique_ptr<Constraint> UniqueConstraint::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<UniqueConstraint>(new UniqueConstraint());
	deserializer.ReadProperty(200, "is_primary_key", result->is_primary_key);
	deserializer.ReadProperty(201, "index", result->index);
	deserializer.ReadProperty(202, "columns", result->columns);
	return std::move(result);
}

} // namespace duckdb

/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 242 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    POWER_OF = 270,
    LAMBDA_ARROW = 271,
    DOUBLE_ARROW = 272,
    LESS_EQUALS = 273,
    GREATER_EQUALS = 274,
    NOT_EQUALS = 275,
    ABORT_P = 276,
    ABSOLUTE_P = 277,
    ACCESS = 278,
    ACTION = 279,
    ADD_P = 280,
    ADMIN = 281,
    AFTER = 282,
    AGGREGATE = 283,
    ALL = 284,
    ALSO = 285,
    ALTER = 286,
    ALWAYS = 287,
    ANALYSE = 288,
    ANALYZE = 289,
    AND = 290,
    ANY = 291,
    ARRAY = 292,
    AS = 293,
    ASC_P = 294,
    ASSERTION = 295,
    ASSIGNMENT = 296,
    ASYMMETRIC = 297,
    AT = 298,
    ATTACH = 299,
    ATTRIBUTE = 300,
    AUTHORIZATION = 301,
    BACKWARD = 302,
    BEFORE = 303,
    BEGIN_P = 304,
    BETWEEN = 305,
    BIGINT = 306,
    BINARY = 307,
    BIT = 308,
    BOOLEAN_P = 309,
    BOTH = 310,
    BY = 311,
    CACHE = 312,
    CALL_P = 313,
    CALLED = 314,
    CASCADE = 315,
    CASCADED = 316,
    CASE = 317,
    CAST = 318,
    CATALOG_P = 319,
    CHAIN = 320,
    CHAR_P = 321,
    CHARACTER = 322,
    CHARACTERISTICS = 323,
    CHECK_P = 324,
    CHECKPOINT = 325,
    CLASS = 326,
    CLOSE = 327,
    CLUSTER = 328,
    COALESCE = 329,
    COLLATE = 330,
    COLLATION = 331,
    COLUMN = 332,
    COLUMNS = 333,
    COMMENT = 334,
    COMMENTS = 335,
    COMMIT = 336,
    COMMITTED = 337,
    COMPRESSION = 338,
    CONCURRENTLY = 339,
    CONFIGURATION = 340,
    CONFLICT = 341,
    CONNECTION = 342,
    CONSTRAINT = 343,
    CONSTRAINTS = 344,
    CONTENT_P = 345,
    CONTINUE_P = 346,
    CONVERSION_P = 347,
    COPY = 348,
    COST = 349,
    CREATE_P = 350,
    CROSS = 351,
    CSV = 352,
    CUBE = 353,
    CURRENT_P = 354,
    CURRENT_CATALOG = 355,
    CURRENT_DATE = 356,
    CURRENT_ROLE = 357,
    CURRENT_SCHEMA = 358,
    CURRENT_TIME = 359,
    CURRENT_TIMESTAMP = 360,
    CURRENT_USER = 361,
    CURSOR = 362,
    CYCLE = 363,
    DATA_P = 364,
    DATABASE = 365,
    DAY_P = 366,
    DAYS_P = 367,
    DEALLOCATE = 368,
    DEC = 369,
    DECIMAL_P = 370,
    DECLARE = 371,
    DEFAULT = 372,
    DEFAULTS = 373,
    DEFERRABLE = 374,
    DEFERRED = 375,
    DEFINER = 376,
    DELETE_P = 377,
    DELIMITER = 378,
    DELIMITERS = 379,
    DEPENDS = 380,
    DESC_P = 381,
    DESCRIBE = 382,
    DETACH = 383,
    DICTIONARY = 384,
    DISABLE_P = 385,
    DISCARD = 386,
    DISTINCT = 387,
    DO = 388,
    DOCUMENT_P = 389,
    DOMAIN_P = 390,
    DOUBLE_P = 391,
    DROP = 392,
    EACH = 393,
    ELSE = 394,
    ENABLE_P = 395,
    ENCODING = 396,
    ENCRYPTED = 397,
    END_P = 398,
    ENUM_P = 399,
    ESCAPE = 400,
    EVENT = 401,
    EXCEPT = 402,
    EXCLUDE = 403,
    EXCLUDING = 404,
    EXCLUSIVE = 405,
    EXECUTE = 406,
    EXISTS = 407,
    EXPLAIN = 408,
    EXPORT_P = 409,
    EXPORT_STATE = 410,
    EXTENSION = 411,
    EXTERNAL = 412,
    EXTRACT = 413,
    FALSE_P = 414,
    FAMILY = 415,
    FETCH = 416,
    FILTER = 417,
    FIRST_P = 418,
    FLOAT_P = 419,
    FOLLOWING = 420,
    FOR = 421,
    FORCE = 422,
    FOREIGN = 423,
    FORWARD = 424,
    FREEZE = 425,
    FROM = 426,
    FULL = 427,
    FUNCTION = 428,
    FUNCTIONS = 429,
    GENERATED = 430,
    GLOB = 431,
    GLOBAL = 432,
    GRANT = 433,
    GRANTED = 434,
    GROUP_P = 435,
    GROUPING = 436,
    GROUPING_ID = 437,
    HANDLER = 438,
    HAVING = 439,
    HEADER_P = 440,
    HOLD = 441,
    HOUR_P = 442,
    HOURS_P = 443,
    IDENTITY_P = 444,
    IF_P = 445,
    IGNORE_P = 446,
    ILIKE = 447,
    IMMEDIATE = 448,
    IMMUTABLE = 449,
    IMPLICIT_P = 450,
    IMPORT_P = 451,
    IN_P = 452,
    INCLUDING = 453,
    INCREMENT = 454,
    INDEX = 455,
    INDEXES = 456,
    INHERIT = 457,
    INHERITS = 458,
    INITIALLY = 459,
    INLINE_P = 460,
    INNER_P = 461,
    INOUT = 462,
    INPUT_P = 463,
    INSENSITIVE = 464,
    INSERT = 465,
    INSTALL = 466,
    INSTEAD = 467,
    INT_P = 468,
    INTEGER = 469,
    INTERSECT = 470,
    INTERVAL = 471,
    INTO = 472,
    INVOKER = 473,
    IS = 474,
    ISNULL = 475,
    ISOLATION = 476,
    JOIN = 477,
    JSON = 478,
    KEY = 479,
    LABEL = 480,
    LANGUAGE = 481,
    LARGE_P = 482,
    LAST_P = 483,
    LATERAL_P = 484,
    LEADING = 485,
    LEAKPROOF = 486,
    LEFT = 487,
    LEVEL = 488,
    LIKE = 489,
    LIMIT = 490,
    LISTEN = 491,
    LOAD = 492,
    LOCAL = 493,
    LOCALTIME = 494,
    LOCALTIMESTAMP = 495,
    LOCATION = 496,
    LOCK_P = 497,
    LOCKED = 498,
    LOGGED = 499,
    MACRO = 500,
    MAP = 501,
    MAPPING = 502,
    MATCH = 503,
    MATERIALIZED = 504,
    MAXVALUE = 505,
    METHOD = 506,
    MICROSECOND_P = 507,
    MICROSECONDS_P = 508,
    MILLISECOND_P = 509,
    MILLISECONDS_P = 510,
    MINUTE_P = 511,
    MINUTES_P = 512,
    MINVALUE = 513,
    MODE = 514,
    MONTH_P = 515,
    MONTHS_P = 516,
    MOVE = 517,
    NAME_P = 518,
    NAMES = 519,
    NATIONAL = 520,
    NATURAL = 521,
    NCHAR = 522,
    NEW = 523,
    NEXT = 524,
    NO = 525,
    NONE = 526,
    NOT = 527,
    NOTHING = 528,
    NOTIFY = 529,
    NOTNULL = 530,
    NOWAIT = 531,
    NULL_P = 532,
    NULLIF = 533,
    NULLS_P = 534,
    NUMERIC = 535,
    OBJECT_P = 536,
    OF = 537,
    OFF = 538,
    OFFSET = 539,
    OIDS = 540,
    OLD = 541,
    ON = 542,
    ONLY = 543,
    OPERATOR = 544,
    OPTION = 545,
    OPTIONS = 546,
    OR = 547,
    ORDER = 548,
    ORDINALITY = 549,
    OUT_P = 550,
    OUTER_P = 551,
    OVER = 552,
    OVERLAPS = 553,
    OVERLAY = 554,
    OVERRIDING = 555,
    OWNED = 556,
    OWNER = 557,
    PARALLEL = 558,
    PARSER = 559,
    PARTIAL = 560,
    PARTITION = 561,
    PASSING = 562,
    PASSWORD = 563,
    PERCENT = 564,
    PLACING = 565,
    PLANS = 566,
    POLICY = 567,
    POSITION = 568,
    POSITIONAL = 569,
    PRAGMA_P = 570,
    PRECEDING = 571,
    PRECISION = 572,
    PREPARE = 573,
    PREPARED = 574,
    PRESERVE = 575,
    PRIMARY = 576,
    PRIOR = 577,
    PRIVILEGES = 578,
    PROCEDURAL = 579,
    PROCEDURE = 580,
    PROGRAM = 581,
    PUBLICATION = 582,
    QUALIFY = 583,
    QUOTE = 584,
    RANGE = 585,
    READ_P = 586,
    REAL = 587,
    REASSIGN = 588,
    RECHECK = 589,
    RECURSIVE = 590,
    REF = 591,
    REFERENCES = 592,
    REFERENCING = 593,
    REFRESH = 594,
    REINDEX = 595,
    RELATIVE_P = 596,
    RELEASE = 597,
    RENAME = 598,
    REPEATABLE = 599,
    REPLACE = 600,
    REPLICA = 601,
    RESET = 602,
    RESPECT_P = 603,
    RESTART = 604,
    RESTRICT = 605,
    RETURNING = 606,
    RETURNS = 607,
    REVOKE = 608,
    RIGHT = 609,
    ROLE = 610,
    ROLLBACK = 611,
    ROLLUP = 612,
    ROW = 613,
    ROWS = 614,
    RULE = 615,
    SAMPLE = 616,
    SAVEPOINT = 617,
    SCHEMA = 618,
    SCHEMAS = 619,
    SCROLL = 620,
    SEARCH = 621,
    SECOND_P = 622,
    SECONDS_P = 623,
    SECURITY = 624,
    SELECT = 625,
    SEQUENCE = 626,
    SEQUENCES = 627,
    SERIALIZABLE = 628,
    SERVER = 629,
    SESSION = 630,
    SESSION_USER = 631,
    SET = 632,
    SETOF = 633,
    SETS = 634,
    SHARE = 635,
    SHOW = 636,
    SIMILAR = 637,
    SIMPLE = 638,
    SKIP = 639,
    SMALLINT = 640,
    SNAPSHOT = 641,
    SOME = 642,
    SQL_P = 643,
    STABLE = 644,
    STANDALONE_P = 645,
    START = 646,
    STATEMENT = 647,
    STATISTICS = 648,
    STDIN = 649,
    STDOUT = 650,
    STORAGE = 651,
    STORED = 652,
    STRICT_P = 653,
    STRIP_P = 654,
    STRUCT = 655,
    SUBSCRIPTION = 656,
    SUBSTRING = 657,
    SUMMARIZE = 658,
    SYMMETRIC = 659,
    SYSID = 660,
    SYSTEM_P = 661,
    TABLE = 662,
    TABLES = 663,
    TABLESAMPLE = 664,
    TABLESPACE = 665,
    TEMP = 666,
    TEMPLATE = 667,
    TEMPORARY = 668,
    TEXT_P = 669,
    THEN = 670,
    TIME = 671,
    TIMESTAMP = 672,
    TO = 673,
    TRAILING = 674,
    TRANSACTION = 675,
    TRANSFORM = 676,
    TREAT = 677,
    TRIGGER = 678,
    TRIM = 679,
    TRUE_P = 680,
    TRUNCATE = 681,
    TRUSTED = 682,
    TRY_CAST = 683,
    TYPE_P = 684,
    TYPES_P = 685,
    UNBOUNDED = 686,
    UNCOMMITTED = 687,
    UNENCRYPTED = 688,
    UNION = 689,
    UNIQUE = 690,
    UNKNOWN = 691,
    UNLISTEN = 692,
    UNLOGGED = 693,
    UNTIL = 694,
    UPDATE = 695,
    USE_P = 696,
    USER = 697,
    USING = 698,
    VACUUM = 699,
    VALID = 700,
    VALIDATE = 701,
    VALIDATOR = 702,
    VALUE_P = 703,
    VALUES = 704,
    VARCHAR = 705,
    VARIADIC = 706,
    VARYING = 707,
    VERBOSE = 708,
    VERSION_P = 709,
    VIEW = 710,
    VIEWS = 711,
    VIRTUAL = 712,
    VOLATILE = 713,
    WHEN = 714,
    WHERE = 715,
    WHITESPACE_P = 716,
    WINDOW = 717,
    WITH = 718,
    WITHIN = 719,
    WITHOUT = 720,
    WORK = 721,
    WRAPPER = 722,
    WRITE_P = 723,
    XML_P = 724,
    XMLATTRIBUTES = 725,
    XMLCONCAT = 726,
    XMLELEMENT = 727,
    XMLEXISTS = 728,
    XMLFOREST = 729,
    XMLNAMESPACES = 730,
    XMLPARSE = 731,
    XMLPI = 732,
    XMLROOT = 733,
    XMLSERIALIZE = 734,
    XMLTABLE = 735,
    YEAR_P = 736,
    YEARS_P = 737,
    YES_P = 738,
    ZONE = 739,
    NOT_LA = 740,
    NULLS_LA = 741,
    WITH_LA = 742,
    POSTFIXOP = 743,
    UMINUS = 744
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGOnConflictActionAlias onconflictshorthand;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 830 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  692
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   61782

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  512
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  412
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1983
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3263

#define YYUNDEFTOK  2
#define YYMAXUTOK   744


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   506,   507,   496,     2,     2,
     501,   502,   494,   492,   505,   493,   503,   495,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   511,   504,
     488,   490,   489,   508,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   499,     2,   500,   497,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   509,     2,   510,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   491,   498
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   483,   483,   499,   511,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   559,     1,    30,    53,    54,    59,    63,
      68,    72,    80,    81,    85,    86,    91,    92,    96,    97,
     102,   103,   104,   105,   106,   111,   119,   123,   128,   129,
     134,   138,   143,   147,   151,   155,   159,   163,   167,   171,
     175,   179,   183,   187,   191,   195,   199,   203,   211,   217,
     218,   219,   224,   228,     2,     7,    15,    26,    27,    34,
       6,    47,    48,    52,    53,    68,    69,    76,    84,    92,
     100,   108,   116,   127,   128,   155,   160,   168,   184,   201,
     218,   235,   236,   255,   259,   263,   267,   284,   291,   298,
     308,   309,   312,   324,   335,   343,   348,   353,   358,   363,
     371,   379,   384,   389,   396,   397,   401,   402,   403,   407,
     414,   415,   419,   420,   424,   425,   426,   430,   431,   435,
     436,   446,   459,   460,   463,   472,   483,   484,   485,   488,
     489,   490,   494,   495,   496,   497,   501,   502,   506,   508,
     524,   526,   531,   534,   542,   546,   550,   554,   558,   562,
     569,   574,   581,   582,   586,   591,   595,   599,   607,   614,
     615,   620,   621,   625,   626,   631,   633,   635,   640,   660,
     661,   663,   668,   669,   673,   674,   677,   678,   703,   704,
     709,   714,   718,   719,   723,   724,   728,   729,   730,   731,
     732,   736,   749,   756,   763,   770,   771,   775,   776,   780,
     781,   785,   786,   790,   791,   795,   796,   800,   811,   812,
     813,   814,   818,   819,   824,   825,   826,   835,   841,   850,
     851,   864,   865,   869,   870,   874,   875,   881,   887,   895,
     904,   912,   921,   930,   934,   961,   965,   978,   992,  1007,
    1019,  1032,  1048,  1054,  1059,  1065,  1072,  1073,  1081,  1085,
    1089,  1095,  1102,  1107,  1108,  1109,  1110,  1114,  1115,  1127,
    1128,  1133,  1140,  1147,  1154,  1186,  1197,  1210,  1215,  1216,
    1219,  1220,  1223,  1224,  1229,  1230,  1235,  1239,  1245,  1266,
    1274,  1287,  1290,  1294,  1294,  1297,  1298,  1300,  1305,  1312,
    1317,  1323,  1328,  1334,  1340,  1346,  1355,  1357,  1360,  1364,
    1365,  1366,  1367,  1368,  1369,  1374,  1394,  1395,  1396,  1397,
    1408,  1422,  1423,  1429,  1434,  1439,  1444,  1449,  1454,  1459,
    1464,  1470,  1476,  1482,  1489,  1511,  1520,  1524,  1532,  1536,
    1544,  1556,  1577,  1581,  1587,  1591,  1604,  1612,  1622,  1624,
    1626,  1628,  1630,  1632,  1637,  1638,  1645,  1654,  1662,  1671,
    1682,  1690,  1691,  1692,  1696,  1696,  1699,  1699,  1702,  1702,
    1705,  1705,  1708,  1708,  1711,  1711,  1714,  1714,  1717,  1717,
    1720,  1722,  1724,  1726,  1728,  1730,  1732,  1734,  1736,  1741,
    1746,  1752,  1759,  1764,  1770,  1776,  1807,  1809,  1811,  1819,
    1834,  1836,  1838,  1840,  1842,  1844,  1846,  1848,  1850,  1852,
    1854,  1856,  1858,  1860,  1862,  1865,  1867,  1869,  1872,  1874,
    1876,  1878,  1880,  1885,  1890,  1897,  1902,  1909,  1914,  1921,
    1926,  1934,  1942,  1950,  1958,  1976,  1984,  1992,  2000,  2008,
    2016,  2024,  2028,  2044,  2052,  2060,  2068,  2076,  2084,  2092,
    2096,  2100,  2104,  2108,  2116,  2124,  2132,  2140,  2160,  2182,
    2193,  2200,  2214,  2223,  2242,  2244,  2246,  2248,  2250,  2252,
    2254,  2256,  2258,  2260,  2262,  2264,  2266,  2268,  2270,  2272,
    2274,  2276,  2278,  2280,  2282,  2286,  2290,  2294,  2308,  2309,
    2310,  2317,  2329,  2333,  2337,  2341,  2344,  2355,  2360,  2362,
    2373,  2397,  2408,  2419,  2423,  2430,  2434,  2439,  2444,  2448,
    2455,  2463,  2471,  2482,  2490,  2518,  2554,  2565,  2566,  2573,
    2579,  2583,  2587,  2591,  2595,  2599,  2603,  2607,  2611,  2615,
    2619,  2623,  2627,  2631,  2635,  2639,  2641,  2643,  2647,  2656,
    2661,  2668,  2683,  2690,  2694,  2698,  2702,  2706,  2716,  2725,
    2747,  2748,  2752,  2753,  2754,  2758,  2759,  2766,  2767,  2771,
    2772,  2777,  2785,  2787,  2801,  2804,  2831,  2832,  2835,  2836,
    2847,  2853,  2860,  2869,  2886,  2931,  2939,  2947,  2955,  2963,
    2984,  2985,  2988,  2989,  2993,  3003,  3004,  3008,  3009,  3013,
    3014,  3015,  3018,  3019,  3022,  3023,  3024,  3025,  3026,  3027,
    3028,  3029,  3030,  3031,  3032,  3033,  3034,  3037,  3039,  3044,
    3046,  3051,  3053,  3055,  3057,  3059,  3061,  3063,  3065,  3079,
    3081,  3085,  3089,  3096,  3101,  3108,  3113,  3121,  3125,  3131,
    3135,  3144,  3155,  3156,  3160,  3164,  3171,  3172,  3173,  3174,
    3175,  3176,  3177,  3178,  3179,  3180,  3190,  3194,  3201,  3208,
    3209,  3225,  3229,  3234,  3238,  3253,  3258,  3262,  3265,  3268,
    3269,  3270,  3273,  3280,  3290,  3304,  3305,  3309,  3320,  3321,
    3324,  3325,  3328,  3332,  3339,  3343,  3351,  3362,  3363,  3367,
    3368,  3372,  3373,  3376,  3377,  3387,  3388,  3392,  3393,  3397,
    3398,  3401,  3417,  3425,  3433,  3448,  3466,  3467,  3470,  3471,
    3474,  3478,  3479,  3483,  3484,  3487,  3488,  3489,  3499,  3500,
    3511,  3515,  3543,  3545,  3551,  3552,  3555,  3557,  3567,  3570,
    3581,  3585,  3589,  3601,  3605,  3614,  3621,  3659,  3663,  3667,
    3671,  3675,  3679,  3683,  3689,  3690,  3706,  3707,  3708,  3711,
    3712,  3718,  3719,  3720,  3723,  3724,  3725,  3728,  3729,  3730,
    3733,  3734,  3737,  3739,  3744,  3745,  3748,  3756,  3757,  3758,
    3759,  3762,  3763,  3766,     7,    14,    22,    11,    24,    37,
      54,    55,    56,    61,     3,    10,    17,    24,    31,    38,
      45,    52,    61,    61,    63,    64,    68,    69,     9,    17,
      29,    30,    34,    35,    36,    41,    42,    43,    48,    52,
      56,    60,    64,    68,    72,    76,    80,    84,    88,    92,
      97,   101,   105,   112,   113,   117,   118,   119,     7,    13,
      19,    25,     7,    21,    36,    56,    57,    84,    85,    86,
      87,    88,    89,    93,    94,    99,   104,   105,   106,   107,
     108,   113,   120,   121,   122,   139,   146,   153,   163,   173,
     185,   193,   202,   220,   221,   225,   226,   230,   239,   262,
     276,   283,   288,   290,   292,   294,   297,   300,   301,   302,
     303,   308,   312,   313,   318,   325,   330,   331,   332,   333,
     334,   335,   336,   337,   343,   344,   348,   353,   360,   367,
     374,   386,   387,   388,   389,   393,   398,   399,   400,   405,
     410,   411,   412,   413,   414,   415,   420,   440,   469,   470,
     474,   478,   479,   480,   484,   488,   496,   497,   502,   503,
     504,   508,   516,   517,   522,   523,   527,   532,   536,   540,
     545,   553,   554,   558,   559,   563,   564,   570,   581,   594,
     608,   622,   636,   650,   673,   677,   684,   688,   696,   701,
     708,   718,   719,   720,   721,   722,   729,   736,   737,   742,
     743,     7,    18,    25,    34,    35,    39,    40,     7,    14,
      31,    51,    52,     7,    26,    54,    61,    66,    67,    68,
      69,     9,    16,    26,    33,    44,    45,    50,    51,    52,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      90,    91,    92,    97,    98,   103,   107,   115,   116,   121,
     122,   123,   129,   134,   142,   143,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   115,   116,   117,   118,   119,   120,   125,   126,
     131,   132,   133,   138,   139,   140,   143,   144,     7,    16,
      25,    46,    47,    50,    54,     9,    15,    22,    28,    34,
      41,    48,    59,     9,    18,    27,    36,    45,    54,    63,
      72,    85,    87,    93,    94,    99,   103,   107,   118,   126,
     130,   139,   148,   157,   166,   175,   184,   192,   200,   209,
     218,   227,   236,   253,   262,   271,   280,   290,   303,   318,
     327,   335,   350,   358,   368,   378,   385,   392,   400,   407,
     418,   419,   424,   428,   433,   438,   446,   447,   452,   456,
     457,   458,     2,     9,    15,    21,    28,    35,    45,    46,
      47,     6,    15,    25,    35,    45,    55,    65,    75,    85,
      95,   106,   117,   127,   140,   141,     7,    18,    19,    23,
      24,    25,    26,     8,    22,    36,    48,    56,    70,    71,
      72,    73,    74,    87,    88,    93,    94,    98,    99,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     7,    19,    33,     7,    18,    31,    35,    42,
      53,    54,    60,    61,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    10,    16,    22,    28,    38,    39,    47,
      58,    70,    78,    86,    93,   103,   105,   111,   115,   119,
     134,   141,   142,   143,   147,   148,     5,    12,    22,    23,
       7,    14,    20,    28,    29,     9,    19,    32,    33,     8,
      20,    33,    46,    58,    70,    86,    87,    91,    95,     2,
       7,    16,    25,    34,    43,    52,     7,     9,    23,    29,
      36,    42,    49,    59,    63,    72,    81,    90,    97,    98,
     103,   115,   120,   145,   150,   155,   161,   171,   181,   187,
     198,   209,   224,   225,   231,   232,   237,   238,   244,   245,
     249,   250,   255,   257,   263,   264,   268,   269,   272,   273,
     278,     9,    19,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY",
  "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA",
  "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC",
  "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED",
  "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P",
  "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT",
  "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM", "VALID",
  "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC",
  "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL",
  "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'",
  "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
  "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','", "'#'", "'$'",
  "'?'", "'{'", "'}'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "CopyStmt", "copy_from", "copy_delimiter", "copy_generic_opt_arg_list",
  "opt_using", "opt_as", "opt_program", "copy_options",
  "copy_generic_opt_arg", "copy_generic_opt_elem", "opt_oids",
  "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "VariableResetStmt", "generic_reset",
  "reset_rest", "CallStmt", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "with_clause", "cte_list", "common_table_expr", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "joined_table", "alias_clause", "opt_alias_clause", "func_alias_clause",
  "join_type", "join_outer", "join_qual", "relation_expr", "func_table",
  "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
  "where_clause", "TableFuncElementList", "TableFuncElement",
  "opt_collate_clause", "colid_type_list", "RowOrStruct", "opt_Typename",
  "Typename", "opt_array_bounds", "SimpleTypename", "ConstTypename",
  "GenericType", "opt_type_modifiers", "Numeric", "opt_float", "Bit",
  "ConstBit", "BitWithLength", "BitWithoutLength", "Character",
  "ConstCharacter", "CharacterWithLength", "CharacterWithoutLength",
  "character", "opt_varying", "ConstDatetime", "ConstInterval",
  "opt_timezone", "year_keyword", "month_keyword", "day_keyword",
  "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "PragmaStmt",
  "CreateAsStmt", "opt_with_data", "create_as_target", "VariableShowStmt",
  "show_or_describe", "var_name", "table_id", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "DeallocateStmt", "CreateStmt", "ConstraintAttributeSpec", "def_arg",
  "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
  "ColConstraint", "ColConstraintElem", "GeneratedColumnType",
  "opt_GeneratedColumnType", "GeneratedConstraintElem",
  "generic_option_elem", "key_update", "key_actions", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "columnDef", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "columnList_opt_comma", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "ExecuteStmt", "execute_param_clause",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "type_name_list", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "CreateDatabaseStmt",
  "opt_extension_name", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "TransactionStmt", "opt_transaction", "RenameStmt", "opt_column",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "IndexStmt", "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "ExportStmt",
  "ImportStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "ViewStmt",
  "opt_check_option", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "CheckPointStmt", "opt_col_id",
  "LoadStmt", "file_name", "CreateSeqStmt", "OptSeqOptList",
  "CreateFunctionStmt", "macro_alias", "param_list", "UseStmt",
  "AlterObjectSchemaStmt", "UpdateStmt", "InsertStmt", "insert_rest",
  "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_or_action", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "AnalyzeStmt",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,    60,    62,
      61,   743,    43,    45,    42,    47,    37,    94,   744,    91,
      93,    40,    41,    46,    59,    44,    35,    36,    63,   123,
     125,    58
};
# endif

#define YYPACT_NINF (-2803)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1912)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    5202,   397,   691, -2803, -2803,   266,   397, 40648, 56494,   397,
      75,   855, 43977, -2803,   295,  7226,   397, 46869, 61281,   328,
     315, 25127,   422, 47351, 47351, 56494, 46869, 47833,   397,   294,
   56976, -2803,   397, 27537, 44459,   -76, 46869,    65,  -131, 48315,
   46869,  1201,   382,   133, -2803, -2803, -2803, -2803, -2803,   136,
   -2803,   123,   141,    52,    70, -2803, -2803, -2803, -2803, 27055,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   252, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803,   169, -2803, -2803, -2803, -2803, 48797, 46869, 49279, 44941,
   49761, -2803,   625, -2803,   152, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803,   178, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803,   192, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803,   195, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   237,  -137,
   -2803,   207, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803,  1201, 46869, -2803, 50243,   742,   765,   477,
   50725, -2803, -2803, 46869, -2803, -2803, -2803,   950,   650,   673,
   -2803, -2803, 45423, -2803, -2803, -2803,   704,   961,   749, -2803,
   -2803, -2803,   601, -2803,   155, -2803, -2803,   628,   615, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803,   715, -2803, 42094,
   -2803, 57458, 51207, 51689, -2803,   587,  1652, 32323, 25609, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803,   252, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, 47351, 56494, 47351,   604,   631,   960,   209,   210,   213,
     220,   647,   671,   221,   685, 26091,   693,   719,   736, 28020,
     751,   757,  1092,   224,   768,   786,   806,   811,   235,  -131,
   24160, 52171, 52171,    32,  1769, -2803, 52171, 52653, -2803,   837,
   -2803,   854,  -137, -2803,   625, -2803, -2803, -2803, -2803,   525,
     851, -2803,   872,  1142, -2803, -2803, -2803,   866, -2803, -2803,
    1133, 11565, 11565, 57940, 57940,   625, 57940,   926,    57, -2803,
   -2803, -2803, -2803,    52, -2803,   883, -2803,  -137, -2803, 44459,
   -2803, -2803,   274,  1255, 16635, 46869,   930, -2803,   944,   930,
     953,   977, -2803,  5202,   362,   362,  1407,   362,   720,   867,
   -2803,   753, -2803,   980, -2803,  1002,  1273, -2803,   883, -2803,
   46869,  1325,  1216, 44459,  1361,   955,  1187,  1380,  5371,  1382,
     962,  1391,  1034,  1509,  8523, 16635, 38238, -2803,  -137,  1068,
    1053,  1302,  1418, -2803, -2803, -2803, -2803,   770,  1306, -2803,
    1555, -2803, -2803,  1141, 53135, 53617, 54099, 54581, 46869,  1530,
   -2803, -2803,  1469, -2803, -2803, -2803,  1157, -2803, -2803, -2803,
     263, -2803, -2803, -2803, -2803,  1174, -2803,  1174,  1174, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,  1131,  1131,
    1318,  1139, -2803, -2803, -2803,  1492, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803,  1145,   981, -2803,  1174,
   -2803,  1131, -2803, -2803, -2803, -2803, -2803, -2803, -2803, 60350,
   -2803, -2803, -2803, -2803,   505,   574, -2803,  1156, -2803, -2803,
   -2803,  1160, -2803,  1628, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803,  1180, -2803,  3095,  1131,   164, -2803, -2803,  1532,
    1184, -2803,   198,  1542,   199, -2803,  1544,  1411, 16635, -2803,
    1354, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803,  -131, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   276,
   -2803, -2803, 35262, -2803, -2803, 32323,  1199,  1285, -2803, -2803,
   16635, 16635,  1206,  1699,  1699,  4043, 52171, 52653,  1699,  1699,
   16635, 46869, -2803, 16635, 20691,  1208, 16635, 16635,  9537, 16635,
   23678, 52171,  1769,  1210, 46869, -2803,  1314,  1223,  1314,   294,
   25127,  1512,  1504,  1435, -2803, 25127,  1435,   205,  1511,  1435,
    1513,  1314, 28502, -2803,  1314,  1235,  1440, -2803, -2803,   756,
   -2803, 35262, 17142, 42561,  1702, -2803,  1516, 56494,  1236, -2803,
   -2803, -2803, -2803, -2803, -2803,   780,  1741,   149,  1749, 16635,
     149,   149,  1257,   241,   241, -2803,  1258, -2803,   243,  1259,
    1261,  1751,  1759,   159,   981,   149, 16635, -2803,   241,  1266,
    1764,  1270,  1767,   127,   135, -2803,   244, 16635, 16635, 16635,
    1626, 16635,  9030,  1770,  1773, -2803, 46869,  -137,  1272,   625,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   162,  5607,
   -2803, -2803,  1316, -2803, -2803, -2803, -2803,  1483, 16635, -2803,
   -2803,  1277,  1512, -2803,   245, -2803, -2803, -2803,   455,  1512,
   -2803, -2803, -2803, -2803, -2803,   280,  1684, 34298, 34780, 56494,
    -137, 58422, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   516,
   -2803,   252, 36725,  1284,  1289,  -137,   930, 46869, 46869,  1748,
   -2803, -2803, -2803, -2803, -2803,    52,    52, 10551,    86,   568,
      50, 12072, 17649,  1631,  1508,   658,   717,  1634, -2803,  1519,
     720,   867, 16635, -2803,  1561,   944, 44459,   234,  1578,  1429,
   46869, 41130,   939,   942,  1310,  1389,  1313,   447,  1725, -2803,
    1319, -2803,  1397, 46869, 60350,   258, -2803,  1762,   258,   258,
     190,  1766,  1402,   126,  1560,   533,  -103,  1739, -2803,  1319,
   44459,   202,   579,  1319, 46869,  1408,   706,  1319, 56494,  1199,
     145, 17142,  1099,  1198,   344,   124,  1281,  1323,   148,   165,
     175,   177,   179, 17142,  1427,  1464,   181,  1470,  1476,  1498,
    1526,  1528,  1552,  1587,  1591,   191,  1593,  1596,  1617,  1625,
    1629,  1635,   194,  1641,   196,  1646,   189,   206, 17142,  1653,
    1326, -2803, 36725,    -5, -2803, -2803,  1657,   208, -2803,  2039,
    1320, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803,  1412, 56494,  1362,  1685,   625, 46869,   983,  1686,  1745,
   43028, 46869,  1564,  1739,  1569,  1342,  1806,  1573,  1053,  1574,
    1348, -2803, -2803, 58904,  1847, -2803, -2803, -2803, -2803, -2803,
   -2803,  1353, -2803, -2803, 16635, -2803, -2803, -2803,  1699, -2803,
   42561, 42561,  1174,  1174, -2803, -2803,  1818,  1441,  1448,  1699,
   -2803,  1699, -2803, 56494, 56494,  1357,  1377,  1699, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803,  1699,  1459, -2803,  1460,  1461,  1462,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, 42561, -2803, 56494,
   38238,  1381, 56494, -2803, 46869, 46869, -2803, 46869, 56494,  1384,
      78, 32323, 40166, -2803, -2803, -2803, -2803,   970,  1063, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, 38238, -2803,
    2703,   625, 35803,  1387, 16635,  1394,  1396, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803,  1399,  1722, -2803, -2803,
   -2803,  1401,  1403,  4500,  1405, 35839,  1410, 20691, 20691,  1123,
   -2803, -2803, 20691,  1413, 39202, 35754,  1415,  1414, 35884, 12579,
   16635, 12579, 12579, 36295, -2803,  1416, 36374, 52171,  1398, 45905,
   -2803, -2803, 46869, -2803, 11565, 11565,  1769, 46387,  1444, 25127,
   -2803, -2803,  1479, -2803, 25127,  1691, 25127, -2803, 25127, -2803,
   46869,  1422, -2803, 46869, -2803, -2803, -2803, -2803,  1420,   605,
   -2803,   616,   812, -2803, -2803, 16635, 16635, -2803, 36725,  1468,
     147, -2803, 37154, 30915, 13086, 37154,  1917,  1917, 28984, -2803,
    1586, 36419, -2803,  1436,  1604,  6439,  1430, -2803, -2803, -2803,
   -2803,  1434,  1433,  1437,  -137, 16635, -2803, 16635,  2224,  2224,
   -2803,   265, 42561, 16635, 16635, 16635, 16635, 16635, 16635, 16635,
   37756,  1524,   174, 56494, 16635, 16635,  1446,  1233, -2803, 16635,
    1672, -2803,  1450, 16635,  1534,   682, 16635, 16635, 16635, 16635,
   16635, 16635, 16635, 16635, 16635, -2803, -2803, 22719,   277,  -137,
    1775,  1788,   -40,   260, 11565,  1785,  8523, -2803,  -137, 32852,
     171,  1785, -2803, -2803, -2803,   247, -2803, -2803, -2803, -2803,
   -2803,  1420, -2803,  1420, -2803, 56494, -2803, 46869,   274, 43495,
   16635, -2803, -2803,  1453,  1457,  1463,  1746, -2803,   329,   329,
    1455, -2803, 35741,  1700,  1746,    52, -2803, -2803, 21198,  1585,
    1753,  1681, -2803, -2803,  1663,  1669, -2803,  1474, 36913, 18156,
   18156, -2803,  1315, 36725,  1317, -2803, -2803, -2803, -2803, -2803,
   -2803,    72, -2803, 46869,   166,  1631,   717,  1478, -2803, -2803,
    1538, -2803, -2803, 46869, 29466,  1052,  1481, 59386, 46869,  1760,
    1711,  1761,   -93, 42561, -2803, -2803, -2803, -2803, 46869, 56494,
   55063, 59868, 38720, 46869, 38238, -2803, -2803, -2803, -2803, 46869,
     478, 46869,  6624, -2803, -2803, -2803,   258, -2803, -2803, -2803,
   -2803, -2803, 56494, 46869, -2803, -2803,   258, 56494, 46869,   258,
   -2803,  1245, 46869, 46869, 46869, 46869,  1286, 46869, 46869, -2803,
   -2803,    16,    16,  1693, -2803, 13593,   226, -2803, 16635, 16635,
   -2803, 16635,  1662, -2803, -2803,   635,  1705,    90, 46869, -2803,
    1822,  1541, 46869, 46869, 46869, 46869,  1733, -2803, -2803, -2803,
   -2803, -2803,  1497, -2803,  1501,  1851,  1739, -2803,  1854, 41612,
     823,   840,  1855,  1547,  1860, 14100,  1976,  1747, -2803, -2803,
    1735, -2803, 16635,  1521,  1529,   164,   657, -2803, -2803,  1527,
    1377,  1546,  1548,  1531,  1551,   683, 42561,   697,  1699,   139,
    1558,  1559,  1417,  1449,    98,  1312, -2803,   198, -2803, 38238,
   -2803,   199, -2803,  1756,   183, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803,   699, 24645, -2803, -2803,  1996,   625,  1996,
     577, -2803, -2803,  1996, -2803,  1988,  1996, -2803,  1199, 42561,
   -2803,  6946, -2803, -2803, -2803, 16635, -2803, -2803, 16635, -2803,
   16635,  1875, -2803,  2037,  2037, 42561, 20691, 20691, 20691, 20691,
   20691,   182,  1266, 20691, 20691, 20691, 20691, 20691, 20691, 20691,
   20691, 20691, 21705,   271, -2803, -2803,   729,  2011, 16635, 16635,
    1898,  1875, 16635, -2803, 42561,  1566, -2803,  1568,  1570, 16635,
   -2803, 42561, -2803, 46869,    35,    10,  1572,  1575, -2803, -2803,
    1582,  1512, -2803,   895,  1036, 46869,  3784,  4673,  5580, -2803,
   -2803, 16635,  1895, -2803, 16635,  1576, -2803, -2803, 25127, -2803,
    1479,   760, -2803, 42561, 46869,   769, 42561, 35262, -2803, 17142,
   -2803, 42561, -2803, -2803, -2803, -2803, -2803,  1583,  1592, 16635,
     212, -2803,  1626,  1595, -2803, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,  1598,
    1590, -2803,  1599, 46869, -2803, 18663, -2803, 56494, -2803, -2803,
   16635, 46869, -2803, 16635,  1600,  7177, -2803, -2803, -2803,   846,
   37031,   260,  6099,  6099,  6099, 37154, -2803, -2803, -2803,  1614,
   -2803, 20691, 20691, -2803,  3545,  3022,  9030, -2803, -2803,  1933,
   -2803,  1466, -2803,  1608, -2803, -2803,  3835, -2803, 30915, 37049,
   16635,   203, -2803, 16635,  1446, 16635,  1687,  6099,  6099,  6099,
     332,   332,   261,   261,   261,   846,   260, -2803, -2803, -2803,
    1610, -2803,  1611,  1615,  1960,  1270, 16635, -2803, -2803, 25127,
    1444,    -5,  1626,  1444,  1699,  2224, -2803,   944, -2803, -2803,
   -2803, 36725, 46869, -2803,   812, -2803, -2803,  1632,  1632, 16635,
    2447,  1632, -2803,  1746,    12,  1829,  1085,  1085,  1315,  1831,
   -2803, -2803,  1682, -2803, -2803, -2803, 16635, 10044,  1324, -2803,
    1331, -2803, -2803, -2803, -2803,  1619, -2803, -2803,  1882, -2803,
   -2803, -2803, -2803, 25127,  1671,  2091,   828, 56494, -2803, -2803,
    1630,  1785,  1644,  1718,  1319, 16635,  1867, -2803,   129,  1639,
    1989,    97,  1943, 56494, -2803,   283,   292, -2803,   901,  1997,
     183,  2000,   183, 38238, 38238, 38238, -2803, -2803,   625,   778,
   -2803, -2803,   415,   799, -2803, -2803, -2803, -2803,  1730,   722,
    1739,  1319, -2803, -2803, -2803, -2803, -2803, -2803, -2803,   240,
     723,  1319,  1743, -2803,  1754, -2803,  1755,   741,  1319, -2803,
   -2803,   226,   226,   226, 17142, -2803,  1880,  1886,  1673, 36725,
   36725, 36725,  1674, -2803,   222, -2803, 56494, -2803, -2803, -2803,
    1662,  2005,   625, 46869,  1677,  2141,  1053,  1348, -2803,  1835,
     842,   134, -2803, 56494, 46869, 46869, 46869, 23210, -2803, -2803,
   -2803,  1679,  1678, -2803,    14,  1899,  1900, 46869,  1723, 46869,
    1313,  2147, 46869, -2803,   817, 14607,  2036, 46869,  1688, -2803,
   -2803, -2803, -2803,  1699, -2803, -2803,   272,   272, -2803, 56494,
   -2803, -2803,  1692, -2803,  1695, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, 56494, -2803, -2803,
   38238, -2803, 39684, -2803, -2803, -2803, -2803,   625, -2803,   625,
    1914, 56494, 33334,   625, 33816,   625, -2803,  1694, -2803, 36725,
    7502, 36725,  1898, -2803,  2037,  2009,  2009,  2009,  2289,  2022,
     262,  1696,  2009,  2009,  2009,   338,   338,   170,   170,   170,
    2037,   271,   837, 39202,  1697, -2803, 36725, 36725, -2803, -2803,
    1701, -2803, -2803, -2803, -2803,  1703,  1706, -2803, -2803, -2803,
   -2803, -2803, 56494,  1091, -2803,  1444,   -76,   -76,   -76,   -76,
   -2803, 46869, 46869, 46869, 36725,  2143,  2017, 36725, 46869, -2803,
   -2803, -2803, 46869,  2127,   844, -2803, -2803, -2803, -2803, -2803,
   36538, 16635, -2803,  2064,  1586, -2803, -2803, 30915, -2803,  1709,
    9030, 36663, -2803,  2015, 31405, -2803, 36725, -2803,  2224, 16635,
    1225,  2229, 16635,  1712, 16635,  2042, -2803, -2803,  1716, -2803,
   -2803, 42561, 16635,  1714,  4432, 20691, 20691,  4937, -2803,  6063,
   16635,  9030, -2803,  1693, 15114, -2803,  1922,  1717, -2803,  1895,
     226,  1586,  1895,  1719, -2803, -2803,  1721,   375, -2803, -2803,
   -2803,  1724, -2803,  1632, -2803, -2803, -2803,  1932, -2803, -2803,
   -2803, 46869, -2803, -2803, 16635,  1873, 56494,  1783,   471, 27537,
   -2803,  1947,   862, -2803,  -137, 29466,  1671, 16635, 46869, 31434,
    2083, -2803, 56494, 56494, 56494, -2803, 56494,  1734,  1736,   227,
    1740,   834, -2803,  1715,   227,  2067,   250,  1313,   126,  3301,
     357, -2803, -2803, -2803,  1814, 46869, -2803, 56494, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, 38720, 30432, 38238, -2803, 38238,
   46869, 46869, 46869, 46869, 46869, 46869, 46869, 46869, 46869, 46869,
    1744,  1750,  1752,  1693, -2803, -2803, -2803, -2803, -2803, -2803,
    -103, -2803, -2803,   222,   625, -2803,  1765, 41612,  1201,  1547,
    2212,  1745,    78, 55545, -2803,  1758,  1757,   868,  1739,  1768,
    2213, -2803,   823, 41612, -2803, -2803, -2803,  2175, -2803,   587,
     154, -2803,  1053, -2803,  1201,  1348, -2803,  1201, 36725, 56494,
    1820, -2803,  1377,  1772, -2803, -2803,  1377, 42561,  1377, -2803,
   -2803,   183, -2803,   869, -2803, -2803, -2803, -2803, 56494,  1763,
   -2803,  1763, -2803, -2803,  1763, -2803, -2803, -2803, -2803, 20691,
    2086,  1774, 42561, -2803, -2803, 46869, -2803, -2803, -2803,   873,
    1776,  1895, 46869, 46869, 46869, 46869, -2803, -2803, -2803, 11058,
   16635,  1799,  1777, -2803, 56494, -2803, -2803, 16635, 36725, -2803,
    1778, -2803, -2803,  6195, -2803,  1779,  1781, 56494, 16635, -2803,
   -2803,   809, 16635, 16635,  3545, -2803, 37279, 16635, 42561,   874,
    3545,   286, 16635,  2418,  3680, 16635, 16635,  6320, 31470,  1786,
   16635, 31499, 29948, -2803, 25127,  2017,  1790, -2803,  2017,   625,
   -2803, -2803, -2803, 30915, -2803, -2803, -2803, 36725, 11565, -2803,
   -2803, -2803, -2803, -2803,  1817, -2803, -2803,   878,  2181,  1873,
    1784, 56494, -2803,  1873, 36725, -2803, -2803, 56494,  1791, -2803,
    1792,   227, -2803, 56494,  1827, -2803,   569,  2075,   111, -2803,
   16635, -2803,  2164,  2247,  1715,  1794, 56494, 46869, 20691, -2803,
     581,   176, -2803,  2078, 46869,  1827,  2220, -2803, -2803, -2803,
     834, -2803,  2116,  2033, -2803,   258, -2803, 16635,   834,  2035,
     278, 56494, -2803, -2803,  2311, -2803, 42561,   183,   183, -2803,
    1810,  1815,  1816,  1819,  1823,  1824,  1826,  1837,  1838,  1839,
    1840,  1842,  1843,  1844, -2803,  1845,  1848,  1853,  1857,  1858,
    1861,  1863,  1866,  1145,  1868, -2803,  1869,  1724,  1870,  1874,
    1877,  1878,  1879, 56027,  1883,  1885,  1889,  1890,  1156,  1892,
    1893,   970,  1063, -2803, -2803, -2803,  1184, -2803, -2803, -2803,
    1894, -2803,  1833, -2803, -2803, -2803,  1907, -2803,  1912, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803,   226,  1199,   108,
   -2803, 56494,  1832,  1723,  2300, 15621,   444,  2082,  1849, -2803,
     625,  1547, -2803, 41612,  1019,   387,  1900, -2803,   204,  1723,
   -2803,  2249,  1547,  1913,  2325, -2803,  2098, 56494,  1888, -2803,
   -2803, -2803, -2803, 39684,  1763,  2938, 20691, 42561,   882,   886,
   -2803,  2361,  2056,  2017, -2803, -2803, -2803, -2803, -2803,  1902,
     370,  1908, -2803,  8016,  1903, -2803, -2803, -2803, -2803, -2803,
   -2803, 36725, 36725, 56494,  2085, -2803, -2803, 36725, -2803, 16635,
   -2803, -2803, 32122,  2225,  3545,  3545, 37279,   891, -2803,  3545,
   16635, 16635,  3545,  3545, 16635, -2803, -2803, 31749, -2803, 60817,
   -2803, -2803,  1799,   625,  1799, -2803,  1916,  1905,  1201,  -137,
    1044, 56494,   -33, -2803, 16635, -2803, -2803,   227, -2803,  2077,
    1827,  1915, -2803, -2803, -2803, -2803, -2803, -2803, 31778, -2803,
      71, 16635, -2803,   829,  2289, -2803, -2803, -2803, -2803,  1827,
    1053, -2803, 46869,  2382,  2270, -2803, -2803, 36725, -2803, -2803,
    1699,  1699, -2803, -2803,  2127, -2803, -2803, -2803, -2803,  1184,
     481, 30432, 46869, 46869,  1921, -2803, -2803,  -103,  2301,   902,
     823, -2803,  1201,  1201, 36725, 46869,  2272, 41612, -2803,  2389,
    1929, 46869,  1723,  1050,  1050, -2803,  2073, -2803,  2076, -2803,
   -2803,  2396,   264, -2803, 16128, 46869, -2803, -2803, 26573, -2803,
    2938,   916, -2803, -2803,  1937,  1939, -2803,  1799, 16635,  1940,
   16635, -2803, 19170,  1941, -2803,  2404, 16635,  2001, -2803, -2803,
   16635, -2803,  3545,  3545,  3545, -2803,  2139, -2803,  2085, -2803,
    2085, -2803, 11565, -2803,   471, -2803, -2803,  2359, 26573,  2316,
   36725, 46869, -2803, 38238, -2803,   227,   -86,  1950, 16635, 31814,
    2177, -2803, -2803,  2204, -2803,  2267, -2803,  2014,   540,  2029,
   -2803, -2803, -2803, -2803,  1199,   625,  1547,  1900,  1913, -2803,
    1958, 46869,  1201,   823,   587, -2803, -2803, -2803, -2803, -2803,
   -2803, -2803, -2803, -2803, -2803, -2803, -2803, -2803,  1201,  2392,
    2173,  2395,  1201, 36725,  1820, 16635,  2398,    74, -2803,   917,
   -2803, -2803,  2462,  2085,  1972, 19170,  1973, -2803, 56494,  1981,
   36725,  2122, -2803, 32372,  2431,  1693,  2001,  2001,  2040, 46869,
     922,    -8,  1053,   227,  1999,   931, -2803, -2803, -2803, -2803,
   -2803,  1739, -2803, 32057,  2221,   140,  2203,  1950, 16635, -2803,
    2063, -2803, -2803, -2803,  2456, -2803, -2803, 41612,  1994,  1913,
    1900,  1723,  1913,  2206, -2803,  2217, -2803,  2010, 32093, 56494,
   56494, 56494,  1547, 26573,  2012,  2001, -2803,  2020, -2803, -2803,
   -2803, 45905, -2803, 16635,    42, -2803, -2803,  1201, -2803,  1444,
   -2803,  2136,  2204, 30432, -2803, 38238,   826,   -86,  2317, -2803,
   -2803, -2803, -2803,   125,  2236, -2803,  2238, -2803, 36725, -2803,
    1201, 41612, -2803, -2803, -2803, -2803, -2803, -2803, 26573,  2398,
   -2803, -2803,   329,   329,  1444, -2803, -2803, -2803, -2803, -2803,
    1415, 19677, 19677,  2024, -2803, -2803, 29466,  2203, -2803, -2803,
   -2803, -2803, -2803,   193,   193,  2408, -2803,  2097, -2803,  1913,
     937, 56494,  1632,  1632, -2803, 22212,  2184,   238, 35790, -2803,
   -2803, -2803, -2803,  1444, -2803, -2803,  2519, -2803,   185, -2803,
   -2803, -2803,  1547,   329, -2803, -2803,  2511, -2803, -2803, -2803,
   -2803, -2803, -2803,   227, -2803, -2803, -2803,  1444,  1632, 20184,
   -2803, -2803, -2803
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1329,  1190,     0,  1058,  1057,   995,  1190,     0,  1289,  1190,
      71,   988,     0,   813,   995,     0,  1190,     0,  1329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1190,   153,
       0,   812,  1190,     0,     0,   145,     0,  1224,     0,     0,
       0,     0,     0,     2,     4,    12,    39,    10,    34,   114,
     101,   158,   113,  1328,   259,   121,    31,    13,    41,   811,
       6,    20,    18,     9,    22,    24,    16,    25,  1016,    23,
      19,    14,     7,    35,    33,    32,    38,    28,    26,    27,
      21,    42,    40,    11,    30,    17,    15,    37,     5,    36,
      29,     0,     8,  1189,  1188,  1182,     0,     0,     0,     0,
       0,   994,     0,  1183,   766,  1363,  1364,  1365,  1366,  1367,
    1368,  1369,  1370,  1371,  1372,  1373,  1374,  1375,  1376,  1377,
    1378,  1724,  1379,  1380,  1381,  1670,  1671,  1725,  1672,  1673,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1674,  1675,
    1390,  1391,  1392,  1393,  1394,  1676,  1726,  1677,  1395,  1396,
    1397,  1398,  1399,  1727,  1400,  1401,  1402,  1403,  1404,  1405,
    1406,  1407,  1408,  1728,  1409,  1410,  1411,  1729,  1730,  1731,
    1732,  1733,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1678,
    1679,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,
    1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,  1680,
    1447,  1448,  1449,  1450,  1451,  1681,  1452,  1453,  1454,  1682,
    1455,  1456,  1457,  1734,  1735,  1458,  1459,  1683,  1737,  1460,
    1461,  1684,  1685,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1738,  1470,  1471,  1472,  1473,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,  1739,  1686,  1481,  1482,  1483,  1484,  1485,
    1687,  1688,  1689,  1486,  1740,  1741,  1487,  1742,  1488,  1489,
    1490,  1491,  1492,  1493,  1494,  1743,  1495,  1744,  1496,  1497,
    1498,  1499,  1500,  1501,  1502,  1503,  1690,  1504,  1505,  1506,
    1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1691,  1746,  1692,  1522,  1523,
    1524,  1693,  1525,  1526,  1747,  1527,  1694,  1528,  1695,  1529,
    1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1696,  1748,
    1538,  1749,  1697,  1539,  1540,  1541,  1542,  1543,  1544,  1545,
    1546,  1547,  1548,  1549,  1550,  1698,  1750,  1551,  1552,  1699,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1700,  1565,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
    1582,  1583,  1751,  1584,  1585,  1586,  1701,  1587,  1588,  1589,
    1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,  1598,  1599,
    1600,  1601,  1602,  1752,  1603,  1702,  1604,  1605,  1606,  1753,
    1607,  1608,  1703,  1609,  1610,  1611,  1612,  1613,  1614,  1615,
    1616,  1617,  1618,  1619,  1620,  1621,  1704,  1622,  1705,  1623,
    1624,  1625,  1626,  1755,  1627,  1628,  1629,  1630,  1631,  1706,
    1707,  1632,  1633,  1708,  1634,  1709,  1635,  1636,  1710,  1637,
    1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
    1756,  1648,  1649,  1650,  1651,  1652,  1711,  1712,  1653,  1757,
    1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
    1664,  1665,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
    1721,  1722,  1723,  1666,  1667,  1668,  1669,   100,     0,     0,
     748,   767,   768,   776,   766,  1683,  1690,  1704,  1288,  1287,
     767,  1185,    70,     0,     0,   765,     0,     0,     0,     0,
       0,   982,   981,     0,  1240,   987,  1122,     0,     0,     0,
     770,   850,  1553,   848,   769,   746,   994,     0,     0,  1084,
    1085,  1075,     0,  1094,     0,  1077,  1082,  1078,     0,  1103,
    1096,  1104,  1086,  1076,  1097,  1087,  1074,     0,  1105,     0,
    1080,     0,     0,     0,  1186,  1002,   988,  1329,     0,  1025,
    1046,  1023,  1042,  1039,  1026,  1048,  1021,  1032,  1030,  1035,
    1028,  1011,  1016,  1034,  1031,  1022,  1043,  1041,  1040,  1045,
    1036,  1033,  1049,  1047,  1024,  1038,  1029,  1027,  1020,  1044,
    1037,     0,  1289,     0,     0,  1676,  1726,   563,   550,   559,
     564,   551,   553,   560,  1681,     0,   555,   557,  1694,     0,
    1697,  1698,  1587,   561,  1705,  1708,  1709,  1710,   562,  1711,
       0,   287,     0,   116,   263,   273,   287,   292,   547,   313,
     548,   301,   769,   740,     0,  1293,  1294,  1291,  1290,   794,
    1208,    96,  1706,  1632,    97,    94,   814,    95,  1187,   152,
     150,     0,   716,  1460,  1498,  1591,  1602,  1706,     0,  1263,
    1267,  1184,   805,     0,   816,   806,   122,   769,   144,     0,
    1309,  1223,     0,  1228,     0,  1567,   127,   130,   785,   128,
     114,     0,     1,  1329,   148,   148,     0,   148,     0,   106,
     114,   109,   113,   260,   810,  1706,  1632,   804,   807,  1015,
    1361,     0,  1335,     0,  1468,     0,     0,  1468,     0,  1468,
       0,  1468,     0,   997,     0,   708,     0,   709,   749,     0,
     953,  1468,  1115,   986,   985,   984,   983,   988,  1468,  1006,
       0,  1305,  1306,     0,     0,     0,     0,     0,     0,  1235,
     851,   849,     0,   992,  1092,  1093,     0,  1083,  1079,  1081,
       0,   777,  1758,   356,  1759,   385,   363,   385,   385,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,   352,   352,
    1434,   365,  1769,  1770,  1771,  1468,  1772,  1773,   353,   354,
     390,  1774,  1775,  1776,  1777,  1778,     0,     0,  1779,   385,
    1780,   352,  1781,  1782,  1783,   357,  1784,   323,  1785,     0,
    1786,   355,   324,  1787,   393,   393,  1788,     0,  1789,   380,
    1790,     0,  1106,   338,   339,   340,   341,   366,   367,   342,
     372,   373,   377,   343,   425,   352,  1102,   778,   779,  1468,
     780,  1098,  1102,  1468,  1102,   742,  1468,     0,     0,   998,
       0,  1013,  1050,  1791,  1792,  1793,  1794,  1795,  1796,  1798,
    1797,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,
    1818,  1819,  1820,  1821,  1822,  1825,  1823,  1824,  1826,  1827,
    1828,  1829,  1830,  1831,  1832,  1833,  1834,  1835,  1836,  1837,
    1838,  1840,  1839,  1841,  1842,  1843,  1844,  1845,  1846,  1847,
    1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,
    1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1064,     0,
    1065,  1055,  1019,  1051,  1052,  1329,    69,     0,  1286,  1292,
       0,     0,     0,     0,     0,   665,   287,   292,     0,     0,
       0,     0,   303,     0,   680,     0,   686,     0,     0,     0,
     287,   121,     0,   273,     0,   286,   200,   285,   200,   153,
       0,   134,     0,   298,   296,     0,   298,     0,     0,   298,
       0,   200,     0,   288,   200,   285,     0,   305,   302,   741,
    1244,     0,     0,     0,     0,    98,     0,     0,     0,   751,
     753,   754,   637,   764,   534,     0,  1671,  1672,  1673,   701,
    1674,  1675,  1677,  1678,  1679,   491,  1680,   762,  1682,  1684,
    1685,  1687,  1688,  1689,  1691,  1692,     0,   763,  1695,  1534,
    1700,  1701,  1703,  1706,  1707,   761,  1712,     0,     0,     0,
     729,   656,     0,     0,     0,   533,     0,   529,     0,     0,
     346,   347,   368,   369,   348,   374,   375,   349,     0,   723,
     426,   711,   581,   537,   546,   525,   612,   523,     0,   528,
     518,   719,   134,   717,     0,   519,   750,   711,   702,   134,
     715,  1266,  1264,  1270,  1265,     0,     0,     0,     0,     0,
     741,  1247,  1246,  1222,  1220,  1221,  1219,  1218,  1225,     0,
    1227,  1016,   651,   653,     0,   702,   129,     0,     0,     0,
     104,   103,     3,   146,   147,     0,     0,     0,     0,     0,
       0,     0,     0,   244,   174,   175,   177,   241,   245,   253,
       0,   110,     0,   808,     0,   785,     0,     0,     0,     0,
       0,     0,  1205,  1205,     0,     0,     0,     0,     0,  1176,
    1125,  1169,     0,     0,     0,     0,   831,   844,     0,     0,
       0,     0,     0,   841,     0,     0,   824,   818,   820,  1127,
       0,  1205,     0,  1123,     0,     0,     0,  1129,     0,    69,
     766,     0,  1724,  1725,  1726,  1677,  1727,  1728,   563,   550,
     559,   564,   560,     0,  1734,  1735,  1683,  1737,  1738,  1739,
    1740,  1741,  1742,  1743,  1744,  1690,  1746,  1747,  1748,  1749,
    1750,  1751,   561,  1753,  1704,  1755,  1710,   562,     0,  1757,
       0,   538,   659,   158,   657,   786,     0,   767,   773,   707,
       0,   787,  1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,
    1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,
    1930,  1931,  1932,  1933,  1934,  1935,  1936,  1937,  1938,  1939,
    1940,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,
    1950,  1951,  1952,  1953,  1954,  1955,  1956,  1957,  1958,  1959,
    1960,  1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,  1969,
    1970,  1971,  1972,  1973,  1974,  1975,  1976,  1977,  1978,  1862,
    1979,  1980,  1981,  1982,  1983,   704,   747,   789,   788,   790,
     710,     0,     0,    67,     0,     0,     0,     0,     0,  1003,
       0,     0,  1468,  1298,  1468,   953,     0,  1468,   953,  1468,
       0,  1116,  1234,  1237,     0,  1095,  1091,  1089,  1088,  1090,
     384,   371,   379,   378,   656,   361,   360,   359,     0,   358,
       0,     0,   385,   385,   383,   362,   338,     0,     0,     0,
     389,     0,   387,     0,     0,   331,   327,     0,   398,   399,
     400,   401,   408,   409,   406,   407,   402,   403,   396,   397,
     404,   405,   394,   395,     0,   410,   411,   412,   413,   414,
     415,   416,   417,   344,   350,  1100,  1101,     0,  1072,     0,
       0,   781,     0,  1067,     0,     0,  1069,     0,     0,     0,
     988,  1329,     0,   825,  1060,  1061,  1059,     0,     0,   845,
    1054,  1018,   828,  1063,  1053,  1062,  1017,  1012,     0,  1242,
      58,     0,     0,     0,     0,     0,     0,   666,   667,   668,
     669,   670,   671,   672,   673,   674,     0,     0,   675,   272,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     494,   523,     0,     0,     0,   651,   685,     0,     0,     0,
       0,     0,     0,   651,   691,     0,     0,   275,   283,   193,
     199,   271,     0,   269,     0,   716,   264,     0,   315,     0,
     297,   293,     0,   294,     0,     0,     0,   295,     0,   267,
       0,   283,   268,     0,   312,  1276,  1275,  1284,   795,     0,
     662,     0,  1329,    99,   815,     0,   656,   526,   700,     0,
       0,   531,   450,     0,     0,   451,   430,   431,     0,   728,
     737,   651,   655,     0,   529,   651,     0,   520,   793,   522,
     615,   617,     0,     0,   530,     0,   757,     0,   425,   425,
     722,   637,     0,   630,     0,     0,   634,   635,   636,     0,
       0,     0,   714,     0,   645,   647,     0,     0,   466,   643,
       0,   469,     0,     0,     0,     0,   631,   632,   633,   624,
     625,   626,   627,   628,   629,   641,   623,   447,     0,   521,
       0,   584,     0,   446,   720,   262,     0,   755,   752,     0,
     703,   262,  1278,  1282,  1283,     0,  1277,  1281,  1269,  1268,
    1273,  1271,  1274,  1272,   817,     0,  1248,  1216,     0,  1213,
     654,   257,   131,   744,     0,     0,   126,   125,   168,   168,
     159,   162,   168,     0,   124,     0,   216,   217,     0,     0,
       0,     0,   250,   248,   751,   764,   204,   178,   203,     0,
       0,   182,     0,   208,   426,   243,   108,   172,   173,   176,
     107,     0,   246,     0,   256,   244,   177,     0,   809,  1362,
    1253,  1334,  1333,     0,     0,     0,     0,     0,     0,     0,
    1468,     0,     0,   326,  1160,  1141,   905,  1204,     0,     0,
       0,     0,     0,     0,     0,  1168,  1165,  1166,  1167,     0,
       0,     0,     0,   829,   830,   843,     0,   834,   835,   832,
     836,   837,     0,     0,   822,   823,     0,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,     0,   996,
     991,   158,   158,   158,   544,     0,   156,   157,     0,     0,
     705,   708,    57,   951,   961,     0,     0,     0,     0,  1119,
    1118,     0,     0,     0,     0,     0,   988,  1007,  1005,  1008,
    1010,  1009,  1440,  1110,     0,     0,  1297,  1295,     0,   950,
     924,     0,     0,  1239,     0,     0,     0,  1468,   940,  1236,
       0,   993,     0,     0,     0,  1102,     0,   382,   381,   332,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1107,  1102,   782,     0,
    1099,  1102,   743,     0,  1102,  1001,  1014,  1056,   826,   846,
     827,   847,    92,     0,    64,    72,    77,    55,     0,    55,
       0,    74,    78,    55,    73,     0,    55,    68,    69,     0,
     577,     0,   552,   554,   567,     0,   556,   558,     0,   304,
       0,     0,   568,   496,   497,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   513,   512,   569,   308,     0,   311,     0,     0,
     683,   684,     0,   570,     0,     0,   690,     0,     0,     0,
     575,     0,   274,     0,     0,   188,   195,     0,   198,   192,
       0,   134,   115,  1460,  1498,     0,   145,   145,   145,   133,
     143,     0,   221,   276,     0,     0,   278,   280,     0,   281,
       0,     0,   316,     0,     0,     0,   746,     0,   796,     0,
    1207,     0,  1209,  1206,  1212,  1211,  1210,     0,     0,     0,
     699,   695,   729,     0,   622,   630,   634,   635,   636,   631,
     632,   633,   624,   625,   626,   627,   628,   629,   649,     0,
       0,   611,     0,     0,   727,     0,   724,     0,   524,   535,
       0,   618,   536,     0,     0,     0,   759,   760,   427,   438,
     470,   471,   442,   443,   444,   448,   792,   791,   721,     0,
     713,     0,     0,   428,   452,   457,     0,   692,   487,     0,
     475,     0,   465,     0,   473,   477,   453,   468,     0,   449,
       0,   714,   646,   648,     0,   644,     0,   439,   440,   441,
     432,   433,   434,   435,   436,   437,   445,   621,   619,   620,
       0,   712,     0,     0,   586,     0,     0,   472,   718,     0,
     315,   158,   729,   315,     0,   425,  1249,   785,  1226,  1214,
    1215,   652,   745,   784,  1329,   166,   167,   171,   171,     0,
       0,   171,   149,   123,  1701,  1587,     0,     0,     0,     0,
     209,   251,     0,   242,   206,   207,     0,   205,   751,   210,
     750,   211,   214,   215,   183,   252,   738,   254,     0,   247,
     112,   111,   258,     0,  1251,  1323,     0,     0,   711,  1354,
    1356,   262,     0,     0,  1126,     0,  1468,  1143,     0,     0,
       0,     0,     0,     0,   855,     0,   955,   855,  1181,  1468,
    1102,  1468,  1102,  1367,  1435,  1603,   929,  1172,     0,     0,
    1139,  1198,   958,     0,   914,  1162,  1177,  1191,     0,     0,
     819,  1128,   833,   838,  1194,   842,   839,  1312,   840,  1205,
       0,  1124,     0,  1192,     0,  1310,     0,     0,  1130,  1196,
    1314,   156,   156,   156,     0,   658,     0,     0,     0,   660,
     661,   707,     0,    56,     0,   952,     0,    66,    46,    47,
      57,  1117,     0,     0,   953,     0,   953,     0,  1006,     0,
       0,  1112,  1108,     0,     0,     0,     0,   326,   943,   941,
     974,     0,   948,   942,     0,     0,   900,     0,   802,     0,
       0,     0,     0,  1307,     0,     0,     0,     0,     0,   351,
     364,  1073,   338,     0,   392,   391,   393,   393,   338,     0,
     321,   338,     0,   336,     0,   376,   345,   418,   419,   420,
     421,   422,   423,   424,  1066,   783,  1068,     0,  1070,    59,
       0,    62,     0,    65,    61,    60,    54,     0,    87,     0,
       0,     0,     0,     0,     0,     0,  1243,     0,   549,   664,
       0,   678,   677,   495,   504,   508,   509,   510,   679,     0,
       0,     0,   505,   506,   507,   498,   499,   500,   501,   502,
     503,   511,   313,     0,     0,   307,   688,   687,   681,   682,
       0,   572,   573,   574,   689,     0,     0,   186,   184,   187,
     189,   185,     0,     0,   284,   315,   145,   145,   145,   145,
     142,     0,     0,     0,   314,     0,   238,   300,     0,   279,
     277,   289,     0,   320,     0,   291,  1285,   663,   151,   527,
       0,     0,   696,     0,   737,   493,   638,     0,   610,     0,
       0,     0,   736,     0,   652,   616,   614,   532,   425,     0,
       0,     0,     0,     0,     0,     0,   476,   467,     0,   474,
     478,     0,     0,     0,   461,     0,     0,   459,   488,   455,
       0,     0,   489,     0,     0,   585,   594,   265,   261,   221,
     156,   737,   221,     0,  1279,  1217,     0,     0,   160,   161,
     163,     0,   639,   171,   165,   213,   212,     0,   181,   249,
     179,     0,   255,  1252,     0,  1343,     0,     0,     0,     0,
    1318,  1338,     0,  1346,  1360,  1357,  1251,     0,     0,     0,
       0,   904,     0,     0,     0,   855,     0,   963,     0,   970,
       0,     0,   955,   936,  1161,     0,     0,     0,  1135,  1180,
    1153,  1145,  1131,  1159,     0,     0,  1164,     0,  1157,  1174,
    1175,  1173,   865,   890,  1178,     0,     0,     0,   901,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   158,   154,   155,   539,   706,    90,    91,
     824,    89,   962,     0,     0,  1121,     0,   950,     0,  1239,
       0,  1004,   988,     0,  1113,     0,  1111,     0,  1298,   953,
       0,   928,   924,   949,   922,   921,   923,     0,   803,  1002,
       0,   797,   953,  1238,     0,     0,  1308,     0,  1302,     0,
    1233,   370,   334,     0,   388,   386,   335,     0,   333,   329,
     337,  1102,    93,     0,    50,    88,    75,    80,     0,    86,
      82,    81,    76,    84,    83,    79,   565,   576,   676,     0,
       0,     0,     0,   306,   309,     0,   571,   566,   282,     0,
       0,   221,     0,     0,     0,     0,   136,   135,   141,     0,
       0,   588,     0,   317,     0,   318,   290,     0,   698,   694,
       0,   650,   726,   651,   731,   733,     0,     0,     0,   613,
     758,   429,     0,     0,   458,   693,   479,     0,     0,     0,
     454,   638,     0,     0,     0,     0,     0,   463,     0,     0,
       0,     0,     0,   545,   266,   238,     0,   725,   238,     0,
     132,   169,   170,     0,   164,   180,   739,  1250,     0,  1245,
    1324,  1322,  1345,  1344,     0,   711,  1352,     0,     0,  1343,
       0,     0,  1355,  1343,  1331,  1199,   855,     0,     0,  1142,
       0,   972,   916,   964,   947,   931,     0,     0,     0,   856,
       0,   989,     0,     0,   937,     0,     0,     0,     0,   917,
       0,     0,   876,     0,     0,   947,     0,   954,   872,   873,
       0,  1134,  1154,     0,  1150,     0,  1179,     0,     0,     0,
       0,     0,  1137,  1149,     0,  1132,     0,  1102,  1102,  1140,
     777,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,
    1767,  1768,  1769,  1770,  1889,  1771,  1772,  1773,  1774,  1775,
    1776,  1777,  1778,  1898,  1779,   862,  1780,  1534,  1781,  1782,
    1783,  1784,  1785,     0,  1786,   324,  1787,  1788,  1976,  1789,
    1790,   624,   625,   965,   859,   861,     0,   860,   957,   857,
     778,   858,   960,   915,  1195,  1313,     0,  1193,     0,  1311,
    1202,  1200,  1197,  1315,   542,   543,   540,   156,    69,    49,
    1120,     0,     0,   802,     0,     0,     0,  1468,     0,  1109,
       0,  1239,  1296,   950,     0,   980,   900,   975,     0,   802,
     800,     0,  1239,  1262,     0,  1299,     0,     0,     0,   330,
     322,  1071,    63,     0,    85,   514,     0,     0,     0,     0,
     196,     0,   202,   238,   140,   139,   138,   137,   219,  1410,
    1684,  1586,   220,     0,   224,   218,   222,   227,   229,   228,
     230,   226,   237,     0,   240,   299,   319,   697,   492,   734,
     735,   730,     0,   426,   485,   483,   480,     0,   481,   462,
       0,     0,   460,   456,     0,   490,   580,     0,   583,   597,
     592,   593,   588,   539,   588,  1280,     0,  1342,     0,  1330,
       0,     0,  1327,  1317,     0,  1347,  1316,   968,  1144,     0,
     947,     0,   855,   933,   932,   935,   930,   934,     0,   990,
       0,     0,   874,     0,   881,   919,   920,   918,   875,   947,
     953,   877,     0,     0,     0,  1146,  1136,  1133,  1138,  1147,
       0,     0,  1148,  1151,   320,  1163,  1156,  1898,  1907,     0,
       0,     0,     0,     0,     0,    45,    52,   824,     0,     0,
     924,   799,     0,     0,  1304,     0,     0,   950,  1114,     0,
       0,     0,   802,     0,     0,   852,     0,   897,     0,   999,
     801,     0,     0,  1254,     0,     0,  1231,  1232,     0,    51,
     515,     0,   516,   310,     0,     0,   194,   588,     0,     0,
       0,   231,   225,   587,   589,     0,     0,   191,   732,   578,
       0,   482,   486,   484,   464,   582,   599,   596,   240,   756,
     240,   640,     0,  1319,     0,  1320,  1353,     0,     0,     0,
    1332,     0,   855,     0,   946,   969,   886,   864,     0,     0,
       0,   871,   878,   979,   880,     0,  1155,  1171,     0,     0,
     959,  1203,  1201,   541,    69,     0,  1239,   900,  1262,  1301,
       0,     0,     0,   924,  1002,   798,   913,   906,   907,   908,
     909,   910,   911,   912,   927,   926,   898,   899,     0,     0,
       0,     0,     0,  1303,  1233,     0,  1349,  1349,  1358,     0,
     517,   197,     0,   240,     0,     0,     0,   223,     0,     0,
     239,     0,   119,     0,     0,   158,   191,   191,     0,     0,
       0,     0,   953,   971,   945,     0,   938,   884,   883,   885,
     889,     0,   887,     0,   903,     0,   896,   864,     0,  1158,
       0,   966,    44,    48,     0,   854,  1256,   950,     0,  1262,
     900,   802,  1262,     0,  1259,     0,  1300,     0,     0,     0,
    1351,  1351,  1239,     0,     0,   191,   233,     0,   232,   590,
     591,   193,   579,     0,   602,   118,   117,     0,  1326,   315,
    1337,     0,   979,     0,   925,     0,     0,   886,     0,   879,
     976,   977,   978,     0,   892,   882,   893,  1152,  1170,   967,
       0,   950,  1257,   853,  1000,  1255,  1260,  1261,     0,  1349,
    1348,  1350,   168,   168,   315,  1359,   201,   120,   234,   190,
     598,     0,     0,     0,  1321,  1325,     0,   896,   944,   939,
     863,   888,   902,     0,     0,     0,   894,     0,   895,  1262,
       0,  1351,   171,   171,  1229,  1670,  1411,  1639,     0,   600,
     603,   601,   595,   315,   855,   868,     0,   867,     0,   956,
     891,  1258,  1239,   168,  1340,  1339,     0,   607,   606,   605,
     609,   608,  1336,   973,   866,   870,   869,   315,   171,     0,
    1230,  1341,   604
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2803, -2803, -2803,  1856,    87, -2803, -2803, -2803, -2803,  -694,
     358, -1161, -2803,   287, -2803, -2803, -2803, -2803,  -273,    51,
   -2803,    91, -2803, -2803,    92,     7,   783,   -39,   -17, -2803,
     -11,    27,    58,  1439,  -999, -2803, -1483,   755, -2803,  1579,
    1580, -2048,  -691,   -36, -2803,   484, -1598, -2017,  -554,   881,
    1425,  1432,   248, -2257, -2803,  -588, -2803,   231, -2803, -2803,
     482,   919, -1497, -1490, -2803, -2062, -2803,  -515,  -420, -2803,
   -2803, -2803, -2803, -2803, -2306, -2647,  -547,   898, -2803,  1438,
   -2803, -2803, -2803, -2803,    18, -1482,  2553,   473,  -597,  1949,
    -562,  -385,  1627,  1601,  -114,   659,    34,  1978,   284, -2803,
   -2803,   293, -2001, -1446,   254,  -340,  1226, -2803, -2803,  -539,
   -1301,  -791, -2803, -2803,  -414,   644, -2803, -2803, -2803,  1336,
    2322, -2803, -2803,  2978,  2982, -2803,  -622,  3106,  1191,  -778,
    1642,  -882,  1647,  -874,  -881,  -886,  1648,  1649, -1473,  4416,
   -1396,  1496, -2803,    -4, -2803, -1427,    29, -2803, -2803, -2803,
   -2803, -2198, -2803,  -489, -2803,  -482, -2803, -2803, -2803,  -593,
   -2310, -2803,  2218,   632, -2803, -2803, -2803, -1507, -2803,  4876,
     544, -2803, -1914,  -943,  -673, -1085,  -923, -1164, -1318, -2803,
   -2803, -2803, -2803, -2803, -2803,  -994, -1724,  -559,   592, -2803,
   -2803,   667, -2803, -2803, -2803,  -707,   870,  -581, -1052,   599,
    1127,   -23,  -584, -1558, -2803, -1642, -2226, -2803, -2803, -1995,
   -2803,  2821,  -473, -1065,  1713, -1250,    17, -2803,  4598,   132,
    2130,  2961, -2373, -2803, -2803,  -553, -2510, -1082, -2803,  -722,
   -2803, -2803,    94,    95, -2576, -1615,    99, -2803,  2599,  2570,
     100,  -705, -1142,  -930, -1145, -2803,   -79,   101,     1, -2071,
   -2668,  -483, -2803,  -582, -2803,  -280, -2803,  -529, -2803,  -671,
    -537,  -567, -2600, -1098, -2803,  1491,  -321, -2803,   524, -2803,
   -2411, -2803, -2803,   513, -2803, -1103, -2803, -2119,   131,  -517,
   -2402, -2399, -2012,  -711,   197,  -519,   180, -2030,  -973, -2803,
     538, -2803,  -505, -2803,  -708, -2344, -2803, -2803,  2644, -2803,
     102, -2403,   105,   463, -2803, -2803,  -454, -2803,  -485,  -484,
   -2803, -2803,    44,  -917,  1242, -2803,   107, -2803, -2803,  1256,
    -764, -2803,  1307,   110, -2803, -2803, -2803, -2803,   112, -2803,
   -2803,   211, -2803,   958, -2803,   200,  -663,   541, -2803,   113,
    1400,   115, -1093,   116, -2803,   606,   117,  1046, -2803, -2803,
   -2803,     5, -2803,  -402, -2803, -2803, -2412, -2803, -2803, -2803,
      22,  -544,   242, -2803,     6, -2714,   118,   501, -2803,   739,
   -2803,   595,   119,  2081,   120,    82,     9,   161,   121,  1350,
   -2010, -2803,   122,    30,    31, -2803, -2803, -2803, -2803,  -211,
     249, -2803, -2803,  -458, -1581,  -328, -2803, -2732, -2802, -2803,
   -2803,  -518, -2737, -1993,  1058,    -7, -2803, -2803, -2803,  -552,
   -2803, -2345
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    42,    43,    44,   569,  2190,  2947,  2553,  2948,  2267,
    2184,  1439,  2263,  1832,  1757,  1440,   514,  1847,  2554,  2500,
    1833,   570,   654,   655,   571,   572,  1057,    50,    51,   981,
      52,   673,   686,   687,  1498,  1919,   679,  1125,  1645,   661,
     662,  2178,   698,  1747,  1640,  1641,  2067,  2408,  1669,  1670,
    1134,  1135,  1906,  3092,  1907,  1908,  1490,  1491,  2986,  1657,
    1661,  1662,  2089,  2079,  1648,  2336,  2844,  2845,  2846,  2847,
    2848,  2849,  2850,  1058,  2591,  2997,  1665,  1666,  1137,  1138,
    1139,  1674,  2099,    54,    55,  2050,  2397,  2398,   634,   635,
     975,   976,   994,   990,  1501,  1926,   636,   637,  1885,  1886,
    2305,   997,  1922,  1931,  1932,  2595,  1805,   821,  2125,  1520,
    1376,   823,  1059,   824,  1355,  1060,  1359,   826,  1061,  1062,
    1063,   829,  1064,  1065,  1066,   832,  1351,  1067,  1068,  1370,
    1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1112,
    1469,  1070,  1071,  1072,  1073,   639,  1074,  1075,  1601,  2044,
    2396,  2854,  2993,  2994,  2633,  2880,  3006,  3095,  3203,  3229,
    3230,  1076,  1077,  1550,  1551,  1552,  2040,  1595,  1596,  1078,
    2764,  1598,  1969,  1113,  1484,  1543,  1233,  1234,  1521,  1456,
    1457,  1466,  1861,  1473,  1477,  1890,  1891,  1485,  2008,  1079,
    1950,  1951,  2353,  1529,  1080,   727,  1240,   728,  1599,  2002,
    1089,  1081,  1090,  1083,  1539,  1540,  2362,  2605,  2606,  1976,
    2095,   641,  1633,  1910,   845,  1315,  1084,  1085,  1086,  1087,
    1115,   643,  1235,   500,   835,  3191,  1411,  1119,  1236,  2136,
    1998,  1549,   573,   574,  2531,  1336,   575,    59,   668,   675,
     576,  1776,  1726,  1515,  1178,  1716,  1432,   577,   578,  2449,
    2768,  3112,  2473,  3239,  2697,  2698,  3109,  3110,  2452,  2137,
    3174,  3175,  2528,  1708,  3169,  2208,  3064,  2143,  2124,  2699,
    2216,  3024,  2805,  2138,  2679,  2209,  3105,  1789,  2210,  3106,
    2902,  2211,  1754,  1780,  2453,  3176,  2144,  1755,  2448,  2769,
    1696,  2212,  3116,  2213,   527,  2683,    63,    64,   102,  1189,
     579,   849,   580,  1329,  1768,    67,   710,  1433,   581,  1434,
    1435,   939,    68,  1516,   941,   942,   583,   561,   562,   842,
    1408,   563,   836,   584,  2515,  2516,    71,   528,   585,  2460,
    2461,  2462,  2139,  1159,  3119,  2140,  1160,  1161,  2464,   586,
      95,   587,  1699,   588,  1004,  1943,   589,  1108,   683,  1109,
    1111,   590,  2977,  2818,  1343,  1790,  2221,   529,    78,    79,
     591,  1102,  2425,  2104,   592,  2973,   593,   669,   670,  1517,
    1618,  1518,   594,   509,   595,   647,   596,  1777,   597,   747,
    1786,    87,   598,   599,   600,  2431,  2106,  3019,    91,  2656,
    2109,  1148,  2659,  3078,  2649,  2654,  2432,  3140,  3192,  2657,
    2110,  2111,  3079,  2112,    92,   510,   502,   503,   838,  1318,
    1238,  1319
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     501,    62,   691,   497,  1316,    77,    81,    48,   841,    85,
    1140,  1114,  1431,  1177,   501,   699,   944,   638,  1366,  1323,
     822,  1320,    80,  1476,   498,  1436,  1968,    53,  1740,  1327,
      89,    90,  1730,   972,  1729,  1608,   701,  1372,   498,   632,
     672,  2068,   702,  1796,  2071,    53,  2048,  1887,  1695,  2399,
     640,  2409,  2402,  1634,  2414,  1179,  2454,  1183,  1705,  1187,
    1701,   999,   582,  1679,  1743,  1800,   707,  1935,   676,  1453,
     978,  1863,  1864,  1449,  1452,   993,  1883,  1082,  1413,  1519,
    1416,  1451,   851,  1605,   938,  1986,  1987,    45,  1734,   844,
    1611,    46,    47,  2447,    56,    57,  1100,  2794,   689,    58,
      60,    61,    65,  2766,  2383,    66,   648,    69,  2792,  1546,
      70,  2806,    72,    73,  2433,    74,    75,    76,    82,    83,
      84,    86,    88,  2490,  2491,  2492,  2809,   512,   945,  2053,
    -824,  2771,  -393,   720,  2604,  -824,  -102, -1879, -1879,   515,
    -393,  -105,  1643,   526,  1133,  1352,  1353,  2195,  1013,  3139,
    -774,  1136,   515, -1729,  -385,   645,   645,  -774,  -771,  -771,
    1818, -1882, -1882,  2091,  -390,  1617,  2308,   515,  -390,  1149,
   -1730,  1013,  2094,  2517,  2502,  1419,  -749,  1364, -1883, -1883,
   -1731,  1865, -1732, -1736, -1733,  1866, -1736,  2510, -1884, -1884,
   -1885, -1885, -1886, -1886, -1889, -1889, -1745, -1745,  1686, -1752,
   -1754, -1754, -1909, -1909, -1898, -1898,  2965, -1905, -1905, -1907,
   -1907, -1756,  -775,  -775, -1729, -1730,  2000,  2951, -1731, -1910,
   -1910,  -772,  -772,    21,  1405, -1732, -1733,   515,  1096, -1752,
    2906,  -102,   -53,  2969,   723,  1714,  -105,   681,  1717,  1718,
   -1756,  2559,  2561,  1405,  2564,  2000,  -352,  3213,  -365,  -380,
     515,   991,   515,  3235,  3017,   517,  2940,    21,  1405,  1405,
    3027,  2188,  1423,  2810,   756,  3160,  1372,  1013,  1741,  1793,
     694,  1562,  1562,  3040,  1649,  1563,  1563,  1103,  1443,  1697,
    1742,  3100,  1865,  1612,  1423,   515,  1866,  1013,   696,  1013,
    1732,   711,  1320,  2921,  -622,  2917,  1649,  1689,  1719,  2524,
    -214,  -622,  3255,  1571,  1571,    21,  2037,     3,     4,   696,
    2354,  3107,  3170,  2038,  2289,  -642,   518,  1697,  2045,  2319,
    1650,  2450,  -642,   659,  2581,  3069,  2966,  2672,  2482,  2882,
    -325,   678,  2884,  3070,  3126,  1573,  1573,  2635,   695,  3193,
    2638,  2967,  1650,  1562,  2317,  3141,  2675,  1563,  1346,  1865,
    2122,  2351,  2636,  1866,  1386,  1387,  2923, -1878, -1878,  2600,
    1724,  3096,   725,  3097,  2928,  1356,   726,  2701,  2065,  2320,
     684,  3108,  3201,  1713,  2671,  1571,   101,   983,  1542,   712,
    2939,  1651,   692,  1496,  1725,   602,  3055,  1365,  1502,  2959,
     944,  1123,  1347,  1320,  2570,   993,  2644,  1613,  1352,  1353,
    2971,  3202,   979,  3248,  2960,   536,  2637,  1573,  2123,   978,
    2401,   984,  2447,  1364,  2447,  3182,   696,  2176,  3185,  3243,
    2816,  1404,    29,  -102,  2811,  1681,   660,  1504,  -105,  3038,
    1652,  2676,  3161,  2331,  2332,  2333,  3145,   986,   601,  2702,
    1720,  1948,  2097,  2601,  1104,  3171,  1105,  3125,  1721,   944,
    1691,  3220,  1652,  2918,  2290,  2066,    29,  3221,  2451,    34,
    1437,  2046,  3256,  3236,  2291,  1390,  1391,  -325,  3018,  1677,
    2284,  2285,  2286,  2287,  2288,  1097,  1554,  2292,  2293,  2294,
    2295,  2296,  2297,  2298,  2299,  2300,  2301,  -102,  2344,   521,
    1653,   522,  -105,    34,  1124,  3208,   790,  2677,  3022,  2678,
    1745,    38,  3071,  1151,    29,  3241,  2321,  1610,  2189,  1152,
     952,  1968,  1653,  1534,  1406,  1704,   525,  3032,  1614,  2833,
     729,  1939,  2703,  3172,  2968,  2814,   603,  2987,  2824,   691,
    3183,  2318,   644,  1406,  1610,    38,  2963,   980,  2641,  3047,
    2122,    34,  1746,  3237,  2571,   944,   944,  1098,  1406,  1406,
    2098,  2946,   837,    41,  3249,  3184,  2907,   697,  2568,   989,
    1007,   943,   757,  2412,  1692,  3214,   682,  1348,  2766,  2255,
    3238,  1459,  3028,   725,  2177,   703,   513,   726,  2001,  1682,
    2091,  2175,  2404,    38,  2117,  2964,  1675,    41,  2417,  1724,
    2520,   691,  1367,  1676,    53,  2897,  2771,    39,  2444,  -102,
    1367,  1350,  1680,  2642,  -105,  2370,  2371,  2385,   501,   713,
    1356,   638,   940,  1725,  1368,  1153,  2498,  2499,  -824,  -824,
    1733,    40,  1368,   501,  1365,  1530,   638,  1783,  1369,  2436,
     515,  1730,   498,  2998,  3124,    41,  1371,   693,  -102,  2243,
    -102,  1952,  3130,  -105,   640,  -105,  -774,   498,   971, -1729,
    -385,  3131,  -622,  -774,   501,   501,   701,  1629,  2483,   640,
    -390,  2502,   702,  1557,  2039,  1141, -1730,  1881,  2895,  1407,
     725,  1949,  -749,  -642,   726,  1349, -1731,   501, -1732, -1736,
   -1733,  1542, -1736,  2051,  3008,   949,  3010,  2276,  1316,  2903,
     969,  1706, -1745, -1745,    62, -1752, -1754, -1754,    77,    81,
      48,  2915,    85,  1412,  1415,   709,  2458, -1756,  -775,  -775,
   -1729, -1730,  1327,  1101, -1731,    80,  1834,  1237,   501,  1317,
      53, -1732, -1733,    89,    90, -1752,  1107,  1106,  2792,  2886,
    3194,  1646,  2021,   946,  2714,   645, -1756,  1367,   724,  2944,
    1797,  1798,  1354,  1116,  1358,  -380,  1606,  1101,  2054,  2989,
    1427,  1428,  1589,  1590,  1591,  1592,  1593,  1594,  1594,  1368,
     748,  2949,  2904,  1876,  1877,  1878,  1879,  1880,  1881,  1154,
    2930,  2931,  1427,  1428,  2916,  2175,  1000,  1706,  1421,  1761,
      45,  1422,  2960,    49,    46,    47,  2152,    56,    57,  3083,
    2766,  1773,    58,    60,    61,    65,  2155,  1093,    66,  2158,
      69,    49,   837,    70,   631,    72,    73,  1896,    74,    75,
      76,    82,    83,    84,    86,    88,    49,    93,  2771,  1129,
    1562,   822,   737,  1706,   690,  1156,  1591,  1592,  1593,  1594,
    3257,  3025,  1878,  1879,  1880,  1881,   700,  1647,  2316,  3155,
    3156,   501,    49,  2582,  2583,  2584,  2585,  1320,  1997,  2270,
    1968,  2955,  1947,  1542,  2271,  1157,   841,  1562,  2022,  1820,
     515,  1972,  2224,    94,  1164,  1824,  2681,  2282,  1816,  2316,
     944,  -235,  1503,   749,  2023,  1507,  1887,  2652,  1129,  2024,
    1326,  1129,  1984,  1165,  1573,  1707,  1130,  1316,  3197,  1571,
    2682,    96,  2041,  1131,   752,  2610,  1728,  2309,  2685,  1763,
     694,  2041,  1923,  1320,  2264,  2476,  2272,  1927,  2359,  1929,
    1911,  1930,  2325,  2653,  -158,  3246,  2025,  2265,  2477,  -158,
    1895,  1573,  1897,  1898,  1158,  1902,  2455,  2250,  2252,  2253,
    2247,  2542,  2249,  2251,  1166,   943,  1826,  2546,   938,  2248,
    2548,  1821,  1735,   501,   501,  2427,  2688,   517,  1704,  3262,
    1706,  3103,  1131,   501,   725,  1131,   501,   501,  1609,   501,
     501,   501,   501,  1554,   753,   516,  1706,  1706,   695,  2412,
    1367,  1707,    53,   501,  1828,  2405,   638,  3039,   501,  1013,
    1151,   638,  2142,    21,  1819,  1706,  1152,  1151,  -158,  2623,
    2624,  2217,  1368,  1152,   943,  1237,   837,   498,   632,    21,
     754,  1132,   498,   632,  1132,  1730,  1369,  2150,   518,   640,
    2493,    21,   501,   691,   640,  1001,  1697,  1707,  1627,  1697,
    2003,  1628,  2114,  1988,   755,  1167,  1002,  1698,  -157,   501,
    1700,  2231,   517,  -157,  1704,   758,  3120,  -158,  2456,  1367,
     501,   501,   501,  1819,   501,   501,   696,  1362,  1363,  2151,
    2171,  2172,  2173,  2254,    97, -1241,  2434,  2256,  2200,  1151,
    2258,  1368,    98,  2619,  2026,  1152,  2484,  1830,  2161,  1738,
     759,   501,  1013,  2168,  1430,  1371,  1168,  1151,  2893,  3056,
    1704,   760,  2896,  1152,  1169,  2481,  2485,  1458,   848,  2415,
     943,   943,  1153,   518,  1013,  1904,  1170,  1316,    99,  1153,
    1905,  3030,  -157,  1546,  2489,   950,  2692,  1938,  1636,  1637,
    1939,  1644, -1876, -1876,   702,   702,  2525,   702,  1940,  2228,
     501,  1941,  2533,   741,   501,   501,   952,  1171,  2428,  2829,
    3057,  1012,   951,  1430,  1865,   501,  1968,  2185,  1866,  3058,
    2186,  1867,  1868,  1869,  1707,  2269,   100,   519,   953,  2273,
    2693,  -157,  2275,   733,  2126,   734,   741,   837,  3205,  2232,
    1707,  1707,  1941,  3253,  1091,  1092,  2694,  1094,  3059,  2153,
    2961,  1153,   954,  2825,  2156,  1173,   735,   743,   736,  1707,
    1101,   521,    29,   522,  1237,  2238,   955,   697,  2239,  1153,
      21,  1556,  1154,  3224,   958,   742,  1237,  1174,    29,  2241,
    1559,  2259,  2239,   825,  2260,  3244,  3245,  1704,   525,  1493,
      29, -1877, -1877,   744,  1731,    21,  1607,  1176,   520,    34,
     959,  1237,  1509,  1704,  1704,  1512,  2314,  1616,   742,  1430,
    1430,  2302,  3252,  1012,  2303,    34,  1865,   960,    35,  3060,
    1866,  3261,  1704,  1867,  1868,  1869,  1154,    34,  2457,  2513,
    2458,  3061,   963,  1154,  2828,   725,  3260,  -749,   964,   726,
    2612,    38,  2341,   965,  2695,  2342,   521,  2240,   522,   966,
    1151,  2345,  2696,  2592,  2342,    39,  1152,    38,  2459,  1526,
    2474,    41,   944,  2475,   523,   743,  2214,   967,  2215,    38,
     524,    39,  2914,   525, -1880, -1880,    49,   746,  1155,    40,
    2867,  2478,  1156,    39,  2479,  1181,  2326,   968,  2327,  1156,
    2277,  1151,   969,    41,  2712,    40,  2705,  1152,  1761,  2536,
    1870,   744,  1939,   837,   996,  1154,  2283,    40,  3210,  2429,
    1767,  2339,  1157,  2373,  1769,  1770, -1881, -1881,  1771,  1182,
    2669,    41,  1871,  1154,  3014,  2555,  2596,   501,   998,  2342,
      49,   690,  1003,   837,   837,  2310,  1005,   745,  2788,  2704,
    2400,  2713,  2315,  1006,  2660,  2009,  2466,  2661,  2468,  1007,
    2801,  2822,    21,  2186,  2823,  2830,  2868,  1185,  2831,  1941,
    2890,  1156,  1153,  2891,  2982,   944,  1099,  1941,  2983,    29,
    1762,  2342,  2010,  3001,  2343,  2113,  1941,  2343,   956,  1156,
     837,  1158,  2347,  1317,  3046,   746,   103,  2186,  1158,   511,
    1095,  1186,  1872,   970,    29,   943,   564,  1546,  3080,  3142,
    1008,  1941,  3143,  1153,  3159,  1110,    34,  3143,   658,  1157,
    2980,  1317,   671,  3164,  2412,  1117,  3165,   501,  1763,  3242,
   -1887, -1887,  3143,  3062,  1871,  1118,  3063,  2328,    53,  2329,
    1126,    34,  1128,   825,  2048,  1120,   700,  1759,  2544,  2545,
     501,   501,  2469,  1127,  2471,   501,   940,   501,    38,  2668,
     638,  2670,   501,   501,   501,   501,    49, -1888, -1888,  1121,
    1158,  1142,    39, -1890, -1890,  2509,  1143,   501,   501, -1891,
   -1891,   498,   501,    38,  1144,   638,  1146,   501,  1158,   501,
     638,   501,   638,   640,   638,  2011,    40,    39,  1147,  2981,
    2012, -1892, -1892,  1150,  1872,  2013,   498,   632,   501,   501,
      41,   498,   632,   498,   632,   498,   632,   501,   640,  1942,
    1162,    40,  1163,   640,  1180,   640,  1154,   640,  1834, -1893,
   -1893, -1894, -1894,  1184,  1944,    41,  2767,  1188,   501,    53,
     501,  3076,  1945,  1946,  1322,   837,   501,   501,   501,   501,
     501,   501,   501,  1317,  2898, -1895, -1895,   501,   501,  2712,
    1321,    29,   501,  1848,  1324,   982,   501,  1154,  1328,   501,
     501,   501,   501,   501,   501,   501,   501,   501,  2159,  1325,
     501,  3076,  1156,  1330,  3222,  3223,  1331,   501,  2375,  1237,
   -1896, -1896,  1317,  2889, -1897, -1897, -1899, -1899,    34, -1900,
   -1900,  1873,  1874,  1875,  1342,  1876,  1877,  1878,  1879,  1880,
    1881,  1344,  2160,   501,  1345,  2376,  1350,  2945,  2073,  2166,
   -1901, -1901,  1354,  1156,   702,  1357,  1380,  1381, -1902, -1902,
    1358,   501, -1903, -1903,  1360,  3258,  1361,   825, -1904, -1904,
      38,   983,   501,   501, -1906, -1906,  2412,  1373,  2014, -1908,
   -1908,  1374,  1953,  2167,    39,  1375, -1911, -1911,  2126,  2015,
    1748,  1749,  1107,  2092,  2093,  -209,  -209,  1388,  1389,  1390,
    1391,  1377,  -213,  -213,  1409,   984,   837,  1410,    40,  -212,
    -212,  1158,  1621,  1623,  1414,  1317,  1417,  1317,  1418,  1420,
    1438,   985,    41,  1441,  2551,  1386,  1387,  1444,  1013,  1474,
     944,   986,  1487,  1873,  1874,  1875,  3076,  1876,  1877,  1878,
    1879,  1880,  1881,  1489,  1492,   533,  1499,  2041,    49,  1497,
     565,  1500,  1158,  1506,  1514,  1508,  1513,  1525,  1237,   650,
    1522,   501,   501,  2377,   501,   987,  -356,  2055,  2378,  1523,
     834,  -114,   688,   688,  -363,  2772,  -353,  2142,  1530,    41,
    -235,  3076,  -236,   631,  -354,  -114,  1924,  1533,   631,  -357,
    -114,  1534,  -355,  1555,  1538,  2926,  1548,  1164,  1237,  1547,
    1600,  1602,  1604,  1619,  2685,   501,  1635,  2821,  2218,  1630,
    2686,  1631,  1132,   988,  1678,  1683,  1165,  1130,  1527,   837,
    1671,  1673,  2787,  2687,  2796,  3044,  1684,  1703,   825,  1531,
     716,  1702,  1317,  1709,  1704,  1711,  1390,  1391,  1715,  -114,
    1723,  2812,  1722,  1727,  1710,  1756,  1737,   943,  1744,   517,
    1752,  1751,  2688,   989,  2689,  1544,  1775,  1758,  1765,  -114,
    1766,  1778,   837,  1779,  1781,  1782,  1784,  1166,   501,  1785,
    1791,   501, -1241,   501,  1792,  1799,  1808,  1801,   837,   501,
     501,   501,   501,   501,  1802,   982,   501,   501,   501,   501,
     501,   501,   501,   501,   501,   501,  1809,  1812,  1813,  1814,
    1815,   501,   501,  3122,  1819,   501,  1825,   837,  -114,  1850,
     518,  2379,   501,  1855,   837,   827,  1852,  -114,  1853,  1903,
    1546,  1854,  2380,  1856,  1921,  1857,  2555,  1859,   700,   700,
     517,   700,  1862,  1928,   501,  1884,  1893,   501,  1900,  2690,
    1892,   501,  1925,  1934,   638,  1937,   837,  1949,  1562,   837,
     943,  1975,  1237, -1241,   837,  1980,  1978,  2763,  1167,  1981,
    1999,   983,   501,  1982,   850,   498,   632,  2006,  1983,  2017,
    2043,  2018,  2020,  2935,  2936,  2042,  2049,   640,  2062,  2063,
    2069,   695,  1366,  2072,  2064,  2081,  1430,   691,   501,  2083,
    2268,   518,  2084,   501,   825,   984,   501,  2082,  2085,  2086,
    2102,  2103,  2115,  2120,  2119,  2121,   696,  2691,  2183,  1168,
    2187,   985,  2692,  2192,   501,   501,  2193,  1169,  2201,   501,
     834,   986,  2203,  2204,   825,   825,  2205,  2219,  2820,  1170,
    2220,  2767,  2222,   501,  2225,   520,   501,  1012,   501,  2226,
    1865,  1730,  2227,  2229,  1866,  2199,  2233, -1912, -1912, -1912,
    2234,  2230,  2235,  2236,  2266,   987,  2693,  1496,  -114,   501,
    1171,  2856,   501,  2257,  2274,   638,  1889,  1561,  1865,  2304,
    1562,   825,  2694,  2237,  1563,  1564,  1565,  1566,  1567,  1568,
    2245,  2246,   501,   521,  1888,   522,   498,   632,  2311,  1430,
    2312,  1942,  2313,  2322,  1569,  2335,  2323,  2338,   640,   501,
     501,   523,  1571,   988,  2324,  2348,  1944,   524,  1173,  1572,
     525,    53,  2349,  2357,  1945,  1946,   501,  2355,  2369,   638,
    2356,  2358,  2367,   725,  2374,  2390,  1120,   726,   501,  2381,
    1174,  2391,  2393,  2430,  1573,  2395,  2394,  -215,  2407,  2418,
     498,   632,  2419,   989,  2421,  2422,  1317,  1317,  1317,  2426,
    1176,  2424,   640,  2912,  2437,  2435,  2438,   499,   508,  2440,
    2442,  2443,   534,  2446,   521,   827,   522,   534,  2480,  2465,
    2695,   642,  2467,   646,   646,   649,   534,   656,  2696,  2494,
     656,  2486,   691,   674,   677,  2495,   677,  1237,   524,   534,
     534,   525,  2487,  2488,  2497,  2496,  2504,  2934,  2507,  2508,
    2512,  2522,  2041,  2523,  2526,  2534,  2530,  2527,  2539,   674,
    2541,  2558,  2549,  2569,   834,  2550,  2566,  2572,  2575,  2589,
     837,  2590,  2594,  2576,    49,  2577,   825,  2599,  2578,  3033,
    3200,  2602,  2608,  2617,  2615,  1574,  2621,  2618,   501,  2632,
    2645,  2639,  2634,  2640,  2648,  2643,   677,   534,   677,   677,
     677,  1575,  2651,  2767,  2658,  2667,  1576,  1012,  2674,  2673,
    1865,  2680,  2700,  2716,  1866,   751,  2784,  1867,  1868,  1869,
    2795,  2804,  2785,  1317,  2786,   943,  2808,  2826,  1577,  1578,
    2799,  2853,  2800,  2817,  2613,  2888,  2791,  2892,  2186,  2803,
    2472,   944,  2819,  1579,  2894,  2827,   847,  2905,  2832,  2855,
    2858,  2909,   631,  2860,  2859,  2910,  1615,   631,  2876,   631,
    2901,   631,  2883,  2899,  2900,  2911,   501,  1012,  1872,   638,
    1865,  3104,  2919,  2922,  1866,    49,  2924,  1867,  1868,  1869,
    2925,  1580,  2929,  -771,  1581,  3084,  2501,  3086, -1876, -1877,
     498,   691, -1878,  2941,  2505,  2942, -1879, -1880,  1582, -1881,
    2943,  1583,   640,  2514,  2950,  1378,  1379,   825,  2952,   827,
   -1882, -1883, -1884, -1885,   501, -1886, -1887, -1888, -1890,  1164,
    2957, -1891,   691,   501,  2956,   834, -1892,  2629,  2970,  2007,
   -1893, -1894,   501,  2974, -1895,   501, -1896,   501,  1165, -1897,
    2984, -1899, -1900, -1901,   837,   501,  2972, -1902,   501,   501,
   -1903, -1904, -1905,   501,   501,  2975, -1906,   501, -1907,  2978,
     691,  3162, -1908, -1909,  1430, -1910, -1911,  -772,   688,  2556,
    2985,  2557,  2763,  2988,  3154,  2562,  3166,  2565,  2992,  2990,
    3012,  1380,  1381,  2996,  3021,  3000,  3023,   501,  3011,  1166,
    3035,  1584,  3036,  3043,  3051,  3045,  1012,  3052,   700,  1865,
     501,  3053,  3066,  1866,  3068,  3067,  1867,  1868,  1869,  3081,
    3082,  3085,  3089,  3104,  3091,  3094,  3088,  3099,  1871,  3101,
     825,  3111,  3115,  2870,  2918,  1954,  3117,  3118,  3121,  3127,
    1470,  3133,  1955,  3134,  3135,  1956,  1957,  1958,  1317,  2770,
    1317,  3144,  1317,  3139,  3146,  3148,  1382,  1383,  1384,  1385,
    1386,  1387,  2879,  3151,  1388,  1389,  2708,  3153,  3157,  3163,
    3173,  3168,  3179,   825,  3180,  3181,  3186, -1912, -1912, -1912,
     827,  1876,  1877,  1878,  1879,  1880,  1881,  3187,  1871,   825,
    1167,  3188,  1767,  3206,  3196,  2793,  1769,  1770,  1872,  3212,
    1771,   834,  3198,  3215,  1585,  3217,  3232,  1586,  1587,  1588,
    3213,  1589,  1590,  1591,  1592,  1593,  1594,  3214,   825,  1750,
     837,  2813,  3247,  3254,  2815,   825,  3259,  2552,  2503,  1122,
    2979,   834,   834,  2410,  2789,  2202,  1632,  2101,  1494,  1495,
    1668,  1168,   501,  3199,    49,   837,  1667,  2078,  2420,  1169,
    3147,  2580,  3087,  2100,   633,  1672,  2423,   825,  1872,   973,
     825,  1170,   501,   501,  1460,   825,  3190,  2574,  1505,  2340,
     501,  1390,  1391,   957,  3037,  2573,  2593,  1448,   834,  3149,
    1807,   501,  1450,  1454,  1455,   501,   501,  3150,  2765,  3231,
     501,   837,  1171,  2365,  2413,   501,  2388,  2352,   501,   501,
    2386,  2182,  1912,   501,  2763,  2887,   657,   501,  1664,   708,
     638,  2932,  3240,  3031,  3177,  2501,  2790,  1871,  3211,  3218,
    3234,   501,  1694,  3065,   677,  2445,   677,  2470,  3209,  2684,
     677,   498,   632,   677,  2807,  3216,  2441,  3207,   537,  2773,
    1173,  2511,   534,   640,  1827,  1817,   827,  1795,  2146,  2463,
    2406,  2715,  3137,   501,  2058,  2719,  2346,  1764,  2663,  2802,
    3016,   501,  1174,   948,  2662,  3195,  3098,  2060,  3233,     0,
       0,   840,   534,   534,     0,     0,   827,   827,     0,     0,
     501,     0,  1176,     0,     0,  1392,  1393,  1872,     0,   837,
       0,   631,     0,     0,     0,     0,     0,  1873,  1874,  1875,
       0,  1876,  1877,  1878,  1879,  1880,  1881,     0,     0,     0,
       0,   947,   508,   646,     0,     0,  2411,     0,     0,     0,
       0,     0,     0,   827,     0,   499,  2770,     0,     0,   677,
       0,     0,     0,   834,     0,  1835,     0,     0,     0,     0,
     642,   977,   977,     0,     0,     0,   977,   995,     0,     0,
       0,  2885,     0,     0,     0,     0,     0,  1873,  1874,  1875,
       0,  1876,  1877,  1878,  1879,  1880,  1881,     0,   501,  1544,
       0,  1088,  1088,   656,   656,     0,   656,     0,     0,     0,
    1836,     0,     0,     0,   691,     0,     0,  2007,     0,   677,
       0,  2962,     0,     0,     0,   534,   943,     0,     0,   501,
     837,     0,     0,  2392,     0,     0,  1837,     0,     0,     0,
     688,     0,   631,     0,     0,     0,   501,     0,     0,     0,
     677,     0,     0,   677,  1838,     0,     0,    49,  1839,     0,
       0,   825,   501,     0,     0,     0,     0,   680,     0,     0,
       0,     0,     0,   501,   501,     0,     0,   501,     0,     0,
    1840,     0,     0,  1841,   677,   677,   677,   677,   677,     0,
       0,   828,     0,     0,   834,     0,   631,   501,  1842,    49,
       0,     0,     0,     0,     0,  3013,     0,  3015,   827,     0,
       0,     0,     0,     0,   501,     0,  1873,  1874,  1875,     0,
    1876,  1877,  1878,  1879,  1880,  1881,     0,   715,     0,   718,
       0,   722,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2958,     0,  2770,  1959,  1960,  1961,     0,  1962,
    1963,  1964,  1965,  1966,  1967,     0,  1012,     0,     0,  1865,
       0,     0,     0,  1866,     0,  1430,  1867,  1868,  1869,  3048,
    3049,     0,     0,  1470,  1470,     0,     0,   501,  1470,     0,
       0,   501,     0,   535,   638,     0,     0,     0,   535,     0,
    1843,   501,     0,   501,   690,   501,     0,   535,  1844,   501,
       0,     0,     0,   501,     0,   498,     0,   834,     0,     0,
     535,   535,     0,     0,     0,   501,     0,   640,     0,  1845,
       0,   501,     0,     0,   638,  3009,  1317,     0,     0,     0,
       0,   501,     0,     0,     0,   825,     0,     0,     0,   827,
    1561,     0,  1846,  1562,     0,   498,     0,  1563,     0,     0,
     834,     0,     0,     0,     0,     0,     0,   640,     0,     0,
       0,     0,     0,     0,     0,     0,   834,     0,   535,  3129,
       0,     0,     0,     0,     0,  1571,     0,     0,   501,     0,
       0,     0, -1912,  2765,     0,  3132,     0,     0,   501,  3136,
       0,     0,     0,     0,     0,   834,   977,   995,     0,     0,
       0,   677,   834,     0,     0,     0,     0,  1573,     0,     0,
     977,   977,     0,     0,   534,     0,     0,     0,     0,     0,
     642,   501,     0,     0,     0,   642,     0,     0,     0,     0,
     825,     0,   534,     0,   834,     0,     0,   834,  1822,     0,
    1823,   828,   834,     0,     0,     0,   501,  1524,     0,   638,
       0,     0,   827,  1544,  2080,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2770, -1912,  1317,     0,
     498,     0,     0,     0,  3204,     0,     0,  2372,     0,     0,
       0,     0,   640,     0,  1544,     0,     0,  3123,     0,     0,
       0,   501,  1471,     0,   638,   827,   534,  3219,     0,     0,
       0,   825,     0,     0,   501,   501,     0,     0, -1912,     0,
       0,   827,     0,     0,     0,   498,  1378,  1379,     0,     0,
       0,     0,   690,     0, -1912,     0,   825,   640,   501, -1912,
       0,     0,     0,     0,     0,     0,     0,  1872,     0,  1624,
     827,  1626,     0,     0,     0,     0,     0,   827,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   534,   534,     0,
       0,     0,   501,     0,     0,     0, -1912,     0,     0,     0,
       0,     0,   825,     0,     0,     0,     0,     0,     0,   827,
       0,     0,   827,     0,     0,     0,   677,   827,     0,     0,
     677,  1693,  1380,  1381,     0,     0,     0,     0,     0,     0,
       0,    49,     0,   677,     0,  2765,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     677,  1582,     0,     0,   677,     0,     0,    49,  1739,     0,
      49,     0,     0,     0,     0,   828,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   730,     0,   732,     0,  1164,
       0,   739,     0,     0,   740,     0,     0,  1382,  1383,  1384,
    1385,  1386,  1387,     0,     0,  1388,  1389,     0,  1165,     0,
     825,     0,  1470,  1470,  1470,  1470,  1470,     0,     0,  1470,
    1470,  1470,  1470,  1470,  1470,  1470,  1470,  1470,  1470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,   834,     0,
       0,  2118,     0,     0, -1912,     0,     0,     0,     0,  1166,
    2706,  2127,     0,  2130,     0,     0,  2141,   631,  2707,     0,
       0,     0,  2145,     0,  2147,     0,  1873,  1874,  1875,     0,
    1876,  1877,  1878,  1879,  1880,  1881,  2154,     0,     0,     0,
     962,  2157,     0,     0,     0,  2162,  2163,  2164,  2165,     0,
    2169,  2170,  1753,     0,     0,     0,   677,     0,     0,     0,
       0,   677,  1390,  1391,     0,     0,     0,     0,     0,     0,
       0,   825,     0,  1788,     0,     0,  2708,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   828,     0,     0,     0,
       0,     0,     0,   535,     0,     0,     0,  1470,  1470,     0,
    1167,     0,     0,  1806,  1806,     0,     0, -1912,     0,     0,
       0,     0,     0,     0,  1589,  1590,  1591,  1592,  1593,  1594,
       0,     0,     0,   535,   535,     0,     0,     0,     0,     0,
       0,  1145,     0,     0,     0,     0,     0,   830,     0,   840,
       0,   831,   840,   827,   534,   534,     0,   534,   840,     0,
       0,  1168,     0,  1561,     0,     0,  1562,     0,     0,  1169,
    1563,     0,     0,     0,     0,  1333,  1335,  1338,  1340,  1341,
       0,  1170,   834,  2709,     0,     0,  1392,  1393,     0,     0,
       0,     0,     0,     0,     0,   825,     0,    49,  1571,     0,
       0,     0,     0,     0,     0, -1912,  1394,     0,     0,     0,
       0,     0,  1171,     0,   499,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   977,     0,  1909,
    1573,     0,   534,     0,  1088,  1088,  1544,   677,     0,   642,
       0,     0,     0,     0,   642,     0,   642,     0,   642,     0,
     534,     0,     0,   534,     0,     0,   535,     0,     0,     0,
    1173,     0,   828,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1970,     0,   833,     0,   834,  1974,     0,
       0,    49,  1174,    49,     0,     0,     0,     0,     0,     0,
       0,     0,   828,   828,     0,  1471,  1471,     0,  1012,     0,
    1471,  1865,  1176,     0,  2710,  1866,     0,  2711,  1867,  1868,
    1869,     0,     0,   840,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2871,     0,   827,     0,     0,
       0, -1912,     0,     0,     0,     0,     0,     0,     0,   828,
       0,     0,     0,     0,  1088,    49,    49, -1912,   834,     0,
       0,     0, -1912,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2056,     0,   677,     0,   677,
       0,     0,     0,   834,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1822,     0,     0,     0, -1912,
       0,     0,  1464,     0, -1628,     0,     0,   830,     0,     0,
       0,   831,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1704,   677,     0,     0,     0,   825,     0,   834,
       0,     0,   827,   677,  2108,     0,     0,  1693,   534,     0,
    2047,     0,     0,     0,     0,     0,     0,     0,   534,  2128,
     534,  2132,     0,   534,  1582,    49,     0,     0,     0,   534,
       0,   534,     0,  1561,     0,     0,  1562,     0,     0,     0,
    1563,    49,   840,   534,     0,    49,     0,   840,   534,     0,
       0,     0,   534,   534,   534,   534,  1471,   534,   534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1571, -1628,
       0,  1470,  1470,   827,   828, -1912,     0,     0,   677,     0,
       0,     0,   677,   677,   677,   677,     0,     0,     0,  1871,
       0,     0,     0,     0,     0,     0,     0,   834,   827,  2207,
    1573,     0,     0,     0,     0,   833,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1912,     0,     0,
    2529, -1628,     0,     0,     0,  1488,     0,     0,     0,     0,
      49,     0,     0,     0,   834, -1628,     0,     0,     0,     0,
   -1628,     0,     0,  1511,   827, -1628,     0,     0,     0,     0,
       0,     0,     0,    49, -1628,     0,     0,     0, -1628,  1872,
       0,  1685,     0,     0,     0,     0,     0,     0,     0,     0,
    2382,   830,     0,     0,  1712,   831,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1628,
       0,     0,     0,     0,     0,  1736,     0,     0,     0,     0,
       0, -1912,     0,     0,     0,   828,     0,  1553,   834, -1628,
       0,     0,     0,     0,     0,     0,     0, -1912,     0,     0,
   -1912,     0, -1912,   534,     0,     0,     0,  1589,  1590,  1591,
    1592,  1593,  1594,     0,     0,   677,  1447,     0,   515,     0,
       0,     0,   827,     0,     0,     0,     0,     0,   642,     0,
       0,     0,     0,     0,   534,  1470,     0,     0, -1628, -1912,
       0, -1628,     0,     0,     0,     0,     0, -1628,   535,   535,
       0,     0,     0,     0,  1471,  1471,  1471,  1471,  1471,   827,
       0,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,
    1471,     0,     0,   534,  2863,     0,     0,  2363,     0,   833,
       0,   534, -1628,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,     0,     0,   828,     0,
       0,     0,   834,     0,     0, -1628,     0,     0,     0,     0,
       0,     0,   830,     0,     0,     0,   831,  1760,  1970,     0,
       0,  2665,  1774,     0,  1378,  1379,     0,     0,     0,     0,
       0,     0,     0,   827,     0,     0,     0,     0,  1873,  1874,
    1875,   828,  1876,  1877,  1878,  1879,  1880,  1881,  2717,   642,
       0,     0,     0,     0,  1470,     0,     0,   828,     0,     0,
       0,   678,   534,  2774,  2775,  2776,  2777,  2778,  2779,  2780,
    2781,  2782,  2783,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   828, -1912, -1628,  1471,
    1471,     0,     0,   828,     0,     0,     0, -1628,     0,     0,
    1380,  1381,     0,   642,     0,     0,     0,  2108,     0,     0,
       0,     0,     0,     0, -1628,     0, -1628, -1628,     0,     0,
       0,     0,     0,  1753,     0,   828,     0,     0,   828,     0,
       0,     0,     0,   828,     0,     0,     0,     0,     0,     0,
     833,     0,     0,     0,     0,     0,     0,   827,     0,     0,
       0,     0,     0, -1628,     0,     0, -1628, -1628, -1628,     0,
       0,     0,     0,     0,     0,  1382,  1383,  1384,  1385,  1386,
    1387,     0,     0,  1388,  1389,     0,     0,     0,   830,     0,
       0,     0,   831,     0,     0,     0,  1753,     0,  1920,     0,
   -1912,     0,  1470,   677,     0,     0,     0,  1589,  1590,  1591,
    1592,  1593,  1594,  1753,   677,   677,   677,     0,   830,   830,
       0,     0,   831,   831,     0,     0,     0,   534,     0,   677,
       0,     0,   677,     0,   834,     0,     0,   677,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2547,
       0,     0,     0,     0,     0,   535,   535,     0,   535,     0,
       0,     0,     0,     0,     0,   830,     0,   840,     0,   831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2913,  1753,  1753,     0,  1753,     0,     0,     0,     0,     0,
    1390,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   833,     0,     0,     0,
    1561,     0,     0,  1562,     0,     0,     0,  1563,  2057,     0,
    2059,     0,  2579,   535,     0,     0,     0,     0,     0,     0,
       0,   677,   677,   677,     0,     0,   833,   833,   534,     0,
       0,  1933,   534,     0,  1936,  1571,     0,     0,     0,     0,
       0,     0, -1912,     0,     0,     0,     0,  1970,     0,     0,
       0,     0,     0,     0,  2096,     0,     0,     0,     0,   827,
       0,     0,     0,     0,  2105,     0,     0,  1573,  1561,     0,
       0,  1562,     0,   833,     0,  1563,  1564,  1565,  1566,  1567,
    1568,     0,     0,     0,  1392,  1393,     0,     0,     0,   828,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
     830,     0,     0,  1571,   831,     0,     0,     0,     0,     0,
    1572,   677,     0,     0,     0,     0,  2650,     0,     0,  2655,
       0,     0,     0,     0,     0,  2108,     0,     0,   534,     0,
       0,     0,  1753,  1693,  1753,  1573,  1788,  2622,     0,  2191,
       0,     0,     0,  2194,  2196,  2197,  2198,     0,     0,     0,
       0,     0,     0,     0,     0,   534,     0,  2718,     0,     0,
       0,     0,     0,  1471,  1471,     0,     0,     0, -1912,     0,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
       0,     0,     0,     0, -1912,     0,     0,     0,     0, -1912,
       0,     0,     0,     0,     0,  3034,     0,  2207,     0,     0,
       0,     0,     0,   677,     0,     0,     0,     0,     0,   535,
       0,     0,     0,  1693,     0,  3041,  3042,     0,     0,   535,
       0,   535,     0,     0,   535,     0, -1912,     0,   833,  1788,
     535,   830,   535, -1630,  3054,   831,  1574,     0,     0,     0,
       0,     0,     0,     0,   535,     0,     0,     0,  1753,   535,
       0,     0,  1575,   535,   535,   535,   535,  1576,   535,   535,
       0,     0,     0,   828,     0,   534,     0,     0,     0,     0,
       0,     0,   677,   677,   677,   677,     0,     0,     0,  1577,
    1578,  1582,     0,     0,   840,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1579,     0,  2330,  2861,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2881,     0,   642,     0,     0,     0, -1630,     0,
       0,     0,  1580,  1970,     0,  1581,     0,     0,  1088,     0,
       0,     0,     0,     0,   830,     0,     0,  1471,   831,  1582,
       0,  2108,  1583,     0,     0,     0,     0,  1693,   828,   833,
       0,     0,     0,  1753,     0,     0,     0,     0,     0,     0,
       0,     0,  3158,     0, -1912,     0,   840,   534,     0,     0,
   -1630,     0,     0,     0,   677,     0,     0,   830,     0,     0,
       0,   831,     0,     0, -1630,     0,     0,     0,     0, -1630,
       0,  2933,     0,   830, -1630,     0,     0,   831,     0,     0,
       0,     0,     0, -1630,     0,     0,     0, -1630,     0,     0,
       0,     0,     0,     0,   535,     0,     0,     0,     0,   828,
       0,     0,   830,     0,     0,     0,   831,     0,     0,   830,
       0,     0,  1584,   831,     0,     0,     0,     0, -1630,     0,
       0,     0,     0,     0,   828,  1936,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1471,     0, -1630,     0,
       0,   830,   833,     0,   830,   831,     0, -1912,   831,   830,
       0,  1753,     0,   831,  1589,  1590,  1591,  1592,  1593,  1594,
       0,     0,     0,  2207,   535,     0,     0,     0,     0,     0,
     828,     0,  1553,     0,     0,  1561,     0,  2976,  1562,     0,
       0,     0,  1563,     0,     0,   833,     0, -1630,     0,     0,
   -1630,     0,     0,     0,     0,     0, -1630,     0,     0,     0,
       0,   833,     0,     0,     0,     0,     0,     0,     0,     0,
    1571,     0,     0,  2995,     0,  1585,     0, -1912,  1586,  1587,
    1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,     0,     0,
     833, -1630,     0,     0,     0,  1858,     0,   833,     0,  3007,
       0,     0,  1573,     0,  2506,     0,     0,     0,     0,     0,
       0,  2655,     0,   535, -1630,  2518,  2519,  2521,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   828,   833,
    2532,     0,   833,  2535,  1471,     0,     0,   833,  2540,     0,
       0,     0,   534,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   534,   534,     0,   828,     0,  1069,  1069,     0,
     678,     0,  2625,     0,     0,   677,     0,  1693,     0,     0,
       0,   534,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   677,     0, -1630,  3077,     0,
       0,     0,     0, -1912,     0,     0, -1630,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1912,
       0,     0,     0, -1630, -1912, -1630, -1630,     0,     0,     0,
    1232,  1239,  1088,     0,     0,     0,     0,     0,  3077,   828,
       0,   677,  2586,  2587,  2588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1912, -1630,     0,     0, -1630, -1630, -1630,   535,     0,
       0,   677,     0,     0,     0,   830,     0,     0,     0,   831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2995,     0,
       0,     0,     0,     1,     0,     0,  1582,     0,     0,   534,
       0,     0,     0,     2,     0,     3,     4,     0,     0,     0,
       0,     0,  2646,     0,     0,     0,     5,     0,     0,     0,
       0,     6,     0,     0,     0,     0,     0,  1693,     0,     0,
       7,     0,     0,   828,     0,     0,     0,     0,     0,   840,
     840,   840,     8,  3077,     0,     0,     0,     0,     0,     0,
       0,  1909,     0,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,    11,     0,   535,
       0,     0,     0,  1933,     0,     0,     0,     0,     0,     0,
       0,  1693,     0,   833,     0,    12,     0,     0,  3077, -1912,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,     0,     0,     0,  2798,     0,  2108,     0,     0,    15,
       0,     0,     0,     0,     0,    16,     0,     0,     0,     0,
       0,   840,     0,    17,     0,    18,    19,     0,     0,   830,
       0,     0,     0,   831,     0,     0,  1442,     0,     0,    20,
       0,     0,     0,    21,     0,     0,  1463,     0,     0,  1465,
       0,     0,  1475,  1478,  1483,  1486,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1151,     0,    22,   535,
       0,     0,  1152,  2834,  2835,  2836,  2837,     0,     0,  1164,
       0,     0,     0,    23,     0,     0,     0,     0,  1232,     0,
       0,     0, -1912,     0,     0,     0,   535,     0,  1165,  1589,
    1590,  1591,  1592,  1593,  1594,  1528,     0,     0,     0,    24,
       0,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,     0,  1532,     0,   830,     0,     0,     0,   831,     0,
       0,     0,     0,  1535,  1536,  1537,     0,  1541,  1545,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1166,
       0,     0,     0,     0,     0,   828,     0,   833,     0,     0,
       0,     0,     0,     0,  1603,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1153,     0,
       0,     0,     0,     0,     0,  2920,     0,    25,     0,     0,
      26,     0,     0,     0,     0,   830,     0,     0,     0,   831,
       0,     0,     0,     0,     0,     0,  1933,     0,     0,     0,
    1429,     0,     0,  1642,     0,     0,     0,  1658,  1663,    27,
     830,  1445,  1446,     0,   831,     0,  1461,  1462,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1167,     0,    29,     0,     0,     0,     0,     0,     0,    30,
   -1644,     0,   833,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,   830,     0,     0,  1429,
     831,     0,     0,     0,     0,    33,     0,  1232,     0,    34,
    1560,     0,     0,     0,     0,  1561,     0,     0,  1562,  1232,
       0,  1168,  1563,  1564,  1565,  1566,  1567,  1568,    35,  1169,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1170,  1569,    36,  1232,  1570,    37,     0,   535,     0,
    1571,    38,     0,   833,     0,     0,     0,  1572,     0,     0,
       0,     0,  1154,     0,     0,    39,  1558,     0,     0,     0,
       0,     0,  1171,     0,     0, -1644,     0,     0,   833,     0,
       0,     0,  1573,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,  1429,   830,  1429,  1429,     0,   831,     0,
       0,     0,     0,    41,     0,     0,   -43,     0,     0,     0,
       0,     0,     0,     0,  1172,     0,     0,     0,  1156,     0,
    1173,     0,     0,     0,   833,     0,     0, -1644,     0,     0,
       0,   830,     0,     0,     0,   831,     0,     0,     0,     0,
       0, -1644,  1174,     0,     0,     0, -1644,     0,  1175,     0,
       0, -1644,     0,     0,     0,     0,     0,     0,     0,     0,
   -1644,     0,  1176,  1429, -1644,     0,  1429,  1429,     0,     0,
       0,     0,     0,     0,     0,     0,  3050,     0,     0,     0,
       0,     0,     0,  1574,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1644,  3074,     0,     0,  1575,
       0,     0,     0,     0,  1576,   830,     0,     0,     0,   831,
       0,     0,     0,     0,     0, -1644,     0,  1158,     0,     0,
       0,     0,   833,     0,     0,     0,  1577,  1578,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1472,  1579,  3102,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   833,
    1851,     0,     0,     0, -1644,     0,     0, -1644,     0,     0,
       0,     0,  3128, -1644,     0,     0,     0,     0,     0,  1580,
       0,     0,  1581,   535,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1483,  1582,  1483,  1483,  1583,
       0,     0,     0,   535,   535,     0,     0,     0, -1644,     0,
    1069,  1069,     0,     0,     0,     0,     0,     0,     0,   830,
       0,     0,   535,   831,     0,     0,     0,     0,     0,     0,
       0, -1644,     0,   833,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1794,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1803,     0,  1804,
       0,     0,     0,  1985,     0,  1810,     0,     0,     0,  1989,
    1990,  1991,  1992,  1993,  1994,  1995,     0,   678,  1597,  1584,
    2004,  2005,  1811,     0,     0,  2016,     0,     0,     0,  2019,
       0,     0,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,
    2035,     0,     0,  2036, -1644,     0,     0,     0,     0,     0,
    1069,     0,  1232, -1644,     0,  1829,  1831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1644,     0, -1644, -1644,     0,     0,  2061,   833,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     535,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1561,     0,     0,  1562,  1536,  1537,     0,  1563, -1644,
       0,     0, -1644, -1644, -1644,     0,     0,     0,     0,     0,
       0,     0,  1585,     0,     0,  1586,  1587,  1588,     0,  1589,
    1590,  1591,  1592,  1593,  1594,     0,  1571,  1561,  1597,     0,
    1562,     0,     0, -1912,  1563,  1597,     0, -1912, -1912, -1912,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
       0,   830,  1571,     0,     0,   831,     0,     0,     0,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1232,     0,     0,  2179,  2180,     0,  2181,     0,     0,
       0,     0,     0,     0,  1573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1232,     0,  1561,     0,     0,  1562,     0,  2626,     0,
    1563,  1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1569,     0,     0,  2607,     0,     0,     0,     0,  1571, -1912,
       0,     0,     0,     0,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1912,     0,  2090,  2090,     0,
   -1912,     0,     0,     0,     0,     0,     0,     0,     0,   833,
    1573,  2279,     0,     0,  2280,  1574,  2281,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,  1576, -1912,     0,     0,
       0,     0,     0,     0,  2306,  2307,     0,     0,  2061,     0,
       0,     0,     0,     0,  1429,     0,     0,     0,  1597,     0,
       0,     0,     0,     0,  1429,     0,     0,  1429,  1561,     0,
       0,  1562,     0,  1579,     0,  1563,     0,  2334,     0,  1597,
    2337,  1597,     0,  1472,  1472,  1882,     0,     0,  1472,     0,
       0,  1597,  1582,     0,  1597,  1232,     0,     0,     0,  1597,
       0,     0,  1597,  1571,     0,  2350,     0,     0,     0,     0,
   -1912,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,  1582,     0,
       0,  2361,  1576,     0,     0,  1573,  2364,     0,     0,  2366,
       0,     0,     0,     0,  1597,     0,  2242,  2244,  1597,     0,
       0,  1597,  1597,  1597,  1577,  1578,     0,  1597,     0,     0,
       0,  1597,     0,     0,     0,     0,     0,     0,     0,  1579,
       0,     0,  1429,     0,     0,     0,  2384,     0,     0,  2387,
       0,  2389,     0,     0,     0, -1912,     0,  1561,     0,     0,
    1562,     0,     0,     0,  1563,  1564,  1565,  1566,  1567,  1568,
       0,     0,     0,     0,     0,  2874,     0,  1580,     0,     0,
    1581,     0,     0,     0,  1569,     0,     0,     0,     0,  1597,
       0,  1584,  1571,     0,  1582,  1642,     0,  1583,     0,  1572,
       0,     0,     0,     0,     0,     0, -1912,     0,     0,     0,
       0,     0,  1663,  2034,     0,     0,     0,     0,     0,     0,
       0,     0, -1912,     0,  1573,     0,     0, -1912,  1597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2439,     0,     0,  1597,  1429,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0, -1912,     0,
       0,     0,     0,     0, -1912,  1589,  1590,  1591,  1592,  1593,
    1594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1584,     0,     0,
       0,     0,     0,     0,  1585,     0,     0, -1912, -1912, -1912,
    1232,  1589,  1590,  1591,  1592,  1593,  1594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,
       0,     0,     0,     0,     0,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,  1576,     0,     0,     0,
       0,  2538,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,  2403,     0,     0,  1152,     0,     0,  1577,  1578,
       0,     0,  1164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,  2416,  2416,     0,     0,     0,     0,
    1585,  1165,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,
    1592,  1593,  1594,     0,     0,     0,     0,  1979,     0,     0,
       0,     0, -1912,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1597,  1582,     0,
       0,  1583,  1166,     0,     0,     0,     0,     0,     0,  1882,
    1882,     0,  1472,  1472,  1472,  1472,  1472,     0,     0,  1472,
    1472,  1472,  1472,  1472,  1472,  1472,  1472,  1472,  1472,  1882,
       0,  1153,     0,     0,     0,     0,     0,  2598,     0,     0,
       0,     0,     0,     0,     0,     0,  2603,     0,     0,     0,
       0,     0,     0,     0,     0,  2611,     0,     0,  2614,     0,
    2616,     0,     0,     0,     0,     0,     0,     0,  2620,     0,
       0,     0,     0,     0,     0, -1912,  2627,  2628,     0,     0,
    2631,     0,  1589,  1590,  1591,  1592,  1593,  1594,     0,     0,
       0,  1584,     0,  1167,     0,     0,     0,     0,     0,     0,
       0,  2543,     0,     0,     0,     0,     0,     0,     0,     0,
    2647,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2664,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,     0,  1597,  1597,  1597,  1597,  1597,
    1597,  1597,     0,     0,  1168,     0,     0,  1472,  1472,     0,
    1597,  1597,  1169,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1597,     0,  1170,  1597,     0,     0,     0,     0,
       0,     0,     0,  1597,  1597,  1597,  1597,  1597,  1597,  1597,
    1597,  1597,  1597,     0,     0,  1154,     0,     0,     0,     0,
       0,     0,     0,     0,  1585,  1171,     0,  1586,  1587,  1588,
       0,  1589,  1590,  1591,  1592,  1593,  1594,  1597,     0,     0,
       0,  1979,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1561,     0,     0,  1562,     0,     0,
       0,  1563,  1564,  1565,  1566,  1567,  1568,  2148,     0,     0,
       0,  1156,     0,  1173,     0,     0,     0,     0,     0,     0,
       0,  1569,     0,     0,     0,     0,     0,     0,     0,  1571,
       0,     0,     0,     0,     0,  1174,  1572,     0,     0,     0,
       0,  2149,     0,     0,     0,  2851,  2852,     0,     0,     0,
       0,     0,     0,  2857,     0,  1176,     0,     0,     0,     0,
       0,  1573,     0,     0,  2862,     0,     0,     0,  2864,  2865,
       0,     0,     0,  2866,     0,     0,     0,     0,  2869,     0,
       0,  2872,  2873,     0,     0,     0,  2877,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,  1597,  1597,     0,     0,
       0,     0,     0,     0,  1069,     0,     0,     0,     0,     0,
    1158,     0,     0,     0,  1429,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2908,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1574,  2927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,  1597,  1597,     0,     0,
    1882,  1882,  1882,  1882,  1882,  1577,  1578,     0,  1882,  1882,
    1882,  1882,  1882,  1882,  1882,  1882,  1882,  1882,     0,     0,
    1579,     0,  1597,  1597,     0,  1561,     0,     0,  1562,     0,
       0,     0,  1563,  1564,  1565,  1566,  1567,  1568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1597,  2954,  1569,  1597,     0,     0,     0,     0,  1580,     0,
    1571,  1581,     0,     0,     0,     0,  1597,  1572,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,  1597,  1583,     0,
    1597,     0,  1597,     0,     0,     0,  1882,  1882,     0,   538,
       0,     0,  1573,     0,     0,     0,     0,     0,     0,  1545,
    1597,  1472,  1472,  1597,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2361,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3002,  3003,     0,     0,
    3004,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   539,  1429,     0,     0,     0,     0,  1429,     0,
    3020,     0,     0,     0,     0,  1597,     0,     0,   540,     0,
       0,     0,     0,     0,     0,     0,     0,  3029,  1584,     0,
       0,     0,     0,     0,     0,     0,   541,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1574,     0,     0,     0,     0,     0,  1829,
    1831,     0,     0,     0,     0,     0,     0,     0,     0,  1575,
       0,     0,   542,     0,  1576,     0,     0,     0,     0,     0,
       0,     0,   543,     0,     0,     0,     0,     0,     0,     0,
    3073,     0,     0,     0,   544,     0,  1577,  1578,     0,   545,
       0,     0,     0,     0,     0,     0,     0,     0,  2851,     0,
       0,  1579,  3090,     0,  1597,     0,  3093,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   546,     0,  1069,     0,
       0,  1585,     0,     0,  1586,  1587,  1588,     0,  1589,  1590,
    1591,  1592,  1593,  1594,  3113,  1472,     0,     0,  2278,  1580,
       0,     0,  1581,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1582,     0,     0,  1583,
       0,   547,     0,     0,  1597,   548,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,  1597,     0,     0,
    1597,  3138,  1597,     0,     0,     0,  1597,     0,     0,  1882,
    1882,  2851,     0,  1597,  1597,     0,     0,  1597,     0,     0,
    1561,     0,     0,  1562,     0,     0,     0,  1563,  1564,  1565,
    1566,  1567,  1568,  1597,     0,     0,     0,     0,  1829,  1831,
       0,     0,     0,     0,  3178,     0,     0,  1569,   549,  1429,
    1597,     0,     0,     0,     0,  1571,     0,     0,     0,     0,
       0,     0,  1572,   550,     0,     0,     0,     0,     0,  1584,
       0,     0,     0,     0,  1472,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
       0,     0,     0,     0,     0,     0,   551,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3228,  3228,   555,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   556,     0,     0,     0,     0,     0,     0,
     557,  3228,     0,     0,     0,     0,     0,     0,     0,   558,
       0,     0,     0,     0,     0,   559,     0,     0,     0,     0,
       0,     0,  1585,     0,     0,  1586,  1587,  1588,     0,  1589,
    1590,  1591,  1592,  1593,  1594,  3228,     0,     0,  1574,  2368,
       0,   560,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,     0,     0,     0,     0,  1576,
       0,  1882,  1472,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1577,  1578,     0,     0,     0,     0,  1597,  1597,     0,
       0,     0,     0,  1597,     0,     0,  1579,     0,  1597,     0,
    1597,  1597,  1597,     0,     0,  1597,     0,     0,  1597,  1597,
       0,     0,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,  1429,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,     0,     0,  1581,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,     0,
    1882,  1582,     0,     0,  1583,     0,     0,     0,     0,     0,
       0,     0,     0,  1597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,  1597,
    1597,     0,     0,     0,  1584,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1597,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1597,     0,     0,  1597,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1585,     0,  1597,
    1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,
       0,     0,     0,     0,  2567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,     0,     0,   104,
    1009,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,  1015,  1597,     0,   116,   117,     0,   118,
     119,   120,   121,   122,   123,   124,   125,  1016,   127,  1017,
    1018,     0,   130,   131,   132,   133,   134,   135,  1019,   604,
     136,   137,  1020,  1021,   140,     0,   141,   142,   143,   144,
     605,     0,   606,     0,  1022,   148,   149,   150,   151,   152,
     153,   154,   155,   156,  1597,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   607,   608,   609,   610,
     611,   612,   613,   172,   173,   174,   175,   176,   177,   178,
    1023,  1024,   181,  1025,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   780,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,  1026,   210,
     211,   212,   213,   214,   614,  1027,   216,     0,   217,   218,
    1028,   220,     0,   221,     0,   222,   223,    21,   224,   225,
     226,   227,   228,   229,     0,   230,     0,  1029,  1030,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,  1031,
    1032,     0,  1033,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,     0,   274,   275,   276,
     277,     0,   278,   279,   280,   616,   617,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,  1034,   306,  1035,   308,   309,   310,   311,  1036,   312,
     313,   314,   315,  1037,   618,   317,  1038,   319,   320,   321,
       0,   322,   323,     0,     0,  1039,   325,   326,     0,     0,
     327,   328,   329,   330,   331,   620,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   621,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,  1040,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,  1041,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    29,   398,   399,   400,
     401,   402,   623,   404,   405,   406,   407,   408,   409,   410,
     411,  1042,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   624,   429,
       0,   430,   431,    34,   432,   433,   434,   435,   436,   437,
     438,     0,  1043,  1044,     0,     0,   441,   442,   625,   444,
     626,  1045,   446,   447,   627,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,   628,     0,
     461,   462,   463,   464,   465,   629,  1046,     0,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,     0,    39,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,  1047,     0,    40,     0,     0,     0,     0,  1048,  1049,
       0,     0,     0,     0,     0,  1051,     0,  1052,  2991,     0,
       0,     0,  1053,  1054,  1055,  1056,  1190,  1009,   515,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,  1191,   113,   114,   115,     0,     0,     0,     0,
    1015,     0,     0,   116,   117,     0,   118,   119,   120,  1192,
     122,   123,   124,   125,  1016,  1193,  1017,  1018,     0,   130,
     131,   132,   133,   134,   135,  1019,   604,   136,   137,  1020,
    1021,   140,     0,   141,   142,   143,   144,   605,     0,  1194,
       0,  1195,   148,   149,   150,   151,   152,  1196,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,  1197,
     164,   165,   166,  1198,  1199,  1200,  1201,   611,   612,  1202,
     172,   173,   174,   175,   176,   177,   178,  1023,  1024,   181,
    1025,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,  1203,     0,   194,   195,   780,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,  1026,   210,   211,   212,   213,
     214,   614,  1027,   216,     0,   217,   218,  1028,   220,     0,
     221,     0,   222,  1204,     0,  1205,   225,   226,  1206,  1207,
     229,     0,   230,     0,  1029,  1030,   233,     0,   234,   235,
     236,   237,   238,   239,   240,  1208,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,  1209,
     254,   255,   256,   257,   258,   259,  1031,  1032,     0,  1033,
       0,   263,  1210,  1211,   266,  1212,   268,   269,   270,   271,
     272,   273,     0,     0,   274,  1213,   276,  1214,     0,   278,
     279,   280,   616,   617,   281,   282,   283,   284,   285,  1215,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,  1034,  1216,
    1035,   308,   309,   310,   311,  1036,   312,   313,  1217,   315,
    1037,   618,   317,  1038,   319,   320,   321,     0,   322,   323,
       0,     0,  1039,   325,   326,     0,     0,   327,   328,  1218,
     330,  1219,   620,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   621,  1220,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,  1040,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,  1221,   383,   384,
     385,  1041,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,  1222,
     404,   405,   406,   407,   408,  1223,   410,   411,  1042,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,  1224,   427,   624,   429,     0,   430,   431,
       0,   432,  1225,   434,   435,   436,   437,   438,     0,  1043,
    1044,     0,     0,   441,   442,   625,   444,   626,  1045,   446,
     447,  1226,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,  1227,     0,   461,   462,   463,
     464,   465,   466,  1046,  1228,   468,  1229,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,  1047,     0,
       0,     0,     0,     0,     0,  1048,  1049,  1230,     0,     0,
       0,     0,  1051,     0,  1052,  1231,     0,     0,     0,  1053,
    1054,  1055,  1056,   104,  1009,   515,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,  1015,     0,     0,
     116,   117,     0,   118,   119,   120,   121,   122,   123,   124,
     125,  1016,   127,  1017,  1018,     0,   130,   131,   132,   133,
     134,   135,  1019,   604,   136,   137,  1020,  1021,   140,     0,
     141,   142,   143,   144,   605,     0,   606,     0,  1022,   148,
     149,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     607,   608,   609,   610,   611,   612,   613,   172,   173,   174,
     175,   176,   177,   178,  1023,  1024,   181,  1025,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   780,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,  1026,   210,   211,   212,   213,   214,   614,  1027,
     216,     0,   217,   218,  1028,   220,     0,   221,     0,   222,
     223,    21,   224,   225,   226,   227,   228,   229,     0,   230,
       0,  1029,  1030,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,  1031,  1032,     0,  1033,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,     0,
       0,   274,   275,   276,   277,     0,   278,   279,   280,   616,
     617,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,  1034,   306,  1035,   308,   309,
     310,   311,  1036,   312,   313,   314,   315,  1037,   618,   317,
    1038,   319,   320,   321,     0,   322,   323,     0,     0,  1039,
     325,   326,     0,     0,   327,   328,   329,   330,   331,   620,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   621,   346,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,  1040,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,  1041,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      29,   398,   399,   400,   401,   402,   623,   404,   405,   406,
     407,   408,   409,   410,   411,  1042,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   624,   429,     0,   430,   431,    34,   432,   433,
     434,   435,   436,   437,   438,     0,  1043,  1044,     0,     0,
     441,   442,   625,   444,   626,  1045,   446,   447,   627,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,   628,     0,   461,   462,   463,   464,   465,   629,
    1046,     0,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,     0,    39,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,  1047,     0,    40,     0,     0,
       0,     0,  1048,  1049,     0,     0,     0,     0,     0,  1051,
       0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,
     104,  1009,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,  1015,     0,     0,   116,   117,     0,
     118,   119,   120,   121,   122,   123,   124,   125,  1016,   127,
    1017,  1018,  1479,   130,   131,   132,   133,   134,   135,  1019,
     604,   136,   137,  1020,  1021,   140,     0,   141,   142,   143,
     144,   605,     0,   606,     0,  1022,   148,   149,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   607,   608,   609,
     610,   611,   612,   613,   172,   173,   174,   175,   176,   177,
     178,  1023,  1024,   181,  1025,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   780,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,  1026,
     210,   211,   212,   213,   214,   614,  1027,   216,     0,   217,
     218,  1028,   220,     0,   221,     0,   222,   223,  1480,   224,
     225,   226,   227,   228,   229,     0,   230,     0,  1029,  1030,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
    1031,  1032,     0,  1033,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,  1481,   274,   275,
     276,   277,     0,   278,   279,   280,   616,   617,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,  1034,   306,  1035,   308,   309,   310,   311,  1036,
     312,   313,   314,   315,  1037,   618,   317,  1038,   319,   320,
     321,     0,   322,   323,     0,     0,  1039,   325,   326,     0,
       0,   327,   328,   329,   330,   331,   620,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     621,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,  1040,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,  1041,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,   623,   404,   405,   406,   407,   408,   409,
     410,   411,  1042,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   624,
     429,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,     0,  1043,  1044,     0,  1482,   441,   442,   625,
     444,   626,  1045,   446,   447,   627,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,   628,
       0,   461,   462,   463,   464,   465,   466,  1046,     0,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,  1047,     0,     0,     0,     0,     0,     0,  1048,
    1049,     0,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,   515,
    1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,  -628,   113,   114,   115,     0,     0,     0,
    -628,  1015,     0,     0,   116,   117,     0,   118,   119,   120,
     121,   122,   123,   124,   125,  1016,   127,  1017,  1018,     0,
     130,   131,   132,   133,   134,   135,  1019,   604,   136,   137,
    1020,  1021,   140,     0,   141,   142,   143,   144,   605,     0,
     606,     0,  1022,   148,   149,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   607,   608,   609,   610,   611,   612,
     613,   172,   173,   174,   175,   176,   177,   178,  1023,  1024,
     181,  1025,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     780,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,  1026,   210,   211,   212,
     213,   214,   614,  1027,   216,     0,   217,   218,  1028,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,  1029,  1030,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,  1031,  1032,     0,
    1033,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,     0,     0,   274,   275,   276,   277,     0,
     278,   279,   280,   616,   617,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,  1034,
     306,  1035,   308,   309,   310,   311,  1036,   312,   313,   314,
     315,  1037,   618,   317,  1038,   319,   320,   321,     0,   322,
     323,     0,     0,  1039,   325,   326,     0,     0,   327,   328,
     329,   330,   331,   620,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   621,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,  1040,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,  1041,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
     623,   404,   405,   406,   407,   408,   409,   410,   411,  1042,
     413,  -628,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   624,   429,     0,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,     0,
    1043,  1044,     0,     0,   441,   442,   625,   444,   626,  1045,
     446,   447,   627,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,   628,     0,   461,   462,
     463,   464,   465,   466,  1046,     0,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,  1047,
       0,     0,     0,     0,     0,     0,  1048,  1049,     0,     0,
       0,     0,     0,  1051,     0,  1052,     0,     0,     0,     0,
    1053,  1054,  1055,  1056,   104,  1009,   515,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
    1638,   113,   114,   115,     0,     0,     0,     0,  1015,     0,
       0,   116,   117,     0,   118,   119,   120,   121,   122,   123,
     124,   125,  1016,   127,  1017,  1018,     0,   130,   131,   132,
     133,   134,   135,  1019,   604,   136,   137,  1020,  1021,   140,
       0,   141,   142,   143,   144,   605,     0,   606,     0,  1022,
     148,   149,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   607,   608,   609,   610,   611,   612,   613,   172,   173,
     174,   175,   176,   177,   178,  1023,  1024,   181,  1025,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   780,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,  1026,   210,   211,   212,   213,   214,   614,
    1027,   216,     0,   217,   218,  1028,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,  1029,  1030,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,  1031,  1032,     0,  1033,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
       0,     0,   274,   275,   276,   277,     0,   278,   279,   280,
     616,   617,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,  1034,   306,  1035,   308,
     309,   310,   311,  1036,   312,   313,   314,   315,  1037,   618,
     317,  1038,   319,   320,   321,     0,   322,   323,     0,     0,
    1039,   325,   326,     0,     0,   327,   328,   329,   330,   331,
     620,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   621,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,  1040,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,  1041,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,   623,   404,   405,
     406,   407,   408,   409,   410,   411,  1042,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   624,   429,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,     0,  1043,  1044,     0,
       0,   441,   442,   625,   444,   626,  1045,   446,   447,   627,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,   628,     0,   461,   462,   463,   464,   465,
     466,  1046,     0,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,  1639,     0,     0,     0,     0,
    1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,   104,  1009,   515,  1010,  1011,  1012,  1013,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,  2838,   113,   114,
     115,     0,     0,     0,     0,  1015,     0,     0,   116,   117,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  1016,
     127,  1017,  1018,     0,   130,   131,   132,   133,   134,   135,
    1019,   604,   136,   137,  1020,  1021,   140,     0,   141,   142,
     143,   144,   605,     0,   606,     0,  1022,   148,   149,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   163,   164,  2839,   166,   607,   608,
     609,   610,   611,   612,   613,   172,   173,   174,   175,   176,
     177,   178,  1023,  1024,   181,  1025,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   780,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
    1026,   210,   211,   212,   213,   214,   614,  1027,   216,     0,
     217,   218,  1028,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,  2840,
    1030,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,  1031,  1032,     0,  1033,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     275,   276,   277,     0,   278,   279,   280,   616,   617,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,  1034,   306,  1035,   308,   309,   310,   311,
    1036,   312,   313,   314,   315,  1037,   618,   317,  1038,   319,
     320,   321,     0,   322,   323,     0,     0,  1039,   325,   326,
       0,     0,   327,   328,   329,   330,   331,   620,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   621,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
    1040,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,  2841,  1041,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   623,   404,   405,   406,   407,   408,
     409,   410,   411,  1042,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     624,   429,     0,   430,   431,     0,   432,   433,   434,   435,
     436,   437,   438,     0,  1043,  1044,     0,     0,   441,   442,
     625,   444,   626,  1045,   446,   447,   627,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
     628,     0,   461,   462,   463,   464,   465,   466,  1046,     0,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,  2842,     0,     0,     0,     0,  1051,     0,  2843,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,
     515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,  1015,     0,     0,   116,   117,     0,   118,   119,
     120,   121,   122,   123,   124,   125,  1016,   127,  1017,  1018,
       0,   130,   131,   132,   133,   134,   135,  1019,   604,   136,
     137,  1020,  1021,   140,     0,   141,   142,   143,   144,   605,
       0,   606,     0,  1022,   148,   149,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   607,   608,   609,   610,   611,
     612,   613,   172,   173,   174,   175,   176,   177,   178,  1023,
    1024,   181,  1025,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   780,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,  1026,   210,   211,
     212,   213,   214,   614,  1027,   216,     0,   217,   218,  1028,
     220,     0,   221,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,  1029,  1030,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,  1031,  1032,
       0,  1033,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,     0,     0,   274,   275,   276,   277,
       0,   278,   279,   280,   616,   617,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    1034,   306,  1035,   308,   309,   310,   311,  1036,   312,   313,
     314,   315,  1037,   618,   317,  1038,   319,   320,   321,     0,
     322,   323,     0,     0,  1039,   325,   326,     0,     0,   327,
     328,   329,   330,   331,   620,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   621,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,  1040,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,  1041,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,   623,   404,   405,   406,   407,   408,   409,   410,   411,
    1042,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   624,   429,     0,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
       0,  1043,  1044,     0,     0,   441,   442,   625,   444,   626,
    1045,   446,   447,   627,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,   628,     0,   461,
     462,   463,   464,   465,   466,  1046,     0,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
    1047,     0,     0,     0,     0,     0,     0,  1048,  1049,  1050,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,   104,  1654,   515,  1010,  1011,
    1012,  1655,  1014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,  1656,   113,   114,   115,     0,     0,     0,     0,  1015,
       0,     0,   116,   117,     0,   118,   119,   120,   121,   122,
     123,   124,   125,  1016,   127,  1017,  1018,     0,   130,   131,
     132,   133,   134,   135,  1019,   604,   136,   137,  1020,  1021,
     140,     0,   141,   142,   143,   144,   605,     0,   606,     0,
    1022,   148,   149,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   607,   608,   609,   610,   611,   612,   613,   172,
     173,   174,   175,   176,   177,   178,  1023,  1024,   181,  1025,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   780,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,  1026,   210,   211,   212,   213,   214,
     614,  1027,   216,     0,   217,   218,  1028,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,  1029,  1030,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,  1031,  1032,     0,  1033,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,     0,     0,   274,   275,   276,   277,     0,   278,   279,
     280,   616,   617,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,  1034,   306,  1035,
     308,   309,   310,   311,  1036,   312,   313,   314,   315,  1037,
     618,   317,  1038,   319,   320,   321,     0,   322,   323,     0,
       0,  1039,   325,   326,     0,     0,   327,   328,   329,   330,
     331,   620,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   621,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,  1040,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
    1041,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,   623,   404,
     405,   406,   407,   408,   409,   410,   411,  1042,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   624,   429,     0,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,     0,  1043,  1044,
       0,     0,   441,   442,   625,   444,   626,  1045,   446,   447,
     627,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,   628,     0,   461,   462,   463,   464,
     465,   466,  1046,     0,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,  1047,     0,     0,
       0,     0,     0,     0,  1048,  1049,     0,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   104,  1009,   515,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,  1015,     0,     0,   116,
     117,     0,   118,   119,   120,   121,   122,   123,   124,   125,
    1016,   127,  1017,  1018,     0,   130,   131,   132,   133,   134,
     135,  1019,   604,   136,   137,  1020,  1021,   140,     0,   141,
     142,   143,   144,   605,     0,   606,     0,  1022,   148,   149,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   607,
     608,   609,   610,   611,   612,   613,   172,   173,   174,   175,
     176,   177,   178,  1023,  1024,   181,  1025,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   780,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,  1026,   210,   211,   212,   213,   214,   614,  1027,   216,
       0,   217,   218,  1028,   220,     0,   221,     0,   222,   223,
    1480,   224,   225,   226,   227,   228,   229,     0,   230,     0,
    1029,  1030,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,  1031,  1032,     0,  1033,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,     0,     0,
     274,   275,   276,   277,     0,   278,   279,   280,   616,   617,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,  1034,   306,  1035,   308,   309,   310,
     311,  1036,   312,   313,   314,   315,  1037,   618,   317,  1038,
     319,   320,   321,     0,   322,   323,     0,     0,  1039,   325,
     326,     0,     0,   327,   328,   329,   330,   331,   620,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   621,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,  1040,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,  1041,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,   623,   404,   405,   406,   407,
     408,   409,   410,   411,  1042,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   624,   429,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,     0,  1043,  1044,     0,     0,   441,
     442,   625,   444,   626,  1045,   446,   447,   627,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,   628,     0,   461,   462,   463,   464,   465,   466,  1046,
       0,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,  1047,     0,     0,     0,     0,     0,
       0,  1048,  1049,     0,     0,     0,     0,     0,  1051,     0,
    1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,   104,
    1009,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,  1015,     0,     0,   116,   117,     0,   118,
     119,   120,   121,   122,   123,   124,   125,  1016,   127,  1017,
    1018,     0,   130,   131,   132,   133,   134,   135,  1019,   604,
     136,   137,  1020,  1021,   140,     0,   141,   142,   143,   144,
     605,     0,   606,     0,  1022,   148,   149,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   607,   608,   609,   610,
     611,   612,   613,   172,   173,   174,   175,   176,   177,   178,
    1023,  1024,   181,  1025,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   780,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,  1026,   210,
     211,   212,   213,   214,   614,  1027,   216,     0,   217,   218,
    1028,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,  1029,  1030,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,  1031,
    1032,     0,  1033,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,     0,   274,   275,   276,
     277,     0,   278,   279,   280,   616,   617,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,  1034,   306,  1035,   308,   309,   310,   311,  1036,   312,
     313,   314,   315,  1037,   618,   317,  1038,   319,   320,   321,
       0,   322,   323,     0,     0,  1039,   325,   326,     0,     0,
     327,   328,   329,   330,   331,   620,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   621,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,  1040,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,  1041,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,   623,   404,   405,   406,   407,   408,   409,   410,
     411,  1042,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   624,   429,
       0,   430,   431,     0,   432,   433,   434,   435,   436,   437,
     438,     0,  1043,  1044,     0,     0,   441,   442,   625,   444,
     626,  1045,   446,   447,   627,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,   628,     0,
     461,   462,   463,   464,   465,   466,  1046,     0,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,  1047,     0,     0,     0,     0,     0,     0,  1048,  1049,
       0,     0,     0,     0,     0,  1051,     0,  1052,  1971,     0,
       0,     0,  1053,  1054,  1055,  1056,  1190,  1009,   515,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
    1015,     0,     0,   116,   117,     0,   118,   119,   120,  1192,
     122,   123,   124,   125,  1016,  1193,  1017,  1018,     0,   130,
     131,   132,   133,   134,   135,  1019,   604,   136,   137,  1020,
    1021,   140,     0,   141,   142,   143,   144,   605,     0,  1194,
       0,  1195,   148,   149,   150,   151,   152,  1196,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,  1197,
     164,   165,   166,  1198,  1199,  1200,  1201,   611,   612,  1202,
     172,   173,   174,   175,   176,   177,   178,  1023,  1024,   181,
    1025,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   780,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,  1026,   210,   211,   212,   213,
     214,   614,  1027,   216,     0,   217,   218,  1028,   220,     0,
     221,     0,   222,  1204,     0,  1205,   225,   226,  1206,  1207,
     229,     0,   230,     0,  1029,  1030,   233,     0,   234,   235,
     236,   237,   238,   239,   240,  1208,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,  1209,
     254,   255,   256,   257,   258,   259,  1031,  1032,     0,  1033,
       0,   263,  1210,  1211,   266,  1212,   268,   269,   270,   271,
     272,   273,     0,     0,   274,  1213,   276,  1214,     0,   278,
     279,   280,   616,   617,   281,   282,   283,   284,   285,  1215,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,  1034,  1216,
    1035,   308,   309,   310,   311,  1036,   312,   313,  1217,   315,
    1037,   618,   317,  1038,   319,   320,   321,     0,   322,   323,
       0,     0,  1039,   325,   326,     0,     0,   327,   328,  1218,
     330,  1219,   620,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   621,  1220,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,  1040,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,  1221,   383,   384,
     385,  1041,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,  1222,
     404,   405,   406,   407,   408,  1223,   410,   411,  1042,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,  1224,   427,   624,   429,     0,   430,   431,
       0,   432,  1225,   434,   435,   436,   437,   438,     0,  1043,
    1044,     0,     0,   441,   442,   625,   444,   626,  1045,   446,
     447,  1226,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,  1227,     0,   461,   462,   463,
     464,   465,   466,  1046,  2174,   468,  1229,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,  1047,     0,
       0,     0,     0,     0,     0,  1048,  1049,     0,     0,     0,
       0,     0,  1051,     0,  1052,     0,     0,     0,     0,  1053,
    1054,  1055,  1056,  1190,  1009,   515,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,  1015,     0,     0,
     116,   117,     0,   118,   119,   120,  1192,   122,   123,   124,
     125,  1016,  1193,  1017,  1018,     0,   130,   131,   132,   133,
     134,   135,  1019,   604,   136,   137,  1020,  1021,   140,     0,
     141,   142,   143,   144,   605,     0,  1194,     0,  1195,   148,
     149,   150,   151,   152,  1196,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,  1197,   164,   165,   166,
    1198,  1199,  1200,  1201,   611,   612,  1202,   172,   173,   174,
     175,   176,   177,   178,  1023,  1024,   181,  1025,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   780,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,  1026,   210,   211,   212,   213,   214,   614,  1027,
     216,     0,   217,   218,  1028,   220,     0,   221,     0,   222,
    1204,     0,  1205,   225,   226,  1206,  1207,   229,     0,   230,
       0,  1029,  1030,   233,     0,   234,   235,   236,   237,   238,
     239,   240,  1208,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,  1209,   254,   255,   256,
     257,   258,   259,  1031,  1032,     0,  1033,     0,   263,  1210,
    1211,   266,  1212,   268,   269,   270,   271,   272,   273,     0,
       0,   274,  1213,   276,  1214,     0,   278,   279,   280,   616,
     617,   281,   282,   283,   284,   285,  1215,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,  1034,  1216,  1035,   308,   309,
     310,   311,  1036,   312,   313,  1217,   315,  1037,   618,   317,
    1038,   319,   320,   321,     0,   322,   323,     0,     0,  1039,
     325,   326,     0,     0,   327,   328,  1218,   330,  1219,   620,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   621,  1220,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,  1040,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,  1221,   383,   384,   385,  1041,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,  1222,   404,   405,   406,
     407,   408,  1223,   410,   411,  1042,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
    1224,   427,   624,   429,     0,   430,   431,     0,   432,  1225,
     434,   435,   436,   437,   438,     0,  1043,  1044,     0,     0,
     441,   442,   625,   444,   626,  1045,   446,   447,  1226,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,  1227,     0,   461,   462,   463,   464,   465,   466,
    1046,     0,   468,  1229,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,  1047,     0,     0,     0,     0,
       0,     0,  1048,  1049,     0,     0,     0,     0,     0,  1051,
       0,  1052,  2223,     0,     0,     0,  1053,  1054,  1055,  1056,
     104,  1009,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,  1015,     0,     0,   116,   117,     0,
     118,   119,   120,   121,   122,   123,   124,   125,  1016,   127,
    1017,  1018,     0,   130,   131,   132,   133,   134,   135,  1019,
     604,   136,   137,  1020,  1021,   140,     0,   141,   142,   143,
     144,   605,     0,   606,     0,  1022,   148,   149,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   607,   608,   609,
     610,   611,   612,   613,   172,   173,   174,   175,   176,   177,
     178,  1023,  1024,   181,  1025,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   780,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,  1026,
     210,   211,   212,   213,   214,   614,  1027,   216,     0,   217,
     218,  1028,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,  1029,  1030,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
    1031,  1032,     0,  1033,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,     0,   274,   275,
     276,   277,     0,   278,   279,   280,   616,   617,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,  1034,   306,  1035,   308,   309,   310,   311,  1036,
     312,   313,   314,   315,  1037,   618,   317,  1038,   319,   320,
     321,     0,   322,   323,     0,     0,  1039,   325,   326,     0,
       0,   327,   328,   329,   330,   331,   620,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     621,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,  1040,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,  1041,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,   623,   404,   405,   406,   407,   408,   409,
     410,   411,  1042,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   624,
     429,     0,   430,   431,  2537,   432,   433,   434,   435,   436,
     437,   438,     0,  1043,  1044,     0,     0,   441,   442,   625,
     444,   626,  1045,   446,   447,   627,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,   628,
       0,   461,   462,   463,   464,   465,   466,  1046,     0,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,  1047,     0,     0,     0,     0,     0,     0,  1048,
    1049,     0,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,   515,
    1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,  1015,     0,     0,   116,   117,     0,   118,   119,   120,
     121,   122,   123,   124,   125,  1016,   127,  1017,  1018,     0,
     130,   131,   132,   133,   134,   135,  1019,   604,   136,   137,
    1020,  1021,   140,     0,   141,   142,   143,   144,   605,     0,
     606,     0,  1022,   148,   149,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,   166,   607,   608,   609,   610,   611,   612,
     613,   172,   173,   174,   175,   176,   177,   178,  1023,  1024,
     181,  1025,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     780,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,  1026,   210,   211,   212,
     213,   214,   614,  1027,   216,     0,   217,   218,  1028,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,  1029,  1030,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,  1031,  1032,     0,
    1033,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,     0,     0,   274,   275,   276,   277,     0,
     278,   279,   280,   616,   617,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,  1034,
     306,  1035,   308,   309,   310,   311,  1036,   312,   313,   314,
     315,  1037,   618,   317,  1038,   319,   320,   321,     0,   322,
     323,     0,     0,  1039,   325,   326,     0,     0,   327,   328,
     329,   330,   331,   620,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   621,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,  1040,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,  1041,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
     623,   404,   405,   406,   407,   408,   409,   410,   411,  1042,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   624,   429,     0,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,     0,
    1043,  1044,     0,     0,   441,   442,   625,   444,   626,  1045,
     446,   447,   627,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,   628,     0,   461,   462,
     463,   464,   465,   466,  1046,     0,   468,   469,   470,   471,
     472,   473,   474,     0,  2630,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,  1047,
       0,     0,     0,     0,     0,     0,  1048,  1049,     0,     0,
       0,     0,     0,  1051,     0,  1052,     0,     0,     0,     0,
    1053,  1054,  1055,  1056,   104,  1009,   515,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,  1015,     0,
       0,   116,   117,     0,   118,   119,   120,   121,   122,   123,
     124,   125,  1016,   127,  1017,  1018,     0,   130,   131,   132,
     133,   134,   135,  1019,   604,   136,   137,  1020,  1021,   140,
       0,   141,   142,   143,   144,   605,     0,   606,     0,  1022,
     148,   149,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   607,   608,   609,   610,   611,   612,   613,   172,   173,
     174,   175,   176,   177,   178,  1023,  1024,   181,  1025,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   780,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,  1026,   210,   211,   212,   213,   214,   614,
    1027,   216,     0,   217,   218,  1028,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,  1029,  1030,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,  1031,  1032,     0,  1033,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
       0,     0,   274,   275,   276,   277,     0,   278,   279,   280,
     616,   617,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,  1034,   306,  1035,   308,
     309,   310,   311,  1036,   312,   313,   314,   315,  1037,   618,
     317,  1038,   319,   320,   321,     0,   322,   323,     0,     0,
    1039,   325,   326,     0,     0,   327,   328,   329,   330,   331,
     620,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   621,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,  1040,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,  1041,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,   623,   404,   405,
     406,   407,   408,   409,   410,   411,  1042,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   624,   429,     0,   430,   431,  2953,   432,
     433,   434,   435,   436,   437,   438,     0,  1043,  1044,     0,
       0,   441,   442,   625,   444,   626,  1045,   446,   447,   627,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,   628,     0,   461,   462,   463,   464,   465,
     466,  1046,     0,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,  1047,     0,     0,     0,
       0,     0,     0,  1048,  1049,     0,     0,     0,     0,     0,
    1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,   104,  1009,   515,  1010,  1011,  1012,  1013,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,  1015,     0,     0,   116,   117,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  1016,
     127,  1017,  1018,     0,   130,   131,   132,   133,   134,   135,
    1019,   604,   136,   137,  1020,  1021,   140,     0,   141,   142,
     143,   144,   605,     0,   606,     0,  1022,   148,   149,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   607,   608,
     609,   610,   611,   612,   613,   172,   173,   174,   175,   176,
     177,   178,  1023,  1024,   181,  1025,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   780,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
    1026,   210,   211,   212,   213,   214,   614,  1027,   216,     0,
     217,   218,  1028,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,  1029,
    1030,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,  1031,  1032,     0,  1033,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     275,   276,   277,     0,   278,   279,   280,   616,   617,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,  1034,   306,  1035,   308,   309,   310,   311,
    1036,   312,   313,   314,   315,  1037,   618,   317,  1038,   319,
     320,   321,     0,   322,   323,     0,     0,  1039,   325,   326,
       0,     0,   327,   328,   329,   330,   331,   620,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   621,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
    1040,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,  1041,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   623,   404,   405,   406,   407,   408,
     409,   410,   411,  1042,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     624,   429,     0,   430,   431,  3072,   432,   433,   434,   435,
     436,   437,   438,     0,  1043,  1044,     0,     0,   441,   442,
     625,   444,   626,  1045,   446,   447,   627,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
     628,     0,   461,   462,   463,   464,   465,   466,  1046,     0,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,  1047,     0,     0,     0,     0,     0,     0,
    1048,  1049,     0,     0,     0,     0,     0,  1051,     0,  1052,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,
     515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,  1015,     0,     0,   116,   117,     0,   118,   119,
     120,   121,   122,   123,   124,   125,  1016,   127,  1017,  1018,
       0,   130,   131,   132,   133,   134,   135,  1019,   604,   136,
     137,  1020,  1021,   140,     0,   141,   142,   143,   144,   605,
       0,   606,     0,  1022,   148,   149,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   607,   608,   609,   610,   611,
     612,   613,   172,   173,   174,   175,   176,   177,   178,  1023,
    1024,   181,  1025,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   780,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,  1026,   210,   211,
     212,   213,   214,   614,  1027,   216,     0,   217,   218,  1028,
     220,     0,   221,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,  1029,  1030,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,  1031,  1032,
       0,  1033,     0,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,     0,     0,   274,   275,   276,   277,
       0,   278,   279,   280,   616,   617,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    1034,   306,  1035,   308,   309,   310,   311,  1036,   312,   313,
     314,   315,  1037,   618,   317,  1038,   319,   320,   321,     0,
     322,   323,     0,     0,  1039,   325,   326,     0,     0,   327,
     328,   329,   330,   331,   620,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   621,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,  1040,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,  1041,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,   623,   404,   405,   406,   407,   408,   409,   410,   411,
    1042,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   624,   429,     0,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
       0,  1043,  1044,     0,     0,   441,   442,   625,   444,   626,
    1045,   446,   447,   627,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,   628,     0,   461,
     462,   463,   464,   465,   466,  1046,     0,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
    1047,     0,     0,     0,     0,     0,     0,  1048,  1049,     0,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,  1190,  1009,   515,  1010,  1011,
    1012,  1013,  1014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,  1015,
       0,     0,   116,   117,     0,   118,   119,   120,  1192,   122,
     123,   124,   125,  1016,  1193,  1017,  1018,     0,   130,   131,
     132,   133,   134,   135,  1019,   604,   136,   137,  1020,  1021,
     140,     0,   141,   142,   143,   144,   605,     0,  1194,     0,
    1195,   148,   149,   150,   151,   152,  1196,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,  1197,   164,
     165,   166,  1198,  1199,  1200,  1201,   611,   612,  1202,   172,
     173,   174,   175,   176,   177,   178,  1023,  1024,   181,  1025,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   780,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,  1026,   210,   211,   212,   213,   214,
     614,  1027,   216,     0,   217,   218,  1028,   220,     0,   221,
       0,   222,  1204,     0,  1205,   225,   226,  1206,  1207,   229,
       0,   230,     0,  1029,  1030,   233,     0,   234,   235,   236,
     237,   238,   239,   240,  1208,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,  1209,   254,
     255,   256,   257,   258,   259,  1031,  1032,     0,  1033,     0,
     263,  1210,  1211,   266,  1212,   268,   269,   270,   271,   272,
     273,     0,     0,   274,  1213,   276,  1214,     0,   278,   279,
     280,   616,   617,   281,   282,   283,   284,   285,  1215,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,  1034,  1216,  1035,
     308,   309,   310,   311,  1036,   312,   313,  1217,   315,  1037,
     618,   317,  1038,   319,   320,   321,     0,   322,   323,     0,
       0,  1039,   325,   326,     0,     0,   327,   328,  1218,   330,
    1219,   620,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   621,  1220,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,  1040,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,  1221,   383,   384,   385,
    1041,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,  1222,   404,
     405,   406,   407,   408,  1223,   410,   411,  1042,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,  1224,   427,   624,   429,     0,   430,   431,     0,
     432,  1225,   434,   435,   436,   437,   438,     0,  1043,  1044,
       0,     0,   441,   442,   625,   444,   626,  1045,   446,   447,
    1226,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,  1227,     0,   461,   462,   463,   464,
     465,   466,  1046,     0,   468,  1229,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,  1047,     0,     0,
       0,     0,     0,     0,  1048,  1049,     0,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   104,  1009,   515,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,  1015,     0,     0,   116,
     117,     0,   118,   119,   120,   121,   122,   123,   124,   125,
    1016,   127,  1017,  1018,     0,   130,   131,   132,   133,   134,
     135,  1019,   604,   136,   137,  1020,  1021,   140,     0,   141,
     142,   143,   144,   605,     0,   606,     0,  1022,   148,   149,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   607,
     608,   609,   610,   611,   612,   613,   172,   173,   174,   175,
     176,   177,   178,  1023,  1024,   181,  1025,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   780,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,  1026,   210,   211,   212,   213,   214,   614,  1027,   216,
       0,   217,   218,  1028,   220,     0,   221,     0,   222,   223,
       0,   224,   225,   226,   227,   228,   229,     0,   230,     0,
    1029,  1030,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,  1031,  1032,     0,  1033,     0,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,     0,     0,
     274,   275,   276,   277,     0,   278,   279,   280,   616,   617,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,  1034,   306,  1035,   308,   309,   310,
     311,  1036,   312,   313,   314,   315,  1037,   618,   317,  1038,
     319,   320,   321,     0,   322,   323,     0,     0,  1039,   325,
     326,     0,     0,   327,   328,   329,   330,   331,   620,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   621,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,  1040,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,  1041,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,   623,   404,   405,   406,   407,
     408,   409,   410,   411,  1042,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   624,   429,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,     0,  1043,  1044,     0,     0,   441,
     442,   625,   444,   626,  1045,   446,   447,   627,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,   628,     0,   461,   462,   463,   464,   465,   466,  1046,
       0,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,  1047,     0,     0,     0,     0,     0,
       0,  1659,  1660,     0,     0,     0,     0,     0,  1051,     0,
    1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,   104,
    2088,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,  1015,     0,     0,   116,   117,     0,   118,
     119,   120,   121,   122,   123,   124,   125,  1016,   127,  1017,
    1018,     0,   130,   131,   132,   133,   134,   135,  1019,   604,
     136,   137,  1020,  1021,   140,     0,   141,   142,   143,   144,
     605,     0,   606,     0,  1022,   148,   149,   150,   151,   152,
     153,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,   163,   164,   165,   166,   607,   608,   609,   610,
     611,   612,   613,   172,   173,   174,   175,   176,   177,   178,
    1023,  1024,   181,  1025,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   780,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,  1026,   210,
     211,   212,   213,   214,   614,  1027,   216,     0,   217,   218,
    1028,   220,     0,   221,     0,   222,   223,     0,   224,   225,
     226,   227,   228,   229,     0,   230,     0,  1029,  1030,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,   255,   256,   257,   258,   259,  1031,
    1032,     0,  1033,     0,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,     0,     0,   274,   275,   276,
     277,     0,   278,   279,   280,   616,   617,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,  1034,   306,  1035,   308,   309,   310,   311,  1036,   312,
     313,   314,   315,  1037,   618,   317,  1038,   319,   320,   321,
       0,   322,   323,     0,     0,  1039,   325,   326,     0,     0,
     327,   328,   329,   330,   331,   620,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   621,
     346,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,  1040,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,   385,  1041,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,   623,   404,   405,   406,   407,   408,   409,   410,
     411,  1042,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   624,   429,
       0,   430,   431,     0,   432,   433,   434,   435,   436,   437,
     438,     0,  1043,  1044,     0,     0,   441,   442,   625,   444,
     626,  1045,   446,   447,   627,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,   628,     0,
     461,   462,   463,   464,   465,   466,  1046,     0,   468,   469,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,  1047,     0,     0,     0,     0,     0,     0,  1048,  1049,
       0,     0,     0,     0,     0,  1051,     0,  1052,     0,     0,
       0,     0,  1053,  1054,  1055,  1056,   104,  1009,   515,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
    1015,     0,     0,   116,   117,     0,   118,   119,   120,   121,
     122,   123,   124,   125,  1016,   127,  1017,  1018,     0,   130,
     131,   132,   133,   134,   135,  1019,   604,   136,   137,  1020,
    1021,   140,     0,   141,   142,   143,   144,   605,     0,   606,
       0,  1022,   148,   149,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   607,   608,   609,   610,   611,   612,   613,
     172,   173,   174,   175,   176,   177,   178,  1023,  1024,   181,
    1025,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   780,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,  1026,   210,   211,   212,   213,
     214,   614,  1027,   216,     0,   217,   218,  1028,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,  1029,  1030,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,  1031,  1032,     0,  1033,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,     0,     0,   274,   275,   276,   277,     0,   278,
     279,   280,   616,   617,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,  1034,   306,
    1035,   308,   309,   310,   311,  1036,   312,   313,   314,   315,
    1037,   618,   317,  1038,   319,   320,   321,     0,   322,   323,
       0,     0,  1039,   325,   326,     0,     0,   327,   328,   329,
     330,   331,   620,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   621,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,  1040,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,  1041,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,   623,
     404,   405,   406,   407,   408,   409,   410,   411,  1042,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   624,   429,     0,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,     0,  1043,
    1044,     0,     0,   441,   442,   625,   444,   626,  1045,   446,
     447,   627,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,   628,     0,   461,   462,   463,
     464,   465,   466,  1046,     0,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,  1047,     0,
       0,     0,     0,     0,     0,  1048,  1049,     0,     0,     0,
       0,     0,  1051,     0,  2360,     0,     0,     0,     0,  1053,
    1054,  1055,  1056,   104,  1009,   515,  1010,  1011,  1012,  1013,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,  1015,     0,     0,
     116,   117,     0,   118,   119,   120,   121,   122,   123,   124,
     125,  1016,   127,  1017,  1018,     0,   130,   131,   132,   133,
     134,   135,  1019,   604,   136,   137,  1020,  1021,   140,     0,
     141,   142,   143,   144,   605,     0,   606,     0,  1022,   148,
     149,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   163,   164,  2839,   166,
     607,   608,   609,   610,   611,   612,   613,   172,   173,   174,
     175,   176,   177,   178,  1023,  1024,   181,  1025,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   780,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,  1026,   210,   211,   212,   213,   214,   614,  1027,
     216,     0,   217,   218,  1028,   220,     0,   221,     0,   222,
     223,     0,   224,   225,   226,   227,   228,   229,     0,   230,
       0,  2840,  1030,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,  1031,  1032,     0,  1033,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,     0,
       0,   274,   275,   276,   277,     0,   278,   279,   280,   616,
     617,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,  1034,   306,  1035,   308,   309,
     310,   311,  1036,   312,   313,   314,   315,  1037,   618,   317,
    1038,   319,   320,   321,     0,   322,   323,     0,     0,  1039,
     325,   326,     0,     0,   327,   328,   329,   330,   331,   620,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   621,   346,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,  1040,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,  2841,  1041,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,   623,   404,   405,   406,
     407,   408,   409,   410,   411,  1042,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   624,   429,     0,   430,   431,     0,   432,   433,
     434,   435,   436,   437,   438,     0,  1043,  1044,     0,     0,
     441,   442,   625,   444,   626,  1045,   446,   447,   627,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,   628,     0,   461,   462,   463,   464,   465,   466,
    1046,     0,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,  1047,     0,     0,     0,     0,
       0,     0,  1048,  1049,     0,     0,     0,     0,     0,  1051,
       0,  2843,     0,     0,     0,     0,  1053,  1054,  1055,  1056,
     104,  1009,   515,  1010,  1011,  1012,  1013,  1014,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,  1015,     0,     0,   116,   117,     0,
     118,   119,   120,   121,   122,   123,   124,  3225,  1016,   127,
    1017,  1018,     0,   130,   131,   132,   133,   134,   135,  1019,
     604,   136,   137,  1020,  1021,   140,     0,   141,   142,   143,
     144,   605,     0,   606,     0,  1022,   148,   149,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,  3226,   607,   608,   609,
     610,   611,   612,   613,   172,   173,   174,   175,   176,   177,
     178,  1023,  1024,   181,  1025,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   780,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,  1026,
     210,   211,   212,   213,   214,   614,  1027,   216,     0,   217,
     218,  1028,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,  1029,  1030,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
    1031,  1032,     0,  1033,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,     0,     0,   274,   275,
     276,   277,     0,   278,   279,   280,   616,   617,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,  1034,   306,  1035,   308,   309,   310,   311,  1036,
     312,   313,   314,   315,  1037,   618,   317,  1038,   319,   320,
     321,     0,   322,   323,     0,     0,  1039,   325,   326,     0,
       0,   327,   328,   329,   330,   331,   620,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     621,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,  1040,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,  1041,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,   623,   404,   405,   406,   407,   408,   409,
     410,   411,  1042,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   624,
     429,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,     0,  1043,  1044,     0,     0,   441,   442,   625,
     444,   626,  1045,   446,   447,   627,   449,   450,  3227,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,   628,
       0,   461,   462,   463,   464,   465,   466,  1046,     0,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,  1047,     0,     0,     0,     0,     0,     0,  1048,
    1049,     0,     0,     0,     0,     0,  1051,     0,  1052,     0,
       0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,   515,
    1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,  1015,     0,     0,   116,   117,     0,   118,   119,   120,
     121,   122,   123,   124,   125,  1016,   127,  1017,  1018,     0,
     130,   131,   132,   133,   134,   135,  1019,   604,   136,   137,
    1020,  1021,   140,     0,   141,   142,   143,   144,   605,     0,
     606,     0,  1022,   148,   149,   150,   151,   152,   153,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
     163,   164,   165,  3226,   607,   608,   609,   610,   611,   612,
     613,   172,   173,   174,   175,   176,   177,   178,  1023,  1024,
     181,  1025,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     780,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,  1026,   210,   211,   212,
     213,   214,   614,  1027,   216,     0,   217,   218,  1028,   220,
       0,   221,     0,   222,   223,     0,   224,   225,   226,   227,
     228,   229,     0,   230,     0,  1029,  1030,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
     253,   254,   255,   256,   257,   258,   259,  1031,  1032,     0,
    1033,     0,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,     0,     0,   274,   275,   276,   277,     0,
     278,   279,   280,   616,   617,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,  1034,
     306,  1035,   308,   309,   310,   311,  1036,   312,   313,   314,
     315,  1037,   618,   317,  1038,   319,   320,   321,     0,   322,
     323,     0,     0,  1039,   325,   326,     0,     0,   327,   328,
     329,   330,   331,   620,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   621,   346,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,  1040,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,   385,  1041,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
     623,   404,   405,   406,   407,   408,   409,   410,   411,  1042,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   624,   429,     0,   430,
     431,     0,   432,   433,   434,   435,   436,   437,   438,     0,
    1043,  1044,     0,     0,   441,   442,   625,   444,   626,  1045,
     446,   447,   627,   449,   450,  3227,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,   628,     0,   461,   462,
     463,   464,   465,   466,  1046,     0,   468,   469,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,  1047,
       0,     0,     0,     0,     0,     0,  1048,  1049,     0,     0,
       0,     0,     0,  1051,     0,  1052,     0,     0,     0,     0,
    1053,  1054,  1055,  1056,   104,  1009,   515,  1010,  1011,  1012,
    1013,  1014,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,  1015,     0,
       0,   116,   117,     0,   118,   119,   120,   121,   122,   123,
     124,   125,  1016,   127,  1017,  1018,     0,   130,   131,   132,
     133,   134,   135,  1019,   604,   136,   137,  1020,  1021,   140,
       0,   141,   142,   143,   144,   605,     0,   606,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   607,   608,   609,   610,   611,   612,   613,   172,   173,
     174,   175,   176,   177,   178,  1023,  1024,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   780,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,  1026,   210,   211,   212,   213,   214,   614,
    1027,   216,     0,   217,   218,  1028,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,  1029,  1030,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,  1031,  1032,     0,  1033,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
       0,     0,   274,   275,   276,   277,     0,   278,   279,   280,
     616,   617,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,  1034,   306,  1035,   308,
     309,   310,   311,     0,   312,   313,   314,   315,  1037,   618,
     317,  1038,   319,   320,   321,     0,   322,   323,     0,     0,
    1039,   325,   326,     0,     0,   327,   328,   329,   330,   331,
     620,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   621,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,  1040,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,  1041,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,   623,   404,   405,
     406,   407,   408,   409,   410,   411,  1042,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   624,   429,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,     0,  1043,  1044,     0,
       0,   441,   442,   625,   444,   626,  1045,   446,   447,   627,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,   628,     0,   461,   462,   463,   464,   465,
     466,  1046,     0,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,     0,     0,     0,     0,
       0,     0,     0,  1467,  1468,     0,     0,     0,     0,     0,
    1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,  1055,
    1056,   104,  1009,   515,  1010,  1011,     0,  1013,  1014,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,  1015,     0,     0,   116,   117,
       0,   118,   119,   120,   121,   122,   123,   124,   125,  1016,
     127,  1017,  1018,     0,   130,   131,   132,   133,   134,   135,
    1019,   604,   136,   137,  1020,  1021,   140,     0,   141,   142,
     143,   144,   605,     0,   606,     0,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   607,   608,
     609,   610,   611,   612,   613,   172,   173,   174,   175,   176,
     177,   178,  1023,  1024,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   780,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
    1026,   210,   211,   212,   213,   214,   614,  1027,   216,     0,
     217,   218,  1028,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,  1029,
    1030,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,  1031,  1032,     0,  1033,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     275,   276,   277,     0,   278,   279,   280,   616,   617,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,  1034,   306,  1035,   308,   309,   310,   311,
       0,   312,   313,   314,   315,  1037,   618,   317,  1038,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,   328,   329,   330,   331,   620,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   621,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
    1040,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,  2074,  2075,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   623,   404,   405,   406,   407,   408,
     409,   410,   411,  1042,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     624,   429,     0,   430,   431,     0,   432,   433,   434,   435,
     436,   437,   438,     0,  1043,  1044,     0,     0,   441,   442,
     625,   444,   626,  1045,   446,   447,   627,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
     628,     0,   461,   462,   463,   464,   465,   466,  1046,     0,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,     0,     0,     0,     0,     0,
    2076,  2077,     0,     0,     0,     0,     0,  1051,     0,  1052,
       0,     0,     0,     0,  1053,  1054,  1055,  1056,   104,  1009,
     515,  1010,  1011,  1012,  1013,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,  1015,     0,     0,   116,   117,     0,   118,   119,
     120,   121,   122,   123,   124,   125,  1016,   127,  1017,  1018,
       0,   130,   131,   132,   133,   134,   135,  1019,   604,   136,
     137,  1020,  1021,   140,     0,   141,   142,   143,   144,   605,
       0,   606,     0,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,   163,   164,   165,   166,   607,   608,   609,   610,   611,
     612,   613,   172,   173,   174,   175,   176,   177,   178,  1023,
    1024,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   780,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,  1026,   210,   211,
     212,   213,   214,   614,  1027,   216,     0,   217,   218,  1028,
     220,     0,   221,     0,   222,   223,     0,   224,   225,   226,
     227,   228,   229,     0,   230,     0,  1029,  1030,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,   253,   254,   255,   256,   257,   258,   259,  1031,  1032,
       0,  1033,     0,   263,     0,   265,   266,   267,   268,   269,
     270,   271,   272,   273,     0,     0,   274,   275,   276,   277,
       0,   278,   279,   280,   616,   617,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
    1034,   306,  1035,   308,   309,   310,   311,     0,   312,   313,
     314,   315,  1037,   618,   317,  1038,   319,   320,   321,     0,
     322,   323,     0,     0,  1039,   325,   326,     0,     0,   327,
     328,   329,   330,   331,   620,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   621,   346,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,  1040,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   385,  1041,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,   623,   404,   405,   406,   407,   408,   409,   410,   411,
    1042,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   624,   429,     0,
     430,   431,     0,   432,   433,   434,   435,   436,   437,   438,
       0,  1043,  1044,     0,     0,   441,   442,   625,   444,   626,
    1045,   446,   447,   627,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,   628,     0,   461,
     462,   463,   464,   465,   466,  1046,     0,   468,   469,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
       0,     0,     0,     0,     0,     0,     0,  1467,  1468,     0,
       0,     0,     0,     0,  1051,     0,  1052,     0,     0,     0,
       0,  1053,  1054,  1055,  1056,   104,  1009,   515,  1010,  1011,
    1012,  1013,  1014,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,  1015,
       0,     0,   116,   117,     0,   118,   119,   120,   121,   122,
     123,   124, -1912,  1016,   127,  1017,  1018,     0,   130,   131,
     132,   133,   134,   135,  1019,   604,   136,   137,  1020,  1021,
     140,     0,   141,   142,   143,   144,   605,     0,   606,     0,
    1022,   148,   149,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,  3226,   607,   608,   609,   610,   611,   612,   613,   172,
     173,   174,   175,   176,   177,   178,  1023,  1024,   181,  1025,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   780,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,  1026,   210,   211,   212,   213,   214,
     614,  1027,   216,     0,   217,   218,  1028,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,   227, -1912,   229,
       0,   230,     0,  1029,  1030,   233,     0,   234,   235,   236,
     237,   238,   239,   240, -1912,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,  1031,  1032,     0,  1033,     0,
     263,     0,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,     0,   274,   275,   276, -1912,     0,   278,   279,
     280,   616,   617,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,  1034,   306,  1035,
     308,   309,   310,   311,     0,   312,   313,     0,   315,  1037,
     618,   317,  1038,   319,   320,   321,     0,   322,   323,     0,
       0,  1039,   325,   326,     0,     0,   327,   328,   329,   330,
     331,   620,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   621,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,  1040,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
    1041,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,   623,   404,
     405,   406,   407,   408, -1912,   410,   411,  1042,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   624,   429,     0,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,     0,  1043,  1044,
       0,     0,   441,   442,   625,   444,   626,  1045,   446,   447,
     627,   449,   450,  3227,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,   628,     0,   461,   462,   463,   464,
     465,   466,  1046,     0,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496, -1912,     0,     0,
       0,     0,     0,     0,  1048,  1049,     0,     0,     0,     0,
       0,  1051,     0,  1052,     0,     0,     0,     0,  1053,  1054,
    1055,  1056,   104,  1009,   515,  1010,  1011,  1012,  1013,  1014,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,  1015,     0,     0,   116,
     117,     0,   118,   119,   120,   121,   122,   123,   124,     0,
    1016,   127,  1017,  1018,     0,   130,   131,   132,   133,   134,
     135,  1019,   604,   136,   137,  1020,  1021,   140,     0,   141,
     142,   143,   144,   605,     0,   606,     0,  1022,   148,   149,
     150,   151,   152,   153,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,   163,   164,   165,   166,   607,
     608,   609,   610,   611,   612,   613,   172,   173,   174,   175,
     176,   177,   178,  1023,  1024,   181,  1025,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   780,   197,   198,     0,   199,
     200,   201,     0,   202,     0,   204,     0,   205,   206,   207,
     208,  1026,   210,   211,   212,   213,   214,   614,  1027,   216,
       0,   217,   218,  1028,   220,     0,   221,     0,   222,   223,
       0,   224,   225,   226,   227,     0,   229,     0,   230,     0,
    1029,  1030,   233,     0,   234,   235,   236,   237,   238,   239,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,  1031,  1032,     0,  1033,     0,   263,     0,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,     0,
     274,   275,   276,     0,     0,   278,   279,   280,   616,   617,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,  1034,   306,  1035,   308,   309,   310,
     311,     0,   312,   313,     0,   315,  1037,   618,   317,  1038,
     319,   320,   321,     0,   322,   323,     0,     0,  1039,   325,
     326,     0,     0,   327,   328,   329,   330,   331,   620,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   621,   346,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,  1040,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   385,  1041,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,   623,   404,   405,   406,   407,
     408,     0,   410,   411,  1042,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   624,   429,     0,   430,   431,     0,   432,   433,   434,
     435,   436,   437,   438,     0,  1043,  1044,     0,     0,   441,
     442,   625,   444,   626,  1045,   446,   447,   627,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,   628,     0,   461,   462,   463,   464,   465,   466,  1046,
       0,   468,   469,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,     0,     0,     0,     0,     0,     0,
       0,  1048,  1049,   761,     0,     0,     0,     0,  1051,     0,
    1052,     0,     0,     0,     0,  1053,  1054,  1055,  1056,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,   762,   122,   123,   124,
       0,   763,   764,   765,   766,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   767,   768,   140,     0,
     141,   142,   143,   144,     0,     0,   769,     0,   770,   148,
     149,   150,   151,   152,   771,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   772,   164,   165,   166,
     773,   774,   775,   776,     0,     0,   777,   172,   173,   174,
     175,   176,   177,   178,   778,   779,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   780,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,     0,   210,   211,   212,   213,   214,     0,     0,
     216,     0,   217,   218,   781,   220,     0,   221,     0,   222,
     782,     0,   783,   225,   226,     0,   784,   229,     0,   230,
       0,     0,     0,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   786,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   787,     0,   255,   256,
     257,   258,   259,   788,   789,     0,   790,     0,   263,   791,
     792,   266,   793,   268,   269,   270,   271,   272,   273,     0,
       0,   274,   794,   276,   795,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,   796,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   797,   798,   799,   308,   309,
     310,     0,     0,   312,   313,   800,   315,     0,     0,   317,
     801,   319,   320,   321,     0,   322,   323,     0,     0,   324,
     325,   326,     0,     0,   327,     0,   802,   330,   803,     0,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,   804,   347,   348,     0,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   805,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   806,   383,   384,   385,   807,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,   808,   404,   809,   406,
     407,   408,   810,   410,   411,   811,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     812,   427,     0,   429,     0,   430,   431,     0,   432,   813,
     434,   435,   436,   437,   438,     0,   814,   815,     0,     0,
     441,   442,     0,   444,     0,     0,   446,   447,   816,   449,
     450,   451,   452,   453,   817,     0,   454,   455,   456,   457,
     458,   459,   818,     0,   461,   462,   463,   464,   465,     0,
     819,     0,   468,   820,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
       0,   504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   493,   494,   495,   496,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,  -951,     0,     0,  -951,   974,     0,   116,   117,
       0,   118,   119,   120,     0,   122,   123,   124,   125,   126,
       0,   128,   129,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,     0,     0,     0,   147,   148,   149,   150,
     151,   152,     0,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,     0,   164,   165,   166,     0,     0,
       0,     0,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,  -114,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,  -114,
     217,   218,   219,   220,  -114,   221,     0,   222,     0,     0,
       0,   225,   226,   505,     0,   229,     0,   230,     0,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,     0,   254,   255,   256,   257,   258,
     259,   260,   261,  -114,   262,     0,   263,     0,     0,   266,
       0,   268,   269,   270,   271,   272,   273,     0,     0,   274,
       0,   276,     0,  -114,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   506,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   307,   308,   309,   310,   311,
       0,   312,   313,     0,   315,     0,   316,   317,   318,   319,
     320,   321,  -114,   322,   323,     0,     0,   324,   325,   326,
       0,  -114,   327,   328,     0,   330,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   345,     0,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,     0,   404,   405,   406,   407,   408,
       0,   410,   411,   412,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   507,   427,
     428,   429,     0,   430,   431,     0,   432,     0,   434,   435,
     436,   437,   438,     0,   439,   440,     0,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
     452,   453,  -114,     0,   454,   455,   456,   457,   458,   459,
       0,     0,   461,   462,   463,   464,   465,   466,   467,     0,
     468,     0,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   104,     0,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1120,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,     0,   604,   136,   137,   138,   139,   140,     0,
     141,   142,   143,   144,   605,     0,   606,     0,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   163,   164,   165,   166,
     607,   608,   609,   610,   611,   612,   613,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   196,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   614,     0,
     216,     0,   217,   218,   219,   220,     0,   221,     0,   222,
     223,    21,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   615,
       0,   274,   275,   276,   277,     0,   278,   279,   280,   616,
     617,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   618,   317,
     318,   319,   320,   321,     0,   322,   323,     0,   619,   324,
     325,   326,     0,     0,   327,   328,   329,   330,   331,   620,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   621,   346,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,   385,   386,   622,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      29,   398,   399,   400,   401,   402,   623,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   624,   429,     0,   430,   431,    34,   432,   433,
     434,   435,   436,   437,   438,     0,   439,   440,     0,     0,
     441,   442,   625,   444,   626,     0,   446,   447,   627,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,   628,     0,   461,   462,   463,   464,   465,   629,
     467,     0,   468,   469,   470,   471,   472,   473,   474,     0,
       0,   475,     0,    39,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,     0,     0,    40,   852,  1423,
     515,     0,     0,     0,  1013,     0,     0,     0,     0,     0,
       0,   630,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,   853,   122,   123,   124,   854,   855,   856,   857,   858,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   859,   860,   140,     0,   141,   142,   143,   144,   861,
       0,   862,     0,   863,   148,   149,   150,   151,   152,   864,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,   865,   164,   165,   166,   866,   867,   868,   869,     0,
       0,   870,   172,   173,   174,   175,   176,   177,   178,   871,
     872,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   873,   210,   211,
     212,   213,   214,   874,  1424,   216,     0,   217,   218,   875,
     220,     0,   221,     0,   222,   876,     0,   877,   225,   226,
     878,   879,   229,     0,   230,     0,   880,   881,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   882,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,   883,   884,   255,   256,   257,   258,   259,   885,   886,
       0,   887,     0,   263,   888,   889,   266,   890,   268,   269,
     270,   271,   272,   273,     0,     0,   274,   891,   276,   892,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   893,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     894,   895,   896,   308,   309,   310,   897,     0,   312,   313,
     898,   315,     0,   899,   317,   900,   319,   320,   321,     0,
     322,   323,  1425,     0,   324,   325,   326,     0,     0,   327,
     901,   902,   330,   903,   904,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   905,   906,
     347,   348,   907,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   908,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   909,
     383,   384,   385,   910,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,   911,   404,   912,   406,   407,   408,   913,   410,   411,
     914,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   915,   427,   916,   429,     0,
     430,   431,     0,   432,   917,   434,   435,   436,   437,   438,
       0,   918,   919,     0,     0,   441,   442,   920,   444,   921,
    1426,   446,   447,   922,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,   923,     0,   461,
     462,   463,   464,   465,  1309,   925,     0,   468,   926,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   927,   928,   929,   930,   931,
     932,   933,   934,   935,   936,   937,   493,   494,   495,   496,
     104,     0,   530,     0,     0,     0,     0,  1427,  1428,  2261,
       0,     0,     0,     0,     0,     0,  2262,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
     604,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   605,     0,   606,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,   163,   164,   165,   166,   607,   608,   609,
     610,   611,   612,   613,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   614,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,   223,     0,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   615,     0,   274,   275,
     276,   277,     0,   278,   279,   280,   616,   617,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   618,   317,   318,   319,   320,
     321,     0,   322,   323,     0,   619,   324,   325,   326,     0,
       0,   327,   328,   329,   330,   331,   620,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     621,   346,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   385,   386,   622,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,   623,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   624,
     429,     0,   430,   431,     0,   432,   433,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   625,
     444,   626,     0,   446,   447,   627,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,   628,
       0,   461,   462,   463,   464,   465,   629,   467,     0,   468,
     469,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   852,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   630,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     3,     4,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,   853,   122,   123,   124,   854,
     855,   856,   857,   858,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   859,   860,   140,     0,   141,
     142,   143,   144,   861,     0,   862,     0,   863,   148,   149,
     150,   151,   152,   864,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,   865,   164,   165,   166,   866,
     867,   868,   869,     0,     0,   870,   172,   173,   174,   175,
     176,   177,   178,   871,   872,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   873,   210,   211,   212,   213,   214,   874,     0,   216,
       0,   217,   218,   875,   220,     0,   221,     0,   222,   876,
      21,   877,   225,   226,   878,   879,   229,     0,   230,     0,
     880,   881,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   882,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,   883,   884,   255,   256,   257,
     258,   259,   885,   886,     0,   887,     0,   263,   888,   889,
     266,   890,   268,   269,   270,   271,   272,   273,     0,     0,
     274,   891,   276,   892,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   893,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   894,   895,   896,   308,   309,   310,
     897,     0,   312,   313,   898,   315,     0,   899,   317,   900,
     319,   320,   321,     0,   322,   323,     0,     0,   324,   325,
     326,     0,     0,   327,   901,   902,   330,   903,   904,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   905,   906,   347,   348,   907,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   908,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   909,   383,   384,   385,   910,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    29,
     398,   399,   400,   401,   402,   911,   404,   912,   406,   407,
     408,   913,   410,   411,   914,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   915,
     427,   916,   429,     0,   430,   431,    34,   432,   917,   434,
     435,   436,   437,   438,     0,   918,   919,     0,     0,   441,
     442,   920,   444,   921,     0,   446,   447,   922,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,   923,     0,   461,   462,   463,   464,   465,   924,   925,
       0,   468,   926,   470,   471,   472,   473,   474,     0,     0,
     475,     0,    39,   476,   477,   478,   479,   480,   481,   927,
     928,   929,   930,   931,   932,   933,   934,   935,   936,   937,
     493,   494,   495,   496,   104,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,   604,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   605,     0,   606,     0,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,   607,   608,   609,   610,   611,   612,   613,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   614,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,   223,     0,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
       0,     0,   274,   275,   276,   277,     0,   278,   279,   280,
     616,   617,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   618,
     317,   318,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,   328,   329,   330,   331,
     620,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   621,   346,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   385,   386,
     622,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,   623,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   624,   429,     0,   430,   431,     0,   432,
     433,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   625,   444,   626,     0,   446,   447,   627,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,   628,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   104,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
       0,     0,     0,   116,   117,     0,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,   604,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   605,     0,   606,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,   607,   608,   609,   610,   611,   612,   613,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   614,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,   223,     0,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,     0,     0,   274,   275,   276,   277,     0,   278,
     279,   280,   616,   617,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   618,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,   329,
     330,   331,   620,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   621,   346,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,   623,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   624,   429,     0,   430,   431,
       0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,     0,     0,   441,   442,   625,   444,   626,     0,   446,
     447,   627,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,   628,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3075,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   704,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,    21,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    29,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,    34,   432,     0,   434,   435,   436,   437,   438,
       0,   705,   440,     0,     0,   706,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   629,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,    39,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,    21,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    29,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,    34,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   629,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
      39,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,     0,   504,    40,   530,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,     0,   122,   123,   124,
     125,   126,     0,   128,   129,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   138,   139,   140,     0,
     141,   142,   143,   144,   145,     0,     0,     0,   147,   148,
     149,   150,   151,   152,     0,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,     0,   164,   165,   166,
       0,     0,     0,     0,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   196,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,     0,   217,   218,   219,   220,     0,   221,     0,   222,
       0,     0,     0,   225,   226,   505,     0,   229,     0,   230,
       0,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,     0,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   263,     0,
       0,   266,     0,   268,   269,   270,   271,   272,   273,     0,
       0,   274,     0,   276,     0,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,   506,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   307,   308,   309,
     310,   311,     0,   312,   313,     0,   315,     0,   316,   317,
     318,   319,   320,   321,     0,   322,   323,     0,     0,   324,
     325,   326,     0,     0,   327,   328,     0,   330,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,     0,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,     0,   404,   405,   406,
     407,   408,     0,   410,   411,   412,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     507,   427,   428,   429,     0,   430,   431,     0,   432,     0,
     434,   435,   436,   437,   438,     0,   439,   440,     0,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,     0,     0,   461,   462,   463,   464,   465,   466,
     467,     0,   468,     0,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   504,     0,   530,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   961,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,     0,
       0,     0,   116,   117,     0,   118,   119,   120,     0,   122,
     123,   124,   125,   126,     0,   128,   129,     0,   130,   131,
     132,   133,   134,   135,     0,     0,   136,   137,   138,   139,
     140,     0,   141,   142,   143,   144,   145,     0,     0,     0,
     147,   148,   149,   150,   151,   152,     0,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,     0,   164,
     165,   166,     0,     0,     0,     0,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   196,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,     0,   217,   218,   219,   220,     0,   221,
       0,   222,     0,     0,     0,   225,   226,   505,     0,   229,
       0,   230,     0,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,     0,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     263,     0,     0,   266,     0,   268,   269,   270,   271,   272,
     273,     0,     0,   274,     0,   276,     0,     0,   278,   279,
     280,     0,     0,   281,   282,   283,   284,   285,   506,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   307,
     308,   309,   310,   311,     0,   312,   313,     0,   315,     0,
     316,   317,   318,   319,   320,   321,     0,   322,   323,     0,
       0,   324,   325,   326,     0,     0,   327,   328,     0,   330,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   345,     0,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,     0,   404,
     405,   406,   407,   408,     0,   410,   411,   412,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   507,   427,   428,   429,     0,   430,   431,     0,
     432,     0,   434,   435,   436,   437,   438,     0,   439,   440,
       0,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,     0,     0,   461,   462,   463,   464,
     465,   466,   467,     0,   468,     0,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1510,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
       0,   122,   123,   124,   125,   126,     0,   128,   129,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     138,   139,   140,     0,   141,   142,   143,   144,   145,     0,
       0,     0,   147,   148,   149,   150,   151,   152,     0,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
       0,   164,   165,   166,     0,     0,     0,     0,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     196,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,     0,   217,   218,   219,   220,
       0,   221,     0,   222,     0,     0,     0,   225,   226,   505,
       0,   229,     0,   230,     0,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
       0,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   263,     0,     0,   266,     0,   268,   269,   270,
     271,   272,   273,     0,     0,   274,     0,   276,     0,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     506,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   307,   308,   309,   310,   311,     0,   312,   313,     0,
     315,     0,   316,   317,   318,   319,   320,   321,     0,   322,
     323,     0,     0,   324,   325,   326,     0,     0,   327,   328,
       0,   330,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   345,     0,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
       0,   404,   405,   406,   407,   408,     0,   410,   411,   412,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   507,   427,   428,   429,     0,   430,
     431,     0,   432,     0,   434,   435,   436,   437,   438,     0,
     439,   440,     0,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,     0,     0,   461,   462,
     463,   464,   465,   466,   467,     0,   468,     0,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1973,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,     0,     0,     0,   116,   117,     0,   118,
     119,   120,     0,   122,   123,   124,   125,   126,     0,   128,
     129,     0,   130,   131,   132,   133,   134,   135,     0,     0,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,     0,     0,     0,   147,   148,   149,   150,   151,   152,
       0,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,     0,   164,   165,   166,     0,     0,     0,     0,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   196,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,     0,   217,   218,
     219,   220,     0,   221,     0,   222,     0,     0,     0,   225,
     226,   505,     0,   229,     0,   230,     0,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,     0,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   263,     0,     0,   266,     0,   268,
     269,   270,   271,   272,   273,     0,     0,   274,     0,   276,
       0,     0,   278,   279,   280,     0,     0,   281,   282,   283,
     284,   285,   506,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   307,   308,   309,   310,   311,     0,   312,
     313,     0,   315,     0,   316,   317,   318,   319,   320,   321,
       0,   322,   323,     0,     0,   324,   325,   326,     0,     0,
     327,   328,     0,   330,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
       0,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,     0,   404,   405,   406,   407,   408,     0,   410,
     411,   412,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   507,   427,   428,   429,
       0,   430,   431,     0,   432,     0,   434,   435,   436,   437,
     438,     0,   439,   440,     0,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,     0,     0,
     461,   462,   463,   464,   465,   466,   467,     0,   468,     0,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2107,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,     0,   122,   123,   124,   125,   126,
       0,   128,   129,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,     0,     0,     0,   147,   148,   149,   150,
     151,   152,     0,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,     0,   164,   165,   166,     0,     0,
       0,     0,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,     0,
     217,   218,   219,   220,     0,   221,     0,   222,     0,     0,
       0,   225,   226,   505,     0,   229,     0,   230,     0,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,     0,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   263,     0,     0,   266,
       0,   268,   269,   270,   271,   272,   273,     0,     0,   274,
       0,   276,     0,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   506,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   307,   308,   309,   310,   311,
       0,   312,   313,     0,   315,     0,   316,   317,   318,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,   328,     0,   330,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   345,     0,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,     0,   404,   405,   406,   407,   408,
       0,   410,   411,   412,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   507,   427,
     428,   429,     0,   430,   431,     0,   432,     0,   434,   435,
     436,   437,   438,     0,   439,   440,     0,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
       0,     0,   461,   462,   463,   464,   465,   466,   467,     0,
     468,     0,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,  2720,  1423,   515,     0,     0,
    1954,  1013,     0,     0,     0,     0,     0,  1955,     0,  2879,
    1956,  1957,  1958,   105,   106,   107,   108,   109,   110,   111,
     112,  1242,   113,   114,   115,  1243,  1244,  1245,  1246,  1247,
    1248,  1249,   116,   117,  1250,   118,   119,   120,  2721,   122,
     123,   124,     0,   763,  2722,   765,   766,  1251,   130,   131,
     132,   133,   134,   135,  1252,  1253,   136,   137,   767,   768,
     140,  1254,   141,   142,   143,   144,     0,  1255,  2723,  1256,
    2724,   148,   149,   150,   151,   152,  2725,   154,   155,   156,
    1257,   157,   158,   159,   160,   161,   162,  1258,  2726,   164,
     165,   166,  2727,  2728,  2729,  2730,  1259,  1260,  2731,   172,
     173,   174,   175,   176,   177,   178,   778,   779,   181,  1261,
     182,  1262,   183,   184,   185,   186,   187,   188,  1263,   189,
     190,   191,   192,   193,  1264,  1265,   194,   195,   780,   197,
     198,  1266,   199,   200,   201,  1267,   202,   203,   204,  1268,
     205,   206,   207,   208,     0,   210,   211,   212,   213,   214,
       0,  1269,   216,  1270,   217,   218,   781,   220,  1271,   221,
    1272,   222,  2732,  1273,  2733,   225,   226,  2734,  2735,   229,
    1274,   230,  1275,     0,     0,   233,  1276,   234,   235,   236,
     237,   238,   239,   240,  2736,   242,   243,   244,   245,  1277,
     246,   247,   248,   249,   250,   251,  1278,   252,  2737,     0,
     255,   256,   257,   258,   259,   788,   789,  1279,   790,  1280,
     263,  2738,  2739,   266,  2740,   268,   269,   270,   271,   272,
     273,  1281,  1282,   274,  2741,   276,  2742,  1283,   278,   279,
     280,  1284,  1285,   281,   282,   283,   284,   285,  2743,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   797,  2744,   799,
     308,   309,   310,  2745,  1286,   312,   313,  2746,   315,  1287,
       0,   317,   801,   319,   320,   321,  1288,   322,   323,  1289,
    1290,  2747,   325,   326,  1291,  1292,   327,     0,  2748,   330,
    2749,     0,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,  1293,   343,   344,     0,  2750,   347,   348,     0,
     350,   351,   352,  1294,   353,   354,   355,   356,   357,   358,
    1295,   359,   360,   361,   805,   363,   364,   365,   366,  1296,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,  1297,   380,   381,  2751,   383,   384,   385,
     807,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,  1298,   398,   399,   400,   401,   402,  2752,   404,
    2753,   406,   407,   408,  2754,   410,   411,   811,   413,  1299,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,  2755,   427,     0,   429,  1300,   430,   431,  1301,
     432,  2756,   434,   435,   436,   437,   438,  1302,   814,   815,
    1303,  1304,   441,   442,     0,   444,     0,  1305,   446,   447,
    2757,   449,   450,   451,   452,   453,  2758,  1307,   454,   455,
     456,   457,   458,   459,  2759,  1308,   461,   462,   463,   464,
     465,     0,   819,  1310,   468,  2760,   470,   471,   472,   473,
     474,  1311,  1312,   475,  1313,  1314,   476,   477,   478,   479,
     480,   481,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   493,   494,   495,   496,     0,   504,     0,
    1959,  1960,  1961,  1954,  2761,  2762,  1964,  1965,  1966,  1967,
    1955,     0,     0,  1956,  1957,  1958,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
       0,     0,     0,  1959,  1960,  1961,     0,  1962,  1963,  1964,
    1965,  1966,  1967,  1561,     0,     0,  1562,     0,     0,     0,
    1563,  1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1569,     0,  1561,     0,     0,  1562,     0,     0,  1571,  1563,
    1564,  1565,  1566,  1567,  1568,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1569,
       0,     0,     0,     0,     0,     0,     0,  1571,  1561,     0,
    1573,  1562,     0,     0,  1572,  1563,  1564,  1565,  1566,  1567,
    1568,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,  1561,     0,  1573,
    1562,     0,     0,  1571,  1563,  1564,  1565,  1566,  1567,  1568,
    1572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,
       0,     0,  1571,     0,     0,  1573,     0,     0,     0,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0,     0,     0,     0,     0,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
       0,     0,  1576,     0,     0,     0,     0,     0,     0,     0,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,  1578,  1575,     0,     0,     0,
       0,  1576,     0,     0,     0,     0,     0,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,  1574,     0,     0,     0,
       0,     0,     0,  1577,  1578,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,     0,     0,  1576,  1579,     0,
       0,     0,     0,     0,     0,  1574,     0,  1580,     0,     0,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
    1578,  1575,     0,     0,  1582,     0,  1576,  1583,     0,     0,
       0,     0,     0,     0,  1579,     0,  1580,     0,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,  1578,
       0,     0,     0,  1582,     0,     0,  1583,     0,     0,     0,
       0,     0,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1561,     0,  1582,
    1562,     0,  1583,     0,  1563,  1564,  1565,  1566,  1567,  1568,
       0,  1580,     0,     0,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1569,     0,  1561,  1584,  1582,  1562,
       0,  1583,  1571,  1563,  1564,  1565,  1566,  1567,  1568,  1572,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1569,     0,     0,  1584,     0,     0,     0,
       0,  1571,  1561,     0,  1573,  1562,     0,     0,  1572,  1563,
    1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1569,
       0,     0,  1584,  1573,     0,     0,     0,  1571,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1584,     0,     0,     0,     0,     0,     0,     0,  1573,
    1585,     0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,
    1592,  1593,  1594,     0,     0,     0,     0,  2609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1585,
       0,     0,  1586,  1587,  1588,  1574,  1589,  1590,  1591,  1592,
    1593,  1594,     0,     0,     0,     0,  2666,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,  1576,     0,     0,     0,
       0,     0,     0,     0,  1574,  1585,     0,     0,  1586,  1587,
    1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,  1577,  1578,
    1575,     0,  2875,     0,     0,  1576,     0,     0,     0,     0,
       0,     0,     0,  1579,  1585,     0,     0,  1586,  1587,  1588,
    1574,  1589,  1590,  1591,  1592,  1593,  1594,  1577,  1578,     0,
       0,  2878,     0,     0,     0,     0,  1575,     0,     0,     0,
       0,  1576,  1579,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,  1578,     0,     0,     0,  1582,     0,
       0,  1583,     0,     0,     0,     0,     0,     0,  1579,     0,
    1580,     0,     0,  1581,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1561,     0,  1582,  1562,     0,
    1583,     0,  1563,  1564,  1565,  1566,  1567,  1568,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,  1569,     0,     0,     0,     0,     0,     0,     0,
    1571,  1561,     0,  1582,  1562,     0,  1583,  1572,  1563,  1564,
    1565,  1566,  1567,  1568,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,
    1561,  1584,  1573,  1562,     0,     0,  1571,  1563,  1564,  1565,
    1566,  1567,  1568,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,
    1584,     0,     0,     0,     0,  1571,     0,     0,  1573,     0,
       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1584,  1573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1574,  1585,     0,     0,  1586,  1587,  1588,
       0,  1589,  1590,  1591,  1592,  1593,  1594,     0,     0,  1575,
       0,  3005,     0,     0,  1576,     0,     0,     0,     0,     0,
       0,     0,     0,  1585,     0,     0,  1586,  1587,  1588,  1574,
    1589,  1590,  1591,  1592,  1593,  1594,  1577,  1578,     0,     0,
    3026,     0,     0,     0,     0,  1575,     0,     0,     0,     0,
    1576,  1579,     0,     0,     0,     0,     0,     0,  1574,  1585,
       0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,
    1593,  1594,  1577,  1578,  1575,     0,  3114,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,  1579,     0,  1580,
       0,     0,  1581,     0,     0,     0,     0,     0,     0,     0,
       0,  1577,  1578,     0,     1,     0,  1582,     0,     0,  1583,
       0,     0,     0,     0,     2,     0,  1579,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
    1561,     7,  1582,  1562,     0,  1583,     0,  1563,  1564,  1565,
    1566,  1567,  1568,     8,  1580,     0,     0,  1581,     0,     0,
       0,     0,     0,     0,     9,     0,     0,  1569,     0,     0,
       0,  1582,     0,     0,  1583,  1571,    10,     0,   566,     0,
       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,  1584,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
      13,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,     0,    16,     0,     0,     0,
       0,     0,     0,     0,    17,  1584,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      20,     0,     0,     0,    21,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1584,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
       0,     0,  1585,     0,     0,  1586,  1587,  1588,  1574,  1589,
    1590,  1591,  1592,  1593,  1594,     0,     0,     0,     0,  3167,
      24,     0,     0,     0,  1575,     0,     0,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,  1585,     0,
       0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,
    1594,  1577,  1578,     0,     0,  3189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1579,  1585,     0,     0,
    1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,
       0,     0,  2999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,    26,     0,     0,  1580,     0,     0,  1581,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1582,     0,     0,  1583,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,  1584,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1241,     0,  1585,     0,     0,
    1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,
       0,     0,  3152,   105,   106,   107,   108,   109,   110,   111,
     112,  1242,   113,   114,   115,  1243,  1244,  1245,  1246,  1247,
    1248,  1249,   116,   117,  1250,   118,   119,   120,   853,   122,
     123,   124,   854,   855,   856,   857,   858,  1251,   130,   131,
     132,   133,   134,   135,  1252,  1253,   136,   137,   859,   860,
     140,  1254,   141,   142,   143,   144,   861,  1255,   862,  1256,
     863,   148,   149,   150,   151,   152,   864,   154,   155,   156,
    1257,   157,   158,   159,   160,   161,   162,  1258,   865,   164,
     165,   166,   866,   867,   868,   869,  1259,  1260,   870,   172,
     173,   174,   175,   176,   177,   178,   871,   872,   181,  1261,
     182,  1262,   183,   184,   185,   186,   187,   188,  1263,   189,
     190,   191,   192,   193,  1264,  1265,   194,   195,   196,   197,
     198,  1266,   199,   200,   201,  1267,   202,   203,   204,  1268,
     205,   206,   207,   208,   873,   210,   211,   212,   213,   214,
     874,  1269,   216,  1270,   217,   218,   875,   220,  1271,   221,
    1272,   222,   876,  1273,   877,   225,   226,   878,   879,   229,
    1274,   230,  1275,   880,   881,   233,  1276,   234,   235,   236,
     237,   238,   239,   240,   882,   242,   243,   244,   245,  1277,
     246,   247,   248,   249,   250,   251,  1278,   252,   883,   884,
     255,   256,   257,   258,   259,   885,   886,  1279,   887,  1280,
     263,   888,   889,   266,   890,   268,   269,   270,   271,   272,
     273,  1281,  1282,   274,   891,   276,   892,  1283,   278,   279,
     280,  1284,  1285,   281,   282,   283,   284,   285,   893,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   894,   895,   896,
     308,   309,   310,   897,  1286,   312,   313,   898,   315,  1287,
     899,   317,   900,   319,   320,   321,  1288,   322,   323,  1289,
    1290,   324,   325,   326,  1291,  1292,   327,   901,   902,   330,
     903,   904,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,  1293,   343,   344,   905,   906,   347,   348,   907,
     350,   351,   352,  1294,   353,   354,   355,   356,   357,   358,
    1295,   359,   360,   361,   908,   363,   364,   365,   366,  1296,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,  1297,   380,   381,   909,   383,   384,   385,
     910,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,  1298,   398,   399,   400,   401,   402,   911,   404,
     912,   406,   407,   408,   913,   410,   411,   914,   413,  1299,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   915,   427,   916,   429,  1300,   430,   431,  1301,
     432,   917,   434,   435,   436,   437,   438,  1302,   918,   919,
    1303,  1304,   441,   442,   920,   444,   921,  1305,   446,   447,
     922,   449,   450,   451,   452,   453,  1306,  1307,   454,   455,
     456,   457,   458,   459,   923,  1308,   461,   462,   463,   464,
     465,  1309,   925,  1310,   468,   926,   470,   471,   472,   473,
     474,  1311,  1312,   475,  1313,  1314,   476,   477,   478,   479,
     480,   481,   927,   928,   929,   930,   931,   932,   933,   934,
     935,   936,   937,   493,   494,   495,   496,   504,     0,     0,
       0,     0,     0,     0,     0,     0,  2052,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
       0,   122,   123,   124,   125,   126,     0,   128,   129,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     138,   139,   140,     0,   141,   142,   143,   144,   145,     0,
       0,     0,   147,   148,   149,   150,   151,   152,     0,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
       0,   164,   165,   166,     0,     0,     0,     0,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     196,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,     0,   217,   218,   219,   220,
       0,   221,     0,   222,     0,     0,     0,   225,   226,   505,
       0,   229,     0,   230,     0,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
       0,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   263,     0,     0,   266,     0,   268,   269,   270,
     271,   272,   273,     0,     0,   274,     0,   276,     0,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     506,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   307,   308,   309,   310,   311,     0,   312,   313,     0,
     315,     0,   316,   317,   318,   319,   320,   321,     0,   322,
     323,     0,     0,   324,   325,   326,     0,     0,   327,   328,
       0,   330,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   345,     0,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
       0,   404,   405,   406,   407,   408,     0,   410,   411,   412,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   507,   427,   428,   429,     0,   430,
     431,     0,   432,     0,   434,   435,   436,   437,   438,     0,
     439,   440,     0,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,     0,     0,   461,   462,
     463,   464,   465,   466,   467,     0,   468,     0,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   504,
       0,     0,     0,     0,     0,     0,     0,     0,  2560,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,     0,     0,     0,   116,   117,     0,   118,
     119,   120,     0,   122,   123,   124,   125,   126,     0,   128,
     129,     0,   130,   131,   132,   133,   134,   135,     0,     0,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,     0,     0,     0,   147,   148,   149,   150,   151,   152,
       0,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,     0,   164,   165,   166,     0,     0,     0,     0,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   196,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,     0,   217,   218,
     219,   220,     0,   221,     0,   222,     0,     0,     0,   225,
     226,   505,     0,   229,     0,   230,     0,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,     0,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   263,     0,     0,   266,     0,   268,
     269,   270,   271,   272,   273,     0,     0,   274,     0,   276,
       0,     0,   278,   279,   280,     0,     0,   281,   282,   283,
     284,   285,   506,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   307,   308,   309,   310,   311,     0,   312,
     313,     0,   315,     0,   316,   317,   318,   319,   320,   321,
       0,   322,   323,     0,     0,   324,   325,   326,     0,     0,
     327,   328,     0,   330,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
       0,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,     0,   404,   405,   406,   407,   408,     0,   410,
     411,   412,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   507,   427,   428,   429,
       0,   430,   431,     0,   432,     0,   434,   435,   436,   437,
     438,     0,   439,   440,     0,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,     0,     0,
     461,   462,   463,   464,   465,   466,   467,     0,   468,     0,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   852,  1423,   515,     0,     0,     0,  1013,     0,     0,
    2563,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,   853,   122,   123,   124,   854,   855,
     856,   857,   858,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   859,   860,   140,     0,   141,   142,
     143,   144,   861,     0,   862,     0,   863,   148,   149,   150,
     151,   152,   864,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   865,   164,   165,   166,   866,   867,
     868,   869,     0,     0,   870,   172,   173,   174,   175,   176,
     177,   178,   871,   872,   181,  1620,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
     873,   210,   211,   212,   213,   214,   874,  1424,   216,     0,
     217,   218,   875,   220,     0,   221,     0,   222,   876,     0,
     877,   225,   226,   878,   879,   229,     0,   230,     0,   880,
     881,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     882,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   883,   884,   255,   256,   257,   258,
     259,   885,   886,     0,   887,     0,   263,   888,   889,   266,
     890,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     891,   276,   892,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   893,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   894,   895,   896,   308,   309,   310,   897,
       0,   312,   313,   898,   315,     0,   899,   317,   900,   319,
     320,   321,     0,   322,   323,  1425,     0,   324,   325,   326,
       0,     0,   327,   901,   902,   330,   903,   904,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   905,   906,   347,   348,   907,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     908,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   909,   383,   384,   385,   910,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   911,   404,   912,   406,   407,   408,
     913,   410,   411,   914,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   915,   427,
     916,   429,     0,   430,   431,     0,   432,   917,   434,   435,
     436,   437,   438,     0,   918,   919,     0,     0,   441,   442,
     920,   444,   921,  1426,   446,   447,   922,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
     923,     0,   461,   462,   463,   464,   465,  1309,   925,     0,
     468,   926,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   927,   928,
     929,   930,   931,   932,   933,   934,   935,   936,   937,   493,
     494,   495,   496,   852,  1423,   515,     0,     0,     0,  1013,
    1427,  1428,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,   853,   122,   123,   124,
     854,   855,   856,   857,   858,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   859,   860,   140,     0,
     141,   142,   143,   144,   861,     0,   862,     0,   863,   148,
     149,   150,   151,   152,   864,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   865,   164,   165,   166,
     866,   867,   868,   869,     0,     0,   870,   172,   173,   174,
     175,   176,   177,   178,   871,   872,   181,  1622,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   196,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,   873,   210,   211,   212,   213,   214,   874,  1424,
     216,     0,   217,   218,   875,   220,     0,   221,     0,   222,
     876,     0,   877,   225,   226,   878,   879,   229,     0,   230,
       0,   880,   881,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   882,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   883,   884,   255,   256,
     257,   258,   259,   885,   886,     0,   887,     0,   263,   888,
     889,   266,   890,   268,   269,   270,   271,   272,   273,     0,
       0,   274,   891,   276,   892,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,   893,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   894,   895,   896,   308,   309,
     310,   897,     0,   312,   313,   898,   315,     0,   899,   317,
     900,   319,   320,   321,     0,   322,   323,  1425,     0,   324,
     325,   326,     0,     0,   327,   901,   902,   330,   903,   904,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   905,   906,   347,   348,   907,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   908,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   909,   383,   384,   385,   910,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,   911,   404,   912,   406,
     407,   408,   913,   410,   411,   914,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     915,   427,   916,   429,     0,   430,   431,     0,   432,   917,
     434,   435,   436,   437,   438,     0,   918,   919,     0,     0,
     441,   442,   920,   444,   921,  1426,   446,   447,   922,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,   923,     0,   461,   462,   463,   464,   465,  1309,
     925,     0,   468,   926,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     927,   928,   929,   930,   931,   932,   933,   934,   935,   936,
     937,   493,   494,   495,   496,   852,  1423,   515,     0,     0,
       0,  1013,  1427,  1428,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,     0,
       0,     0,   116,   117,     0,   118,   119,   120,   853,   122,
     123,   124,   854,   855,   856,   857,   858,     0,   130,   131,
     132,   133,   134,   135,     0,     0,   136,   137,   859,   860,
     140,     0,   141,   142,   143,   144,   861,     0,   862,     0,
     863,   148,   149,   150,   151,   152,   864,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,   865,   164,
     165,   166,   866,   867,   868,   869,     0,     0,   870,   172,
     173,   174,   175,   176,   177,   178,   871,   872,   181,     0,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   196,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,   873,   210,   211,   212,   213,   214,
     874,  1424,   216,     0,   217,   218,   875,   220,     0,   221,
       0,   222,   876,     0,   877,   225,   226,   878,   879,   229,
       0,   230,     0,   880,   881,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   882,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,   883,   884,
     255,   256,   257,   258,   259,   885,   886,     0,   887,     0,
     263,   888,   889,   266,   890,   268,   269,   270,   271,   272,
     273,     0,     0,   274,   891,   276,   892,     0,   278,   279,
     280,     0,     0,   281,   282,   283,   284,   285,   893,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   894,   895,   896,
     308,   309,   310,   897,     0,   312,   313,   898,   315,     0,
     899,   317,   900,   319,   320,   321,     0,   322,   323,  1425,
       0,   324,   325,   326,     0,     0,   327,   901,   902,   330,
     903,   904,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   905,   906,   347,   348,   907,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   908,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   909,   383,   384,   385,
     910,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,   911,   404,
     912,   406,   407,   408,   913,   410,   411,   914,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   915,   427,   916,   429,     0,   430,   431,     0,
     432,   917,   434,   435,   436,   437,   438,     0,   918,   919,
       0,     0,   441,   442,   920,   444,   921,  1426,   446,   447,
     922,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,   923,     0,   461,   462,   463,   464,
     465,  1309,   925,     0,   468,   926,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   927,   928,   929,   930,   931,   932,   933,   934,
     935,   936,   937,   493,   494,   495,   496,     0,     0,  1561,
       0,     0,  1562,     0,  1427,  1428,  1563,  1564,  1565,  1566,
    1567,  1568,  1561,     0,     0,  1562,     0,     0,     0,  1563,
    1564,  1565,  1566,  1567,  1568,     0,  1569,     0,     0,     0,
    2065,     0,     0,     0,  1571,     0,     0,     0,     0,  1569,
       0,  1572,     0,     0,     0,     0,     0,  1571,  1561,     0,
       0,  1562,     0,     0,  1572,  1563,  1564,  1565,  1566,  1567,
    1568,  1561,     0,     0,  1562,     0,  1573,     0,  1563,  1564,
    1565,  1566,  1567,  1568,     0,  1569,     0,     0,     0,  1573,
       0,     0,     0,  1571,     0,     0,     0,     0,  1569,     0,
    1572,  1849,     0,     0,     0,     0,  1571,  1561,     0,     0,
    1562,     0,     0,  1572,  1563,  1564,  1565,  1566,  1567,  1568,
       0,     0,     0,     0,     0,  1573,     0,  2066,     0,     0,
       0,     0,     0,     0,  1569,     0,     0,     0,  1573,     0,
       0,     0,  1571,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,  1561,     0,     0,  1562,     0,     0,     0,  1563,
    1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0,     0,  1574,     0,  1569,
    1888,     0,  1894,     0,     0,  1889,     0,  1571,     0,     0,
    1574,     0,     0,  1575,  1572,     0,     0,     0,  1576,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,     0,
       0,  1576,     0,     0,     0,  3250,     0,     0,     0,  1573,
    1577,  1578,     0,     0,     0,     0,  1574,     0,     0,     0,
       0,     0,     0,  1577,  1578,  1579,     0,     0,     0,  1574,
       0,     0,  1575,     0,     0,     0,     0,  1576,  1579,     0,
       0,     0,     0,     0,     0,  1575,     0,     0,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
    1578,     0,     0,  1580,     0,  1574,  1581,     0,     0,     0,
       0,     0,  1577,  1578,  1579,     0,  1580,     0,     0,  1581,
    1582,  1575,     0,  1583,     0,     0,  1576,  1579,     0,     0,
       0,     0,     0,  1582,     0,     0,  1583,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,  1578,
    1574,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,     0,  1579,     0,  1580,  1575,     0,  1581,  1582,
       0,  1576,  1583,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1582,     0,     0,  1583,     0,     0,     0,     0,
       0,     0,     0,  1577,  1578,     0,  3251,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,     0,     0,  1579,     0,
       0,     0,     0,  1584,     0,     0,     0,     0,  1582,     0,
       0,  1583,     0,     0,     0,     0,  1584,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1860,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1584,  1582,     0,     0,  1583,     0,     0,     0,
       0,     0,     0,     0,  2070,  1584,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1584,     0,     0,     0,     0,  1585,     0,     0,  1586,
    1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,  1585,
       0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,
    1593,  1594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1584,     0,     0,     0,
       0,     0,     0,     0,     0,  1585,     0,     0,  1586,  1587,
    1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,  1585,     0,
       0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,
    1594,     0,     0,  1561,     0,     0,  1562,     0,     0,     0,
    1563,  1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,
       0,     0,     0,     0,  1585,     0,     0,  1586,  1587,  1588,
    1569,  1589,  1590,  1591,  1592,  1593,  1594,     0,  1571,     0,
       0,     0,     0,     0,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1585,
    1573,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,
    1593,  1594,  1561,     0,     0,  1562,     0,     0,     0,  1563,
    1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1569,
       0,     0,  1901,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,  1561,     0,     0,
    1562,     0,     0,     0,  1563,  1564,  1565,  1566,  1567,  1568,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,
       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,
       0,     0,  1571,     0,     0,     0,  1899,     0,     0,  1572,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
       0,     0,  1576,     0,  1573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,  1578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1561,     0,     0,  1562,
    1574,     0,     0,  1563,  1564,  1565,  1566,  1567,  1568,     0,
       0,     0,     0,     0,     0,     0,  1575,  1580,     0,     0,
    1581,  1576,     0,  1569,     0,     0,     0,     0,     0,     0,
       0,  1571,     0,     0,  1582,  1977,     0,  1583,  1572,     0,
       0,     0,     0,  1577,  1578,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1579,     0,
       0,  1575,     0,  1573,     0,     0,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,  1578,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1582,     0,     0,  1583,     0,     0,     0,
       0,  1561,     0,     0,  1562,     0,     0,  1584,  1563,  1564,
    1565,  1566,  1567,  1568,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,     0,     0,  1569,     0,
       0,  2607,     0,     0,     0,     0,  1571,     0,  1582,     0,
       0,  1583,     0,  1572,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,  1561,     0,  1576,  1562,     0,  1573,     0,
    1563,  1564,  1565,  1566,  1567,  1568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1584,  1577,  1578,     0,
    1569,     0,     0,     0,     0,     0,     0,     0,  1571,     0,
       0,     0,  1579,     0,     0,  1572,     0,     0,     0,     0,
    1585,     0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,
    1592,  1593,  1594,     0,     0,     0,     0,     0,     0,     0,
    1573,  1584,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,  1581,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,
    1583,     0,     0,     0,     0,     0,     0,     0,     0,  1574,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1575,     0,     0,     0,  1585,
    1576,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,
    1593,  1594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1577,  1578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1579,     0,     0,
       0,  1574,     0,     0,  1585,     0,     0,  1586,  1587,  1588,
       0,  1589,  1590,  1591,  1592,  1593,  1594,  1575,     0,     0,
    1584,  1561,  1576,     0,  1562,     0,     0,     0,  1563,  1564,
    1565,  1566,  1567,  1568,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,  1577,  1578,     0,     0,  1569,     0,
       0,     0,  1582,  2597,     0,  1583,  1571,     0,     0,  1579,
       0,     0,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1582,     0,     0,  1583,     0,     0,
       0,     0,     0,  1585,     0,     0,  1586,  1587,  1588,     0,
    1589,  1590,  1591,  1592,  1593,  1594,     0,     0,     0,  1561,
       0,     0,  1562,     0,     0,  1584,  1563,     0,     0,  1566,
    1567,  1568,     0,     0,     0,     0,     0,  1561,     0,     0,
    1562,     0,     0,     0,  1563,     0,  1569,  1566,  1567,  1568,
       0,     0,     0,     0,  1571,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,  1569,     0,     0,     0,     0,  1574,
       0,     0,  1571,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,     0,     0,     0,  1575,  1573,  1584,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0,     0,     0,     0,     0,
       0,     0,  1577,  1578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1579,  1585,     0,
       0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,
    1594,     0,  1561,     0,     0,  1562,     0,     0,     0,  1563,
       0,     0,  1566,  1567,  1568,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,  1582,     0,  1572,  1583,     0,  1574,     0,     0,
    1585,     0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,
    1592,  1593,  1594,  1575,     0,  1574,     0,     0,  1576,  1573,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,  1576,     0,     0,     0,
    1577,  1578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,  1577,  1578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,     0,     0,     0,  1561,     0,     0,
    1562,     0,     0,     0,  1563,  1584,     0,  1566,  1567,  1568,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1582,  1580,  1571,  1583,  1581,     0,     0,     0,     0,  1572,
    1574,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,  1575,     0,     0,     0,
       0,  1576,     0,     0,  1573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,  1578,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1585,     0,
       0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,  2087,
    1594,     0,     0,  1584,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,  1584,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,     0,     0,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1912, -1912,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,     0,     0,  1585,     0,     0,  1586,
    1587,  1588,     0,  1589,  1590,  1591,  1592,  1593,  1594,     0,
       0,     0,     0,     0,  1585,     0,  1584,  1586,  1587,  1588,
       0,  1589,  1590,  1591,  1592,  1593,  1594,     0,     0,     0,
       0,     0,     0,     0, -1912,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1585,
       0,     0,  1586,  1587,  1588,     0,  1589,  1590,  1591,  1592,
    1593,  1594,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1584,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1241,
       0,  1996,     0,     0,  1585,     0,     0,  1586,  1587,  1588,
       0,  1589,  1590,  1591,  1592,  1593,  1594,   105,   106,   107,
     108,   109,   110,   111,   112,  1242,   113,   114,   115,  1243,
    1244,  1245,  1246,  1247,  1248,  1249,   116,   117,  1250,   118,
     119,   120,   853,   122,   123,   124,   854,   855,   856,   857,
     858,  1251,   130,   131,   132,   133,   134,   135,  1252,  1253,
     136,   137,   859,   860,   140,  1254,   141,   142,   143,   144,
     861,  1255,   862,  1256,   863,   148,   149,   150,   151,   152,
     864,   154,   155,   156,  1257,   157,   158,   159,   160,   161,
     162,  1258,   865,   164,   165,   166,   866,   867,   868,   869,
    1259,  1260,   870,   172,   173,   174,   175,   176,   177,   178,
     871,   872,   181,  1261,   182,  1262,   183,   184,   185,   186,
     187,   188,  1263,   189,   190,   191,   192,   193,  1264,  1265,
     194,   195,   196,   197,   198,  1266,   199,   200,   201,  1267,
     202,   203,   204,  1268,   205,   206,   207,   208,   873,   210,
     211,   212,   213,   214,   874,  1269,   216,  1270,   217,   218,
     875,   220,  1271,   221,  1272,   222,   876,  1273,   877,   225,
     226,   878,   879,   229,  1274,   230,  1275,   880,   881,   233,
    1276,   234,   235,   236,   237,   238,   239,   240,   882,   242,
     243,   244,   245,  1277,   246,   247,   248,   249,   250,   251,
    1278,   252,   883,   884,   255,   256,   257,   258,   259,   885,
     886,  1279,   887,  1280,   263,   888,   889,   266,   890,   268,
     269,   270,   271,   272,   273,  1281,  1282,   274,   891,   276,
     892,  1283,   278,   279,   280,  1284,  1285,   281,   282,   283,
     284,   285,   893,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   894,   895,   896,   308,   309,   310,   897,  1286,   312,
     313,   898,   315,  1287,   899,   317,   900,   319,   320,   321,
    1288,   322,   323,  1289,  1290,   324,   325,   326,  1291,  1292,
     327,   901,   902,   330,   903,   904,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,  1293,   343,   344,   905,
     906,   347,   348,   907,   350,   351,   352,  1294,   353,   354,
     355,   356,   357,   358,  1295,   359,   360,   361,   908,   363,
     364,   365,   366,  1296,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,  1297,   380,   381,
     909,   383,   384,   385,   910,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,  1298,   398,   399,   400,
     401,   402,   911,   404,   912,   406,   407,   408,   913,   410,
     411,   914,   413,  1299,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   915,   427,   916,   429,
    1300,   430,   431,  1301,   432,   917,   434,   435,   436,   437,
     438,  1302,   918,   919,  1303,  1304,   441,   442,   920,   444,
     921,  1305,   446,   447,   922,   449,   450,   451,   452,   453,
    1306,  1307,   454,   455,   456,   457,   458,   459,   923,  1308,
     461,   462,   463,   464,   465,  1309,   925,  1310,   468,   926,
     470,   471,   472,   473,   474,  1311,  1312,   475,  1313,  1314,
     476,   477,   478,   479,   480,   481,   927,   928,   929,   930,
     931,   932,   933,   934,   935,   936,   937,   493,   494,   495,
     496,  1241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,  1242,   113,   114,
     115,  1243,  1244,  1245,  1246,  1247,  1248,  1249,   116,   117,
    1250,   118,   119,   120,   853,   122,   123,   124,   854,   855,
     856,   857,   858,  1251,   130,   131,   132,   133,   134,   135,
    1252,  1253,   136,   137,   859,   860,   140,  1254,   141,   142,
     143,   144,   861,  1255,   862,  1256,   863,   148,   149,   150,
     151,   152,   864,   154,   155,   156,  1257,   157,   158,   159,
     160,   161,   162,  1258,   865,   164,   165,   166,   866,   867,
     868,   869,  1259,  1260,   870,   172,   173,   174,   175,   176,
     177,   178,   871,   872,   181,  1261,   182,  1262,   183,   184,
     185,   186,   187,   188,  1263,   189,   190,   191,   192,   193,
    1264,  1265,   194,   195,   196,   197,   198,  1266,   199,   200,
     201,  1267,   202,   203,   204,  1268,   205,   206,   207,   208,
     873,   210,   211,   212,   213,   214,   874,  1269,   216,  1270,
     217,   218,   875,   220,  1271,   221,  1272,   222,   876,  1273,
     877,   225,   226,   878,   879,   229,  1274,   230,  1275,   880,
     881,   233,  1276,   234,   235,   236,   237,   238,   239,   240,
     882,   242,   243,   244,   245,  1277,   246,   247,   248,   249,
     250,   251,  1278,   252,   883,   884,   255,   256,   257,   258,
     259,   885,   886,  1279,   887,  1280,   263,   888,   889,   266,
     890,   268,   269,   270,   271,   272,   273,  1281,  1282,   274,
     891,   276,   892,  1283,   278,   279,   280,  1284,  1285,   281,
     282,   283,   284,   285,   893,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   894,   895,   896,   308,   309,   310,   897,
    1286,   312,   313,   898,   315,  1287,   899,   317,   900,   319,
     320,   321,  1288,   322,   323,  1289,  1290,   324,   325,   326,
    1291,  1292,   327,   901,   902,   330,   903,   904,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,  1293,   343,
     344,   905,   906,   347,   348,   907,   350,   351,   352,  1294,
     353,   354,   355,   356,   357,   358,  1295,   359,   360,   361,
     908,   363,   364,   365,   366,  1296,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,  1297,
     380,   381,   909,   383,   384,   385,   910,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,  1298,   398,
     399,   400,   401,   402,   911,   404,   912,   406,   407,   408,
     913,   410,   411,   914,   413,  1299,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   915,   427,
     916,   429,  1300,   430,   431,  1301,   432,   917,   434,   435,
     436,   437,   438,  1302,   918,   919,  1303,  1304,   441,   442,
     920,   444,   921,  1305,   446,   447,   922,   449,   450,   451,
     452,   453,  1306,  1307,   454,   455,   456,   457,   458,   459,
     923,  1308,   461,   462,   463,   464,   465,  1309,   925,  1310,
     468,   926,   470,   471,   472,   473,   474,  1311,  1312,   475,
    1313,  1314,   476,   477,   478,   479,   480,   481,   927,   928,
     929,   930,   931,   932,   933,   934,   935,   936,   937,   493,
     494,   495,   496,  1241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,  2133,   110,   111,   112,  1242,
     113,   114,   115,  1243,  1244,  1245,  1246,  1247,  1248,  1249,
     116,   117,  1250,   118,   119,   120,   853,   122,   123,   124,
     854,   855,   856,   857,   858,  1251,   130,   131,   132,   133,
     134,   135,  1252,  1253,   136,   137,   859,   860,   140,  1254,
     141,   142,   143,   144,   861,  1255,   862,  1256,   863,   148,
     149,   150,   151,   152,   864,   154,   155,   156,  1257,   157,
     158,   159,   160,   161,   162,  1258,   865,   164,   165,   166,
     866,   867,   868,   869,  1259,  1260,   870,   172,   173,   174,
     175,   176,   177,   178,   871,   872,   181,  1261,   182,  1262,
     183,   184,   185,   186,   187,   188,  1263,   189,   190,   191,
     192,   193,  1264,  1265,   194,   195,   196,  2134,   198,  1266,
     199,   200,   201,  1267,   202,   203,   204,  1268,   205,   206,
     207,   208,   873,   210,   211,   212,   213,   214,   874,  1269,
     216,  1270,   217,   218,   875,   220,  1271,   221,  1272,   222,
     876,  1273,   877,   225,   226,   878,   879,   229,  1274,   230,
    1275,   880,   881,   233,  1276,   234,   235,   236,   237,   238,
     239,   240,   882,   242,   243,   244,   245,  1277,   246,   247,
     248,   249,   250,   251,  1278,   252,   883,   884,   255,   256,
     257,   258,   259,   885,   886,  1279,   887,  1280,   263,   888,
     889,   266,   890,   268,   269,   270,   271,   272,   273,  1281,
    1282,   274,   891,   276,   892,  1283,   278,   279,   280,  1284,
    1285,   281,   282,   283,   284,   285,   893,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   894,   895,   896,   308,   309,
     310,   897,  1286,   312,   313,   898,   315,  1287,   899,   317,
     900,   319,   320,   321,  1288,   322,   323,  1289,  1290,   324,
     325,   326,  1291,  1292,   327,   901,   902,   330,   903,   904,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
    1293,   343,   344,   905,   906,   347,   348,   907,   350,   351,
     352,  1294,   353,   354,   355,   356,   357,   358,  1295,   359,
     360,   361,   908,   363,   364,   365,   366,  1296,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,  1297,   380,   381,   909,   383,   384,   385,   910,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
    1298,   398,   399,   400,   401,   402,   911,  2135,   912,   406,
     407,   408,   913,   410,   411,   914,   413,  1299,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     915,   427,   916,   429,  1300,   430,   431,  1301,   432,   917,
     434,   435,   436,   437,   438,  1302,   918,   919,  1303,  1304,
     441,   442,   920,   444,   921,  1305,   446,   447,   922,   449,
     450,   451,   452,   453,  1306,  1307,   454,   455,   456,   457,
     458,   459,   923,  1308,   461,   462,   463,   464,   465,  1309,
     925,  1310,   468,   926,   470,   471,   472,   473,   474,  1311,
    1312,   475,  1313,  1314,   476,   477,   478,   479,   480,   481,
     927,   928,   929,   930,   931,   932,   933,   934,   935,   936,
     937,   493,   494,   495,   496,   104,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,     0,
       0,     0,   116,   117,     0,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,   135,     0,   604,   136,   137,   138,   139,
     140,     0,   141,   142,   143,   144,   605,     0,   606,     0,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,   163,   164,
     165,   166,   607,   608,   609,   610,   611,   612,   613,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   196,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     614,     0,   216,     0,   217,   218,   219,   220,     0,   221,
       0,   222,   223,     0,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,     0,     0,   274,   275,   276,   277,     0,   278,   279,
     280,   616,   617,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     618,   317,   318,   319,   320,   321,     0,   322,   323,     0,
       0,   324,   325,   326,     0,     0,   327,   328,   329,   330,
     331,   620,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   621,   346,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,   623,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   624,   429,     0,   430,   431,     0,
     432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
       0,     0,   441,   442,   625,   444,   626,     0,   446,   447,
     627,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,   628,     0,   461,   462,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   852,     0,   515,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
     853,   122,   123,   124,   854,   855,   856,   857,   858,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     859,   860,   140,     0,   141,   142,   143,   144,   861,     0,
     862,     0,   863,   148,   149,   150,   151,   152,   864,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
     865,   164,   165,   166,   866,   867,   868,   869,     0,     0,
     870,   172,   173,   174,   175,   176,   177,   178,   871,   872,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     196,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,   873,   210,   211,   212,
     213,   214,   874,  1424,   216,     0,   217,   218,   875,   220,
       0,   221,     0,   222,   876,     0,   877,   225,   226,   878,
     879,   229,     0,   230,     0,   880,   881,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   882,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
     883,   884,   255,   256,   257,   258,   259,   885,   886,     0,
     887,     0,   263,   888,   889,   266,   890,   268,   269,   270,
     271,   272,   273,     0,     0,   274,   891,   276,   892,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     893,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   894,
     895,   896,   308,   309,   310,   897,     0,   312,   313,   898,
     315,     0,   899,   317,   900,   319,   320,   321,     0,   322,
     323,  1425,     0,   324,   325,   326,     0,     0,   327,   901,
     902,   330,   903,   904,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   905,   906,   347,
     348,   907,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   908,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   909,   383,
     384,   385,   910,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
     911,   404,   912,   406,   407,   408,   913,   410,   411,   914,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   915,   427,   916,   429,     0,   430,
     431,     0,   432,   917,   434,   435,   436,   437,   438,     0,
     918,   919,     0,     0,   441,   442,   920,   444,   921,  1426,
     446,   447,   922,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,   923,     0,   461,   462,
     463,   464,   465,  1309,   925,     0,   468,   926,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   927,   928,   929,   930,   931,   932,
     933,   934,   935,   936,   937,   493,   494,   495,   496,   852,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     3,
       4,     0,     0,     0,     0,     0,   116,   117,     0,   118,
     119,   120,   853,   122,   123,   124,   854,   855,   856,   857,
     858,     0,   130,   131,   132,   133,   134,   135,     0,     0,
     136,   137,   859,   860,   140,     0,   141,   142,   143,   144,
     861,     0,   862,     0,   863,   148,   149,   150,   151,   152,
     864,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,   865,   164,   165,   166,   866,   867,   868,   869,
       0,     0,   870,   172,   173,   174,   175,   176,   177,   178,
     871,   872,   181,     0,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   196,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,   873,   210,
     211,   212,   213,   214,   874,     0,   216,     0,   217,   218,
     875,   220,     0,   221,     0,   222,   876,     0,   877,   225,
     226,   878,   879,   229,     0,   230,     0,   880,   881,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   882,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,   883,   884,   255,   256,   257,   258,   259,   885,
     886,     0,   887,     0,   263,   888,   889,   266,   890,   268,
     269,   270,   271,   272,   273,     0,     0,   274,   891,   276,
     892,     0,   278,   279,   280,     0,     0,   281,   282,   283,
     284,   285,   893,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   894,   895,   896,   308,   309,   310,   897,     0,   312,
     313,   898,   315,     0,   899,   317,   900,   319,   320,   321,
       0,   322,   323,     0,     0,   324,   325,   326,     0,     0,
     327,   901,   902,   330,   903,   904,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   905,
     906,   347,   348,   907,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   908,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     909,   383,   384,   385,   910,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,   911,   404,   912,   406,   407,   408,   913,   410,
     411,   914,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   915,   427,   916,   429,
       0,   430,   431,     0,   432,   917,   434,   435,   436,   437,
     438,     0,   918,   919,     0,     0,   441,   442,   920,   444,
     921,     0,   446,   447,   922,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,   923,     0,
     461,   462,   463,   464,   465,  1309,   925,     0,   468,   926,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   927,   928,   929,   930,
     931,   932,   933,   934,   935,   936,   937,   493,   494,   495,
     496,   104,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,     0,   146,     0,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   163,   164,   165,   166,   167,   168,
     169,   170,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,     0,
     217,   218,   219,   220,     0,   221,     0,   222,   223,     0,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     275,   276,   277,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,     0,   430,   431,     0,   432,   433,   434,   435,
     436,   437,   438,     0,   439,   440,     0,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
     460,     0,   461,   462,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,     0,   122,   123,   124,
     125,   126,     0,   128,   129,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   138,   139,   140,  1686,
     141,   142,   143,   144,   145,     0,     0,  1687,   147,   148,
     149,   150,   151,   152,     0,   154,   155,   156,  1688,   157,
     158,   159,   160,   161,   162,     0,     0,   164,   165,   166,
       0,     0,     0,     0,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   196,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,     0,   217,   218,   219,   220,     0,   221,  1689,   222,
       0,     0,     0,   225,   226,   505,     0,   229,     0,   230,
       0,   231,   232,   233,     0,   234,   235,   236,   237,   238,
    1690,   240,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,     0,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   263,     0,
       0,   266,     0,   268,   269,   270,   271,   272,   273,     0,
       0,   274,     0,   276,     0,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,   506,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   307,   308,   309,
     310,   311,     0,   312,   313,     0,   315,     0,   316,   317,
     318,   319,   320,   321,     0,   322,   323,     0,     0,   324,
     325,   326,     0,     0,   327,   328,     0,   330,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,     0,   347,   348,   349,   350,   351,
     352,  1691,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,     0,   404,   405,   406,
     407,   408,     0,   410,   411,   412,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     507,   427,   428,   429,     0,   430,   431,     0,   432,     0,
     434,   435,   436,   437,   438,     0,   439,   440,     0,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,   449,
     450,   451,   452,   453,     0,  1692,   454,   455,   456,   457,
     458,   459,     0,     0,   461,   462,   463,   464,   465,   466,
     467,     0,   468,     0,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   504,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,     0,
       0,     0,   116,   117,     0,   118,   119,   120,     0,   122,
     123,   124,   125,   126,     0,   128,   129,     0,   130,   131,
     132,   133,   134,   135,     0,     0,   136,   137,   138,   139,
     140,  1686,   141,   142,   143,   144,   145,     0,     0,     0,
     147,   148,   149,   150,   151,   152,     0,   154,   155,   156,
    1688,   157,   158,   159,   160,   161,   162,     0,     0,   164,
     165,   166,     0,     0,     0,     0,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   196,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,     0,   217,   218,   219,   220,     0,   221,
    1689,   222,     0,     0,     0,   225,   226,   505,     0,   229,
       0,   230,     0,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,     0,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     263,     0,     0,   266,     0,   268,   269,   270,   271,   272,
     273,     0,     0,   274,     0,   276,  2206,     0,   278,   279,
     280,     0,     0,   281,   282,   283,   284,   285,   506,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   307,
     308,   309,   310,   311,     0,   312,   313,     0,   315,     0,
     316,   317,   318,   319,   320,   321,     0,   322,   323,     0,
       0,   324,   325,   326,     0,     0,   327,   328,     0,   330,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   345,     0,   347,   348,   349,
     350,   351,   352,  1691,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,     0,   404,
     405,   406,   407,   408,     0,   410,   411,   412,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   507,   427,   428,   429,     0,   430,   431,     0,
     432,     0,   434,   435,   436,   437,   438,     0,   439,   440,
       0,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,   449,   450,   451,   452,   453,     0,  1692,   454,   455,
     456,   457,   458,   459,     0,     0,   461,   462,   463,   464,
     465,   466,   467,     0,   468,     0,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   761,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
     762,   122,   123,   124,     0,   763,   764,   765,   766,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     767,   768,   140,     0,   141,   142,   143,   144,     0,     0,
     769,     0,   770,   148,   149,   150,   151,   152,   771,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
     772,   164,   165,   166,   773,   774,   775,   776,     0,     0,
     777,   172,   173,   174,   175,   176,   177,   178,   778,   779,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     780,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,     0,   210,   211,   212,
     213,   214,     0,     0,   216,     0,   217,   218,   781,   220,
       0,   221,     0,   222,   782,     0,   783,   225,   226,     0,
     784,   229,     0,   230,     0,     0,     0,   233,     0,   234,
     235,   236,   237,   238,   785,   240,   786,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
     787,     0,   255,   256,   257,   258,   259,   788,   789,     0,
     790,     0,   263,   791,   792,   266,   793,   268,   269,   270,
     271,   272,   273,     0,     0,   274,   794,   276,   795,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     796,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   797,
     798,   799,   308,   309,   310,     0,     0,   312,   313,   800,
     315,     0,     0,   317,   801,   319,   320,   321,     0,   322,
     323,     0,     0,   324,   325,   326,     0,     0,   327,     0,
     802,   330,   803,     0,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,     0,   804,   347,
     348,     0,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   805,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   806,   383,
     384,   385,   807,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
     808,   404,   809,   406,   407,   408,   810,   410,   411,   811,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   812,   427,     0,   429,     0,   430,
     431,     0,   432,   813,   434,   435,   436,   437,   438,     0,
     814,   815,     0,     0,   441,   442,     0,   444,     0,     0,
     446,   447,   816,   449,   450,   451,   452,   453,   817,     0,
     454,   455,   456,   457,   458,   459,   818,     0,   461,   462,
     463,   464,   465,     0,   819,     0,   468,   820,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   761,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   493,   494,   495,   496,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,   762,   122,   123,
     124,     0,   763,   764,   765,   766,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   767,   768,   140,
       0,   141,   142,   143,   144,     0,     0,   769,     0,   770,
     148,   149,   150,   151,   152,   771,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,   772,   164,   165,
     166,   773,   774,   775,   776,     0,     0,   777,   172,   173,
     174,   175,   176,   177,   178,   778,   779,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   780,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,     0,   210,   211,   212,   213,   214,     0,
       0,   216,     0,   217,   218,   781,   220,     0,   221,     0,
     222,   782,     0,   783,   225,   226,     0,   784,   229,     0,
     230,     0,     0,     0,   233,     0,   234,   235,   236,   237,
     238,   239,   240,   786,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,   787,     0,   255,
     256,   257,   258,   259,   788,   789,     0,   790,     0,   263,
     791,   792,   266,   793,   268,   269,   270,   271,   272,   273,
       0,     0,   274,   794,   276,   795,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   796,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   797,   798,   799,   308,
     309,   310,     0,     0,   312,   313,   800,   315,     0,     0,
     317,   801,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,     0,   802,   330,   803,
       0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,     0,   804,   347,   348,     0,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   805,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   806,   383,   384,   385,   807,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,   808,   404,   809,
     406,   407,   408,   810,   410,   411,   811,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   812,   427,     0,   429,     0,   430,   431,     0,   432,
     813,   434,   435,   436,   437,   438,     0,   814,   815,     0,
       0,   441,   442,     0,   444,     0,     0,   446,   447,   816,
     449,   450,   451,   452,   453,   817,     0,   454,   455,   456,
     457,   458,   459,   818,     0,   461,   462,   463,   464,   465,
       0,   819,     0,   468,   820,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   761,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   493,   494,   495,   496,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,   762,   122,   123,   124,     0,   763,
     764,   765,   766,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   767,   768,   140,     0,   141,   142,
     143,   144,     0,     0,   769,     0,   770,   148,   149,   150,
     151,   152,   771,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,   772,   164,   165,   166,   773,   774,
     775,   776,     0,     0,   777,   172,   173,   174,   175,   176,
     177,   178,   778,   779,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   780,   197,   198,     0,   199,   200,
     201,     0,  1772,   203,   204,     0,   205,   206,   207,   208,
       0,   210,   211,   212,   213,   214,     0,     0,   216,     0,
     217,   218,   781,   220,     0,   221,     0,   222,   782,     0,
     783,   225,   226,     0,   784,   229,     0,   230,     0,     0,
       0,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     786,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,   787,     0,   255,   256,   257,   258,
     259,   788,   789,     0,   790,     0,   263,   791,   792,   266,
     793,   268,   269,   270,   271,   272,   273,     0,     0,   274,
     794,   276,   795,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   796,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   797,   798,   799,   308,   309,   310,     0,
       0,   312,   313,   800,   315,     0,     0,   317,   801,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,     0,   802,   330,   803,     0,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,     0,   804,   347,   348,     0,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     805,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   806,   383,   384,   385,   807,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,   808,   404,   809,   406,   407,   408,
     810,   410,   411,   811,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   812,   427,
       0,   429,     0,   430,   431,     0,   432,   813,   434,   435,
     436,   437,   438,     0,   814,   815,     0,     0,   441,   442,
       0,   444,     0,     0,   446,   447,   816,   449,   450,   451,
     452,   453,   817,     0,   454,   455,   456,   457,   458,   459,
     818,     0,   461,   462,   463,   464,   465,     0,   819,     0,
     468,   820,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   504,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,   493,
     494,   495,   496,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     3,     4,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   531,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   532,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,     0,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   504,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,     0,   122,   123,   124,   125,
     126,     0,   128,   129,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,     0,     0,     0,   147,   148,   149,
     150,   151,   152,     0,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,     0,   164,   165,   166,     0,
       0,     0,     0,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
       0,   217,   218,   219,   220,     0,   221,     0,   222,     0,
       0,     0,   225,   226,   505,     0,   229,     0,   230,     0,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   263,     0,     0,
     266,     0,   268,   269,   270,   271,   272,   273,     0,     0,
     274,     0,   276,     0,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   506,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   307,   308,   309,   310,
     311,     0,   312,   313,     0,   315,     0,   316,   317,   318,
     319,   320,   321,     0,   322,   323,     0,   619,   324,   325,
     326,     0,     0,   327,   328,     0,   330,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   345,     0,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,     0,   404,   405,   406,   407,
     408,     0,   410,   411,   412,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   507,
     427,   428,   429,     0,   430,   431,     0,   432,     0,   434,
     435,   436,   437,   438,     0,   439,   440,     0,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,     0,     0,   461,   462,   463,   464,   465,   466,   467,
       0,   468,     0,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   504,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,     0,   122,   123,
     124,   125,   126,     0,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   145,     0,     0,     0,   147,
     148,   149,   150,   151,   152,     0,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,     0,   164,   165,
     166,     0,     0,     0,     0,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,     0,     0,     0,   225,   226,   505,     0,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   719,   240,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,     0,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
       0,     0,   266,     0,   268,   269,   270,   271,   272,   273,
       0,     0,   274,     0,   276,     0,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   506,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   307,   308,
     309,   310,   311,     0,   312,   313,     0,   315,     0,   316,
     317,   318,   319,   320,   321,     0,   322,   323,     0,   619,
     324,   325,   326,     0,     0,   327,   328,     0,   330,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,     0,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,     0,   404,   405,
     406,   407,   408,     0,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   507,   427,   428,   429,     0,   430,   431,     0,   432,
       0,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,     0,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,     0,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   504,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   750,   113,   114,   115,     0,     0,     0,     0,
       0,     0,     0,   116,   117,     0,   118,   119,   120,     0,
     122,   123,   124,   125,   126,     0,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,     0,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,     0,     0,
       0,   147,   148,   149,   150,   151,   152,     0,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,     0,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,     0,     0,     0,   225,   226,   505,     0,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,     0,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,     0,     0,   266,     0,   268,   269,   270,   271,
     272,   273,     0,     0,   274,     0,   276,     0,     0,   278,
     279,   280,     0,     0,   281,   282,   283,   284,   285,   506,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     307,   308,   309,   310,   311,     0,   312,   313,     0,   315,
       0,   316,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,     0,
     330,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   345,     0,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   507,   427,   428,   429,     0,   430,   431,
       0,   432,     0,   434,   435,   436,   437,   438,     0,   439,
     440,     0,     0,   441,   442,   443,   444,   445,     0,   446,
     447,   448,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,     0,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,     0,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,  1904,
       0,     0,     0,     0,  1905,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,  1913,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,  1914,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,  1915,   432,     0,   434,  1916,   436,
    1917,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,  1918,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   504,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,     0,   122,   123,   124,   125,
     126,     0,   128,   129,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,     0,     0,     0,   147,   148,   149,
     150,   151,   152,     0,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,     0,   164,   165,   166,     0,
       0,     0,     0,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
       0,   217,   218,   219,   220,     0,   221,     0,   222,     0,
       0,     0,   225,   226,   505,     0,   229,     0,   230,     0,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   263,     0,     0,
     266,     0,   268,   269,   270,   271,   272,   273,     0,     0,
     274,     0,   276,     0,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   506,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   307,   308,   309,   310,
     311,     0,   312,   313,     0,   315,     0,   316,   317,   318,
     319,   320,   321,     0,   322,   323,     0,     0,   324,   325,
     326,     0,     0,   327,   328,     0,   330,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   345,     0,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,     0,   404,   405,   406,   407,
     408,     0,   410,   411,   412,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   507,
     427,   428,   429,     0,   430,   431,     0,   432,     0,   434,
     435,   436,   437,   438,     0,   439,   440,     0,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,     0,     0,   461,   462,   463,   464,   465,   466,   467,
       0,   468,     0,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   504,     0,   515,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,     0,   122,   123,
     124,   125,   126,     0,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   145,     0,     0,     0,   147,
     148,   149,   150,   151,   152,     0,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,     0,   164,   165,
     166,     0,     0,     0,     0,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,     0,     0,     0,   225,   226,   505,     0,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,     0,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
       0,     0,   266,     0,   268,   269,   270,   271,   272,   273,
       0,     0,   274,     0,   276,     0,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   506,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   307,   308,
     309,   310,   311,     0,   312,   313,     0,   315,     0,   316,
     317,   318,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,   328,     0,   330,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,     0,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,     0,   404,   405,
     406,   407,   408,     0,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   507,   427,   428,   429,     0,   430,   431,     0,   432,
       0,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,     0,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,     0,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   504,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   651,   113,   114,   115,     0,     0,     0,     0,
       0,     0,     0,   116,   117,     0,   118,   119,   120,     0,
     122,   123,   124,   125,   126,     0,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,     0,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,     0,     0,
       0,   147,   148,   149,   150,   151,   152,     0,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,     0,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,     0,     0,     0,   225,   226,   505,     0,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,     0,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,     0,     0,   266,     0,   268,   269,   270,   271,
     272,   273,     0,     0,   274,     0,   276,     0,     0,   278,
     279,   280,     0,     0,   281,   282,   283,   284,   285,   506,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     307,   308,   309,   310,   311,     0,   312,   313,     0,   315,
       0,   316,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,     0,
     330,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   345,     0,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   507,   427,   428,   429,     0,   430,   431,
       0,   432,     0,   434,   435,   436,   437,   438,     0,   652,
     440,     0,     0,   653,   442,   443,   444,   445,     0,   446,
     447,   448,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,     0,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,     0,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     685,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   714,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,     0,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   504,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,     0,   122,   123,   124,   125,
     126,     0,   128,   129,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,     0,     0,     0,   147,   148,   149,
     150,   151,   152,     0,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,     0,   164,   165,   166,     0,
       0,     0,     0,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
       0,   217,   218,   219,   220,     0,   221,     0,   222,     0,
       0,     0,   225,   226,   505,     0,   229,     0,   230,     0,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   717,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   263,     0,     0,
     266,     0,   268,   269,   270,   271,   272,   273,     0,     0,
     274,     0,   276,     0,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   506,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   307,   308,   309,   310,
     311,     0,   312,   313,     0,   315,     0,   316,   317,   318,
     319,   320,   321,     0,   322,   323,     0,     0,   324,   325,
     326,     0,     0,   327,   328,     0,   330,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   345,     0,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,     0,   404,   405,   406,   407,
     408,     0,   410,   411,   412,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   507,
     427,   428,   429,     0,   430,   431,     0,   432,     0,   434,
     435,   436,   437,   438,     0,   439,   440,     0,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,     0,     0,   461,   462,   463,   464,   465,   466,   467,
       0,   468,     0,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   504,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,     0,   122,   123,
     124,   125,   126,     0,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   145,     0,     0,     0,   147,
     148,   149,   150,   151,   152,     0,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,     0,   164,   165,
     166,     0,     0,     0,     0,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,     0,     0,     0,   225,   226,   505,     0,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   721,   240,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,     0,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
       0,     0,   266,     0,   268,   269,   270,   271,   272,   273,
       0,     0,   274,     0,   276,     0,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   506,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   307,   308,
     309,   310,   311,     0,   312,   313,     0,   315,     0,   316,
     317,   318,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,   328,     0,   330,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,     0,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,     0,   404,   405,
     406,   407,   408,     0,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   507,   427,   428,   429,     0,   430,   431,     0,   432,
       0,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,     0,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,     0,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   504,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
       0,     0,     0,   116,   117,     0,   118,   119,   120,     0,
     122,   123,   124,   125,   126,     0,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,     0,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,     0,     0,
       0,   147,   148,   149,   150,   151,   152,     0,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,     0,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,     0,     0,     0,   225,   226,   505,     0,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   731,   240,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,     0,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,     0,     0,   266,     0,   268,   269,   270,   271,
     272,   273,     0,     0,   274,     0,   276,     0,     0,   278,
     279,   280,     0,     0,   281,   282,   283,   284,   285,   506,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     307,   308,   309,   310,   311,     0,   312,   313,     0,   315,
       0,   316,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,     0,
     330,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   345,     0,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   507,   427,   428,   429,     0,   430,   431,
       0,   432,     0,   434,   435,   436,   437,   438,     0,   439,
     440,     0,     0,   441,   442,   443,   444,   445,     0,   446,
     447,   448,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,     0,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,     0,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   738,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   843,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,     0,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   504,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,     0,   122,   123,   124,   125,
     126,     0,   128,   129,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,     0,     0,     0,   147,   148,   149,
     150,   151,   152,     0,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,     0,   164,   165,   166,     0,
       0,     0,     0,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
       0,   217,   218,   219,   220,     0,   221,     0,   222,     0,
       0,     0,   225,   226,   505,     0,   229,     0,   230,     0,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   846,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   263,     0,     0,
     266,     0,   268,   269,   270,   271,   272,   273,     0,     0,
     274,     0,   276,     0,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   506,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   307,   308,   309,   310,
     311,     0,   312,   313,     0,   315,     0,   316,   317,   318,
     319,   320,   321,     0,   322,   323,     0,     0,   324,   325,
     326,     0,     0,   327,   328,     0,   330,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   345,     0,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,     0,   404,   405,   406,   407,
     408,     0,   410,   411,   412,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   507,
     427,   428,   429,     0,   430,   431,     0,   432,     0,   434,
     435,   436,   437,   438,     0,   439,   440,     0,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,     0,     0,   461,   462,   463,   464,   465,   466,   467,
       0,   468,     0,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,   974,
       0,   116,   117,     0,   118,   119,   120,     0,   122,   123,
     124,   125,   126,     0,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   145,     0,     0,     0,   147,
     148,   149,   150,   151,   152,     0,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,     0,   164,   165,
     166,     0,     0,     0,     0,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,     0,     0,     0,   225,   226,   505,     0,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,   239,   240,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,     0,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
       0,     0,   266,     0,   268,   269,   270,   271,   272,   273,
       0,     0,   274,     0,   276,     0,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   506,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   307,   308,
     309,   310,   311,     0,   312,   313,     0,   315,     0,   316,
     317,   318,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,   328,     0,   330,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,     0,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,     0,   404,   405,
     406,   407,   408,     0,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   507,   427,   428,   429,     0,   430,   431,     0,   432,
       0,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,     0,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,     0,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   504,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
       0,   992,     0,   116,   117,     0,   118,   119,   120,     0,
     122,   123,   124,   125,   126,     0,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,     0,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,     0,     0,
       0,   147,   148,   149,   150,   151,   152,     0,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,     0,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,     0,     0,     0,   225,   226,   505,     0,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,     0,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,     0,     0,   266,     0,   268,   269,   270,   271,
     272,   273,     0,     0,   274,     0,   276,     0,     0,   278,
     279,   280,     0,     0,   281,   282,   283,   284,   285,   506,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     307,   308,   309,   310,   311,     0,   312,   313,     0,   315,
       0,   316,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,     0,
     330,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   345,     0,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   507,   427,   428,   429,     0,   430,   431,
       0,   432,     0,   434,   435,   436,   437,   438,     0,   439,
     440,     0,     0,   441,   442,   443,   444,   445,     0,   446,
     447,   448,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,     0,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,     0,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,  1332,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     504,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,  1334,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,     0,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   504,     0,   530,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,     0,   113,
     114,   115,     0,     0,     0,     0,     0,     0,     0,   116,
     117,     0,   118,   119,   120,     0,   122,   123,   124,   125,
     126,     0,   128,   129,     0,   130,   131,   132,   133,   134,
     135,     0,     0,   136,   137,   138,   139,   140,     0,   141,
     142,   143,   144,   145,     0,     0,     0,   147,   148,   149,
     150,   151,   152,     0,   154,   155,   156,     0,   157,   158,
     159,   160,   161,   162,     0,     0,   164,   165,   166,     0,
       0,     0,     0,     0,     0,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,     0,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,     0,     0,   194,   195,   196,   197,   198,     0,   199,
     200,   201,     0,   202,   203,   204,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,     0,   216,
       0,   217,   218,   219,   220,     0,   221,     0,   222,     0,
       0,     0,   225,   226,   505,     0,   229,     0,   230,     0,
     231,   232,   233,     0,   234,   235,   236,   237,   238,  1337,
     240,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,     0,   263,     0,     0,
     266,     0,   268,   269,   270,   271,   272,   273,     0,     0,
     274,     0,   276,     0,     0,   278,   279,   280,     0,     0,
     281,   282,   283,   284,   285,   506,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   307,   308,   309,   310,
     311,     0,   312,   313,     0,   315,     0,   316,   317,   318,
     319,   320,   321,     0,   322,   323,     0,     0,   324,   325,
     326,     0,     0,   327,   328,     0,   330,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
     343,   344,   345,     0,   347,   348,   349,   350,   351,   352,
       0,   353,   354,   355,   356,   357,   358,     0,   359,   360,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,     0,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,     0,
     398,   399,   400,   401,   402,     0,   404,   405,   406,   407,
     408,     0,   410,   411,   412,   413,     0,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   507,
     427,   428,   429,     0,   430,   431,     0,   432,     0,   434,
     435,   436,   437,   438,     0,   439,   440,     0,     0,   441,
     442,   443,   444,   445,     0,   446,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,   455,   456,   457,   458,
     459,     0,     0,   461,   462,   463,   464,   465,   466,   467,
       0,   468,     0,   470,   471,   472,   473,   474,     0,     0,
     475,     0,     0,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   504,     0,   530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106,   107,   108,   109,   110,   111,   112,
       0,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,   117,     0,   118,   119,   120,     0,   122,   123,
     124,   125,   126,     0,   128,   129,     0,   130,   131,   132,
     133,   134,   135,     0,     0,   136,   137,   138,   139,   140,
       0,   141,   142,   143,   144,   145,     0,     0,     0,   147,
     148,   149,   150,   151,   152,     0,   154,   155,   156,     0,
     157,   158,   159,   160,   161,   162,     0,     0,   164,   165,
     166,     0,     0,     0,     0,     0,     0,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
       0,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,     0,     0,   194,   195,   196,   197,   198,
       0,   199,   200,   201,     0,   202,   203,   204,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
       0,   216,     0,   217,   218,   219,   220,     0,   221,     0,
     222,     0,     0,     0,   225,   226,   505,     0,   229,     0,
     230,     0,   231,   232,   233,     0,   234,   235,   236,   237,
     238,  1339,   240,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,     0,   252,     0,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,     0,   263,
       0,     0,   266,     0,   268,   269,   270,   271,   272,   273,
       0,     0,   274,     0,   276,     0,     0,   278,   279,   280,
       0,     0,   281,   282,   283,   284,   285,   506,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   307,   308,
     309,   310,   311,     0,   312,   313,     0,   315,     0,   316,
     317,   318,   319,   320,   321,     0,   322,   323,     0,     0,
     324,   325,   326,     0,     0,   327,   328,     0,   330,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,     0,   347,   348,   349,   350,
     351,   352,     0,   353,   354,   355,   356,   357,   358,     0,
     359,   360,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,     0,   398,   399,   400,   401,   402,     0,   404,   405,
     406,   407,   408,     0,   410,   411,   412,   413,     0,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   507,   427,   428,   429,     0,   430,   431,     0,   432,
       0,   434,   435,   436,   437,   438,     0,   439,   440,     0,
       0,   441,   442,   443,   444,   445,     0,   446,   447,   448,
     449,   450,   451,   452,   453,     0,     0,   454,   455,   456,
     457,   458,   459,     0,     0,   461,   462,   463,   464,   465,
     466,   467,     0,   468,     0,   470,   471,   472,   473,   474,
       0,     0,   475,     0,     0,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   504,     0,   530,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,     0,   113,   114,   115,     0,     0,     0,     0,
       0,     0,     0,   116,   117,     0,   118,   119,   120,     0,
     122,   123,   124,   125,   126,     0,   128,   129,     0,   130,
     131,   132,   133,   134,   135,     0,     0,   136,   137,   138,
     139,   140,     0,   141,   142,   143,   144,   145,     0,     0,
       0,   147,   148,   149,   150,   151,   152,     0,   154,   155,
     156,     0,   157,   158,   159,   160,   161,   162,     0,     0,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,     0,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,     0,     0,   194,   195,   196,
     197,   198,     0,   199,   200,   201,     0,   202,   203,   204,
       0,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,     0,   216,     0,   217,   218,   219,   220,     0,
     221,     0,   222,     0,     0,     0,   225,   226,   505,     0,
     229,     0,   230,     0,   231,   232,   233,     0,   234,   235,
     236,   237,   238,  2129,   240,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,     0,   252,     0,
     254,   255,   256,   257,   258,   259,   260,   261,     0,   262,
       0,   263,     0,     0,   266,     0,   268,   269,   270,   271,
     272,   273,     0,     0,   274,     0,   276,     0,     0,   278,
     279,   280,     0,     0,   281,   282,   283,   284,   285,   506,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     307,   308,   309,   310,   311,     0,   312,   313,     0,   315,
       0,   316,   317,   318,   319,   320,   321,     0,   322,   323,
       0,     0,   324,   325,   326,     0,     0,   327,   328,     0,
     330,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,   343,   344,   345,     0,   347,   348,
     349,   350,   351,   352,     0,   353,   354,   355,   356,   357,
     358,     0,   359,   360,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,     0,   398,   399,   400,   401,   402,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   507,   427,   428,   429,     0,   430,   431,
       0,   432,     0,   434,   435,   436,   437,   438,     0,   439,
     440,     0,     0,   441,   442,   443,   444,   445,     0,   446,
     447,   448,   449,   450,   451,   452,   453,     0,     0,   454,
     455,   456,   457,   458,   459,     0,     0,   461,   462,   463,
     464,   465,   466,   467,     0,   468,     0,   470,   471,   472,
     473,   474,     0,     0,   475,     0,     0,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   504,     0,
     530,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   105,   106,   107,   108,
     109,   110,   111,   112,     0,   113,   114,   115,     0,     0,
       0,     0,     0,     0,     0,   116,   117,     0,   118,   119,
     120,     0,   122,   123,   124,   125,   126,     0,   128,   129,
       0,   130,   131,   132,   133,   134,   135,     0,     0,   136,
     137,   138,   139,   140,     0,   141,   142,   143,   144,   145,
       0,     0,     0,   147,   148,   149,   150,   151,   152,     0,
     154,   155,   156,     0,   157,   158,   159,   160,   161,   162,
       0,     0,   164,   165,   166,     0,     0,     0,     0,     0,
       0,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,     0,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,     0,     0,   194,
     195,   196,   197,   198,     0,   199,   200,   201,     0,   202,
     203,   204,     0,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,   216,     0,   217,   218,   219,
     220,     0,   221,     0,   222,     0,     0,     0,   225,   226,
     505,     0,   229,     0,   230,     0,   231,   232,   233,     0,
     234,   235,   236,   237,   238,  2797,   240,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,     0,
     252,     0,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,     0,   263,     0,     0,   266,     0,   268,   269,
     270,   271,   272,   273,     0,     0,   274,     0,   276,     0,
       0,   278,   279,   280,     0,     0,   281,   282,   283,   284,
     285,   506,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   307,   308,   309,   310,   311,     0,   312,   313,
       0,   315,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,     0,     0,   324,   325,   326,     0,     0,   327,
     328,     0,   330,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,     0,
     347,   348,   349,   350,   351,   352,     0,   353,   354,   355,
     356,   357,   358,     0,   359,   360,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,     0,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,     0,   398,   399,   400,   401,
     402,     0,   404,   405,   406,   407,   408,     0,   410,   411,
     412,   413,     0,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   507,   427,   428,   429,     0,
     430,   431,     0,   432,     0,   434,   435,   436,   437,   438,
       0,   439,   440,     0,     0,   441,   442,   443,   444,   445,
       0,   446,   447,   448,   449,   450,   451,   452,   453,     0,
       0,   454,   455,   456,   457,   458,   459,     0,     0,   461,
     462,   463,   464,   465,   466,   467,     0,   468,     0,   470,
     471,   472,   473,   474,     0,     0,   475,     0,     0,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
    2720,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,  2721,   122,   123,   124,     0,   763,  2722,
     765,   766,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   767,   768,   140,     0,   141,   142,   143,
     144,     0,     0,  2723,     0,  2724,   148,   149,   150,   151,
     152,  2725,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,  2726,   164,   165,   166,  2727,  2728,  2729,
    2730,     0,     0,  2731,   172,   173,   174,   175,   176,   177,
     178,   778,   779,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   780,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,     0,
     210,   211,   212,   213,   214,     0,     0,   216,     0,   217,
     218,   781,   220,     0,   221,     0,   222,  2732,     0,  2733,
     225,   226,  2734,  2735,   229,     0,   230,     0,     0,     0,
     233,     0,   234,   235,   236,   237,   238,   239,   240,  2736,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,  2737,     0,   255,   256,   257,   258,   259,
     788,   789,     0,   790,     0,   263,  2738,  2739,   266,  2740,
     268,   269,   270,   271,   272,   273,     0,     0,   274,  2741,
     276,  2742,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,  2937,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   797,  2744,   799,   308,   309,   310,     0,     0,
     312,   313,  2746,   315,     0,     0,   317,   801,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,     0,  2748,   330,  2749,     0,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
       0,  2750,   347,   348,     0,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,   360,   361,   805,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,  2751,   383,   384,   385,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,  2752,   404,     0,   406,   407,   408,  2754,
     410,   411,   811,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,  2938,   427,     0,
     429,     0,   430,   431,     0,   432,  2756,   434,   435,   436,
     437,   438,     0,   814,   815,     0,     0,   441,   442,     0,
     444,     0,     0,   446,   447,  2757,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,  2759,
       0,   461,   462,   463,   464,   465,     0,   819,     0,   468,
    2760,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   493,   494,
     495,   496,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
       0,   122,   123,   124,   125,   126,     0,   128,   129,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     138,   139,   140,     0,   141,   142,   143,   144,   145,     0,
       0,     0,   147,   148,   149,   150,   151,   152,     0,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
       0,   164,   165,   166,     0,     0,     0,     0,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     196,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,     0,   217,   218,   219,   220,
       0,   221,     0,   222,     0,     0,     0,   225,   226,   505,
       0,   229,     0,   230,     0,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
       0,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   263,     0,     0,   266,     0,   268,   269,   270,
     271,   272,   273,     0,     0,   274,     0,   276,     0,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     506,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   307,   308,   309,   310,   311,     0,   312,   313,     0,
     315,     0,   316,   317,   318,   319,   320,   321,     0,   322,
     323,     0,     0,   324,   325,   326,     0,     0,   327,   328,
       0,   330,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   345,     0,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
       0,   404,   405,   406,   407,   408,     0,   410,   411,   412,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   507,   427,   428,   429,     0,   430,
     431,     0,   432,     0,   434,   435,   436,   437,   438,     0,
     439,   440,     0,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,     0,     0,   461,   462,
     463,   464,   465,   466,   467,     0,   468,     0,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,     0,     0,     0,   116,   117,     0,   118,
     119,   120,     0,   122,   123,   124,   125,   126,     0,   128,
     129,     0,   130,   131,   132,   133,   134,   135,     0,     0,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,     0,     0,     0,   147,   148,   149,   150,   151,   152,
       0,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,     0,   164,   165,   166,     0,     0,     0,     0,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   196,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,     0,   217,   218,
     219,   220,     0,   221,     0,   222,     0,     0,     0,   225,
     226,   505,     0,   663,     0,   230,     0,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,     0,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   263,     0,     0,   266,     0,   268,
     269,   270,   271,   272,   273,     0,     0,   274,     0,   276,
       0,     0,   278,   279,   664,     0,     0,   281,   282,   283,
     284,   285,   506,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   307,   308,   309,   310,   311,     0,   312,
     313,     0,   315,     0,   316,   317,   318,   319,   320,   321,
       0,   322,   323,     0,     0,   324,   325,   326,     0,     0,
     327,   328,     0,   330,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
       0,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   665,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   666,     0,   404,   405,   406,   407,   408,     0,   410,
     411,   412,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   507,   427,   428,   429,
       0,   430,   431,     0,   432,     0,   434,   435,   436,   437,
     438,     0,   667,   440,     0,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,     0,     0,
     461,   462,   463,   464,   465,   466,   467,     0,   468,     0,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,     0,   122,   123,   124,   125,   126,
       0,   128,   129,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,     0,     0,     0,   147,   148,   149,   150,
     151,   152,     0,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,     0,   164,   165,   166,     0,     0,
       0,     0,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,     0,
     217,   218,   219,   220,     0,   221,     0,   222,     0,     0,
       0,   225,   226,   505,     0,   229,     0,   230,     0,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   839,   240,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,     0,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   263,     0,     0,   266,
       0,   268,   269,   270,   271,   272,   273,     0,     0,   274,
       0,   276,     0,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   506,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   307,   308,   309,   310,   311,
       0,   312,   313,     0,   315,     0,   316,   317,   318,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,   328,     0,   330,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   345,     0,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,     0,   404,   405,   406,   407,   408,
       0,   410,   411,   412,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   507,   427,
     428,   429,     0,   430,   431,     0,   432,     0,   434,   435,
     436,   437,   438,     0,   439,   440,     0,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
       0,     0,   461,   462,   463,   464,   465,   466,   467,     0,
     468,     0,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,     0,   122,   123,   124,
     125,   126,     0,   128,   129,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   138,   139,   140,     0,
     141,   142,   143,   144,   145,     0,     0,     0,   147,   148,
     149,   150,   151,   152,     0,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,     0,   164,   165,   166,
       0,     0,     0,     0,     0,     0,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   196,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     216,     0,   217,   218,   219,   220,     0,   221,     0,   222,
       0,     0,     0,   225,   226,   505,     0,   229,     0,   230,
       0,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,     0,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,     0,   263,     0,
       0,   266,     0,   268,   269,   270,   271,   272,   273,     0,
       0,   274,     0,   276,     0,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,   506,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   307,   308,   309,
     310,   311,     0,   312,   313,     0,   315,     0,   316,   317,
     318,   319,   320,   321,     0,   322,   323,     0,     0,   324,
     325,   326,     0,     0,   327,   328,     0,   330,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,     0,   347,   348,   349,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,     0,   383,   384,   385,   386,   387,
     388,   389,   390,   665,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,     0,   404,   405,   406,
     407,   408,     0,   410,   411,   412,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     507,   427,   428,   429,     0,   430,   431,     0,   432,     0,
     434,   435,   436,   437,   438,     0,   667,   440,     0,     0,
     441,   442,   443,   444,   445,     0,   446,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,     0,     0,   461,   462,   463,   464,   465,   466,
     467,     0,   468,     0,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   504,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,     0,   113,   114,   115,     0,     0,     0,     0,     0,
    1625,     0,   116,   117,     0,   118,   119,   120,     0,   122,
     123,   124,   125,   126,     0,   128,   129,     0,   130,   131,
     132,   133,   134,   135,     0,     0,   136,   137,   138,   139,
     140,     0,   141,   142,   143,   144,   145,     0,     0,     0,
     147,   148,   149,   150,   151,   152,     0,   154,   155,   156,
       0,   157,   158,   159,   160,   161,   162,     0,     0,   164,
     165,   166,     0,     0,     0,     0,     0,     0,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,     0,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,     0,     0,   194,   195,   196,   197,
     198,     0,   199,   200,   201,     0,   202,   203,   204,     0,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,     0,   216,     0,   217,   218,   219,   220,     0,   221,
       0,   222,     0,     0,     0,   225,   226,   505,     0,   229,
       0,   230,     0,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,     0,   252,     0,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,     0,
     263,     0,     0,   266,     0,   268,   269,   270,   271,   272,
     273,     0,     0,   274,     0,   276,     0,     0,   278,   279,
     280,     0,     0,   281,   282,   283,   284,   285,   506,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   307,
     308,   309,   310,   311,     0,   312,   313,     0,   315,     0,
     316,   317,   318,   319,   320,   321,     0,   322,   323,     0,
       0,   324,   325,   326,     0,     0,   327,   328,     0,   330,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   343,   344,   345,     0,   347,   348,   349,
     350,   351,   352,     0,   353,   354,   355,   356,   357,   358,
       0,   359,   360,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,     0,   398,   399,   400,   401,   402,     0,     0,
     405,   406,   407,   408,     0,   410,   411,   412,   413,     0,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   507,   427,   428,   429,     0,   430,   431,     0,
     432,     0,   434,   435,   436,   437,   438,     0,   439,   440,
       0,     0,   441,   442,   443,   444,   445,     0,   446,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,   455,
     456,   457,   458,   459,     0,     0,   461,   462,   463,   464,
     465,   466,   467,     0,   468,     0,   470,   471,   472,   473,
     474,     0,     0,   475,     0,     0,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   105,   106,   107,   108,   109,
     110,   111,   112,     0,   113,   114,   115,     0,     0,     0,
       0,     0,     0,     0,   116,   117,     0,   118,   119,   120,
       0,   122,   123,   124,   125,   126,     0,   128,   129,     0,
     130,   131,   132,   133,   134,   135,     0,     0,   136,   137,
     138,   139,   140,     0,   141,   142,   143,   144,   145,     0,
       0,     0,   147,   148,   149,   150,   151,   152,     0,   154,
     155,   156,     0,   157,   158,   159,   160,   161,   162,     0,
       0,   164,   165,   166,     0,     0,     0,     0,     0,     0,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,     0,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,     0,     0,   194,   195,
     196,   197,   198,     0,   199,   200,   201,     0,   202,   203,
     204,     0,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,     0,   216,     0,   217,   218,   219,   220,
       0,   221,     0,   222,     0,     0,     0,   225,   226,   505,
       0,   229,     0,   230,     0,   231,   232,   233,     0,   234,
     235,   236,   237,   238,  1787,   240,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,     0,   252,
       0,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,     0,   263,     0,     0,   266,     0,   268,   269,   270,
     271,   272,   273,     0,     0,   274,     0,   276,     0,     0,
     278,   279,   280,     0,     0,   281,   282,   283,   284,   285,
     506,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   307,   308,   309,   310,   311,     0,   312,   313,     0,
     315,     0,   316,   317,   318,   319,   320,   321,     0,   322,
     323,     0,     0,   324,   325,   326,     0,     0,   327,   328,
       0,   330,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,   343,   344,   345,     0,   347,
     348,   349,   350,   351,   352,     0,   353,   354,   355,   356,
     357,   358,     0,   359,   360,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,     0,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,     0,   398,   399,   400,   401,   402,
       0,   404,   405,   406,   407,   408,     0,   410,   411,   412,
     413,     0,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   507,   427,   428,   429,     0,   430,
     431,     0,   432,     0,   434,   435,   436,   437,   438,     0,
     439,   440,     0,     0,   441,   442,   443,   444,   445,     0,
     446,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,   455,   456,   457,   458,   459,     0,     0,   461,   462,
     463,   464,   465,   466,   467,     0,   468,     0,   470,   471,
     472,   473,   474,     0,     0,   475,     0,     0,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,     0,   113,   114,   115,     0,
       0,     0,     0,     0,     0,     0,   116,   117,     0,   118,
     119,   120,     0,   122,   123,   124,   125,   126,     0,   128,
     129,     0,   130,   131,   132,   133,   134,   135,     0,     0,
     136,   137,   138,   139,   140,     0,   141,   142,   143,   144,
     145,     0,     0,     0,   147,   148,   149,   150,   151,   152,
       0,   154,   155,   156,     0,   157,   158,   159,   160,   161,
     162,     0,     0,   164,   165,   166,     0,     0,     0,     0,
       0,     0,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,     0,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,     0,     0,
     194,   195,   196,   197,   198,     0,   199,   200,   201,     0,
     202,   203,   204,     0,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,     0,   216,     0,   217,   218,
     219,   220,     0,   221,     0,   222,     0,     0,     0,   225,
     226,   505,     0,   229,     0,   230,     0,   231,   232,   233,
       0,   234,   235,   236,   237,   238,  2116,   240,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
       0,   252,     0,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,     0,   263,     0,     0,   266,     0,   268,
     269,   270,   271,   272,   273,     0,     0,   274,     0,   276,
       0,     0,   278,   279,   280,     0,     0,   281,   282,   283,
     284,   285,   506,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   307,   308,   309,   310,   311,     0,   312,
     313,     0,   315,     0,   316,   317,   318,   319,   320,   321,
       0,   322,   323,     0,     0,   324,   325,   326,     0,     0,
     327,   328,     0,   330,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
       0,   347,   348,   349,   350,   351,   352,     0,   353,   354,
     355,   356,   357,   358,     0,   359,   360,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,     0,   398,   399,   400,
     401,   402,     0,   404,   405,   406,   407,   408,     0,   410,
     411,   412,   413,     0,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   507,   427,   428,   429,
       0,   430,   431,     0,   432,     0,   434,   435,   436,   437,
     438,     0,   439,   440,     0,     0,   441,   442,   443,   444,
     445,     0,   446,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,   455,   456,   457,   458,   459,     0,     0,
     461,   462,   463,   464,   465,   466,   467,     0,   468,     0,
     470,   471,   472,   473,   474,     0,     0,   475,     0,     0,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,   111,   112,     0,   113,   114,
     115,     0,     0,     0,     0,     0,     0,     0,   116,   117,
       0,   118,   119,   120,     0,   122,   123,   124,   125,   126,
       0,   128,   129,     0,   130,   131,   132,   133,   134,   135,
       0,     0,   136,   137,   138,   139,   140,     0,   141,   142,
     143,   144,   145,     0,     0,     0,   147,   148,   149,   150,
     151,   152,     0,   154,   155,   156,     0,   157,   158,   159,
     160,   161,   162,     0,     0,   164,   165,   166,     0,     0,
       0,     0,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,     0,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
       0,     0,   194,   195,   196,   197,   198,     0,   199,   200,
     201,     0,   202,   203,   204,     0,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,     0,   216,     0,
     217,   218,   219,   220,     0,   221,     0,   222,     0,     0,
       0,   225,   226,   505,     0,   229,     0,   230,     0,   231,
     232,   233,     0,   234,   235,   236,   237,   238,  2131,   240,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,     0,   252,     0,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,     0,   263,     0,     0,   266,
       0,   268,   269,   270,   271,   272,   273,     0,     0,   274,
       0,   276,     0,     0,   278,   279,   280,     0,     0,   281,
     282,   283,   284,   285,   506,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   307,   308,   309,   310,   311,
       0,   312,   313,     0,   315,     0,   316,   317,   318,   319,
     320,   321,     0,   322,   323,     0,     0,   324,   325,   326,
       0,     0,   327,   328,     0,   330,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
     344,   345,     0,   347,   348,   349,   350,   351,   352,     0,
     353,   354,   355,   356,   357,   358,     0,   359,   360,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,     0,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,     0,   398,
     399,   400,   401,   402,     0,   404,   405,   406,   407,   408,
       0,   410,   411,   412,   413,     0,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   507,   427,
     428,   429,     0,   430,   431,     0,   432,     0,   434,   435,
     436,   437,   438,     0,   439,   440,     0,     0,   441,   442,
     443,   444,   445,     0,   446,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,   455,   456,   457,   458,   459,
       0,     0,   461,   462,   463,   464,   465,   466,   467,     0,
     468,     0,   470,   471,   472,   473,   474,     0,     0,   475,
       0,     0,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   761,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     113,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     116,   117,     0,   118,   119,   120,   762,   122,   123,   124,
       0,   763,   764,   765,   766,     0,   130,   131,   132,   133,
     134,   135,     0,     0,   136,   137,   767,   768,   140,     0,
     141,   142,   143,   144,     0,     0,   769,     0,   770,   148,
     149,   150,   151,   152,   771,   154,   155,   156,     0,   157,
     158,   159,   160,   161,   162,     0,   772,   164,   165,   166,
     773,   774,   775,   776,     0,     0,   777,   172,   173,   174,
     175,   176,   177,   178,   778,   779,   181,     0,   182,     0,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,     0,     0,   194,   195,   780,   197,   198,     0,
     199,   200,   201,     0,   202,   203,   204,     0,   205,   206,
     207,   208,     0,   210,   211,   212,   213,   214,     0,     0,
     216,     0,   217,   218,   781,   220,     0,   221,     0,   222,
     782,     0,   783,   225,   226,     0,   784,   229,     0,   230,
       0,     0,     0,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   786,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,     0,   252,   787,     0,   255,   256,
     257,   258,   259,   788,   789,     0,   790,     0,   263,   791,
     792,   266,   793,   268,   269,   270,   271,   272,   273,     0,
       0,   274,   794,   276,   795,     0,   278,   279,   280,     0,
       0,   281,   282,   283,   284,   285,     0,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   797,   798,   799,   308,   309,
     310,     0,     0,   312,   313,   800,   315,     0,     0,   317,
     801,   319,   320,   321,     0,   322,   323,     0,     0,   324,
     325,   326,     0,     0,   327,     0,   802,   330,   803,     0,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,     0,   804,   347,   348,     0,   350,   351,
     352,     0,   353,   354,   355,   356,   357,   358,     0,   359,
     360,   361,   805,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   806,   383,   384,   385,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
       0,   398,   399,   400,   401,   402,   808,   404,     0,   406,
     407,   408,   810,   410,   411,   811,   413,     0,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
       0,   427,     0,   429,     0,   430,   431,     0,   432,   813,
     434,   435,   436,   437,   438,     0,   814,   815,     0,     0,
     441,   442,     0,   444,     0,     0,   446,   447,   816,   449,
     450,   451,   452,   453,     0,     0,   454,   455,   456,   457,
     458,   459,   818,     0,   461,   462,   463,   464,   465,     0,
     819,     0,   468,   820,   470,   471,   472,   473,   474,     0,
       0,   475,     0,     0,   476,   477,   478,   479,   480,   481,
     504,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   493,   494,   495,   496,     0,     0,     0,   105,   106,
     107,   108,   109,   110,   111,   112,     0,   113,   114,   115,
       0,     0,     0,     0,     0,     0,     0,   116,   117,     0,
     118,   119,   120,     0,   122,   123,   124,   125,   126,     0,
     128,   129,     0,   130,   131,   132,   133,   134,   135,     0,
       0,   136,   137,   138,   139,   140,     0,   141,   142,   143,
     144,   145,     0,     0,     0,   147,   148,   149,   150,   151,
     152,     0,   154,   155,   156,     0,   157,   158,   159,   160,
     161,   162,     0,     0,   164,   165,   166,     0,     0,     0,
       0,     0,     0,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,     0,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,     0,
       0,   194,   195,   196,   197,   198,     0,   199,   200,   201,
       0,   202,   203,   204,     0,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,     0,   216,     0,   217,
     218,   219,   220,     0,   221,     0,   222,     0,     0,     0,
     225,   226,   505,     0,   229,     0,   230,     0,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,     0,   263,     0,     0,   266,     0,
     268,   269,   270,   271,   272,   273,     0,     0,   274,     0,
     276,     0,     0,   278,   279,   280,     0,     0,   281,   282,
     283,   284,   285,   506,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   307,   308,   309,   310,   311,     0,
     312,   313,     0,   315,     0,   316,   317,   318,   319,   320,
     321,     0,   322,   323,     0,     0,   324,   325,   326,     0,
       0,   327,   328,     0,   330,     0,   332,   333,   334,   335,
     336,   337,   338,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   347,   348,   349,   350,   351,   352,     0,   353,
     354,   355,   356,   357,   358,     0,   359,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,     0,   383,   384,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,     0,   398,   399,
     400,   401,   402,     0,   404,   405,   406,   407,   408,     0,
     410,   411,   412,   413,     0,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   507,   427,   428,
     429,     0,   430,   431,     0,   432,     0,   434,   435,   436,
     437,   438,     0,   439,   440,     0,     0,   441,   442,   443,
     444,   445,     0,   446,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,   455,   456,   457,   458,   459,     0,
       0,   461,   462,   463,   464,   465,   466,   467,     0,   468,
       0,   470,   471,   472,   473,   474,     0,     0,   475,     0,
       0,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     3,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,     0,   566,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    15,     0,
       0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
       0,     0,    17,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,     0,
       0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
      38,     0,     0,     0,   567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   568
};

static const yytype_int16 yycheck[] =
{
       7,     0,    41,     7,   726,     0,     0,     0,   561,     0,
     701,   684,   942,   718,    21,    51,   568,    21,   809,   730,
     559,   728,     0,   966,     7,   942,  1533,     0,  1189,   737,
       0,     0,  1177,   630,  1176,  1087,    53,   815,    21,    21,
      33,  1639,    53,  1361,  1642,    18,  1604,  1474,  1151,  2050,
      21,  2068,  2053,  1118,  2071,   718,  2127,   720,  1156,   722,
    1153,   642,    18,  1145,  1228,  1366,    59,  1513,    34,   955,
     632,  1467,  1468,   955,   955,   637,  1472,   661,   842,  1002,
     844,   955,   567,  1082,   568,  1558,  1559,     0,  1181,   562,
    1089,     0,     0,  2123,     0,     0,   677,  2509,    40,     0,
       0,     0,     0,  2476,  2018,     0,    24,     0,  2507,  1052,
       0,  2522,     0,     0,  2107,     0,     0,     0,     0,     0,
       0,     0,     0,  2171,  2172,  2173,  2529,    52,   582,  1611,
       4,  2476,     5,    99,  2360,     9,     0,    13,    14,     5,
       5,     0,    56,    11,   698,   767,   768,  1762,     9,    75,
       5,   698,     5,     5,     5,    23,    24,     5,    13,    14,
    1410,    13,    14,  1660,     5,  1095,  1890,     5,     9,   713,
       5,     9,  1662,  2203,  2186,   848,     5,   799,    13,    14,
       5,    11,     5,     5,     5,    15,     5,  2197,    13,    14,
      13,    14,    13,    14,    13,    14,     5,     5,    69,     5,
       5,     5,    13,    14,    13,    14,  2806,    13,    14,    13,
      14,     5,     5,     5,     5,     5,    42,  2793,     5,    13,
      14,    13,    14,   171,    60,     5,     5,     5,   171,     5,
     119,    95,   124,  2809,   102,  1165,    95,   172,  1168,  1169,
       5,  2271,  2272,    60,  2274,    42,     5,   122,     5,     5,
       5,   636,     5,    60,   287,   177,  2766,   171,    60,    60,
     189,   171,     4,   109,   109,   273,  1044,     9,  1191,  1354,
     147,    11,    11,  2941,   224,    15,    15,     3,   951,    77,
    1203,  3018,    11,     3,     4,     5,    15,     9,   293,     9,
      88,   122,   999,  2695,    29,   119,   224,   168,   108,   285,
     288,    36,   117,    43,    43,   171,    29,    33,    34,   293,
    1952,   397,   172,    36,   132,    29,   238,    77,   358,   309,
     270,    38,    36,    29,  2325,    61,   122,  2446,    88,  2635,
      38,   407,  2638,    69,  3048,    75,    75,  2399,   215,  3141,
    2402,   137,   270,    11,   309,  3077,   119,    15,    85,    11,
     443,   139,  2400,    15,   256,   257,  2700,    13,    14,  2354,
     463,  3008,   499,  3010,  2708,   779,   503,   117,    39,   359,
     501,   457,   330,  1164,  2445,    43,   110,   172,  1051,   210,
    2753,   331,     0,   980,   487,    70,  2962,   801,   985,  2801,
     942,    29,   129,  1100,   132,   957,  2413,   117,  1020,  1021,
    2812,   359,   370,   165,  2803,   110,  2401,    75,   501,   971,
    2052,   206,  2442,  1035,  2444,  3129,   293,   191,  3132,  3221,
    2539,   835,   370,   287,   270,   191,   132,   222,   287,  2939,
     380,   204,   440,  1916,  1917,  1918,  3083,   232,   110,   189,
     250,  1526,   276,  2357,   170,   305,   172,  3047,   258,  1001,
     321,  3188,   380,   277,   272,   126,   370,  3189,   175,   407,
     945,   501,   277,   270,   282,   367,   368,   175,   501,  1142,
    1866,  1867,  1868,  1869,  1870,   418,  1057,  1873,  1874,  1875,
    1876,  1877,  1878,  1879,  1880,  1881,  1882,   351,  1934,   411,
     440,   413,   351,   407,   132,  3163,   216,   270,  2900,   272,
     505,   449,   238,    25,   370,  3219,   496,  1088,   418,    31,
     166,  2018,   440,   501,   350,   501,   438,  2919,   238,  2581,
     513,   505,   272,   383,   320,  2535,   211,  2833,  2558,   568,
    3130,   496,   110,   350,  1115,   449,   149,   505,   163,  2950,
     443,   407,  1233,   350,   282,  1097,  1098,   490,   350,   350,
     384,   443,   559,   501,   316,  3131,   445,   434,  2282,   354,
     503,   568,   407,  2070,   435,   440,   501,   304,  2941,  1819,
     377,   956,   501,   499,   348,   505,   501,   503,   404,   345,
    2077,  1745,  2055,   449,  1687,   198,  1140,   501,  2078,   463,
    2205,   630,   465,  1140,   567,  2666,  2941,   463,   501,   463,
     465,   452,  1146,   228,   463,  2001,  2002,   404,   615,   440,
    1024,   615,   568,   487,   487,   137,   394,   395,   492,   493,
     418,   487,   487,   630,  1038,   501,   630,  1338,   501,  2111,
       5,  1776,   615,  2859,  3046,   501,   501,   504,   502,   500,
     504,   494,  3053,   502,   615,   504,   501,   630,   630,   501,
     501,  3054,   387,   501,   661,   662,   673,  1111,   418,   630,
     501,  2673,   673,   501,   387,   701,   501,   497,  2661,   505,
     499,   459,   501,   387,   503,   412,   501,   684,   501,   501,
     501,  1354,   501,  1606,  2882,   603,  2884,  1848,  1410,   120,
     501,   244,   501,   501,   693,   501,   501,   501,   693,   693,
     693,   120,   693,   505,   505,   453,   349,   501,   501,   501,
     501,   501,  1420,   679,   501,   693,  1438,   724,   725,   726,
     693,   501,   501,   693,   693,   501,   682,   453,  3127,  2643,
    3142,   163,    50,   601,   377,   603,   501,   465,   501,  2787,
    1362,  1363,   501,   685,   501,   501,   501,   713,   501,   379,
     492,   493,   492,   493,   494,   495,   496,   497,   497,   487,
     110,  2791,   193,   492,   493,   494,   495,   496,   497,   291,
     492,   493,   492,   493,   193,  1939,   644,   244,   502,   335,
     693,   505,  3181,     0,   693,   693,  1716,   693,   693,  2987,
    3163,  1330,   693,   693,   693,   693,  1726,   665,   693,  1729,
     693,    18,   809,   693,    21,   693,   693,  1480,   693,   693,
     693,   693,   693,   693,   693,   693,    33,   420,  3163,   161,
      11,  1360,   345,   244,    41,   347,   494,   495,   496,   497,
    3242,  2902,   494,   495,   496,   497,    53,   269,  1903,  3096,
    3097,   848,    59,  2326,  2327,  2328,  2329,  1554,  1570,   272,
    2357,   407,  1525,  1526,   277,   377,  1409,    11,   176,  1412,
       5,  1534,  1785,   466,    38,  1418,    32,  1861,  1407,  1934,
    1422,   501,   986,   200,   192,   989,  2303,   406,   161,   197,
     110,   161,  1555,    57,    75,   438,   166,  1609,  3145,    43,
      56,   200,  1599,   235,   190,  2368,   363,  1891,    69,   455,
     147,  1608,  1499,  1610,  1834,   490,   329,  1504,  1973,  1506,
    1494,  1508,  1911,   442,   161,  3225,   234,  1834,   503,   166,
    1479,    75,  1481,  1482,   446,  1487,    25,  1813,  1814,  1815,
    1812,  2232,  1813,  1814,   108,   942,  1421,  2238,  1422,  1813,
    2241,  1414,   363,   950,   951,   117,   117,   177,   501,  3259,
     244,  3022,   235,   960,   499,   235,   963,   964,   503,   966,
     967,   968,   969,  1544,     3,   110,   244,   244,   215,  2476,
     465,   438,   945,   980,     4,  2057,   980,   496,   985,     9,
      25,   985,  1704,   171,   503,   244,    31,    25,   235,  2385,
    2386,   151,   487,    31,  1001,  1002,  1003,   980,   980,   171,
     251,   284,   985,   985,   284,  2150,   501,  1712,   238,   980,
    2174,   171,  1019,  1052,   985,   490,    77,   438,   502,    77,
    1573,   505,  1685,  1562,   423,   199,   501,    88,   161,  1036,
      88,  1795,   177,   166,   501,   407,   496,   284,   137,   465,
    1047,  1048,  1049,   503,  1051,  1052,   293,    66,    67,  1712,
    1741,  1742,  1743,  1817,   363,   200,  2108,  1821,  1766,    25,
    1824,   487,   371,  2381,   382,    31,  2159,     4,  1731,   363,
     455,  1078,     9,  1736,   942,   501,   250,    25,  2659,    29,
     501,   366,  2663,    31,   258,   363,   363,   955,   501,     4,
    1097,  1098,   137,   238,     9,     4,   270,  1819,   407,   137,
       9,   272,   235,  2046,   363,   501,   277,   502,  1125,  1126,
     505,  1128,    13,    14,  1125,  1126,  2214,  1128,   502,  1792,
    1127,   505,  2220,   173,  1131,  1132,   166,   301,   300,  2575,
      80,     8,   501,  1001,    11,  1142,  2643,   502,    15,    89,
     505,    18,    19,    20,   438,  1839,   455,   292,   501,  1843,
     321,   284,  1846,   411,  1693,   413,   173,  1164,  3159,   502,
     438,   438,   505,  3234,   663,   664,   337,   666,   118,  1722,
     151,   137,   501,  2569,  1727,   349,   411,   335,   413,   438,
    1146,   411,   370,   413,  1191,   502,   501,   434,   505,   137,
     171,  1059,   291,  3194,   501,   245,  1203,   371,   370,   502,
    1068,   502,   505,   559,   505,  3222,  3223,   501,   438,   978,
     370,    13,    14,   371,  1180,   171,  1084,   391,   363,   407,
     501,  1228,   991,   501,   501,   994,  1899,  1095,   245,  1097,
    1098,   502,  3233,     8,   505,   407,    11,   501,   426,   189,
      15,  3258,   501,    18,    19,    20,   291,   407,   347,   407,
     349,   201,   501,   291,  2572,   499,  3257,   501,   501,   503,
      35,   449,   502,   171,   435,   505,   411,  1806,   413,   501,
      25,   502,   443,  2338,   505,   463,    31,   449,   377,   499,
     502,   501,  1834,   505,   429,   335,   463,   501,   465,   449,
     435,   463,  2688,   438,    13,    14,   513,   455,   343,   487,
    2618,   502,   347,   463,   505,   343,   411,   501,   413,   347,
    1849,    25,   501,   501,  2459,   487,  2458,    31,   335,   502,
     197,   371,   505,  1330,   487,   291,  1865,   487,   502,   501,
    1329,  1928,   377,  2006,  1329,  1329,    13,    14,  1329,   377,
    2443,   501,   219,   291,   300,  2262,   502,  1354,   494,   505,
     567,   568,   501,  1360,  1361,  1894,   484,   407,  2500,  2457,
    2051,  2459,  1901,   221,   502,   132,  2130,   505,  2132,   503,
     502,   502,   171,   505,   505,   502,   502,   343,   505,   505,
     502,   347,   137,   505,   502,  1937,   503,   505,   502,   370,
     407,   505,   159,   502,  1933,   343,   505,  1936,   615,   347,
    1407,   446,  1941,  1410,   502,   455,     6,   505,   446,     9,
     484,   377,   289,   630,   370,  1422,    16,  2360,   502,   502,
     287,   505,   505,   137,   502,   170,   407,   505,    28,   377,
    2826,  1438,    32,   502,  2941,   505,   505,  1444,   455,   502,
      13,    14,   505,   393,   219,   501,   396,   411,  1421,   413,
     695,   407,   697,   809,  3012,   502,   673,  1325,  2236,  2237,
    1467,  1468,  2133,    56,  2135,  1472,  1422,  1474,   449,  2442,
    1474,  2444,  1479,  1480,  1481,  1482,   693,    13,    14,   502,
     446,   501,   463,    13,    14,  2196,   484,  1494,  1495,    13,
      14,  1474,  1499,   449,   221,  1499,   171,  1504,   446,  1506,
    1504,  1508,  1506,  1474,  1508,   272,   487,   463,   292,  2827,
     277,    13,    14,   152,   289,   282,  1499,  1499,  1525,  1526,
     501,  1504,  1504,  1506,  1506,  1508,  1508,  1534,  1499,  1522,
     343,   487,   152,  1504,   152,  1506,   291,  1508,  2260,    13,
      14,    13,    14,   152,  1522,   501,  2476,    38,  1555,  1522,
    1557,  2978,  1522,  1522,   501,  1562,  1563,  1564,  1565,  1566,
    1567,  1568,  1569,  1570,  2667,    13,    14,  1574,  1575,  2714,
     502,   370,  1579,  1441,   272,    96,  1583,   291,   272,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,  1593,  1594,   343,   171,
    1597,  3018,   347,    38,  3192,  3193,   455,  1604,   132,  1606,
      13,    14,  1609,  2655,    13,    14,    13,    14,   407,    13,
      14,   488,   489,   490,    84,   492,   493,   494,   495,   496,
     497,   152,   377,  1630,   467,   159,   452,  2788,  1645,   343,
      13,    14,   501,   347,  1645,   317,   187,   188,    13,    14,
     501,  1648,    13,    14,   152,  3243,   501,  1003,    13,    14,
     449,   172,  1659,  1660,    13,    14,  3163,   501,   425,    13,
      14,   501,  1530,   377,   463,    37,    13,    14,  2207,   436,
      13,    14,  1628,   358,   359,   358,   359,   260,   261,   367,
     368,   501,   358,   359,   152,   206,  1693,   503,   487,   358,
     359,   446,  1097,  1098,   152,  1702,   152,  1704,   287,   345,
     501,   222,   501,   418,  2257,   256,   257,   501,     9,   501,
    2262,   232,   502,   488,   489,   490,  3143,   492,   493,   494,
     495,   496,   497,   409,   501,    12,   222,  2434,   945,   217,
      17,   296,   446,   222,   294,   222,   501,   501,  1745,    26,
      38,  1748,  1749,   277,  1751,   266,     5,  1615,   282,   233,
     559,   147,    39,    40,     5,  2477,     5,  2479,   501,   501,
     501,  3188,   501,   980,     5,   161,   287,   501,   985,     5,
     166,   501,     5,   501,   148,  2705,     3,    38,  1785,     9,
     464,   298,   505,    99,    69,  1792,    38,  2551,  1781,   505,
      75,   502,   284,   314,   233,   217,    57,   166,  1015,  1806,
     166,   282,  2493,    88,  2512,  2947,   377,   418,  1164,  1026,
      97,   501,  1819,    88,   501,   418,   367,   368,    56,   215,
     418,  2532,    56,   263,   505,   463,   418,  1834,   502,   177,
     418,   511,   117,   354,   119,  1052,   272,   152,   152,   235,
      95,   272,  1849,   501,    38,   272,   272,   108,  1855,   501,
       3,  1858,   200,  1860,   501,    37,   499,   416,  1865,  1866,
    1867,  1868,  1869,  1870,   416,    96,  1873,  1874,  1875,  1876,
    1877,  1878,  1879,  1880,  1881,  1882,   499,   418,   418,   418,
     418,  1888,  1889,  3044,   503,  1892,   502,  1894,   284,   502,
     238,   425,  1899,   171,  1901,   559,   502,   293,   502,   501,
    2843,   502,   436,   502,   460,   502,  2823,   502,  1125,  1126,
     177,  1128,   502,   222,  1921,   502,   502,  1924,   502,   204,
     505,  1928,   443,   501,  1928,   505,  1933,   459,    11,  1936,
    1937,   345,  1939,   200,  1941,   505,   500,  2476,   199,   505,
     416,   172,  1949,   510,   292,  1928,  1928,   501,   511,   277,
     162,   501,   418,  2717,  2718,   180,   171,  1928,   505,   502,
     505,   215,  2753,   263,   501,   380,  1834,  2006,  1975,   288,
    1838,   238,   309,  1980,  1330,   206,  1983,   224,   309,   505,
     502,   443,   501,   272,   224,   224,   293,   272,   326,   250,
     285,   222,   277,   171,  2001,  2002,   455,   258,   501,  2006,
     809,   232,   501,   152,  1360,  1361,   152,   152,  2547,   270,
     463,  2941,   152,  2020,    38,   363,  2023,     8,  2025,   272,
      11,  3166,   287,   502,    15,   292,   499,    18,    19,    20,
     484,   502,   484,   502,    38,   266,   321,  2634,   434,  2046,
     301,  2594,  2049,   287,    56,  2049,   171,     8,    11,    38,
      11,  1407,   337,   502,    15,    16,    17,    18,    19,    20,
     502,   502,  2069,   411,   166,   413,  2049,  2049,   502,  1937,
     502,  2064,   502,   501,    35,   180,   501,   501,  2049,  2086,
    2087,   429,    43,   314,   502,   502,  2064,   435,   349,    50,
     438,  2064,   500,   503,  2064,  2064,  2103,   502,   484,  2103,
     502,   502,   502,   499,   171,   418,   502,   503,  2115,   501,
     371,   501,   501,  2106,    75,   155,   501,   288,   486,   288,
    2103,  2103,   440,   354,   505,   243,  2133,  2134,  2135,    38,
     391,   460,  2103,  2686,   490,   505,   418,     7,     8,   272,
     501,   152,    12,   200,   411,   809,   413,    17,   418,   152,
     435,    21,   152,    23,    24,    25,    26,    27,   443,   279,
      30,   418,  2201,    33,    34,   279,    36,  2174,   435,    39,
      40,   438,   418,   418,   500,   502,   171,  2716,   501,    38,
     345,   502,  2889,   505,   285,    38,   463,   287,   152,    59,
     502,   277,   500,   171,  1003,   500,   502,   501,   501,    56,
    2207,   184,    75,   502,  1421,   502,  1562,   143,   502,  2920,
    3153,   502,   197,   171,   502,   176,   502,   501,  2225,   297,
     288,   502,   505,   502,   351,   501,    96,    97,    98,    99,
     100,   192,   449,  3163,   287,   152,   197,     8,   502,   505,
      11,   501,   175,   429,    15,   532,   502,    18,    19,    20,
      38,    38,   502,  2260,   502,  2262,    81,   171,   219,   220,
     502,   462,   505,   443,    35,   448,   501,    86,   505,   501,
    2138,  2823,   500,   234,   490,   501,   563,   202,   502,   502,
     502,   117,  1499,   502,   505,    38,  1095,  1504,   502,  1506,
     463,  1508,   502,   502,   502,   501,  2303,     8,   289,  2303,
      11,  3023,   224,    83,    15,  1522,   190,    18,    19,    20,
     277,   272,   277,   503,   275,  2988,  2184,  2990,   503,   503,
    2303,  2360,   503,   490,  2192,   418,   503,   503,   289,   503,
     418,   292,  2303,  2201,   502,   111,   112,  1693,    38,  1003,
     503,   503,   503,   503,  2351,   503,   503,   503,   503,    38,
     501,   503,  2391,  2360,   272,  1164,   503,  2393,   109,  1576,
     503,   503,  2369,    38,   503,  2372,   503,  2374,    57,   503,
       9,   503,   503,   503,  2381,  2382,   463,   503,  2385,  2386,
     503,   503,   503,  2390,  2391,   287,   503,  2394,   503,   501,
    2429,  3102,   503,   503,  2262,   503,   503,   503,   685,  2267,
     344,  2269,  2941,   501,  3095,  2273,  3111,  2275,   505,   501,
     505,   187,   188,   328,   337,   190,   501,  2424,   502,   108,
      38,   382,   152,   502,   152,   124,     8,    38,  1645,    11,
    2437,   502,   359,    15,    38,   359,    18,    19,    20,   502,
     501,   501,    38,  3165,   443,   306,   505,    88,   219,   133,
    1806,   501,   248,    35,   277,     8,   189,   443,   429,   501,
     964,    69,    15,   290,    69,    18,    19,    20,  2475,  2476,
    2477,     9,  2479,    75,   502,   502,   252,   253,   254,   255,
     256,   257,   501,   361,   260,   261,   175,    56,   448,   490,
     287,   270,   429,  1849,    38,   501,   290,   488,   489,   490,
    1164,   492,   493,   494,   495,   496,   497,   290,   219,  1865,
     199,   501,  2511,   377,   502,  2508,  2511,  2511,   289,   202,
    2511,  1330,   502,   287,   485,   287,   502,   488,   489,   490,
     122,   492,   493,   494,   495,   496,   497,   440,  1894,   500,
    2547,  2534,   358,    24,  2537,  1901,    35,  2260,  2190,   693,
    2823,  1360,  1361,  2069,  2503,  1772,  1117,  1676,   979,   979,
    1135,   250,  2569,  3151,  1781,  2572,  1134,  1648,  2086,   258,
    3085,  2323,  2992,  1675,    21,  1137,  2103,  1933,   289,   630,
    1936,   270,  2589,  2590,   957,  1941,  3139,  2303,   987,  1930,
    2597,   367,   368,   615,  2934,  2302,  2342,   955,  1407,  3088,
    1374,  2608,   955,   955,   955,  2612,  2613,  3089,  2476,  3202,
    2617,  2618,   301,  1981,  2070,  2622,  2024,  1950,  2625,  2626,
    2021,  1751,  1495,  2630,  3163,  2648,    27,  2634,  1132,    59,
    2634,  2710,  3214,  2913,  3117,  2503,  2504,   219,  3167,  3176,
    3207,  2648,  1151,  2964,   514,  2121,   516,  2134,  3165,  2452,
     520,  2634,  2634,   523,  2523,  3174,  2118,  3162,    14,  2479,
     349,  2198,   532,  2634,  1422,  1409,  1330,  1360,  1710,  2128,
    2064,  2460,  3074,  2680,  1628,  2475,  1937,  1327,  2436,  2518,
    2891,  2688,   371,   602,  2435,  3143,  3014,  1629,  3206,    -1,
      -1,   561,   562,   563,    -1,    -1,  1360,  1361,    -1,    -1,
    2707,    -1,   391,    -1,    -1,   481,   482,   289,    -1,  2716,
      -1,  1928,    -1,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,   601,   602,   603,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,  1407,    -1,   615,  2753,    -1,    -1,   619,
      -1,    -1,    -1,  1562,    -1,    52,    -1,    -1,    -1,    -1,
     630,   631,   632,    -1,    -1,    -1,   636,   637,    -1,    -1,
      -1,  2639,    -1,    -1,    -1,    -1,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,    -1,  2795,  2006,
      -1,   661,   662,   663,   664,    -1,   666,    -1,    -1,    -1,
      97,    -1,    -1,    -1,  2843,    -1,    -1,  2024,    -1,   679,
      -1,  2804,    -1,    -1,    -1,   685,  2823,    -1,    -1,  2826,
    2827,    -1,    -1,  2040,    -1,    -1,   123,    -1,    -1,    -1,
    1117,    -1,  2049,    -1,    -1,    -1,  2843,    -1,    -1,    -1,
     710,    -1,    -1,   713,   141,    -1,    -1,  2064,   145,    -1,
      -1,  2207,  2859,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,  2870,  2871,    -1,    -1,  2874,    -1,    -1,
     167,    -1,    -1,   170,   744,   745,   746,   747,   748,    -1,
      -1,   559,    -1,    -1,  1693,    -1,  2103,  2894,   185,  2106,
      -1,    -1,    -1,    -1,    -1,  2888,    -1,  2890,  1562,    -1,
      -1,    -1,    -1,    -1,  2911,    -1,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,   497,    -1,    96,    -1,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2800,    -1,  2941,   488,   489,   490,    -1,   492,
     493,   494,   495,   496,   497,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    -1,  2823,    18,    19,    20,  2952,
    2953,    -1,    -1,  1467,  1468,    -1,    -1,  2974,  1472,    -1,
      -1,  2978,    -1,    12,  2978,    -1,    -1,    -1,    17,    -1,
     277,  2988,    -1,  2990,  2201,  2992,    -1,    26,   285,  2996,
      -1,    -1,    -1,  3000,    -1,  2978,    -1,  1806,    -1,    -1,
      39,    40,    -1,    -1,    -1,  3012,    -1,  2978,    -1,   306,
      -1,  3018,    -1,    -1,  3018,  2883,  3023,    -1,    -1,    -1,
      -1,  3028,    -1,    -1,    -1,  2381,    -1,    -1,    -1,  1693,
       8,    -1,   329,    11,    -1,  3018,    -1,    15,    -1,    -1,
    1849,    -1,    -1,    -1,    -1,    -1,    -1,  3018,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1865,    -1,    97,  3052,
      -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,  3075,    -1,
      -1,    -1,    50,  2941,    -1,  3068,    -1,    -1,  3085,  3072,
      -1,    -1,    -1,    -1,    -1,  1894,   956,   957,    -1,    -1,
      -1,   961,  1901,    -1,    -1,    -1,    -1,    75,    -1,    -1,
     970,   971,    -1,    -1,   974,    -1,    -1,    -1,    -1,    -1,
     980,  3118,    -1,    -1,    -1,   985,    -1,    -1,    -1,    -1,
    2476,    -1,   992,    -1,  1933,    -1,    -1,  1936,  1415,    -1,
    1417,   809,  1941,    -1,    -1,    -1,  3143,  1007,    -1,  3143,
      -1,    -1,  1806,  2360,  1648,    -1,  3153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3163,   219,  3165,    -1,
    3143,    -1,    -1,    -1,  3157,    -1,    -1,   145,    -1,    -1,
      -1,    -1,  3143,    -1,  2391,    -1,    -1,  3045,    -1,    -1,
      -1,  3188,   964,    -1,  3188,  1849,  1056,  3180,    -1,    -1,
      -1,  2547,    -1,    -1,  3201,  3202,    -1,    -1,   176,    -1,
      -1,  1865,    -1,    -1,    -1,  3188,   111,   112,    -1,    -1,
      -1,    -1,  2429,    -1,   192,    -1,  2572,  3188,  3225,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,  1099,
    1894,  1101,    -1,    -1,    -1,    -1,    -1,  1901,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1117,  1118,    -1,
      -1,    -1,  3259,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,    -1,  2618,    -1,    -1,    -1,    -1,    -1,    -1,  1933,
      -1,    -1,  1936,    -1,    -1,    -1,  1146,  1941,    -1,    -1,
    1150,  1151,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2508,    -1,  1163,    -1,  3163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1180,   289,    -1,    -1,  1184,    -1,    -1,  2534,  1188,    -1,
    2537,    -1,    -1,    -1,    -1,  1003,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   514,    -1,   516,    -1,    38,
      -1,   520,    -1,    -1,   523,    -1,    -1,   252,   253,   254,
     255,   256,   257,    -1,    -1,   260,   261,    -1,    57,    -1,
    2716,    -1,  1866,  1867,  1868,  1869,  1870,    -1,    -1,  1873,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2753,  2207,    -1,
      -1,  1688,    -1,    -1,   382,    -1,    -1,    -1,    -1,   108,
     109,  1698,    -1,  1700,    -1,    -1,  1703,  2634,   117,    -1,
      -1,    -1,  1709,    -1,  1711,    -1,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,   497,  1723,    -1,    -1,    -1,
     619,  1728,    -1,    -1,    -1,  1732,  1733,  1734,  1735,    -1,
    1737,  1738,  1322,    -1,    -1,    -1,  1326,    -1,    -1,    -1,
      -1,  1331,   367,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2827,    -1,  1343,    -1,    -1,   175,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1164,    -1,    -1,    -1,
      -1,    -1,    -1,   532,    -1,    -1,    -1,  2001,  2002,    -1,
     199,    -1,    -1,  1373,  1374,    -1,    -1,   485,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,   494,   495,   496,   497,
      -1,    -1,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   710,    -1,    -1,    -1,    -1,    -1,   559,    -1,  1409,
      -1,   559,  1412,  2207,  1414,  1415,    -1,  1417,  1418,    -1,
      -1,   250,    -1,     8,    -1,    -1,    11,    -1,    -1,   258,
      15,    -1,    -1,    -1,    -1,   744,   745,   746,   747,   748,
      -1,   270,  2381,   272,    -1,    -1,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2941,    -1,  2804,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,   501,    -1,    -1,    -1,
      -1,    -1,   301,    -1,  1474,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1487,    -1,  1489,
      75,    -1,  1492,    -1,  1494,  1495,  2843,  1497,    -1,  1499,
      -1,    -1,    -1,    -1,  1504,    -1,  1506,    -1,  1508,    -1,
    1510,    -1,    -1,  1513,    -1,    -1,   685,    -1,    -1,    -1,
     349,    -1,  1330,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1533,    -1,   559,    -1,  2476,  1538,    -1,
      -1,  2888,   371,  2890,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1360,  1361,    -1,  1467,  1468,    -1,     8,    -1,
    1472,    11,   391,    -1,   393,    15,    -1,   396,    18,    19,
      20,    -1,    -1,  1573,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,  2381,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1407,
      -1,    -1,    -1,    -1,  1604,  2952,  2953,   192,  2547,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1625,    -1,  1627,    -1,  1629,
      -1,    -1,    -1,  2572,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2062,    -1,    -1,    -1,   234,
      -1,    -1,   961,    -1,     0,    -1,    -1,   809,    -1,    -1,
      -1,   809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,  1673,    -1,    -1,    -1,  3163,    -1,  2618,
      -1,    -1,  2476,  1683,  1684,    -1,    -1,  1687,  1688,    -1,
    1602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1698,  1699,
    1700,  1701,    -1,  1703,   289,  3052,    -1,    -1,    -1,  1709,
      -1,  1711,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,  3068,  1722,  1723,    -1,  3072,    -1,  1727,  1728,    -1,
      -1,    -1,  1732,  1733,  1734,  1735,  1648,  1737,  1738,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    95,
      -1,  2385,  2386,  2547,  1562,    50,    -1,    -1,  1758,    -1,
      -1,    -1,  1762,  1763,  1764,  1765,    -1,    -1,    -1,   219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2716,  2572,  1779,
      75,    -1,    -1,    -1,    -1,   809,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,
    2217,   147,    -1,    -1,    -1,   974,    -1,    -1,    -1,    -1,
    3157,    -1,    -1,    -1,  2753,   161,    -1,    -1,    -1,    -1,
     166,    -1,    -1,   992,  2618,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3180,   180,    -1,    -1,    -1,   184,   289,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     145,  1003,    -1,    -1,  1163,  1003,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   215,
      -1,    -1,    -1,    -1,    -1,  1184,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,  1693,    -1,  1056,  2827,   235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,
     485,    -1,   197,  1903,    -1,    -1,    -1,   492,   493,   494,
     495,   496,   497,    -1,    -1,  1915,     3,    -1,     5,    -1,
      -1,    -1,  2716,    -1,    -1,    -1,    -1,    -1,  1928,    -1,
      -1,    -1,    -1,    -1,  1934,  2569,    -1,    -1,   284,   234,
      -1,   287,    -1,    -1,    -1,    -1,    -1,   293,  1117,  1118,
      -1,    -1,    -1,    -1,  1866,  1867,  1868,  1869,  1870,  2753,
      -1,  1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,
    1882,    -1,    -1,  1973,  2608,    -1,    -1,  1977,    -1,  1003,
      -1,  1981,   328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,  1806,    -1,
      -1,    -1,  2941,    -1,    -1,   351,    -1,    -1,    -1,    -1,
      -1,    -1,  1164,    -1,    -1,    -1,  1164,  1326,  2018,    -1,
      -1,  2438,  1331,    -1,   111,   112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2827,    -1,    -1,    -1,    -1,   488,   489,
     490,  1849,   492,   493,   494,   495,   496,   497,  2465,  2049,
      -1,    -1,    -1,    -1,  2688,    -1,    -1,  1865,    -1,    -1,
      -1,   407,  2062,  2480,  2481,  2482,  2483,  2484,  2485,  2486,
    2487,  2488,  2489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1894,   382,   434,  2001,
    2002,    -1,    -1,  1901,    -1,    -1,    -1,   443,    -1,    -1,
     187,   188,    -1,  2103,    -1,    -1,    -1,  2107,    -1,    -1,
      -1,    -1,    -1,    -1,   460,    -1,   462,   463,    -1,    -1,
      -1,    -1,    -1,  2123,    -1,  1933,    -1,    -1,  1936,    -1,
      -1,    -1,    -1,  1941,    -1,    -1,    -1,    -1,    -1,    -1,
    1164,    -1,    -1,    -1,    -1,    -1,    -1,  2941,    -1,    -1,
      -1,    -1,    -1,   499,    -1,    -1,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   252,   253,   254,   255,   256,
     257,    -1,    -1,   260,   261,    -1,    -1,    -1,  1330,    -1,
      -1,    -1,  1330,    -1,    -1,    -1,  2186,    -1,  1497,    -1,
     485,    -1,  2826,  2193,    -1,    -1,    -1,   492,   493,   494,
     495,   496,   497,  2203,  2204,  2205,  2206,    -1,  1360,  1361,
      -1,    -1,  1360,  1361,    -1,    -1,    -1,  2217,    -1,  2219,
      -1,    -1,  2222,    -1,  3163,    -1,    -1,  2227,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2239,
      -1,    -1,    -1,    -1,    -1,  1414,  1415,    -1,  1417,    -1,
      -1,    -1,    -1,    -1,    -1,  1407,    -1,  2257,    -1,  1407,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2687,  2271,  2272,    -1,  2274,    -1,    -1,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2303,    -1,    -1,  1330,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,  1627,    -1,
    1629,    -1,  2322,  1492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2331,  2332,  2333,    -1,    -1,  1360,  1361,  2338,    -1,
      -1,  1510,  2342,    -1,  1513,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,  2357,    -1,    -1,
      -1,    -1,    -1,    -1,  1673,    -1,    -1,    -1,    -1,  3163,
      -1,    -1,    -1,    -1,  1683,    -1,    -1,    75,     8,    -1,
      -1,    11,    -1,  1407,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,   481,   482,    -1,    -1,    -1,  2207,
      -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
    1562,    -1,    -1,    43,  1562,    -1,    -1,    -1,    -1,    -1,
      50,  2421,    -1,    -1,    -1,    -1,  2426,    -1,    -1,  2429,
      -1,    -1,    -1,    -1,    -1,  2435,    -1,    -1,  2438,    -1,
      -1,    -1,  2442,  2443,  2444,    75,  2446,   145,    -1,  1758,
      -1,    -1,    -1,  1762,  1763,  1764,  1765,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2465,    -1,  2467,    -1,    -1,
      -1,    -1,    -1,  2385,  2386,    -1,    -1,    -1,   176,    -1,
    2480,  2481,  2482,  2483,  2484,  2485,  2486,  2487,  2488,  2489,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,  2922,    -1,  2507,    -1,    -1,
      -1,    -1,    -1,  2513,    -1,    -1,    -1,    -1,    -1,  1688,
      -1,    -1,    -1,  2523,    -1,  2942,  2943,    -1,    -1,  1698,
      -1,  1700,    -1,    -1,  1703,    -1,   234,    -1,  1562,  2539,
    1709,  1693,  1711,     0,  2961,  1693,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1723,    -1,    -1,    -1,  2558,  1728,
      -1,    -1,   192,  1732,  1733,  1734,  1735,   197,  1737,  1738,
      -1,    -1,    -1,  2381,    -1,  2575,    -1,    -1,    -1,    -1,
      -1,    -1,  2582,  2583,  2584,  2585,    -1,    -1,    -1,   219,
     220,   289,    -1,    -1,  2594,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,  1915,  2607,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2632,    -1,  2634,    -1,    -1,    -1,    95,    -1,
      -1,    -1,   272,  2643,    -1,   275,    -1,    -1,  2648,    -1,
      -1,    -1,    -1,    -1,  1806,    -1,    -1,  2569,  1806,   289,
      -1,  2661,   292,    -1,    -1,    -1,    -1,  2667,  2476,  1693,
      -1,    -1,    -1,  2673,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3099,    -1,   382,    -1,  2686,  2687,    -1,    -1,
     147,    -1,    -1,    -1,  2694,    -1,    -1,  1849,    -1,    -1,
      -1,  1849,    -1,    -1,   161,    -1,    -1,    -1,    -1,   166,
      -1,  2711,    -1,  1865,   171,    -1,    -1,  1865,    -1,    -1,
      -1,    -1,    -1,   180,    -1,    -1,    -1,   184,    -1,    -1,
      -1,    -1,    -1,    -1,  1903,    -1,    -1,    -1,    -1,  2547,
      -1,    -1,  1894,    -1,    -1,    -1,  1894,    -1,    -1,  1901,
      -1,    -1,   382,  1901,    -1,    -1,    -1,    -1,   215,    -1,
      -1,    -1,    -1,    -1,  2572,  1934,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2688,    -1,   235,    -1,
      -1,  1933,  1806,    -1,  1936,  1933,    -1,   485,  1936,  1941,
      -1,  2791,    -1,  1941,   492,   493,   494,   495,   496,   497,
      -1,    -1,    -1,  2803,  1973,    -1,    -1,    -1,    -1,    -1,
    2618,    -1,  1981,    -1,    -1,     8,    -1,  2817,    11,    -1,
      -1,    -1,    15,    -1,    -1,  1849,    -1,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,
      -1,  1865,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,  2853,    -1,   485,    -1,    50,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,   497,    -1,    -1,
    1894,   328,    -1,    -1,    -1,   505,    -1,  1901,    -1,  2879,
      -1,    -1,    75,    -1,  2193,    -1,    -1,    -1,    -1,    -1,
      -1,  2891,    -1,  2062,   351,  2204,  2205,  2206,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2716,  1933,
    2219,    -1,  1936,  2222,  2826,    -1,    -1,  1941,  2227,    -1,
      -1,    -1,  2922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2942,  2943,    -1,  2753,    -1,   661,   662,    -1,
     407,    -1,   145,    -1,    -1,  2955,    -1,  2957,    -1,    -1,
      -1,  2961,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2975,    -1,   434,  2978,    -1,
      -1,    -1,    -1,   176,    -1,    -1,   443,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,   460,   197,   462,   463,    -1,    -1,    -1,
     724,   725,  3012,    -1,    -1,    -1,    -1,    -1,  3018,  2827,
      -1,  3021,  2331,  2332,  2333,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,   499,    -1,    -1,   502,   503,   504,  2217,    -1,
      -1,  3051,    -1,    -1,    -1,  2207,    -1,    -1,    -1,  2207,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3088,    -1,
      -1,    -1,    -1,    21,    -1,    -1,   289,    -1,    -1,  3099,
      -1,    -1,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,
      -1,    -1,  2421,    -1,    -1,    -1,    44,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,  3127,    -1,    -1,
      58,    -1,    -1,  2941,    -1,    -1,    -1,    -1,    -1,  3139,
    3140,  3141,    70,  3143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3151,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    -1,  2338,
      -1,    -1,    -1,  2342,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3181,    -1,  2207,    -1,   113,    -1,    -1,  3188,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,  2513,    -1,  3206,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,
      -1,  3221,    -1,   151,    -1,   153,   154,    -1,    -1,  2381,
      -1,    -1,    -1,  2381,    -1,    -1,   950,    -1,    -1,   167,
      -1,    -1,    -1,   171,    -1,    -1,   960,    -1,    -1,   963,
      -1,    -1,   966,   967,   968,   969,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,   196,  2438,
      -1,    -1,    31,  2582,  2583,  2584,  2585,    -1,    -1,    38,
      -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,  1002,    -1,
      -1,    -1,   485,    -1,    -1,    -1,  2465,    -1,    57,   492,
     493,   494,   495,   496,   497,  1019,    -1,    -1,    -1,   237,
      -1,  2480,  2481,  2482,  2483,  2484,  2485,  2486,  2487,  2488,
    2489,    -1,  1036,    -1,  2476,    -1,    -1,    -1,  2476,    -1,
      -1,    -1,    -1,  1047,  1048,  1049,    -1,  1051,  1052,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,  3163,    -1,  2381,    -1,    -1,
      -1,    -1,    -1,    -1,  1078,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,    -1,  2694,    -1,   315,    -1,    -1,
     318,    -1,    -1,    -1,    -1,  2547,    -1,    -1,    -1,  2547,
      -1,    -1,    -1,    -1,    -1,    -1,  2575,    -1,    -1,    -1,
     942,    -1,    -1,  1127,    -1,    -1,    -1,  1131,  1132,   347,
    2572,   953,   954,    -1,  2572,    -1,   958,   959,   356,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     199,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,   377,
       0,    -1,  2476,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,  2618,    -1,    -1,  1001,
    2618,    -1,    -1,    -1,    -1,   403,    -1,  1191,    -1,   407,
       3,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,  1203,
      -1,   250,    15,    16,    17,    18,    19,    20,   426,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    35,   441,  1228,    38,   444,    -1,  2687,    -1,
      43,   449,    -1,  2547,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,   291,    -1,    -1,   463,  1068,    -1,    -1,    -1,
      -1,    -1,   301,    -1,    -1,    95,    -1,    -1,  2572,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   487,
      -1,    -1,    -1,  1095,  2716,  1097,  1098,    -1,  2716,    -1,
      -1,    -1,    -1,   501,    -1,    -1,   504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,   347,    -1,
     349,    -1,    -1,    -1,  2618,    -1,    -1,   147,    -1,    -1,
      -1,  2753,    -1,    -1,    -1,  2753,    -1,    -1,    -1,    -1,
      -1,   161,   371,    -1,    -1,    -1,   166,    -1,   377,    -1,
      -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     180,    -1,   391,  1165,   184,    -1,  1168,  1169,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2955,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   215,  2975,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,  2827,    -1,    -1,    -1,  2827,
      -1,    -1,    -1,    -1,    -1,   235,    -1,   446,    -1,    -1,
      -1,    -1,  2716,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     964,   234,  3021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2753,
    1444,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,  3051,   293,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,  2922,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1479,   289,  1481,  1482,   292,
      -1,    -1,    -1,  2942,  2943,    -1,    -1,    -1,   328,    -1,
    1494,  1495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2941,
      -1,    -1,  2961,  2941,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,    -1,  2827,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1069,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1369,    -1,  1371,
      -1,    -1,    -1,  1557,    -1,  1377,    -1,    -1,    -1,  1563,
    1564,  1565,  1566,  1567,  1568,  1569,    -1,   407,  1112,   382,
    1574,  1575,  1394,    -1,    -1,  1579,    -1,    -1,    -1,  1583,
      -1,    -1,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1593,
    1594,    -1,    -1,  1597,   434,    -1,    -1,    -1,    -1,    -1,
    1604,    -1,  1606,   443,    -1,  1427,  1428,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     460,    -1,   462,   463,    -1,    -1,  1630,  2941,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,  1659,  1660,    -1,    15,   499,
      -1,    -1,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,    -1,    -1,   488,   489,   490,    -1,   492,
     493,   494,   495,   496,   497,    -1,    43,     8,  1232,    -1,
      11,    -1,    -1,    50,    15,  1239,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,  3163,    43,    -1,    -1,  3163,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1745,    -1,    -1,  1748,  1749,    -1,  1751,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1785,    -1,     8,    -1,    -1,    11,    -1,   145,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,   176,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,  1659,  1660,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3163,
      75,  1855,    -1,    -1,  1858,   176,  1860,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,   234,    -1,    -1,
      -1,    -1,    -1,    -1,  1888,  1889,    -1,    -1,  1892,    -1,
      -1,    -1,    -1,    -1,  1716,    -1,    -1,    -1,  1442,    -1,
      -1,    -1,    -1,    -1,  1726,    -1,    -1,  1729,     8,    -1,
      -1,    11,    -1,   234,    -1,    15,    -1,  1921,    -1,  1463,
    1924,  1465,    -1,  1467,  1468,  1469,    -1,    -1,  1472,    -1,
      -1,  1475,   289,    -1,  1478,  1939,    -1,    -1,    -1,  1483,
      -1,    -1,  1486,    43,    -1,  1949,    -1,    -1,    -1,    -1,
      50,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,   289,    -1,
      -1,  1975,   197,    -1,    -1,    75,  1980,    -1,    -1,  1983,
      -1,    -1,    -1,    -1,  1528,    -1,  1808,  1809,  1532,    -1,
      -1,  1535,  1536,  1537,   219,   220,    -1,  1541,    -1,    -1,
      -1,  1545,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,  1834,    -1,    -1,    -1,  2020,    -1,    -1,  2023,
      -1,  2025,    -1,    -1,    -1,   382,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,   145,    -1,   272,    -1,    -1,
     275,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,  1603,
      -1,   382,    43,    -1,   289,  2069,    -1,   292,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,  2086,  2087,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,    75,    -1,    -1,   197,  1642,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2115,    -1,    -1,  1658,  1937,    -1,    -1,    -1,  1663,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,
      -1,    -1,    -1,    -1,   234,   492,   493,   494,   495,   496,
     497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,
      -1,    -1,    -1,    -1,   485,    -1,    -1,   488,   489,   490,
    2174,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,  2225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    -1,  2054,    -1,    -1,    31,    -1,    -1,   219,   220,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,  2076,  2077,    -1,    -1,    -1,    -1,
     485,    57,    -1,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,   497,    -1,    -1,    -1,    -1,   502,    -1,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1851,   289,    -1,
      -1,   292,   108,    -1,    -1,    -1,    -1,    -1,    -1,  1863,
    1864,    -1,  1866,  1867,  1868,  1869,  1870,    -1,    -1,  1873,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
      -1,   137,    -1,    -1,    -1,    -1,    -1,  2351,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2360,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2369,    -1,    -1,  2372,    -1,
    2374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2382,    -1,
      -1,    -1,    -1,    -1,    -1,   485,  2390,  2391,    -1,    -1,
    2394,    -1,   492,   493,   494,   495,   496,   497,    -1,    -1,
      -1,   382,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2437,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1985,    -1,    -1,    -1,  1989,  1990,  1991,  1992,  1993,
    1994,  1995,    -1,    -1,   250,    -1,    -1,  2001,  2002,    -1,
    2004,  2005,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2016,    -1,   270,  2019,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2027,  2028,  2029,  2030,  2031,  2032,  2033,
    2034,  2035,  2036,    -1,    -1,   291,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   485,   301,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,  2061,    -1,    -1,
      -1,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,   343,    -1,    -1,
      -1,   347,    -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      -1,    -1,    -1,    -1,    -1,   371,    50,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,  2589,  2590,    -1,    -1,    -1,
      -1,    -1,    -1,  2597,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,  2608,    -1,    -1,    -1,  2612,  2613,
      -1,    -1,    -1,  2617,    -1,    -1,    -1,    -1,  2622,    -1,
      -1,  2625,  2626,    -1,    -1,    -1,  2630,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2179,  2180,  2181,    -1,    -1,
      -1,    -1,    -1,    -1,  2648,    -1,    -1,    -1,    -1,    -1,
     446,    -1,    -1,    -1,  2476,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2680,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,  2707,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2279,  2280,  2281,    -1,    -1,
    2284,  2285,  2286,  2287,  2288,   219,   220,    -1,  2292,  2293,
    2294,  2295,  2296,  2297,  2298,  2299,  2300,  2301,    -1,    -1,
     234,    -1,  2306,  2307,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2334,  2795,    35,  2337,    -1,    -1,    -1,    -1,   272,    -1,
      43,   275,    -1,    -1,    -1,    -1,  2350,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,  2361,   292,    -1,
    2364,    -1,  2366,    -1,    -1,    -1,  2370,  2371,    -1,    23,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,  2843,
    2384,  2385,  2386,  2387,    -1,  2389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2859,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2870,  2871,    -1,    -1,
    2874,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,  2705,    -1,    -1,    -1,    -1,  2710,    -1,
    2894,    -1,    -1,    -1,    -1,  2439,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2911,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,  2761,
    2762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      -1,    -1,   146,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2974,    -1,    -1,    -1,   168,    -1,   219,   220,    -1,   173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2992,    -1,
      -1,   234,  2996,    -1,  2538,    -1,  3000,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,  3012,    -1,
      -1,   485,    -1,    -1,   488,   489,   490,    -1,   492,   493,
     494,   495,   496,   497,  3028,  2569,    -1,    -1,   502,   272,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,   245,    -1,    -1,  2598,   249,    -1,    -1,    -1,  2603,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2611,    -1,    -1,
    2614,  3075,  2616,    -1,    -1,    -1,  2620,    -1,    -1,  2623,
    2624,  3085,    -1,  2627,  2628,    -1,    -1,  2631,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,  2647,    -1,    -1,    -1,    -1,  2930,  2931,
      -1,    -1,    -1,    -1,  3118,    -1,    -1,    35,   312,  2941,
    2664,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,   327,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,   363,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3201,  3202,   393,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   407,    -1,    -1,    -1,    -1,    -1,    -1,
     414,  3225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,    -1,    -1,
      -1,    -1,   485,    -1,    -1,   488,   489,   490,    -1,   492,
     493,   494,   495,   496,   497,  3259,    -1,    -1,   176,   502,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,  2825,  2826,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,  2851,  2852,    -1,
      -1,    -1,    -1,  2857,    -1,    -1,   234,    -1,  2862,    -1,
    2864,  2865,  2866,    -1,    -1,  2869,    -1,    -1,  2872,  2873,
      -1,    -1,    -1,  2877,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,  2908,    -1,    -1,    -1,    -1,    -1,
    2914,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2927,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2954,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2980,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3002,  3003,
    3004,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3020,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3029,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3073,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3090,    -1,    -1,  3093,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,  3113,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3138,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    37,  3178,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,  3228,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,   493,
      -1,    -1,    -1,    -1,    -1,   499,    -1,   501,   502,    -1,
      -1,    -1,   506,   507,   508,   509,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,    -1,    -1,    -1,   492,   493,   494,    -1,    -1,
      -1,    -1,   499,    -1,   501,   502,    -1,    -1,    -1,   506,
     507,   508,   509,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,    -1,   487,    -1,    -1,
      -1,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,   499,
      -1,   501,    -1,    -1,    -1,    -1,   506,   507,   508,   509,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,   499,    -1,   501,    -1,
      -1,    -1,    -1,   506,   507,   508,   509,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
      36,    37,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,
      -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,    -1,
     506,   507,   508,   509,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,    -1,
      -1,    -1,    -1,   492,   493,   494,    -1,    -1,    -1,    -1,
     499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,   508,
     509,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,
     492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,
      -1,    -1,    -1,    -1,   506,   507,   508,   509,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,    -1,    -1,    -1,    -1,   492,   493,   494,
      -1,    -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,
      -1,   506,   507,   508,   509,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,    -1,
      -1,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,
     508,   509,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,
      -1,   492,   493,    -1,    -1,    -1,    -1,    -1,   499,    -1,
     501,    -1,    -1,    -1,    -1,   506,   507,   508,   509,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,   493,
      -1,    -1,    -1,    -1,    -1,   499,    -1,   501,   502,    -1,
      -1,    -1,   506,   507,   508,   509,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,
      -1,    -1,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,
     507,   508,   509,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,
      -1,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,   499,
      -1,   501,   502,    -1,    -1,    -1,   506,   507,   508,   509,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,   499,    -1,   501,    -1,
      -1,    -1,    -1,   506,   507,   508,   509,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,   458,    -1,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,
      -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,    -1,
     506,   507,   508,   509,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,    -1,    -1,    -1,
      -1,    -1,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
     499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,   508,
     509,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,
     492,   493,    -1,    -1,    -1,    -1,    -1,   499,    -1,   501,
      -1,    -1,    -1,    -1,   506,   507,   508,   509,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,    -1,    -1,    -1,    -1,    -1,    -1,   492,   493,    -1,
      -1,    -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,
      -1,   506,   507,   508,   509,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,    -1,
      -1,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,
     508,   509,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,
      -1,   492,   493,    -1,    -1,    -1,    -1,    -1,   499,    -1,
     501,    -1,    -1,    -1,    -1,   506,   507,   508,   509,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,   493,
      -1,    -1,    -1,    -1,    -1,   499,    -1,   501,    -1,    -1,
      -1,    -1,   506,   507,   508,   509,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,
      -1,    -1,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,
     507,   508,   509,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,
      -1,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,   499,
      -1,   501,    -1,    -1,    -1,    -1,   506,   507,   508,   509,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,   499,    -1,   501,    -1,
      -1,    -1,    -1,   506,   507,   508,   509,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,
      -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,    -1,
     506,   507,   508,   509,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
     499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,   508,
     509,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     492,   493,    -1,    -1,    -1,    -1,    -1,   499,    -1,   501,
      -1,    -1,    -1,    -1,   506,   507,   508,   509,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,   493,    -1,
      -1,    -1,    -1,    -1,   499,    -1,   501,    -1,    -1,    -1,
      -1,   506,   507,   508,   509,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,    -1,
      -1,   499,    -1,   501,    -1,    -1,    -1,    -1,   506,   507,
     508,   509,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,    -1,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,    -1,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   492,   493,     3,    -1,    -1,    -1,    -1,   499,    -1,
     501,    -1,    -1,    -1,    -1,   506,   507,   508,   509,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,    -1,   423,    -1,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,   502,    -1,    -1,   505,    38,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,   235,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,    -1,   289,   290,   291,
      -1,   293,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     502,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,   288,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,    -1,   487,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,   501,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,   287,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,   442,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   501,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,   171,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,   171,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,     3,   487,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,    -1,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   501,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,    -1,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   501,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    15,    -1,   501,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,     3,    -1,
     488,   489,   490,     8,   492,   493,   494,   495,   496,   497,
      15,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,   497,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,     8,    -1,    -1,    11,    -1,    -1,    43,    15,
      16,    17,    18,    19,    20,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,     8,    -1,
      75,    11,    -1,    -1,    50,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,     8,    -1,    75,
      11,    -1,    -1,    43,    15,    16,    17,    18,    19,    20,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    75,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,   272,    -1,    -1,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,   192,    -1,    -1,   289,    -1,   197,   292,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   289,
      11,    -1,   292,    -1,    15,    16,    17,    18,    19,    20,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,     8,   382,   289,    11,
      -1,   292,    43,    15,    16,    17,    18,    19,    20,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    43,     8,    -1,    75,    11,    -1,    -1,    50,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    -1,   382,    75,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
     485,    -1,    -1,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,   497,    -1,    -1,    -1,    -1,   502,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
      -1,    -1,   488,   489,   490,   176,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,   502,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,   485,    -1,    -1,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,   497,   219,   220,
     192,    -1,   502,    -1,    -1,   197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,   485,    -1,    -1,   488,   489,   490,
     176,   492,   493,   494,   495,   496,   497,   219,   220,    -1,
      -1,   502,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,   289,    11,    -1,
     292,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,     8,    -1,   289,    11,    -1,   292,    50,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
       8,   382,    75,    11,    -1,    -1,    43,    15,    16,    17,
      18,    19,    20,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,
     382,    -1,    -1,    -1,    -1,    43,    -1,    -1,    75,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,   485,    -1,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,    -1,    -1,   192,
      -1,   502,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,    -1,    -1,   488,   489,   490,   176,
     492,   493,   494,   495,   496,   497,   219,   220,    -1,    -1,
     502,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,   234,    -1,    -1,    -1,    -1,    -1,    -1,   176,   485,
      -1,    -1,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,   219,   220,   192,    -1,   502,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,   272,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    21,    -1,   289,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    31,    -1,   234,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    58,   289,    11,    -1,   292,    -1,    15,    16,    17,
      18,    19,    20,    70,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    35,    -1,    -1,
      -1,   289,    -1,    -1,   292,    43,    93,    -1,    95,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   151,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     167,    -1,    -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,    -1,    -1,   488,   489,   490,   176,   492,
     493,   494,   495,   496,   497,    -1,    -1,    -1,    -1,   502,
     237,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,
      -1,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
     497,   219,   220,    -1,    -1,   502,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,   485,    -1,    -1,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,   497,
      -1,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   315,    -1,
      -1,   318,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
     377,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
     407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   426,
      -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,    -1,    -1,
      -1,    -1,   449,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   485,    -1,    -1,
     488,   489,   490,    -1,   492,   493,   494,   495,   496,   497,
      -1,    -1,   500,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,   287,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,     4,     5,    -1,    -1,    -1,     9,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,     3,     4,     5,    -1,    -1,
      -1,     9,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,    -1,     8,
      -1,    -1,    11,    -1,   492,   493,    15,    16,    17,    18,
      19,    20,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    35,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    43,     8,    -1,
      -1,    11,    -1,    -1,    50,    15,    16,    17,    18,    19,
      20,     8,    -1,    -1,    11,    -1,    75,    -1,    15,    16,
      17,    18,    19,    20,    -1,    35,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,
      50,    38,    -1,    -1,    -1,    -1,    43,     8,    -1,    -1,
      11,    -1,    -1,    50,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    75,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,   176,    -1,    35,
     166,    -1,    38,    -1,    -1,   171,    -1,    43,    -1,    -1,
     176,    -1,    -1,   192,    50,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,   165,    -1,    -1,    -1,    75,
     219,   220,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,   234,    -1,    -1,    -1,   176,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,   272,    -1,   176,   275,    -1,    -1,    -1,
      -1,    -1,   219,   220,   234,    -1,   272,    -1,    -1,   275,
     289,   192,    -1,   292,    -1,    -1,   197,   234,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
     176,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,   272,   192,    -1,   275,   289,
      -1,   197,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,   316,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   382,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   443,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,   485,    -1,    -1,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,   497,   485,
      -1,    -1,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   485,    -1,    -1,   488,   489,
     490,    -1,   492,   493,   494,   495,   496,   497,   485,    -1,
      -1,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
     497,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   485,    -1,    -1,   488,   489,   490,
      35,   492,   493,   494,   495,   496,   497,    -1,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
      75,    -1,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    -1,   171,    -1,    -1,    50,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,
      -1,    -1,   197,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
     176,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,   272,    -1,    -1,
     275,   197,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,   289,   166,    -1,   292,    50,    -1,
      -1,    -1,    -1,   219,   220,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,   192,    -1,    75,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,   382,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    35,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    43,    -1,   289,    -1,
      -1,   292,    -1,    50,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,    -1,     8,    -1,   197,    11,    -1,    75,    -1,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,   219,   220,    -1,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    -1,   234,    -1,    -1,    50,    -1,    -1,    -1,    -1,
     485,    -1,    -1,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,   485,
     197,    -1,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   176,    -1,    -1,   485,    -1,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,   192,    -1,    -1,
     382,     8,   197,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,   272,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    35,    -1,
      -1,    -1,   289,   415,    -1,   292,    43,    -1,    -1,   234,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,
      -1,    -1,    -1,   485,    -1,    -1,   488,   489,   490,    -1,
     492,   493,   494,   495,   496,   497,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,   382,    15,    -1,    -1,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    -1,    35,    18,    19,    20,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    35,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,   192,    75,   382,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,   485,    -1,
      -1,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
     497,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      -1,    -1,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,   289,    -1,    50,   292,    -1,   176,    -1,    -1,
     485,    -1,    -1,   488,   489,   490,    -1,   492,   493,   494,
     495,   496,   497,   192,    -1,   176,    -1,    -1,   197,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,   382,    -1,    18,    19,    20,
      -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,   272,    43,   292,   275,    -1,    -1,    -1,    -1,    50,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,
      -1,   488,   489,   490,    -1,   492,   493,   494,   495,   496,
     497,    -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,   485,    -1,    -1,   488,
     489,   490,    -1,   492,   493,   494,   495,   496,   497,    -1,
      -1,    -1,    -1,    -1,   485,    -1,   382,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,
      -1,    -1,   488,   489,   490,    -1,   492,   493,   494,   495,
     496,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,    -1,   485,    -1,    -1,   488,   489,   490,
      -1,   492,   493,   494,   495,   496,   497,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,   442,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,   287,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,   453,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    -1,    -1,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,   168,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,    -1,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
     168,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,    -1,   377,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,   435,   436,   437,
     438,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,    -1,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,    -1,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,    -1,
     176,   177,    -1,   179,    -1,    -1,    -1,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,    -1,    -1,   273,   274,   275,
     276,    -1,    -1,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,    -1,
     296,   297,   298,    -1,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,    -1,   314,   315,
     316,    -1,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,    -1,   423,    -1,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,   448,    -1,   450,    -1,   452,   453,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   481,   482,   483,   484,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,    -1,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,    -1,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,   316,    -1,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,    -1,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,    -1,   423,    -1,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,   448,
      -1,   450,    -1,   452,   453,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,    -1,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,    -1,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
      -1,   273,   274,   275,   276,    -1,    -1,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,    -1,   296,   297,   298,    -1,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,   316,    -1,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,    -1,   405,   406,    -1,   408,   409,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
      -1,   423,    -1,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,    -1,   444,   445,   446,   447,   448,    -1,   450,    -1,
     452,   453,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,    -1,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,   288,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,     4,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,    -1,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,    -1,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,    -1,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,    -1,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,    -1,   454,   455,   456,   457,   458,    -1,    -1,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,    -1,   377,   378,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,    -1,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,    -1,   454,   455,   456,   457,   458,
      -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,   429,   430,   431,   432,   433,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,    -1,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,    -1,   454,   455,   456,
     457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,    -1,   377,   378,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,    -1,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,    -1,   454,
     455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,    -1,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,    -1,
     273,   274,   275,   276,    -1,    -1,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,    -1,   296,   297,   298,    -1,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,    -1,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,    -1,
     423,    -1,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,   442,
      -1,   444,   445,   446,   447,   448,    -1,   450,    -1,   452,
     453,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,    -1,    -1,   444,   445,   446,   447,   448,   449,
     450,    -1,   452,    -1,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,    -1,    -1,
     378,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,   429,   430,   431,   432,   433,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,    -1,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,    -1,   454,   455,   456,   457,
     458,    -1,    -1,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
      -1,   377,   378,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,   429,   430,   431,   432,   433,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,    -1,   444,   445,
     446,   447,   448,   449,   450,    -1,   452,    -1,   454,   455,
     456,   457,   458,    -1,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,   429,   430,   431,   432,   433,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,    -1,
     444,   445,   446,   447,   448,   449,   450,    -1,   452,    -1,
     454,   455,   456,   457,   458,    -1,    -1,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,    -1,   436,   437,   438,   439,   440,   441,
      -1,    -1,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,    -1,   454,   455,   456,   457,   458,    -1,    -1,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,   316,    -1,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,    -1,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,    -1,   403,    -1,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
     420,   421,    -1,   423,    -1,    -1,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,    -1,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,   457,   458,    -1,
      -1,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,    -1,   307,   308,   309,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,   429,   430,   431,   432,
     433,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
      -1,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
      -1,   454,   455,   456,   457,   458,    -1,    -1,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,   318,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,   407,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   444,    -1,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    31,    33,    34,    44,    49,    58,    70,    81,
      93,    95,   113,   127,   128,   137,   143,   151,   153,   154,
     167,   171,   196,   211,   237,   315,   318,   347,   356,   370,
     377,   381,   391,   403,   407,   426,   441,   444,   449,   463,
     487,   501,   513,   514,   515,   516,   533,   536,   537,   538,
     539,   540,   542,   543,   595,   596,   744,   745,   748,   749,
     752,   759,   760,   808,   809,   812,   814,   817,   824,   828,
     835,   838,   840,   851,   853,   855,   858,   863,   870,   871,
     872,   876,   878,   884,   886,   888,   890,   893,   894,   895,
     896,   900,   916,   420,   466,   852,   200,   363,   371,   407,
     455,   110,   810,   852,     3,    21,    22,    23,    24,    25,
      26,    27,    28,    30,    31,    32,    40,    41,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      56,    57,    58,    59,    60,    61,    64,    65,    66,    67,
      68,    70,    71,    72,    73,    74,    76,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    89,    90,    91,
      92,    93,    94,    96,    97,    98,    99,   100,   101,   102,
     103,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   118,   120,   121,   122,   123,   124,   125,   127,
     128,   129,   130,   131,   134,   135,   136,   137,   138,   140,
     141,   142,   144,   145,   146,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   160,   162,   163,   164,
     165,   167,   169,   170,   172,   173,   174,   175,   176,   177,
     179,   181,   182,   183,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   198,   199,   200,   201,
     202,   203,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   216,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   231,   232,   233,   234,   236,   237,
     238,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   273,   274,   275,   276,   278,   279,   280,   281,
     282,   283,   285,   286,   289,   290,   291,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   322,   323,   324,   325,   326,   327,   329,
     330,   331,   332,   333,   334,   335,   336,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     405,   406,   408,   409,   410,   411,   412,   413,   414,   416,
     417,   420,   421,   422,   423,   424,   426,   427,   428,   429,
     430,   431,   432,   433,   436,   437,   438,   439,   440,   441,
     442,   444,   445,   446,   447,   448,   449,   450,   452,   453,
     454,   455,   456,   457,   458,   461,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   655,   728,   732,
     735,   917,   918,   919,     3,   175,   246,   400,   732,   885,
     917,   852,    52,   501,   528,     5,   110,   177,   238,   292,
     363,   411,   413,   429,   435,   438,   731,   806,   839,   869,
       5,    29,   318,   726,   732,   733,   110,   810,    23,    76,
      92,   110,   146,   156,   168,   173,   200,   245,   249,   312,
     327,   360,   363,   371,   374,   393,   407,   414,   423,   429,
     455,   829,   830,   833,   852,   726,    95,   453,   501,   516,
     533,   536,   537,   744,   745,   748,   752,   759,   760,   812,
     814,   820,   824,   828,   835,   840,   851,   853,   855,   858,
     863,   872,   876,   878,   884,   886,   888,   890,   894,   895,
     896,   110,    70,   211,    63,    74,    76,   100,   101,   102,
     103,   104,   105,   106,   158,   229,   239,   240,   278,   288,
     299,   313,   359,   376,   402,   422,   424,   428,   442,   449,
     501,   538,   596,   598,   600,   601,   608,   609,   655,   657,
     658,   723,   732,   733,   110,   731,   732,   887,   887,   732,
     726,    29,   416,   420,   534,   535,   732,   750,   852,    29,
     132,   551,   552,   177,   238,   363,   375,   416,   750,   879,
     880,   852,   537,   543,   732,   751,   608,   732,   407,   548,
     723,   172,   501,   860,   501,   335,   544,   545,   726,   544,
     538,   539,     0,   504,   147,   215,   293,   434,   554,   555,
     538,   540,   542,   505,    29,   416,   420,   537,   751,   453,
     818,   122,   210,   440,   190,   723,   726,   190,   723,   190,
     608,   190,   723,   731,   501,   499,   503,   707,   709,   537,
     723,   190,   723,   411,   413,   411,   413,   345,   190,   723,
     723,   173,   245,   335,   371,   407,   455,   891,   110,   200,
      29,   726,   190,     3,   251,   423,   109,   407,   407,   455,
     366,     3,    46,    51,    52,    53,    54,    66,    67,    76,
      78,    84,    96,   100,   101,   102,   103,   106,   114,   115,
     136,   164,   170,   172,   176,   190,   192,   206,   213,   214,
     216,   219,   220,   222,   232,   234,   246,   265,   266,   267,
     275,   280,   296,   298,   314,   332,   354,   358,   376,   378,
     382,   385,   400,   409,   416,   417,   428,   434,   442,   450,
     453,   619,   621,   623,   625,   627,   629,   631,   632,   633,
     635,   636,   637,   639,   640,   736,   834,   917,   920,   190,
     732,   737,   831,   190,   724,   726,   190,   726,   501,   813,
     292,   820,     3,    46,    50,    51,    52,    53,    54,    66,
      67,    74,    76,    78,    84,    96,   100,   101,   102,   103,
     106,   114,   115,   152,   158,   164,   170,   172,   175,   176,
     181,   182,   192,   206,   207,   213,   214,   216,   219,   220,
     222,   232,   234,   246,   265,   266,   267,   271,   275,   278,
     280,   295,   296,   298,   299,   313,   314,   317,   332,   354,
     358,   376,   378,   382,   385,   400,   402,   409,   416,   417,
     422,   424,   428,   442,   449,   450,   453,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   821,   823,
     824,   826,   827,   917,   921,   818,   731,   732,   885,   887,
     501,   501,   166,   501,   501,   501,   538,   609,   501,   501,
     501,   501,   723,   501,   501,   171,   501,   501,   501,   501,
     538,   596,   600,   601,    38,   602,   603,   732,   602,   370,
     505,   541,    96,   172,   206,   222,   232,   266,   314,   354,
     605,   603,    38,   602,   604,   732,   487,   613,   494,   709,
     731,   490,   501,   501,   856,   484,   221,   503,   287,     4,
       6,     7,     8,     9,    10,    37,    51,    53,    54,    62,
      66,    67,    78,   114,   115,   117,   152,   159,   164,   181,
     182,   213,   214,   216,   265,   267,   272,   277,   280,   289,
     332,   358,   385,   416,   417,   425,   450,   485,   492,   493,
     494,   499,   501,   506,   507,   508,   509,   538,   585,   624,
     627,   630,   631,   632,   634,   635,   636,   639,   640,   651,
     653,   654,   655,   656,   658,   659,   673,   674,   681,   701,
     706,   713,   714,   715,   728,   729,   730,   731,   732,   712,
     714,   879,   879,   731,   879,   484,   171,   418,   490,   503,
     709,   608,   873,     3,   170,   172,   453,   824,   859,   861,
     170,   862,   651,   685,   686,   732,   544,   505,   501,   739,
     502,   502,   515,    29,   132,   549,   549,    56,   549,   161,
     166,   235,   284,   560,   562,   563,   588,   590,   591,   592,
     554,   555,   501,   484,   221,   723,   171,   292,   903,   873,
     152,    25,    31,   137,   291,   343,   347,   377,   446,   845,
     848,   849,   343,   152,    38,    57,   108,   199,   250,   258,
     270,   301,   343,   349,   371,   377,   391,   753,   756,   848,
     152,   343,   377,   848,   152,   343,   377,   848,    38,   811,
       3,    29,    46,    52,    76,    78,    84,    96,   100,   101,
     102,   103,   106,   132,   170,   172,   175,   176,   192,   206,
     219,   220,   222,   232,   234,   246,   266,   275,   296,   298,
     314,   354,   376,   382,   400,   409,   428,   442,   451,   453,
     494,   502,   651,   688,   689,   734,   740,   917,   922,   651,
     708,     3,    29,    33,    34,    35,    36,    37,    38,    39,
      42,    55,    62,    63,    69,    75,    77,    88,    95,   104,
     105,   117,   119,   126,   132,   133,   139,   143,   147,   159,
     161,   166,   168,   171,   178,   180,   184,   197,   204,   215,
     217,   229,   230,   235,   239,   240,   272,   277,   284,   287,
     288,   292,   293,   310,   321,   328,   337,   351,   370,   387,
     404,   407,   415,   418,   419,   425,   434,   435,   443,   449,
     451,   459,   460,   462,   463,   727,   741,   917,   921,   923,
     707,   502,   501,   795,   272,   171,   110,   806,   272,   815,
      38,   455,   190,   723,   190,   723,   747,   190,   723,   190,
     723,   723,    84,   866,   152,   467,    85,   129,   304,   412,
     452,   638,   638,   638,   501,   626,   626,   317,   501,   628,
     152,   501,    66,    67,   638,   626,   623,   465,   487,   501,
     641,   501,   641,   501,   501,    37,   622,   501,   111,   112,
     187,   188,   252,   253,   254,   255,   256,   257,   260,   261,
     367,   368,   481,   482,   501,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   626,    60,   350,   505,   832,   152,
     503,   738,   505,   832,   152,   505,   832,   152,   287,   686,
     345,   502,   505,     4,   159,   287,   425,   492,   493,   730,
     731,   755,   758,   819,   821,   822,   825,   820,   501,   523,
     527,   418,   651,   686,   501,   730,   730,     3,   642,   643,
     644,   645,   646,   647,   648,   649,   691,   692,   731,   603,
     604,   730,   730,   651,   723,   651,   693,   492,   493,   652,
     653,   674,   681,   695,   501,   651,   685,   696,   651,    55,
     171,   230,   419,   651,   686,   699,   651,   502,   733,   409,
     568,   569,   501,   569,   551,   552,   600,   217,   546,   222,
     296,   606,   600,   606,   222,   605,   222,   606,   222,   569,
     501,   733,   569,   501,   294,   755,   825,   881,   883,   688,
     621,   690,    38,   233,   732,   501,   499,   538,   651,   705,
     501,   538,   651,   501,   501,   651,   651,   651,   148,   716,
     717,   651,   686,   687,   538,   651,   685,     9,     3,   743,
     675,   676,   677,   733,   709,   501,   731,   501,   730,   731,
       3,     8,    11,    15,    16,    17,    18,    19,    20,    35,
      38,    43,    50,    75,   176,   192,   197,   219,   220,   234,
     272,   275,   289,   292,   382,   485,   488,   489,   490,   492,
     493,   494,   495,   496,   497,   679,   680,   681,   683,   710,
     464,   660,   298,   651,   505,   546,   501,   731,   710,   503,
     709,   546,     3,   117,   238,   640,   731,   755,   882,    99,
     117,   883,   117,   883,   732,    38,   732,   502,   505,   818,
     505,   502,   545,   724,   725,    38,   540,   540,    29,   494,
     556,   557,   651,    56,   540,   550,   163,   269,   576,   224,
     270,   331,   380,   440,     4,     9,    29,   571,   651,   492,
     493,   572,   573,   651,   653,   588,   589,   563,   562,   560,
     561,   166,   591,   282,   593,   560,   588,   686,   233,   739,
     873,   191,   345,   217,   377,   723,    69,    77,    88,   168,
     190,   321,   435,   732,   777,   787,   802,    77,    88,   854,
      88,   854,   501,   418,   501,   775,   244,   438,   775,    88,
     505,   418,   723,   623,   755,    56,   757,   755,   755,   108,
     250,   258,    56,   418,   463,   487,   754,   263,   363,   754,
     756,   608,    88,   418,   854,   363,   723,   418,   363,   732,
     523,   688,   688,   689,   502,   505,   554,   555,    13,    14,
     500,   511,   418,   732,   794,   799,   463,   526,   152,   731,
     723,   335,   407,   455,   891,   152,    95,   760,   816,   863,
     876,   888,   144,   621,   723,   272,   753,   889,   272,   501,
     795,    38,   272,   795,   272,   501,   892,   190,   732,   789,
     867,     3,   501,   687,   730,   834,   690,   638,   638,    37,
     622,   416,   416,   730,   730,   618,   732,   618,   499,   499,
     730,   730,   418,   418,   418,   418,   621,   831,   727,   503,
     737,   724,   726,   726,   737,   502,   820,   826,     4,   730,
       4,   730,   525,   532,   741,    52,    97,   123,   141,   145,
     167,   170,   185,   277,   285,   306,   329,   529,   731,    38,
     502,   651,   502,   502,   502,   171,   502,   502,   505,   502,
     310,   694,   502,   652,   652,    11,    15,    18,    19,    20,
     197,   219,   289,   488,   489,   490,   492,   493,   494,   495,
     496,   497,   681,   652,   502,   610,   611,   657,   166,   171,
     697,   698,   505,   502,    38,   699,   686,   699,   699,   171,
     502,    38,   602,   501,     4,     9,   564,   566,   567,   732,
     725,   714,   712,   177,   238,   407,   411,   413,   438,   547,
     723,   460,   614,   600,   287,   443,   607,   600,   222,   600,
     600,   615,   616,   733,   501,   615,   733,   505,   502,   505,
     502,   505,   537,   857,   872,   895,   896,   686,   687,   459,
     702,   703,   494,   731,     8,    15,    18,    19,    20,   488,
     489,   490,   492,   493,   494,   495,   496,   497,   679,   684,
     732,   502,   686,   501,   732,   345,   721,   166,   500,   502,
     505,   505,   510,   511,   686,   651,   650,   650,   621,   651,
     651,   651,   651,   651,   651,   651,     5,   741,   742,   416,
      42,   404,   711,   737,   651,   651,   501,   538,   700,   132,
     159,   272,   277,   282,   425,   436,   651,   277,   501,   651,
     418,    50,   176,   192,   197,   234,   382,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,    29,    36,   387,
     678,   707,   180,   162,   661,   358,   501,   674,   715,   171,
     597,   688,   494,   597,   501,   731,   732,   723,   859,   723,
     916,   651,   505,   502,   501,    39,   126,   558,   558,   505,
     443,   558,   263,   540,   358,   359,   492,   493,   573,   575,
     653,   380,   224,   288,   309,   309,   505,   496,     4,   574,
     730,   574,   358,   359,   575,   722,   723,   276,   384,   594,
     589,   561,   502,   443,   875,   723,   898,   501,   732,   902,
     912,   913,   915,   343,   848,   501,   190,   787,   726,   224,
     272,   224,   443,   501,   780,   620,   621,   726,   732,   190,
     726,   190,   732,    25,   137,   377,   741,   771,   785,   844,
     847,   726,   741,   779,   798,   726,   845,   726,   343,   377,
     753,   848,   755,   737,   726,   755,   737,   726,   755,   343,
     377,   848,   726,   726,   726,   726,   343,   377,   848,   726,
     726,   554,   554,   554,   451,   689,   191,   348,   553,   651,
     651,   651,   708,   326,   522,   502,   505,   285,   171,   418,
     517,   723,   171,   455,   723,   747,   723,   723,   723,   292,
     806,   501,   538,   501,   152,   152,   234,   732,   777,   787,
     790,   793,   803,   805,   463,   465,   782,   151,   537,   152,
     463,   868,   152,   502,   688,    38,   272,   287,   686,   502,
     502,   832,   502,   499,   484,   484,   502,   502,   502,   505,
     621,   502,   730,   500,   730,   502,   502,   643,   645,   646,
     647,   646,   647,   647,   832,   727,   832,   287,   832,   502,
     505,   494,   501,   524,   755,   825,    38,   521,   731,   521,
     272,   277,   329,   521,    56,   521,   523,   621,   502,   651,
     651,   651,   697,   621,   652,   652,   652,   652,   652,   132,
     272,   282,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,   502,   505,    38,   612,   651,   651,   698,   697,
     621,   502,   502,   502,   686,   621,   725,   309,   496,   309,
     359,   496,   501,   501,   502,   546,   411,   413,   411,   413,
     723,   548,   548,   548,   651,   180,   577,   651,   501,   600,
     607,   502,   505,   621,   615,   502,   881,   621,   502,   500,
     651,   139,   703,   704,   717,   502,   502,   503,   502,   725,
     501,   651,   718,   732,   651,   675,   651,   502,   502,   484,
     652,   652,   145,   686,   171,   132,   159,   277,   282,   425,
     436,   501,   145,   684,   651,   404,   711,   651,   700,   651,
     418,   501,   538,   501,   501,   155,   662,   598,   599,   614,
     554,   717,   614,   730,   650,   739,   857,   486,   559,   559,
     557,   289,   679,   682,   559,     4,   730,   575,   288,   440,
     572,   505,   243,   599,   460,   874,    38,   117,   300,   501,
     537,   897,   908,   915,   710,   505,   597,   490,   418,   651,
     272,   802,   501,   152,   501,   780,   200,   799,   800,   761,
      38,   175,   770,   796,   761,    25,   137,   347,   349,   377,
     841,   842,   843,   849,   850,   152,   832,   152,   832,   771,
     785,   771,   731,   764,   502,   505,   490,   503,   502,   505,
     418,   363,    88,   418,   854,   363,   418,   418,   418,   363,
     553,   553,   553,   689,   279,   279,   502,   500,   394,   395,
     531,   731,   794,   522,   171,   731,   723,   501,    38,   795,
     892,   815,   345,   407,   731,   836,   837,   799,   723,   723,
     747,   723,   502,   505,   285,   775,   285,   287,   774,   726,
     463,   746,   723,   775,    38,   723,   502,   407,   651,   152,
     723,   502,   622,   730,   641,   641,   622,   732,   622,   500,
     500,   737,   525,   519,   530,   825,   731,   731,   277,   799,
     494,   799,   731,   494,   799,   731,   502,   502,   698,   171,
     132,   282,   501,   613,   610,   501,   502,   502,   502,   732,
     564,   614,   548,   548,   548,   548,   723,   723,   723,    56,
     184,   586,   725,   616,    75,   617,   502,   415,   651,   143,
     721,   684,   502,   651,   718,   719,   720,    38,   197,   502,
     650,   651,    35,    35,   651,   502,   651,   171,   501,   690,
     651,   502,   145,   652,   652,   145,   145,   651,   651,   555,
     460,   651,   297,   666,   505,   577,   553,   721,   577,   502,
     502,   163,   228,   501,   559,   288,   723,   651,   351,   906,
     732,   449,   406,   442,   907,   732,   901,   911,   287,   904,
     502,   505,   902,   874,   651,   726,   502,   152,   800,   787,
     800,   761,   789,   505,   502,   119,   204,   270,   272,   786,
     501,    32,    56,   807,   796,    69,    75,    88,   117,   119,
     204,   272,   277,   321,   337,   435,   443,   766,   767,   781,
     175,   117,   189,   272,   775,   754,   109,   117,   175,   272,
     393,   396,   756,   775,   377,   843,   429,   726,   732,   847,
       3,    46,    52,    76,    78,    84,    96,   100,   101,   102,
     103,   106,   170,   172,   175,   176,   192,   206,   219,   220,
     222,   232,   234,   246,   266,   271,   275,   289,   296,   298,
     314,   354,   376,   378,   382,   400,   409,   428,   434,   442,
     453,   492,   493,   621,   682,   731,   734,   755,   762,   801,
     917,   923,   741,   798,   726,   726,   726,   726,   726,   726,
     726,   726,   726,   726,   502,   502,   502,   554,   754,   531,
     731,   501,   793,   537,   868,    38,   806,   190,   723,   502,
     505,   502,   889,   501,    38,   784,   782,   790,    81,   813,
     109,   270,   795,   537,   892,   537,   789,   443,   865,   500,
     621,   832,   502,   505,   799,   652,   171,   501,   690,   615,
     502,   505,   502,   577,   723,   723,   723,   723,    29,    98,
     181,   357,   494,   501,   578,   579,   580,   581,   582,   583,
     584,   651,   651,   462,   663,   502,   737,   651,   502,   505,
     502,   732,   651,   653,   651,   651,   651,   690,   502,   651,
      35,    35,   651,   651,   145,   502,   502,   651,   502,   501,
     667,   732,   586,   502,   586,   731,   684,   713,   448,   710,
     502,   505,    86,   906,   490,   915,   906,   761,   787,   502,
     502,   463,   792,   120,   193,   202,   119,   445,   651,   117,
      38,   501,   737,   726,   652,   120,   193,   119,   277,   224,
     723,   792,    83,   807,   190,   277,   755,   651,   807,   277,
     492,   493,   758,   732,   621,   832,   832,   246,   400,   734,
     738,   490,   418,   418,   553,   523,   443,   518,   520,   799,
     502,   746,    38,   407,   651,   407,   272,   501,   731,   868,
     793,   151,   537,   149,   198,   774,   122,   137,   320,   746,
     109,   868,   463,   877,    38,   287,   732,   864,   501,   530,
     652,   690,   502,   502,     9,   344,   570,   586,   501,   379,
     501,   502,   505,   664,   665,   732,   328,   587,   718,   500,
     190,   502,   651,   651,   651,   502,   668,   732,   663,   731,
     663,   502,   505,   537,   300,   537,   901,   287,   501,   899,
     651,   337,   792,   501,   783,   761,   502,   189,   501,   651,
     272,   767,   792,   795,   726,    38,   152,   617,   738,   496,
     762,   726,   726,   502,   754,   124,   502,   782,   537,   537,
     723,   152,    38,   502,   726,   746,    29,    80,    89,   118,
     189,   201,   393,   396,   778,   778,   359,   359,    38,    61,
      69,   238,   407,   651,   723,   501,   657,   732,   905,   914,
     502,   502,   501,   663,   686,   501,   686,   580,   505,    38,
     651,   443,   565,   651,   306,   669,   587,   587,   907,    88,
     914,   133,   723,   761,   741,   788,   791,   397,   457,   768,
     769,   501,   763,   651,   502,   248,   804,   189,   443,   846,
     496,   429,   523,   731,   868,   774,   877,   501,   723,   537,
     782,   813,   537,    69,   290,    69,   537,   865,   651,    75,
     909,   909,   502,   505,     9,   587,   502,   579,   502,   665,
     667,   361,   500,    56,   554,   565,   565,   448,   726,   502,
     273,   440,   795,   490,   502,   505,   753,   502,   270,   776,
     172,   305,   383,   287,   772,   773,   797,   763,   651,   429,
      38,   501,   877,   774,   746,   877,   290,   290,   501,   502,
     737,   737,   910,   910,   868,   905,   502,   565,   502,   567,
     685,   330,   359,   670,   537,   614,   377,   804,   762,   791,
     502,   769,   202,   122,   440,   287,   797,   287,   772,   537,
     914,   909,   558,   558,   614,    50,    99,   431,   651,   671,
     672,   671,   502,   913,   773,    60,   270,   350,   377,   765,
     765,   877,   502,   910,   559,   559,   672,   358,   165,   316,
     165,   316,   614,   761,    24,   117,   277,   868,   558,    35,
     614,   559,   672
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   512,   513,   514,   514,   515,   515,   515,   515,   515,
     515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
     515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
     515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
     515,   515,   515,   515,   516,   516,   517,   517,   518,   518,
     519,   519,   520,   520,   521,   521,   522,   522,   523,   523,
     524,   524,   524,   524,   524,   525,   526,   526,   527,   527,
     528,   528,   529,   529,   529,   529,   529,   529,   529,   529,
     529,   529,   529,   529,   529,   529,   529,   529,   530,   531,
     531,   531,   532,   532,   533,   534,   534,   535,   535,   535,
     536,   537,   537,   538,   538,   539,   539,   539,   539,   539,
     539,   539,   539,   540,   540,   541,   541,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,   543,   543,   543,
     544,   544,   545,   546,   546,   547,   547,   547,   547,   547,
     547,   547,   547,   547,   548,   548,   549,   549,   549,   550,
     551,   551,   552,   552,   553,   553,   553,   554,   554,   555,
     555,   555,   556,   556,   557,   557,   558,   558,   558,   559,
     559,   559,   560,   560,   560,   560,   561,   561,   562,   562,
     562,   562,   563,   563,   564,   564,   564,   564,   564,   564,
     565,   565,   566,   566,   567,   567,   567,   567,   568,   569,
     569,   570,   570,   571,   571,   571,   571,   571,   572,   573,
     573,   573,   574,   574,   575,   575,   576,   576,   577,   577,
     577,   577,   578,   578,   579,   579,   580,   580,   580,   580,
     580,   581,   582,   583,   584,   585,   585,   586,   586,   587,
     587,   588,   588,   589,   589,   590,   590,   591,   592,   592,
     592,   592,   593,   593,   594,   594,   594,   595,   595,   596,
     596,   597,   597,   598,   598,   599,   599,   600,   600,   600,
     600,   600,   600,   600,   600,   601,   601,   601,   601,   601,
     601,   601,   602,   602,   602,   602,   603,   603,   604,   604,
     604,   604,   604,   605,   605,   605,   605,   606,   606,   607,
     607,   608,   608,   608,   608,   609,   609,   610,   611,   611,
     612,   612,   613,   613,   614,   614,   615,   615,   616,   617,
     617,   618,   618,   619,   619,   620,   620,   621,   621,   621,
     621,   621,   621,   621,   621,   621,   622,   622,   622,   623,
     623,   623,   623,   623,   623,   623,   624,   624,   624,   624,
     625,   626,   626,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   628,   628,   629,   629,   630,   630,
     631,   632,   633,   633,   634,   634,   635,   636,   637,   637,
     637,   637,   637,   637,   638,   638,   639,   639,   639,   639,
     640,   641,   641,   641,   642,   642,   643,   643,   644,   644,
     645,   645,   646,   646,   647,   647,   648,   648,   649,   649,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   652,   652,   652,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,   654,   654,   654,   654,   654,   655,   655,
     655,   655,   655,   655,   655,   656,   656,   657,   657,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   658,   658,
     658,   658,   658,   658,   658,   658,   658,   658,   659,   659,
     660,   660,   661,   661,   661,   662,   662,   663,   663,   664,
     664,   665,   666,   666,   666,   667,   668,   668,   669,   669,
     670,   670,   670,   671,   671,   672,   672,   672,   672,   672,
     673,   673,   674,   674,   675,   676,   676,   677,   677,   678,
     678,   678,   679,   679,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   681,   681,   682,
     682,   683,   683,   683,   683,   683,   683,   683,   683,   684,
     684,   685,   685,   686,   686,   687,   687,   688,   688,   689,
     689,   689,   690,   690,   691,   691,   692,   692,   692,   692,
     692,   692,   692,   692,   692,   692,   693,   693,   694,   695,
     695,   696,   696,   696,   696,   696,   696,   697,   698,   699,
     699,   699,   700,   700,   701,   702,   702,   703,   704,   704,
     705,   705,   706,   706,   707,   707,   707,   708,   708,   709,
     709,   710,   710,   711,   711,   712,   712,   713,   713,   714,
     714,   715,   715,   715,   715,   715,   716,   716,   717,   717,
     718,   719,   719,   720,   720,   721,   721,   721,   722,   722,
     723,   723,   724,   724,   725,   725,   726,   727,   728,   728,
     729,   729,   729,   729,   729,   729,   729,   729,   729,   729,
     729,   729,   729,   729,   730,   731,   732,   732,   732,   733,
     733,   734,   734,   734,   735,   735,   735,   736,   736,   736,
     737,   737,   738,   738,   739,   739,   740,   741,   741,   741,
     741,   742,   742,   743,   744,   744,   744,   745,   745,   745,
     746,   746,   746,   747,   748,   748,   748,   748,   748,   748,
     748,   748,   749,   749,   750,   750,   751,   751,   752,   752,
     753,   753,   754,   754,   754,   755,   755,   755,   755,   756,
     756,   756,   756,   756,   756,   756,   756,   756,   756,   756,
     756,   756,   756,   757,   757,   758,   758,   758,   759,   759,
     759,   759,   760,   760,   760,   761,   761,   762,   762,   762,
     762,   762,   762,   763,   763,   764,   765,   765,   765,   765,
     765,   766,   766,   766,   766,   767,   767,   767,   767,   767,
     767,   767,   767,   768,   768,   769,   769,   770,   770,   770,
     771,   772,   773,   773,   773,   773,   773,   774,   774,   774,
     774,   775,   776,   776,   777,   777,   778,   778,   778,   778,
     778,   778,   778,   778,   779,   779,   780,   781,   781,   781,
     781,   782,   782,   782,   782,   783,   784,   784,   784,   785,
     786,   786,   786,   786,   786,   786,   787,   787,   788,   788,
     789,   790,   790,   790,   791,   791,   792,   792,   793,   793,
     793,   794,   795,   795,   796,   796,   797,   798,   798,   798,
     798,   799,   799,   800,   800,   801,   801,   801,   802,   802,
     802,   802,   802,   802,   803,   803,   804,   804,   804,   804,
     805,   806,   806,   806,   806,   806,   806,   806,   806,   807,
     807,   808,   809,   809,   810,   810,   811,   811,   812,   812,
     812,   813,   813,   814,   814,   815,   815,   816,   816,   816,
     816,   817,   817,   817,   817,   818,   818,   819,   819,   819,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     820,   820,   820,   820,   820,   820,   820,   820,   820,   820,
     821,   821,   821,   822,   822,   823,   823,   824,   824,   825,
     825,   825,   825,   826,   827,   827,   828,   828,   828,   828,
     828,   828,   828,   828,   829,   829,   829,   829,   829,   829,
     829,   829,   829,   829,   829,   829,   829,   829,   829,   829,
     829,   829,   830,   830,   830,   830,   830,   830,   831,   831,
     832,   832,   832,   833,   833,   833,   834,   834,   835,   835,
     835,   836,   836,   837,   837,   838,   838,   838,   838,   838,
     838,   838,   839,   840,   840,   840,   840,   840,   840,   840,
     840,   841,   841,   842,   842,   843,   843,   843,   843,   844,
     844,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     846,   846,   847,   847,   847,   847,   848,   848,   849,   850,
     850,   850,   851,   851,   851,   851,   851,   851,   852,   852,
     852,   853,   853,   853,   853,   853,   853,   853,   853,   853,
     853,   853,   853,   853,   854,   854,   855,   856,   856,   857,
     857,   857,   857,   858,   858,   858,   858,   858,   859,   859,
     859,   859,   859,   860,   860,   861,   861,   862,   862,   863,
     863,   864,   865,   865,   866,   866,   867,   867,   868,   868,
     869,   869,   870,   870,   871,   872,   872,   873,   873,   873,
     874,   874,   875,   875,   876,   876,   876,   876,   876,   877,
     877,   877,   877,   878,   878,   878,   878,   879,   879,   879,
     879,   880,   880,   880,   880,   881,   881,   882,   882,   882,
     882,   882,   882,   882,   883,   883,   884,   884,   885,   885,
     886,   886,   886,   887,   887,   888,   888,   889,   889,   890,
     890,   890,   890,   890,   890,   891,   891,   892,   892,   893,
     894,   894,   894,   894,   894,   894,   895,   896,   897,   897,
     897,   897,   897,   898,   898,   899,   899,   899,   900,   900,
     901,   902,   902,   903,   903,   903,   904,   904,   904,   905,
     905,   905,   906,   906,   907,   907,   908,   908,   909,   909,
     910,   910,   911,   911,   912,   912,   913,   913,   914,   914,
     915,   916,   916,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     917,   917,   917,   917,   917,   917,   917,   917,   917,   917,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   918,   918,   918,   918,   918,   918,
     918,   918,   918,   918,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   921,   921,   921,
     921,   921,   921,   921,   921,   921,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   922,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   923
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,    11,     9,     1,     1,     3,     0,
       1,     3,     1,     0,     1,     0,     1,     0,     1,     3,
       1,     1,     1,     3,     0,     2,     2,     0,     2,     0,
       1,     0,     1,     1,     1,     3,     3,     1,     1,     3,
       3,     3,     3,     3,     3,     4,     3,     2,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     2,     3,
       2,     1,     1,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,     3,     0,    11,    11,    10,
      12,     1,     2,     5,     4,     4,     4,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,
       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,
       5,     5,     1,     3,     4,     3,     1,     1,     0,     2,
       2,     0,     2,     2,     1,     1,     1,     0,     2,     4,
       5,     4,     2,     3,     2,     2,     2,     2,     1,     2,
       3,     0,     1,     0,     5,     1,     4,     6,     2,     1,
       0,     4,     0,     1,     1,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     0,     1,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     4,     4,     5,     1,     1,     2,     0,     2,
       0,     1,     3,     1,     0,     1,     2,     3,     2,     4,
       2,     3,     2,     0,     1,     2,     0,     4,     5,     1,
       2,     2,     0,     1,     3,     1,     2,     3,     3,     3,
       3,     3,     3,     1,     4,     3,     4,     5,     4,     5,
       4,     4,     5,     2,     4,     1,     1,     0,     1,     4,
       5,     4,     0,     2,     2,     2,     1,     1,     0,     4,
       2,     1,     2,     2,     4,     2,     6,     2,     1,     3,
       4,     0,     2,     0,     2,     0,     1,     3,     3,     2,
       0,     2,     4,     1,     1,     1,     0,     2,     3,     5,
       6,     2,     3,     5,     5,     5,     3,     4,     0,     1,
       1,     1,     1,     1,     2,     4,     1,     1,     1,     1,
       2,     3,     0,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     3,     0,     1,     1,     1,     1,
       5,     2,     1,     1,     1,     1,     4,     1,     2,     2,
       1,     3,     3,     2,     1,     0,     5,     2,     5,     2,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     3,
       2,     2,     3,     3,     5,     4,     6,     3,     5,     4,
       6,     4,     6,     5,     7,     3,     2,     4,     3,     2,
       3,     3,     3,     3,     4,     3,     4,     3,     4,     5,
       6,     6,     7,     6,     7,     6,     7,     3,     4,     4,
       6,     1,     6,     4,     1,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     2,     2,     1,     3,     1,     2,     4,     1,     1,
       2,     2,     4,     1,     1,     3,     3,     1,     3,     6,
       7,     9,     7,     7,     4,     5,     1,     1,     1,     5,
       1,     1,     4,     1,     4,     1,     4,     1,     4,     1,
       1,     1,     1,     1,     1,     6,     6,     4,     4,     4,
       4,     6,     5,     5,     5,     4,     6,     4,     7,     9,
       5,     0,     5,     4,     0,     1,     0,     2,     0,     1,
       3,     3,     2,     2,     0,     6,     1,     0,     3,     0,
       2,     2,     0,     1,     4,     2,     2,     2,     2,     2,
       4,     3,     1,     5,     3,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,
       3,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     2,     3,     5,     1,     0,     1,
       2,     0,     2,     1,     0,     1,     0,     1,     3,     1,
       2,     3,     2,     1,     3,     5,     4,     2,     1,     0,
       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,
       1,     2,     1,     3,     1,     2,     1,     1,     1,     2,
       1,     1,     2,     1,     1,     2,     7,     2,     5,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     4,     5,     7,    10,     9,
       2,     3,     0,     4,     2,     2,     2,     2,     3,     4,
       2,     1,     1,     1,     1,     3,     1,     3,     4,     6,
       1,     2,     1,     1,     0,     1,     2,     2,     1,     2,
       2,     1,     2,     3,     2,     2,     2,     2,     3,     3,
       3,     1,     3,     1,     0,     1,     2,     2,     2,     3,
       2,     3,     9,    12,    11,     0,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
       3,     2,     5,     1,     1,     1,     0,     5,     7,     5,
       2,     3,     1,     1,     2,     2,     0,     3,     4,     4,
       0,     3,     2,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     0,     3,     3,     3,     0,     1,
       2,     1,     2,     2,     2,     2,     3,     4,     1,     3,
       1,     1,     1,     1,     3,     1,     2,     0,     1,     2,
       0,     1,     3,     0,     2,     0,     3,     3,     1,     5,
       3,     1,     3,     1,     2,     1,     4,     5,     5,     6,
       3,     7,     4,    11,     1,     3,     2,     2,     2,     0,
       3,     1,     1,     2,     2,     2,     2,     1,     0,     1,
       2,     5,     3,     5,     1,     0,     2,     0,     3,     9,
      12,     3,     0,     4,     7,     2,     0,     1,     1,     1,
       1,     2,     4,     3,     5,     1,     0,     1,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     6,     8,
       5,     1,     0,     1,     3,     3,     4,     6,     5,     5,
       8,     7,     1,     4,     6,     4,     6,     4,     6,     4,
       6,     1,     2,     3,     2,     1,     3,     2,     3,     1,
       3,     2,     5,     3,     6,     4,     6,     6,     6,     5,
       5,     6,     9,     4,     5,     7,     6,     4,     8,     4,
       2,     4,     3,     6,     4,     2,     2,     2,     2,     1,
       2,     0,     1,     2,     2,     2,     1,     3,     4,     2,
       1,     0,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     6,     6,     8,     6,     8,     6,     8,     6,     8,
       8,    10,     8,    10,     1,     0,     5,     3,     0,     1,
       1,     1,     1,     4,     5,     5,     4,     6,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     0,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     4,     6,     3,     7,     3,     1,     2,     3,
       2,     0,     2,     0,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     2,     3,     3,     3,     1,     3,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     3,     2,     1,     0,
       2,     2,     3,     1,     1,     5,     8,     1,     0,     8,
      11,    10,     7,    10,     9,     1,     1,     2,     3,     2,
       6,     8,     6,     8,     6,     8,     8,     8,     1,     4,
       4,     7,     2,     1,     3,     4,     3,     0,     1,     0,
       2,     3,     5,     2,     2,     0,     8,     5,     0,     5,
       5,     7,     2,     0,     1,     1,     1,     3,     2,     0,
       1,     0,     1,     3,     1,     3,     1,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0; (void)yynerrs;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 484 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 16415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 500 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 16431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 512 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 16442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 559 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 16448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 16480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 16503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 16509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 16515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 16537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 16545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 16551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 16557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 16563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 16569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 16575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 16581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 16599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 16605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 16611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 16617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 16623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 16639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 16645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 16651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 16657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 16665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 16671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 16679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 16687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 16695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 16703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 16711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 16719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 16727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 16735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 16743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 16751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 16759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 16767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 16775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 16783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 16791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 16799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 16805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 16817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 16823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 16831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 16839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 16845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 16857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96:
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 16868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 16885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 16896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 16906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 16912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 16918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 16971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 16983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 16995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 17007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 17027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 17036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 17110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 17139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 17147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 17171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 292 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 17193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 17204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 17229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 17243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 17249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 17309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 17318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 17327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 17336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 17342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 17348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 17354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 17372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 17378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 17390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 17402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 17408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 17420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 17446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 17460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 17466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 17472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 17485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 17498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 17504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 17510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 17516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 17522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 17528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 17534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 17540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 17546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 17552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 17558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 17570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 17589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 17595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 17601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 17607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 17613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 17621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 17629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 17637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 17645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 17653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 17661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 17675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 17681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 17687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 17696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 17712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 17721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 17729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 17741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 17747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 17753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 17768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 17774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 17780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 17786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 17816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 17822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 17828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 17840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 17846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 17861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 17870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 17888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 17938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 17974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 18046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 18052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 18058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 18064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 18070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 18088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 18094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 18100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 18132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 18178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 18190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 18203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 18215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 18228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 18241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 18249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 18258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 962 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 18266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 18301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 1008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 18336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 1020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 1033 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 18370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 1049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 18389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 1060 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 18399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 1066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 18408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 1072 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 18414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 18420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 18428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 18436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 18456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 18464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 18470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 1108 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 18476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 1109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 18482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 18488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 18494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 1115 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 1127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 18506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 18523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 1148 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 18545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 18556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 18571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 1198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 1211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 18592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 18598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 18616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312:
#line 1223 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 18622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313:
#line 1224 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 1230 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 1236 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 1246 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 1267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 18696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 1287 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 18704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 1290 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 18712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 1297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 18724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 18733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 1306 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 18743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 1313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 18752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 1318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 18762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 1324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 18771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 1329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 18792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 18803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 1346 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 18814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 18820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 18826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 1360 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 18832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 1366 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 1370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 18871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 18905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 18927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 1430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 1445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 1450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 1455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 1460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 1465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 1477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 1483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 19054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 19062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 1557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 1578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 19165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 19175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 1613 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 19205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382:
#line 1631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383:
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 19223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384:
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 19229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385:
#line 1638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386:
#line 1646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387:
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388:
#line 1663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 19273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389:
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 19285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390:
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391:
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 19300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392:
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393:
#line 1692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 19318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 19324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1725 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 19330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 19336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 19342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1731 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 19348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 19354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1735 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 19360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 19369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 19378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 19408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 19427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 19433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1810 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 19445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 19467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1845 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1853 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1857 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1861 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1870 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1873 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1875 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1877 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 19599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1881 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 19628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 19637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 19648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 19677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 19688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 19700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1943 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 19712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 19724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 19736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 1993 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 2001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 2009 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 19808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 19816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 19836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 2053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 2061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 2069 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 2085 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 2093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 2105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 2109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 2125 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 19976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 20012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 20038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 20095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->regex = (yyvsp[-1].str);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 20107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 20119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 20131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 2261 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 2283 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 20235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 20243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 2291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 20259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 2308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 2311 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 2330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 20306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 20315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 2345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 2355 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 20357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 2361 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 2363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 2374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 20406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 2398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 2409 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 20432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 2420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 20440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 2424 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 2431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 20459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 20468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 2440 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 2445 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 20484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 20495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 2456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 20507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 2464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 20519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 20534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 20606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 20634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 2584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 2588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 20666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 2596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 2600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 20682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 2604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 20706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 20714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 20730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 20738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 20746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 20760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 20766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 20826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 2684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 20861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 20869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 20880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 2717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 2747 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 2753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2754 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2766 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2778 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2788 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 21011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2831 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2832 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2835 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2836 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 21079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 21112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 21213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 21231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 21237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 21250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 21286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 3023 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 21322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 21328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 21334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 21340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 21346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 3029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 21352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 21358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 21376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 21382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 3052 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 21424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 3058 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 21430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 21436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 21442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 21448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 21454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 3082 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 21466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 21490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 3102 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 21498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 3113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 21514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 3145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 21570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 3161 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 21584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 3171 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 3172 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 3173 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 3174 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 3175 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 21620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 21626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 21632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 21638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 21644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 3191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 21678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 3209 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 3226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 3230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 21701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 3235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 21736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 21742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 21760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 3269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 21783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 3280 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 21789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694:
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695:
#line 3304 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 21827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 3320 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 3321 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 3329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 21859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 21867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 21953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 21959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 22026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 22076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 22088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 22112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 22118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 22124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 22130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 22138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 22168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 3544 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 3551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 3555 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 3590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 3606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 22272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 3672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 22357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 3676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 22365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 3680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 22381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 22387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 3690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767:
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 3723 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 3728 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 22489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 3738 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 3740 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 22501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 3744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 3756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 3758 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 3759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792:
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793:
#line 3766 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 22555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 22647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 22708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 22862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 22868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 22876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 22924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 22940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 22987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 22993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 23031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 23051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 23108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 23196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 23202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 23214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 23220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 23351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 23388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 24008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 24117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 24141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 24153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978:
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979:
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 24169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980:
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981:
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 24226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 24232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 24238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 24244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 24250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991:
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992:
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993:
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994:
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 24290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995:
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996:
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997:
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 24308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 24359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 24371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004:
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005:
#line 55 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006:
#line 61 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 24438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 24573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 24585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 24591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 24617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 24729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 24741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 24765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 24777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 24783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 24801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 24807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 24813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 24819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 24825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 24849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 24855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 24903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 24921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 24959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 24990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 24998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 25006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 25027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 25058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 25196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 25202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 25214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 25222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 25245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 25269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 25363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 25399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 25419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 25499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 25522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 25540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 25551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 25587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 25642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 25650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 25659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 25668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 25700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 25706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 25782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 25788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 25794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 25983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 26013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 26065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 26077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 26091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 26097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 26103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 26115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 26135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 26141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 26153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 26159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 26165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 26249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 26261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 26273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 26279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 26285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 26315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 26339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 26353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247:
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 26361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248:
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 26383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250:
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251:
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 26395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252:
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253:
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 26407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 26439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 26455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257:
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 26476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258:
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 26497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259:
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260:
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 26509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261:
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 26515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262:
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 26521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 26531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 26541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 26551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 26561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 26593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 26605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 26617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 26629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 26657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 26663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 26671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 26679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 26698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 26709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 26715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 26721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 26727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287:
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288:
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289:
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 26773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 26784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 26795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 26806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 26818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 26846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 26858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299:
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300:
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301:
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 26905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302:
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 26920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303:
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304:
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 26950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307:
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 26958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308:
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 26966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309:
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 26976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 27041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 27054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317:
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-5].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 27082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318:
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 27092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319:
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 27103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320:
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 27113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321:
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 27124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322:
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 27134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323:
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324:
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 27151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325:
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 27163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326:
#line 82 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 27175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327:
#line 90 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 27183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328:
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 27189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329:
#line 98 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 27195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330:
#line 104 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 27207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331:
#line 116 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332:
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 27241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333:
#line 146 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 27249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334:
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 27257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335:
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 27265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336:
#line 162 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 27278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337:
#line 172 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 27291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 27299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339:
#line 188 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 27314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340:
#line 199 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341:
#line 210 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 27344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342:
#line 224 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343:
#line 225 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 27356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 27362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 27368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346:
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 27374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 27380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348:
#line 244 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 27392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350:
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 27404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352:
#line 256 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 27410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353:
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 27416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354:
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355:
#line 264 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 27428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356:
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357:
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358:
#line 272 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 27446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359:
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 27452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360:
#line 279 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 27464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 27478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 27492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 27496 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 41 "third_party/libpg_query/grammar/statements/analyze.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery

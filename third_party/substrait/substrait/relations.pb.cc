// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/relations.proto

#include "substrait/relations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace substrait {
constexpr RelCommon_Direct::RelCommon_Direct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RelCommon_DirectDefaultTypeInternal {
  constexpr RelCommon_DirectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_DirectDefaultTypeInternal() {}
  union {
    RelCommon_Direct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
constexpr RelCommon_Emit::RelCommon_Emit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_mapping_()
  , _output_mapping_cached_byte_size_(0){}
struct RelCommon_EmitDefaultTypeInternal {
  constexpr RelCommon_EmitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_EmitDefaultTypeInternal() {}
  union {
    RelCommon_Emit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
constexpr RelCommon_Hint_Stats::RelCommon_Hint_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : advanced_extension_(nullptr)
  , row_count_(0)
  , record_size_(0){}
struct RelCommon_Hint_StatsDefaultTypeInternal {
  constexpr RelCommon_Hint_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_Hint_StatsDefaultTypeInternal() {}
  union {
    RelCommon_Hint_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
constexpr RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : advanced_extension_(nullptr){}
struct RelCommon_Hint_RuntimeConstraintDefaultTypeInternal {
  constexpr RelCommon_Hint_RuntimeConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_Hint_RuntimeConstraintDefaultTypeInternal() {}
  union {
    RelCommon_Hint_RuntimeConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_Hint_RuntimeConstraintDefaultTypeInternal _RelCommon_Hint_RuntimeConstraint_default_instance_;
constexpr RelCommon_Hint::RelCommon_Hint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(nullptr)
  , constraint_(nullptr)
  , advanced_extension_(nullptr){}
struct RelCommon_HintDefaultTypeInternal {
  constexpr RelCommon_HintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommon_HintDefaultTypeInternal() {}
  union {
    RelCommon_Hint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
constexpr RelCommon::RelCommon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hint_(nullptr)
  , advanced_extension_(nullptr)
  , _oneof_case_{}{}
struct RelCommonDefaultTypeInternal {
  constexpr RelCommonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelCommonDefaultTypeInternal() {}
  union {
    RelCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelCommonDefaultTypeInternal _RelCommon_default_instance_;
constexpr ReadRel_NamedTable::ReadRel_NamedTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , advanced_extension_(nullptr){}
struct ReadRel_NamedTableDefaultTypeInternal {
  constexpr ReadRel_NamedTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_NamedTableDefaultTypeInternal() {}
  union {
    ReadRel_NamedTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
constexpr ReadRel_VirtualTable::ReadRel_VirtualTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct ReadRel_VirtualTableDefaultTypeInternal {
  constexpr ReadRel_VirtualTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_VirtualTableDefaultTypeInternal() {}
  union {
    ReadRel_VirtualTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
constexpr ReadRel_ExtensionTable::ReadRel_ExtensionTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(nullptr){}
struct ReadRel_ExtensionTableDefaultTypeInternal {
  constexpr ReadRel_ExtensionTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_ExtensionTableDefaultTypeInternal() {}
  union {
    ReadRel_ExtensionTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_ExtensionTableDefaultTypeInternal _ReadRel_ExtensionTable_default_instance_;
constexpr ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(0)

  , partition_index_(uint64_t{0u})
  , start_(uint64_t{0u})
  , length_(uint64_t{0u})
  , _oneof_case_{}{}
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal {
  constexpr ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
constexpr ReadRel_LocalFiles::ReadRel_LocalFiles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , advanced_extension_(nullptr){}
struct ReadRel_LocalFilesDefaultTypeInternal {
  constexpr ReadRel_LocalFilesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRel_LocalFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
constexpr ReadRel::ReadRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , base_schema_(nullptr)
  , filter_(nullptr)
  , projection_(nullptr)
  , advanced_extension_(nullptr)
  , _oneof_case_{}{}
struct ReadRelDefaultTypeInternal {
  constexpr ReadRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadRelDefaultTypeInternal() {}
  union {
    ReadRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadRelDefaultTypeInternal _ReadRel_default_instance_;
constexpr ProjectRel::ProjectRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expressions_()
  , common_(nullptr)
  , input_(nullptr)
  , advanced_extension_(nullptr){}
struct ProjectRelDefaultTypeInternal {
  constexpr ProjectRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectRelDefaultTypeInternal() {}
  union {
    ProjectRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
constexpr JoinRel::JoinRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , left_(nullptr)
  , right_(nullptr)
  , expression_(nullptr)
  , post_join_filter_(nullptr)
  , advanced_extension_(nullptr)
  , type_(0)
{}
struct JoinRelDefaultTypeInternal {
  constexpr JoinRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRelDefaultTypeInternal() {}
  union {
    JoinRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRelDefaultTypeInternal _JoinRel_default_instance_;
constexpr CrossRel::CrossRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , left_(nullptr)
  , right_(nullptr)
  , advanced_extension_(nullptr){}
struct CrossRelDefaultTypeInternal {
  constexpr CrossRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrossRelDefaultTypeInternal() {}
  union {
    CrossRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrossRelDefaultTypeInternal _CrossRel_default_instance_;
constexpr FetchRel::FetchRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , input_(nullptr)
  , advanced_extension_(nullptr)
  , offset_(int64_t{0})
  , count_(int64_t{0}){}
struct FetchRelDefaultTypeInternal {
  constexpr FetchRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchRelDefaultTypeInternal() {}
  union {
    FetchRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchRelDefaultTypeInternal _FetchRel_default_instance_;
constexpr AggregateRel_Grouping::AggregateRel_Grouping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grouping_expressions_(){}
struct AggregateRel_GroupingDefaultTypeInternal {
  constexpr AggregateRel_GroupingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRel_GroupingDefaultTypeInternal() {}
  union {
    AggregateRel_Grouping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
constexpr AggregateRel_Measure::AggregateRel_Measure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measure_(nullptr)
  , filter_(nullptr){}
struct AggregateRel_MeasureDefaultTypeInternal {
  constexpr AggregateRel_MeasureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRel_MeasureDefaultTypeInternal() {}
  union {
    AggregateRel_Measure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
constexpr AggregateRel::AggregateRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupings_()
  , measures_()
  , common_(nullptr)
  , input_(nullptr)
  , advanced_extension_(nullptr){}
struct AggregateRelDefaultTypeInternal {
  constexpr AggregateRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AggregateRelDefaultTypeInternal() {}
  union {
    AggregateRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
constexpr SortRel::SortRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sorts_()
  , common_(nullptr)
  , input_(nullptr)
  , advanced_extension_(nullptr){}
struct SortRelDefaultTypeInternal {
  constexpr SortRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SortRelDefaultTypeInternal() {}
  union {
    SortRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SortRelDefaultTypeInternal _SortRel_default_instance_;
constexpr FilterRel::FilterRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , input_(nullptr)
  , condition_(nullptr)
  , advanced_extension_(nullptr){}
struct FilterRelDefaultTypeInternal {
  constexpr FilterRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterRelDefaultTypeInternal() {}
  union {
    FilterRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterRelDefaultTypeInternal _FilterRel_default_instance_;
constexpr SetRel::SetRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , common_(nullptr)
  , advanced_extension_(nullptr)
  , op_(0)
{}
struct SetRelDefaultTypeInternal {
  constexpr SetRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRelDefaultTypeInternal() {}
  union {
    SetRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRelDefaultTypeInternal _SetRel_default_instance_;
constexpr ExtensionSingleRel::ExtensionSingleRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , input_(nullptr)
  , detail_(nullptr){}
struct ExtensionSingleRelDefaultTypeInternal {
  constexpr ExtensionSingleRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtensionSingleRelDefaultTypeInternal() {}
  union {
    ExtensionSingleRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtensionSingleRelDefaultTypeInternal _ExtensionSingleRel_default_instance_;
constexpr ExtensionLeafRel::ExtensionLeafRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : common_(nullptr)
  , detail_(nullptr){}
struct ExtensionLeafRelDefaultTypeInternal {
  constexpr ExtensionLeafRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtensionLeafRelDefaultTypeInternal() {}
  union {
    ExtensionLeafRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtensionLeafRelDefaultTypeInternal _ExtensionLeafRel_default_instance_;
constexpr ExtensionMultiRel::ExtensionMultiRel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , common_(nullptr)
  , detail_(nullptr){}
struct ExtensionMultiRelDefaultTypeInternal {
  constexpr ExtensionMultiRelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtensionMultiRelDefaultTypeInternal() {}
  union {
    ExtensionMultiRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtensionMultiRelDefaultTypeInternal _ExtensionMultiRel_default_instance_;
constexpr RelRoot::RelRoot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_()
  , input_(nullptr){}
struct RelRootDefaultTypeInternal {
  constexpr RelRootDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelRootDefaultTypeInternal() {}
  union {
    RelRoot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelRootDefaultTypeInternal _RelRoot_default_instance_;
constexpr Rel::Rel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RelDefaultTypeInternal {
  constexpr RelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelDefaultTypeInternal() {}
  union {
    Rel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelDefaultTypeInternal _Rel_default_instance_;
}  // namespace substrait
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_substrait_2frelations_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_substrait_2frelations_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_substrait_2frelations_2eproto = nullptr;

const uint32_t TableStruct_substrait_2frelations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Direct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Emit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Emit, output_mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, row_count_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, record_size_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_RuntimeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_RuntimeConstraint, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, stats_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, constraint_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, hint_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, advanced_extension_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, emit_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, names_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_VirtualTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_VirtualTable, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_ExtensionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_ExtensionTable, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, format_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, partition_index_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, start_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, length_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, path_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, items_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, base_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, projection_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, advanced_extension_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, read_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, expressions_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, type_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, left_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, right_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, offset_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, count_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Grouping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Grouping, grouping_expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, measure_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, groupings_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, measures_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, condition_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, op_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, input_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, rel_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::substrait::RelCommon_Direct)},
  { 6, -1, -1, sizeof(::substrait::RelCommon_Emit)},
  { 13, -1, -1, sizeof(::substrait::RelCommon_Hint_Stats)},
  { 22, -1, -1, sizeof(::substrait::RelCommon_Hint_RuntimeConstraint)},
  { 29, -1, -1, sizeof(::substrait::RelCommon_Hint)},
  { 38, -1, -1, sizeof(::substrait::RelCommon)},
  { 49, -1, -1, sizeof(::substrait::ReadRel_NamedTable)},
  { 57, -1, -1, sizeof(::substrait::ReadRel_VirtualTable)},
  { 64, -1, -1, sizeof(::substrait::ReadRel_ExtensionTable)},
  { 71, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles)},
  { 86, -1, -1, sizeof(::substrait::ReadRel_LocalFiles)},
  { 94, -1, -1, sizeof(::substrait::ReadRel)},
  { 110, -1, -1, sizeof(::substrait::ProjectRel)},
  { 120, -1, -1, sizeof(::substrait::JoinRel)},
  { 133, -1, -1, sizeof(::substrait::CrossRel)},
  { 143, -1, -1, sizeof(::substrait::FetchRel)},
  { 154, -1, -1, sizeof(::substrait::AggregateRel_Grouping)},
  { 161, -1, -1, sizeof(::substrait::AggregateRel_Measure)},
  { 169, -1, -1, sizeof(::substrait::AggregateRel)},
  { 180, -1, -1, sizeof(::substrait::SortRel)},
  { 190, -1, -1, sizeof(::substrait::FilterRel)},
  { 200, -1, -1, sizeof(::substrait::SetRel)},
  { 210, -1, -1, sizeof(::substrait::ExtensionSingleRel)},
  { 219, -1, -1, sizeof(::substrait::ExtensionLeafRel)},
  { 227, -1, -1, sizeof(::substrait::ExtensionMultiRel)},
  { 236, -1, -1, sizeof(::substrait::RelRoot)},
  { 244, -1, -1, sizeof(::substrait::Rel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_Direct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_Emit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_Hint_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_Hint_RuntimeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_Hint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_NamedTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_VirtualTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_ExtensionTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_LocalFiles_FileOrFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_LocalFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ReadRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ProjectRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_JoinRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_CrossRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_FetchRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_AggregateRel_Grouping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_AggregateRel_Measure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_AggregateRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_SortRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_FilterRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_SetRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ExtensionSingleRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ExtensionLeafRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_ExtensionMultiRel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_RelRoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::substrait::_Rel_default_instance_),
};

const char descriptor_table_protodef_substrait_2frelations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031substrait/relations.proto\022\tsubstrait\032\024"
  "substrait/type.proto\032\032substrait/expressi"
  "on.proto\032%substrait/extensions/extension"
  "s.proto\032\031google/protobuf/any.proto\"\262\006\n\tR"
  "elCommon\0225\n\006direct\030\001 \001(\0132\033.substrait.Rel"
  "Common.DirectH\000R\006direct\022/\n\004emit\030\002 \001(\0132\031."
  "substrait.RelCommon.EmitH\000R\004emit\022-\n\004hint"
  "\030\003 \001(\0132\031.substrait.RelCommon.HintR\004hint\022"
  "V\n\022advanced_extension\030\004 \001(\0132\'.substrait."
  "extensions.AdvancedExtensionR\021advancedEx"
  "tension\032\010\n\006Direct\032-\n\004Emit\022%\n\016output_mapp"
  "ing\030\001 \003(\005R\routputMapping\032\357\003\n\004Hint\0225\n\005sta"
  "ts\030\001 \001(\0132\037.substrait.RelCommon.Hint.Stat"
  "sR\005stats\022K\n\nconstraint\030\002 \001(\0132+.substrait"
  ".RelCommon.Hint.RuntimeConstraintR\nconst"
  "raint\022V\n\022advanced_extension\030\n \001(\0132\'.subs"
  "trait.extensions.AdvancedExtensionR\021adva"
  "ncedExtension\032\235\001\n\005Stats\022\033\n\trow_count\030\001 \001"
  "(\001R\010rowCount\022\037\n\013record_size\030\002 \001(\001R\nrecor"
  "dSize\022V\n\022advanced_extension\030\n \001(\0132\'.subs"
  "trait.extensions.AdvancedExtensionR\021adva"
  "ncedExtension\032k\n\021RuntimeConstraint\022V\n\022ad"
  "vanced_extension\030\n \001(\0132\'.substrait.exten"
  "sions.AdvancedExtensionR\021advancedExtensi"
  "onB\013\n\temit_kind\"\235\013\n\007ReadRel\022,\n\006common\030\001 "
  "\001(\0132\024.substrait.RelCommonR\006common\0227\n\013bas"
  "e_schema\030\002 \001(\0132\026.substrait.NamedStructR\n"
  "baseSchema\022-\n\006filter\030\003 \001(\0132\025.substrait.E"
  "xpressionR\006filter\022D\n\nprojection\030\004 \001(\0132$."
  "substrait.Expression.MaskExpressionR\npro"
  "jection\022V\n\022advanced_extension\030\n \001(\0132\'.su"
  "bstrait.extensions.AdvancedExtensionR\021ad"
  "vancedExtension\022F\n\rvirtual_table\030\005 \001(\0132\037"
  ".substrait.ReadRel.VirtualTableH\000R\014virtu"
  "alTable\022@\n\013local_files\030\006 \001(\0132\035.substrait"
  ".ReadRel.LocalFilesH\000R\nlocalFiles\022@\n\013nam"
  "ed_table\030\007 \001(\0132\035.substrait.ReadRel.Named"
  "TableH\000R\nnamedTable\022L\n\017extension_table\030\010"
  " \001(\0132!.substrait.ReadRel.ExtensionTableH"
  "\000R\016extensionTable\032z\n\nNamedTable\022\024\n\005names"
  "\030\001 \003(\tR\005names\022V\n\022advanced_extension\030\n \001("
  "\0132\'.substrait.extensions.AdvancedExtensi"
  "onR\021advancedExtension\032L\n\014VirtualTable\022<\n"
  "\006values\030\001 \003(\0132$.substrait.Expression.Lit"
  "eral.StructR\006values\032>\n\016ExtensionTable\022,\n"
  "\006detail\030\001 \001(\0132\024.google.protobuf.AnyR\006det"
  "ail\032\254\004\n\nLocalFiles\022\?\n\005items\030\001 \003(\0132).subs"
  "trait.ReadRel.LocalFiles.FileOrFilesR\005it"
  "ems\022V\n\022advanced_extension\030\n \001(\0132\'.substr"
  "ait.extensions.AdvancedExtensionR\021advanc"
  "edExtension\032\204\003\n\013FileOrFiles\022\033\n\010uri_path\030"
  "\001 \001(\tH\000R\007uriPath\022$\n\ruri_path_glob\030\002 \001(\tH"
  "\000R\013uriPathGlob\022\033\n\010uri_file\030\003 \001(\tH\000R\007uriF"
  "ile\022\037\n\nuri_folder\030\004 \001(\tH\000R\turiFolder\022L\n\006"
  "format\030\005 \001(\01624.substrait.ReadRel.LocalFi"
  "les.FileOrFiles.FileFormatR\006format\022\'\n\017pa"
  "rtition_index\030\006 \001(\004R\016partitionIndex\022\024\n\005s"
  "tart\030\007 \001(\004R\005start\022\026\n\006length\030\010 \001(\004R\006lengt"
  "h\"B\n\nFileFormat\022\033\n\027FILE_FORMAT_UNSPECIFI"
  "ED\020\000\022\027\n\023FILE_FORMAT_PARQUET\020\001B\013\n\tpath_ty"
  "peB\013\n\tread_type\"\361\001\n\nProjectRel\022,\n\006common"
  "\030\001 \001(\0132\024.substrait.RelCommonR\006common\022$\n\005"
  "input\030\002 \001(\0132\016.substrait.RelR\005input\0227\n\013ex"
  "pressions\030\003 \003(\0132\025.substrait.ExpressionR\013"
  "expressions\022V\n\022advanced_extension\030\n \001(\0132"
  "\'.substrait.extensions.AdvancedExtension"
  "R\021advancedExtension\"\273\004\n\007JoinRel\022,\n\006commo"
  "n\030\001 \001(\0132\024.substrait.RelCommonR\006common\022\"\n"
  "\004left\030\002 \001(\0132\016.substrait.RelR\004left\022$\n\005rig"
  "ht\030\003 \001(\0132\016.substrait.RelR\005right\0225\n\nexpre"
  "ssion\030\004 \001(\0132\025.substrait.ExpressionR\nexpr"
  "ession\022\?\n\020post_join_filter\030\005 \001(\0132\025.subst"
  "rait.ExpressionR\016postJoinFilter\022/\n\004type\030"
  "\006 \001(\0162\033.substrait.JoinRel.JoinTypeR\004type"
  "\022V\n\022advanced_extension\030\n \001(\0132\'.substrait"
  ".extensions.AdvancedExtensionR\021advancedE"
  "xtension\"\266\001\n\010JoinType\022\031\n\025JOIN_TYPE_UNSPE"
  "CIFIED\020\000\022\023\n\017JOIN_TYPE_INNER\020\001\022\023\n\017JOIN_TY"
  "PE_OUTER\020\002\022\022\n\016JOIN_TYPE_LEFT\020\003\022\023\n\017JOIN_T"
  "YPE_RIGHT\020\004\022\022\n\016JOIN_TYPE_SEMI\020\005\022\022\n\016JOIN_"
  "TYPE_ANTI\020\006\022\024\n\020JOIN_TYPE_SINGLE\020\007\"\332\001\n\010Cr"
  "ossRel\022,\n\006common\030\001 \001(\0132\024.substrait.RelCo"
  "mmonR\006common\022\"\n\004left\030\002 \001(\0132\016.substrait.R"
  "elR\004left\022$\n\005right\030\003 \001(\0132\016.substrait.RelR"
  "\005right\022V\n\022advanced_extension\030\n \001(\0132\'.sub"
  "strait.extensions.AdvancedExtensionR\021adv"
  "ancedExtension\"\344\001\n\010FetchRel\022,\n\006common\030\001 "
  "\001(\0132\024.substrait.RelCommonR\006common\022$\n\005inp"
  "ut\030\002 \001(\0132\016.substrait.RelR\005input\022\026\n\006offse"
  "t\030\003 \001(\003R\006offset\022\024\n\005count\030\004 \001(\003R\005count\022V\n"
  "\022advanced_extension\030\n \001(\0132\'.substrait.ex"
  "tensions.AdvancedExtensionR\021advancedExte"
  "nsion\"\377\003\n\014AggregateRel\022,\n\006common\030\001 \001(\0132\024"
  ".substrait.RelCommonR\006common\022$\n\005input\030\002 "
  "\001(\0132\016.substrait.RelR\005input\022>\n\tgroupings\030"
  "\003 \003(\0132 .substrait.AggregateRel.GroupingR"
  "\tgroupings\022;\n\010measures\030\004 \003(\0132\037.substrait"
  ".AggregateRel.MeasureR\010measures\022V\n\022advan"
  "ced_extension\030\n \001(\0132\'.substrait.extensio"
  "ns.AdvancedExtensionR\021advancedExtension\032"
  "T\n\010Grouping\022H\n\024grouping_expressions\030\001 \003("
  "\0132\025.substrait.ExpressionR\023groupingExpres"
  "sions\032p\n\007Measure\0226\n\007measure\030\001 \001(\0132\034.subs"
  "trait.AggregateFunctionR\007measure\022-\n\006filt"
  "er\030\002 \001(\0132\025.substrait.ExpressionR\006filter\""
  "\341\001\n\007SortRel\022,\n\006common\030\001 \001(\0132\024.substrait."
  "RelCommonR\006common\022$\n\005input\030\002 \001(\0132\016.subst"
  "rait.RelR\005input\022*\n\005sorts\030\003 \003(\0132\024.substra"
  "it.SortFieldR\005sorts\022V\n\022advanced_extensio"
  "n\030\n \001(\0132\'.substrait.extensions.AdvancedE"
  "xtensionR\021advancedExtension\"\354\001\n\tFilterRe"
  "l\022,\n\006common\030\001 \001(\0132\024.substrait.RelCommonR"
  "\006common\022$\n\005input\030\002 \001(\0132\016.substrait.RelR\005"
  "input\0223\n\tcondition\030\003 \001(\0132\025.substrait.Exp"
  "ressionR\tcondition\022V\n\022advanced_extension"
  "\030\n \001(\0132\'.substrait.extensions.AdvancedEx"
  "tensionR\021advancedExtension\"\252\003\n\006SetRel\022,\n"
  "\006common\030\001 \001(\0132\024.substrait.RelCommonR\006com"
  "mon\022&\n\006inputs\030\002 \003(\0132\016.substrait.RelR\006inp"
  "uts\022\'\n\002op\030\003 \001(\0162\027.substrait.SetRel.SetOp"
  "R\002op\022V\n\022advanced_extension\030\n \001(\0132\'.subst"
  "rait.extensions.AdvancedExtensionR\021advan"
  "cedExtension\"\310\001\n\005SetOp\022\026\n\022SET_OP_UNSPECI"
  "FIED\020\000\022\030\n\024SET_OP_MINUS_PRIMARY\020\001\022\031\n\025SET_"
  "OP_MINUS_MULTISET\020\002\022\037\n\033SET_OP_INTERSECTI"
  "ON_PRIMARY\020\003\022 \n\034SET_OP_INTERSECTION_MULT"
  "ISET\020\004\022\031\n\025SET_OP_UNION_DISTINCT\020\005\022\024\n\020SET"
  "_OP_UNION_ALL\020\006\"\226\001\n\022ExtensionSingleRel\022,"
  "\n\006common\030\001 \001(\0132\024.substrait.RelCommonR\006co"
  "mmon\022$\n\005input\030\002 \001(\0132\016.substrait.RelR\005inp"
  "ut\022,\n\006detail\030\003 \001(\0132\024.google.protobuf.Any"
  "R\006detail\"n\n\020ExtensionLeafRel\022,\n\006common\030\001"
  " \001(\0132\024.substrait.RelCommonR\006common\022,\n\006de"
  "tail\030\002 \001(\0132\024.google.protobuf.AnyR\006detail"
  "\"\227\001\n\021ExtensionMultiRel\022,\n\006common\030\001 \001(\0132\024"
  ".substrait.RelCommonR\006common\022&\n\006inputs\030\002"
  " \003(\0132\016.substrait.RelR\006inputs\022,\n\006detail\030\003"
  " \001(\0132\024.google.protobuf.AnyR\006detail\"E\n\007Re"
  "lRoot\022$\n\005input\030\001 \001(\0132\016.substrait.RelR\005in"
  "put\022\024\n\005names\030\002 \003(\tR\005names\"\207\005\n\003Rel\022(\n\004rea"
  "d\030\001 \001(\0132\022.substrait.ReadRelH\000R\004read\022.\n\006f"
  "ilter\030\002 \001(\0132\024.substrait.FilterRelH\000R\006fil"
  "ter\022+\n\005fetch\030\003 \001(\0132\023.substrait.FetchRelH"
  "\000R\005fetch\0227\n\taggregate\030\004 \001(\0132\027.substrait."
  "AggregateRelH\000R\taggregate\022(\n\004sort\030\005 \001(\0132"
  "\022.substrait.SortRelH\000R\004sort\022(\n\004join\030\006 \001("
  "\0132\022.substrait.JoinRelH\000R\004join\0221\n\007project"
  "\030\007 \001(\0132\025.substrait.ProjectRelH\000R\007project"
  "\022%\n\003set\030\010 \001(\0132\021.substrait.SetRelH\000R\003set\022"
  "J\n\020extension_single\030\t \001(\0132\035.substrait.Ex"
  "tensionSingleRelH\000R\017extensionSingle\022G\n\017e"
  "xtension_multi\030\n \001(\0132\034.substrait.Extensi"
  "onMultiRelH\000R\016extensionMulti\022D\n\016extensio"
  "n_leaf\030\013 \001(\0132\033.substrait.ExtensionLeafRe"
  "lH\000R\rextensionLeaf\022+\n\005cross\030\014 \001(\0132\023.subs"
  "trait.CrossRelH\000R\005crossB\n\n\010rel_typeB+\n\022i"
  "o.substrait.protoP\001\252\002\022Substrait.Protobuf"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_substrait_2frelations_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_substrait_2fexpression_2eproto,
  &::descriptor_table_substrait_2fextensions_2fextensions_2eproto,
  &::descriptor_table_substrait_2ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_substrait_2frelations_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2frelations_2eproto = {
  false, false, 6288, descriptor_table_protodef_substrait_2frelations_2eproto, "substrait/relations.proto", 
  &descriptor_table_substrait_2frelations_2eproto_once, descriptor_table_substrait_2frelations_2eproto_deps, 4, 27,
  schemas, file_default_instances, TableStruct_substrait_2frelations_2eproto::offsets,
  file_level_metadata_substrait_2frelations_2eproto, file_level_enum_descriptors_substrait_2frelations_2eproto, file_level_service_descriptors_substrait_2frelations_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_substrait_2frelations_2eproto_getter() {
  return &descriptor_table_substrait_2frelations_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_substrait_2frelations_2eproto(&descriptor_table_substrait_2frelations_2eproto);
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2frelations_2eproto);
  return file_level_enum_descriptors_substrait_2frelations_2eproto[0];
}
bool ReadRel_LocalFiles_FileOrFiles_FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::FILE_FORMAT_UNSPECIFIED;
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::FILE_FORMAT_PARQUET;
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::FileFormat_MIN;
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::FileFormat_MAX;
constexpr int ReadRel_LocalFiles_FileOrFiles::FileFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2frelations_2eproto);
  return file_level_enum_descriptors_substrait_2frelations_2eproto[1];
}
bool JoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_INNER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_OUTER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_LEFT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_RIGHT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SEMI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_ANTI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SINGLE;
constexpr JoinRel_JoinType JoinRel::JoinType_MIN;
constexpr JoinRel_JoinType JoinRel::JoinType_MAX;
constexpr int JoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2frelations_2eproto);
  return file_level_enum_descriptors_substrait_2frelations_2eproto[2];
}
bool SetRel_SetOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetRel_SetOp SetRel::SET_OP_UNSPECIFIED;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_DISTINCT;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_ALL;
constexpr SetRel_SetOp SetRel::SetOp_MIN;
constexpr SetRel_SetOp SetRel::SetOp_MAX;
constexpr int SetRel::SetOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RelCommon_Direct::_Internal {
 public:
};

RelCommon_Direct::RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Direct)
}
RelCommon_Direct::RelCommon_Direct(const RelCommon_Direct& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Direct)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Direct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Direct::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Direct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[0]);
}

// ===================================================================

class RelCommon_Emit::_Internal {
 public:
};

RelCommon_Emit::RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_mapping_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Emit)
}
RelCommon_Emit::RelCommon_Emit(const RelCommon_Emit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_mapping_(from.output_mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Emit)
}

inline void RelCommon_Emit::SharedCtor() {
}

RelCommon_Emit::~RelCommon_Emit() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Emit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelCommon_Emit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RelCommon_Emit::ArenaDtor(void* object) {
  RelCommon_Emit* _this = reinterpret_cast< RelCommon_Emit* >(object);
  (void)_this;
}
void RelCommon_Emit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Emit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Emit::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Emit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_mapping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Emit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 output_mapping = 1 [json_name = "outputMapping"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Emit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Emit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1 [json_name = "outputMapping"];
  {
    int byte_size = _output_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_output_mapping(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Emit)
  return target;
}

size_t RelCommon_Emit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Emit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1 [json_name = "outputMapping"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Emit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelCommon_Emit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Emit::GetClassData() const { return &_class_data_; }

void RelCommon_Emit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelCommon_Emit *>(to)->MergeFrom(
      static_cast<const RelCommon_Emit &>(from));
}


void RelCommon_Emit::MergeFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  output_mapping_.MergeFrom(from.output_mapping_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Emit::CopyFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Emit::IsInitialized() const {
  return true;
}

void RelCommon_Emit::InternalSwap(RelCommon_Emit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  output_mapping_.InternalSwap(&other->output_mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Emit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[1]);
}

// ===================================================================

class RelCommon_Hint_Stats::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_Stats* msg);
};

const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint_Stats::_Internal::advanced_extension(const RelCommon_Hint_Stats* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint_Stats::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint.Stats)
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_size_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint.Stats)
}

inline void RelCommon_Hint_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&advanced_extension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_size_) -
    reinterpret_cast<char*>(&advanced_extension_)) + sizeof(record_size_));
}

RelCommon_Hint_Stats::~RelCommon_Hint_Stats() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint.Stats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelCommon_Hint_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint_Stats::ArenaDtor(void* object) {
  RelCommon_Hint_Stats* _this = reinterpret_cast< RelCommon_Hint_Stats* >(object);
  (void)_this;
}
void RelCommon_Hint_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_size_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(record_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double row_count = 1 [json_name = "rowCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double record_size = 2 [json_name = "recordSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          record_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint_Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double row_count = 1 [json_name = "rowCount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = this->_internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_row_count(), target);
  }

  // double record_size = 2 [json_name = "recordSize"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = this->_internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_record_size(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint.Stats)
  return target;
}

size_t RelCommon_Hint_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // double row_count = 1 [json_name = "rowCount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = this->_internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    total_size += 1 + 8;
  }

  // double record_size = 2 [json_name = "recordSize"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = this->_internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint_Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelCommon_Hint_Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint_Stats::GetClassData() const { return &_class_data_; }

void RelCommon_Hint_Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelCommon_Hint_Stats *>(to)->MergeFrom(
      static_cast<const RelCommon_Hint_Stats &>(from));
}


void RelCommon_Hint_Stats::MergeFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = from._internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = from._internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    _internal_set_record_size(from._internal_record_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint_Stats::CopyFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_Stats::IsInitialized() const {
  return true;
}

void RelCommon_Hint_Stats::InternalSwap(RelCommon_Hint_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, record_size_)
      + sizeof(RelCommon_Hint_Stats::record_size_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, advanced_extension_)>(
          reinterpret_cast<char*>(&advanced_extension_),
          reinterpret_cast<char*>(&other->advanced_extension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_Stats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[2]);
}

// ===================================================================

class RelCommon_Hint_RuntimeConstraint::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg);
};

const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint_RuntimeConstraint::_Internal::advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint_RuntimeConstraint::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint.RuntimeConstraint)
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint.RuntimeConstraint)
}

inline void RelCommon_Hint_RuntimeConstraint::SharedCtor() {
advanced_extension_ = nullptr;
}

RelCommon_Hint_RuntimeConstraint::~RelCommon_Hint_RuntimeConstraint() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint.RuntimeConstraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelCommon_Hint_RuntimeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint_RuntimeConstraint::ArenaDtor(void* object) {
  RelCommon_Hint_RuntimeConstraint* _this = reinterpret_cast< RelCommon_Hint_RuntimeConstraint* >(object);
  (void)_this;
}
void RelCommon_Hint_RuntimeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint_RuntimeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint_RuntimeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint.RuntimeConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_RuntimeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint_RuntimeConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint.RuntimeConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint.RuntimeConstraint)
  return target;
}

size_t RelCommon_Hint_RuntimeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint.RuntimeConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint_RuntimeConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelCommon_Hint_RuntimeConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint_RuntimeConstraint::GetClassData() const { return &_class_data_; }

void RelCommon_Hint_RuntimeConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelCommon_Hint_RuntimeConstraint *>(to)->MergeFrom(
      static_cast<const RelCommon_Hint_RuntimeConstraint &>(from));
}


void RelCommon_Hint_RuntimeConstraint::MergeFrom(const RelCommon_Hint_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint_RuntimeConstraint::CopyFrom(const RelCommon_Hint_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_RuntimeConstraint::IsInitialized() const {
  return true;
}

void RelCommon_Hint_RuntimeConstraint::InternalSwap(RelCommon_Hint_RuntimeConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_RuntimeConstraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[3]);
}

// ===================================================================

class RelCommon_Hint::_Internal {
 public:
  static const ::substrait::RelCommon_Hint_Stats& stats(const RelCommon_Hint* msg);
  static const ::substrait::RelCommon_Hint_RuntimeConstraint& constraint(const RelCommon_Hint* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint* msg);
};

const ::substrait::RelCommon_Hint_Stats&
RelCommon_Hint::_Internal::stats(const RelCommon_Hint* msg) {
  return *msg->stats_;
}
const ::substrait::RelCommon_Hint_RuntimeConstraint&
RelCommon_Hint::_Internal::constraint(const RelCommon_Hint* msg) {
  return *msg->constraint_;
}
const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint::_Internal::advanced_extension(const RelCommon_Hint* msg) {
  return *msg->advanced_extension_;
}
void RelCommon_Hint::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon_Hint::RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint)
}
RelCommon_Hint::RelCommon_Hint(const RelCommon_Hint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    stats_ = new ::substrait::RelCommon_Hint_Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_constraint()) {
    constraint_ = new ::substrait::RelCommon_Hint_RuntimeConstraint(*from.constraint_);
  } else {
    constraint_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint)
}

inline void RelCommon_Hint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&stats_)) + sizeof(advanced_extension_));
}

RelCommon_Hint::~RelCommon_Hint() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelCommon_Hint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete constraint_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void RelCommon_Hint::ArenaDtor(void* object) {
  RelCommon_Hint* _this = reinterpret_cast< RelCommon_Hint* >(object);
  (void)_this;
}
void RelCommon_Hint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon_Hint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon_Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
  if (this->_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stats(this), target, stream);
  }

  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
  if (this->_internal_has_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::constraint(this), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint)
  return target;
}

size_t RelCommon_Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
  if (this->_internal_has_constraint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraint_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelCommon_Hint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint::GetClassData() const { return &_class_data_; }

void RelCommon_Hint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelCommon_Hint *>(to)->MergeFrom(
      static_cast<const RelCommon_Hint &>(from));
}


void RelCommon_Hint::MergeFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _internal_mutable_stats()->::substrait::RelCommon_Hint_Stats::MergeFrom(from._internal_stats());
  }
  if (from._internal_has_constraint()) {
    _internal_mutable_constraint()->::substrait::RelCommon_Hint_RuntimeConstraint::MergeFrom(from._internal_constraint());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint::CopyFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint::IsInitialized() const {
  return true;
}

void RelCommon_Hint::InternalSwap(RelCommon_Hint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint, advanced_extension_)
      + sizeof(RelCommon_Hint::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[4]);
}

// ===================================================================

class RelCommon::_Internal {
 public:
  static const ::substrait::RelCommon_Direct& direct(const RelCommon* msg);
  static const ::substrait::RelCommon_Emit& emit(const RelCommon* msg);
  static const ::substrait::RelCommon_Hint& hint(const RelCommon* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon* msg);
};

const ::substrait::RelCommon_Direct&
RelCommon::_Internal::direct(const RelCommon* msg) {
  return *msg->emit_kind_.direct_;
}
const ::substrait::RelCommon_Emit&
RelCommon::_Internal::emit(const RelCommon* msg) {
  return *msg->emit_kind_.emit_;
}
const ::substrait::RelCommon_Hint&
RelCommon::_Internal::hint(const RelCommon* msg) {
  return *msg->hint_;
}
const ::substrait::extensions::AdvancedExtension&
RelCommon::_Internal::advanced_extension(const RelCommon* msg) {
  return *msg->advanced_extension_;
}
void RelCommon::set_allocated_direct(::substrait::RelCommon_Direct* direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_emit_kind();
  if (direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon_Direct>::GetOwningArena(direct);
    if (message_arena != submessage_arena) {
      direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct, submessage_arena);
    }
    set_has_direct();
    emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.direct)
}
void RelCommon::set_allocated_emit(::substrait::RelCommon_Emit* emit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_emit_kind();
  if (emit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon_Emit>::GetOwningArena(emit);
    if (message_arena != submessage_arena) {
      emit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emit, submessage_arena);
    }
    set_has_emit();
    emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.emit)
}
void RelCommon::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
RelCommon::RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon)
}
RelCommon::RelCommon(const RelCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hint()) {
    hint_ = new ::substrait::RelCommon_Hint(*from.hint_);
  } else {
    hint_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  clear_has_emit_kind();
  switch (from.emit_kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::substrait::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::substrait::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon)
}

inline void RelCommon::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&hint_)) + sizeof(advanced_extension_));
clear_has_emit_kind();
}

RelCommon::~RelCommon() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete advanced_extension_;
  if (has_emit_kind()) {
    clear_emit_kind();
  }
}

void RelCommon::ArenaDtor(void* object) {
  RelCommon* _this = reinterpret_cast< RelCommon* >(object);
  (void)_this;
}
void RelCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelCommon::clear_emit_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.RelCommon)
  switch (emit_kind_case()) {
    case kDirect: {
      if (GetArenaForAllocation() == nullptr) {
        delete emit_kind_.direct_;
      }
      break;
    }
    case kEmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete emit_kind_.emit_;
      }
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EMIT_KIND_NOT_SET;
}


void RelCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  clear_emit_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
  if (_internal_has_direct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direct(this), target, stream);
  }

  // .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
  if (_internal_has_emit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::emit(this), target, stream);
  }

  // .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
  if (this->_internal_has_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hint(this), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon)
  return target;
}

size_t RelCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
  if (this->_internal_has_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hint_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  switch (emit_kind_case()) {
    // .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
    case kDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emit_kind_.direct_);
      break;
    }
    // .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
    case kEmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emit_kind_.emit_);
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon::GetClassData() const { return &_class_data_; }

void RelCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelCommon *>(to)->MergeFrom(
      static_cast<const RelCommon &>(from));
}


void RelCommon::MergeFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hint()) {
    _internal_mutable_hint()->::substrait::RelCommon_Hint::MergeFrom(from._internal_hint());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  switch (from.emit_kind_case()) {
    case kDirect: {
      _internal_mutable_direct()->::substrait::RelCommon_Direct::MergeFrom(from._internal_direct());
      break;
    }
    case kEmit: {
      _internal_mutable_emit()->::substrait::RelCommon_Emit::MergeFrom(from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon::CopyFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon::IsInitialized() const {
  return true;
}

void RelCommon::InternalSwap(RelCommon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon, advanced_extension_)
      + sizeof(RelCommon::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon, hint_)>(
          reinterpret_cast<char*>(&hint_),
          reinterpret_cast<char*>(&other->hint_));
  swap(emit_kind_, other->emit_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[5]);
}

// ===================================================================

class ReadRel_NamedTable::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel_NamedTable* msg);
};

const ::substrait::extensions::AdvancedExtension&
ReadRel_NamedTable::_Internal::advanced_extension(const ReadRel_NamedTable* msg) {
  return *msg->advanced_extension_;
}
void ReadRel_NamedTable::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ReadRel_NamedTable::ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.NamedTable)
}
ReadRel_NamedTable::ReadRel_NamedTable(const ReadRel_NamedTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.NamedTable)
}

inline void ReadRel_NamedTable::SharedCtor() {
advanced_extension_ = nullptr;
}

ReadRel_NamedTable::~ReadRel_NamedTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.NamedTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel_NamedTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ReadRel_NamedTable::ArenaDtor(void* object) {
  ReadRel_NamedTable* _this = reinterpret_cast< ReadRel_NamedTable* >(object);
  (void)_this;
}
void ReadRel_NamedTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_NamedTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_NamedTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.NamedTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_NamedTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1 [json_name = "names"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.ReadRel.NamedTable.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_NamedTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.NamedTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1 [json_name = "names"];
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.NamedTable.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.NamedTable)
  return target;
}

size_t ReadRel_NamedTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.NamedTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1 [json_name = "names"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_NamedTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel_NamedTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_NamedTable::GetClassData() const { return &_class_data_; }

void ReadRel_NamedTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel_NamedTable *>(to)->MergeFrom(
      static_cast<const ReadRel_NamedTable &>(from));
}


void ReadRel_NamedTable::MergeFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_NamedTable::CopyFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_NamedTable::IsInitialized() const {
  return true;
}

void ReadRel_NamedTable::InternalSwap(ReadRel_NamedTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_NamedTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[6]);
}

// ===================================================================

class ReadRel_VirtualTable::_Internal {
 public:
};

void ReadRel_VirtualTable::clear_values() {
  values_.Clear();
}
ReadRel_VirtualTable::ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.VirtualTable)
}
ReadRel_VirtualTable::ReadRel_VirtualTable(const ReadRel_VirtualTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.VirtualTable)
}

inline void ReadRel_VirtualTable::SharedCtor() {
}

ReadRel_VirtualTable::~ReadRel_VirtualTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.VirtualTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel_VirtualTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadRel_VirtualTable::ArenaDtor(void* object) {
  ReadRel_VirtualTable* _this = reinterpret_cast< ReadRel_VirtualTable* >(object);
  (void)_this;
}
void ReadRel_VirtualTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_VirtualTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_VirtualTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.VirtualTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_VirtualTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_VirtualTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.VirtualTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.VirtualTable)
  return target;
}

size_t ReadRel_VirtualTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.VirtualTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_VirtualTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel_VirtualTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_VirtualTable::GetClassData() const { return &_class_data_; }

void ReadRel_VirtualTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel_VirtualTable *>(to)->MergeFrom(
      static_cast<const ReadRel_VirtualTable &>(from));
}


void ReadRel_VirtualTable::MergeFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_VirtualTable::CopyFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_VirtualTable::IsInitialized() const {
  return true;
}

void ReadRel_VirtualTable::InternalSwap(ReadRel_VirtualTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_VirtualTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[7]);
}

// ===================================================================

class ReadRel_ExtensionTable::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ReadRel_ExtensionTable* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ReadRel_ExtensionTable::_Internal::detail(const ReadRel_ExtensionTable* msg) {
  return *msg->detail_;
}
void ReadRel_ExtensionTable::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.ExtensionTable)
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detail()) {
    detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.ExtensionTable)
}

inline void ReadRel_ExtensionTable::SharedCtor() {
detail_ = nullptr;
}

ReadRel_ExtensionTable::~ReadRel_ExtensionTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.ExtensionTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel_ExtensionTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete detail_;
}

void ReadRel_ExtensionTable::ArenaDtor(void* object) {
  ReadRel_ExtensionTable* _this = reinterpret_cast< ReadRel_ExtensionTable* >(object);
  (void)_this;
}
void ReadRel_ExtensionTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_ExtensionTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_ExtensionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.ExtensionTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_ExtensionTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any detail = 1 [json_name = "detail"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_ExtensionTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.ExtensionTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.ExtensionTable)
  return target;
}

size_t ReadRel_ExtensionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.ExtensionTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_ExtensionTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel_ExtensionTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_ExtensionTable::GetClassData() const { return &_class_data_; }

void ReadRel_ExtensionTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel_ExtensionTable *>(to)->MergeFrom(
      static_cast<const ReadRel_ExtensionTable &>(from));
}


void ReadRel_ExtensionTable::MergeFrom(const ReadRel_ExtensionTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.ExtensionTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_ExtensionTable::CopyFrom(const ReadRel_ExtensionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.ExtensionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_ExtensionTable::IsInitialized() const {
  return true;
}

void ReadRel_ExtensionTable::InternalSwap(ReadRel_ExtensionTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(detail_, other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_ExtensionTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[8]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&format_)) + sizeof(length_));
  clear_has_path_type();
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles)
}

inline void ReadRel_LocalFiles_FileOrFiles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&format_)) + sizeof(length_));
clear_has_path_type();
}

ReadRel_LocalFiles_FileOrFiles::~ReadRel_LocalFiles_FileOrFiles() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.LocalFiles.FileOrFiles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel_LocalFiles_FileOrFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_path_type()) {
    clear_path_type();
  }
}

void ReadRel_LocalFiles_FileOrFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles_FileOrFiles* _this = reinterpret_cast< ReadRel_LocalFiles_FileOrFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles_FileOrFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles_FileOrFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_LocalFiles_FileOrFiles::clear_path_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  switch (path_type_case()) {
    case kUriPath: {
      path_type_.uri_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kUriPathGlob: {
      path_type_.uri_path_glob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kUriFile: {
      path_type_.uri_file_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kUriFolder: {
      path_type_.uri_folder_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}


void ReadRel_LocalFiles_FileOrFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&format_)) + sizeof(length_));
  clear_path_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri_path = 1 [json_name = "uriPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri_path_glob = 2 [json_name = "uriPathGlob"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri_path_glob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri_file = 3 [json_name = "uriFile"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uri_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri_folder = 4 [json_name = "uriFolder"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat format = 5 [json_name = "format"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 partition_index = 6 [json_name = "partitionIndex"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          partition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 7 [json_name = "start"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 8 [json_name = "length"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_LocalFiles_FileOrFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri_path = 1 [json_name = "uriPath"];
  if (_internal_has_uri_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path().data(), static_cast<int>(this->_internal_uri_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri_path(), target);
  }

  // string uri_path_glob = 2 [json_name = "uriPathGlob"];
  if (_internal_has_uri_path_glob()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path_glob().data(), static_cast<int>(this->_internal_uri_path_glob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri_path_glob(), target);
  }

  // string uri_file = 3 [json_name = "uriFile"];
  if (_internal_has_uri_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_file().data(), static_cast<int>(this->_internal_uri_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri_file(), target);
  }

  // string uri_folder = 4 [json_name = "uriFolder"];
  if (_internal_has_uri_folder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_folder().data(), static_cast<int>(this->_internal_uri_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri_folder(), target);
  }

  // .substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat format = 5 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_format(), target);
  }

  // uint64 partition_index = 6 [json_name = "partitionIndex"];
  if (this->_internal_partition_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_partition_index(), target);
  }

  // uint64 start = 7 [json_name = "start"];
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_start(), target);
  }

  // uint64 length = 8 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.LocalFiles.FileOrFiles)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat format = 5 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint64 partition_index = 6 [json_name = "partitionIndex"];
  if (this->_internal_partition_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_partition_index());
  }

  // uint64 start = 7 [json_name = "start"];
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 length = 8 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  switch (path_type_case()) {
    // string uri_path = 1 [json_name = "uriPath"];
    case kUriPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path());
      break;
    }
    // string uri_path_glob = 2 [json_name = "uriPathGlob"];
    case kUriPathGlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path_glob());
      break;
    }
    // string uri_file = 3 [json_name = "uriFile"];
    case kUriFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_file());
      break;
    }
    // string uri_folder = 4 [json_name = "uriFolder"];
    case kUriFolder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel_LocalFiles_FileOrFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles::GetClassData() const { return &_class_data_; }

void ReadRel_LocalFiles_FileOrFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel_LocalFiles_FileOrFiles *>(to)->MergeFrom(
      static_cast<const ReadRel_LocalFiles_FileOrFiles &>(from));
}


void ReadRel_LocalFiles_FileOrFiles::MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from._internal_partition_index() != 0) {
    _internal_set_partition_index(from._internal_partition_index());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  switch (from.path_type_case()) {
    case kUriPath: {
      _internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles::InternalSwap(ReadRel_LocalFiles_FileOrFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, length_)
      + sizeof(ReadRel_LocalFiles_FileOrFiles::length_)
      - PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, format_)>(
          reinterpret_cast<char*>(&format_),
          reinterpret_cast<char*>(&other->format_));
  swap(path_type_, other->path_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[9]);
}

// ===================================================================

class ReadRel_LocalFiles::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel_LocalFiles* msg);
};

const ::substrait::extensions::AdvancedExtension&
ReadRel_LocalFiles::_Internal::advanced_extension(const ReadRel_LocalFiles* msg) {
  return *msg->advanced_extension_;
}
void ReadRel_LocalFiles::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ReadRel_LocalFiles::ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles)
}
ReadRel_LocalFiles::ReadRel_LocalFiles(const ReadRel_LocalFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles)
}

inline void ReadRel_LocalFiles::SharedCtor() {
advanced_extension_ = nullptr;
}

ReadRel_LocalFiles::~ReadRel_LocalFiles() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.LocalFiles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel_LocalFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ReadRel_LocalFiles::ArenaDtor(void* object) {
  ReadRel_LocalFiles* _this = reinterpret_cast< ReadRel_LocalFiles* >(object);
  (void)_this;
}
void ReadRel_LocalFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel_LocalFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel_LocalFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.LocalFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_LocalFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.LocalFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.LocalFiles)
  return target;
}

size_t ReadRel_LocalFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.LocalFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel_LocalFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles::GetClassData() const { return &_class_data_; }

void ReadRel_LocalFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel_LocalFiles *>(to)->MergeFrom(
      static_cast<const ReadRel_LocalFiles &>(from));
}


void ReadRel_LocalFiles::MergeFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_LocalFiles::CopyFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles::InternalSwap(ReadRel_LocalFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(advanced_extension_, other->advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[10]);
}

// ===================================================================

class ReadRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ReadRel* msg);
  static const ::substrait::NamedStruct& base_schema(const ReadRel* msg);
  static const ::substrait::Expression& filter(const ReadRel* msg);
  static const ::substrait::Expression_MaskExpression& projection(const ReadRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel* msg);
  static const ::substrait::ReadRel_VirtualTable& virtual_table(const ReadRel* msg);
  static const ::substrait::ReadRel_LocalFiles& local_files(const ReadRel* msg);
  static const ::substrait::ReadRel_NamedTable& named_table(const ReadRel* msg);
  static const ::substrait::ReadRel_ExtensionTable& extension_table(const ReadRel* msg);
};

const ::substrait::RelCommon&
ReadRel::_Internal::common(const ReadRel* msg) {
  return *msg->common_;
}
const ::substrait::NamedStruct&
ReadRel::_Internal::base_schema(const ReadRel* msg) {
  return *msg->base_schema_;
}
const ::substrait::Expression&
ReadRel::_Internal::filter(const ReadRel* msg) {
  return *msg->filter_;
}
const ::substrait::Expression_MaskExpression&
ReadRel::_Internal::projection(const ReadRel* msg) {
  return *msg->projection_;
}
const ::substrait::extensions::AdvancedExtension&
ReadRel::_Internal::advanced_extension(const ReadRel* msg) {
  return *msg->advanced_extension_;
}
const ::substrait::ReadRel_VirtualTable&
ReadRel::_Internal::virtual_table(const ReadRel* msg) {
  return *msg->read_type_.virtual_table_;
}
const ::substrait::ReadRel_LocalFiles&
ReadRel::_Internal::local_files(const ReadRel* msg) {
  return *msg->read_type_.local_files_;
}
const ::substrait::ReadRel_NamedTable&
ReadRel::_Internal::named_table(const ReadRel* msg) {
  return *msg->read_type_.named_table_;
}
const ::substrait::ReadRel_ExtensionTable&
ReadRel::_Internal::extension_table(const ReadRel* msg) {
  return *msg->read_type_.extension_table_;
}
void ReadRel::clear_base_schema() {
  if (GetArenaForAllocation() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
}
void ReadRel::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
void ReadRel::clear_projection() {
  if (GetArenaForAllocation() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
}
void ReadRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
void ReadRel::set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (virtual_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ReadRel_VirtualTable>::GetOwningArena(virtual_table);
    if (message_arena != submessage_arena) {
      virtual_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_table, submessage_arena);
    }
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.virtual_table)
}
void ReadRel::set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (local_files) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ReadRel_LocalFiles>::GetOwningArena(local_files);
    if (message_arena != submessage_arena) {
      local_files = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_files, submessage_arena);
    }
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.local_files)
}
void ReadRel::set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ReadRel_NamedTable>::GetOwningArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.named_table)
}
void ReadRel::set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (extension_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ReadRel_ExtensionTable>::GetOwningArena(extension_table);
    if (message_arena != submessage_arena) {
      extension_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_table, submessage_arena);
    }
    set_has_extension_table();
    read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.extension_table)
}
ReadRel::ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel)
}
ReadRel::ReadRel(const ReadRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_base_schema()) {
    base_schema_ = new ::substrait::NamedStruct(*from.base_schema_);
  } else {
    base_schema_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::substrait::Expression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_projection()) {
    projection_ = new ::substrait::Expression_MaskExpression(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  clear_has_read_type();
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::substrait::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::substrait::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::ReadRel_ExtensionTable::MergeFrom(from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel)
}

inline void ReadRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
clear_has_read_type();
}

ReadRel::~ReadRel() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete base_schema_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete projection_;
  if (this != internal_default_instance()) delete advanced_extension_;
  if (has_read_type()) {
    clear_read_type();
  }
}

void ReadRel::ArenaDtor(void* object) {
  ReadRel* _this = reinterpret_cast< ReadRel* >(object);
  (void)_this;
}
void ReadRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadRel::clear_read_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ReadRel)
  switch (read_type_case()) {
    case kVirtualTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete read_type_.virtual_table_;
      }
      break;
    }
    case kLocalFiles: {
      if (GetArenaForAllocation() == nullptr) {
        delete read_type_.local_files_;
      }
      break;
    }
    case kNamedTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete read_type_.named_table_;
      }
      break;
    }
    case kExtensionTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete read_type_.extension_table_;
      }
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}


void ReadRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && base_schema_ != nullptr) {
    delete base_schema_;
  }
  base_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && projection_ != nullptr) {
    delete projection_;
  }
  projection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  clear_read_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression filter = 3 [json_name = "filter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_files(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
  if (this->_internal_has_base_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base_schema(this), target, stream);
  }

  // .substrait.Expression filter = 3 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filter(this), target, stream);
  }

  // .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
  if (this->_internal_has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::projection(this), target, stream);
  }

  // .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
  if (_internal_has_virtual_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::virtual_table(this), target, stream);
  }

  // .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
  if (_internal_has_local_files()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::local_files(this), target, stream);
  }

  // .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
  if (_internal_has_named_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::named_table(this), target, stream);
  }

  // .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
  if (_internal_has_extension_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::extension_table(this), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel)
  return target;
}

size_t ReadRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
  if (this->_internal_has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_schema_);
  }

  // .substrait.Expression filter = 3 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
  if (this->_internal_has_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  switch (read_type_case()) {
    // .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
    case kVirtualTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.virtual_table_);
      break;
    }
    // .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
    case kLocalFiles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.local_files_);
      break;
    }
    // .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.named_table_);
      break;
    }
    // .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
    case kExtensionTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_type_.extension_table_);
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel::GetClassData() const { return &_class_data_; }

void ReadRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadRel *>(to)->MergeFrom(
      static_cast<const ReadRel &>(from));
}


void ReadRel::MergeFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_base_schema()) {
    _internal_mutable_base_schema()->::substrait::NamedStruct::MergeFrom(from._internal_base_schema());
  }
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::substrait::Expression::MergeFrom(from._internal_filter());
  }
  if (from._internal_has_projection()) {
    _internal_mutable_projection()->::substrait::Expression_MaskExpression::MergeFrom(from._internal_projection());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _internal_mutable_virtual_table()->::substrait::ReadRel_VirtualTable::MergeFrom(from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _internal_mutable_local_files()->::substrait::ReadRel_LocalFiles::MergeFrom(from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _internal_mutable_named_table()->::substrait::ReadRel_NamedTable::MergeFrom(from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _internal_mutable_extension_table()->::substrait::ReadRel_ExtensionTable::MergeFrom(from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel::CopyFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel::IsInitialized() const {
  return true;
}

void ReadRel::InternalSwap(ReadRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel, advanced_extension_)
      + sizeof(ReadRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ReadRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
  swap(read_type_, other->read_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[11]);
}

// ===================================================================

class ProjectRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ProjectRel* msg);
  static const ::substrait::Rel& input(const ProjectRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ProjectRel* msg);
};

const ::substrait::RelCommon&
ProjectRel::_Internal::common(const ProjectRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
ProjectRel::_Internal::input(const ProjectRel* msg) {
  return *msg->input_;
}
const ::substrait::extensions::AdvancedExtension&
ProjectRel::_Internal::advanced_extension(const ProjectRel* msg) {
  return *msg->advanced_extension_;
}
void ProjectRel::clear_expressions() {
  expressions_.Clear();
}
void ProjectRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
ProjectRel::ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expressions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ProjectRel)
}
ProjectRel::ProjectRel(const ProjectRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expressions_(from.expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ProjectRel)
}

inline void ProjectRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

ProjectRel::~ProjectRel() {
  // @@protoc_insertion_point(destructor:substrait.ProjectRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void ProjectRel::ArenaDtor(void* object) {
  ProjectRel* _this = reinterpret_cast< ProjectRel* >(object);
  (void)_this;
}
void ProjectRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ProjectRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expressions_.Clear();
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ProjectRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_expressions(i), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ProjectRel)
  return target;
}

size_t ProjectRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ProjectRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
  total_size += 1UL * this->_internal_expressions_size();
  for (const auto& msg : this->expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectRel::GetClassData() const { return &_class_data_; }

void ProjectRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProjectRel *>(to)->MergeFrom(
      static_cast<const ProjectRel &>(from));
}


void ProjectRel::MergeFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ProjectRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  expressions_.MergeFrom(from.expressions_);
  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectRel::CopyFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRel::IsInitialized() const {
  return true;
}

void ProjectRel::InternalSwap(ProjectRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  expressions_.InternalSwap(&other->expressions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectRel, advanced_extension_)
      + sizeof(ProjectRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ProjectRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[12]);
}

// ===================================================================

class JoinRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const JoinRel* msg);
  static const ::substrait::Rel& left(const JoinRel* msg);
  static const ::substrait::Rel& right(const JoinRel* msg);
  static const ::substrait::Expression& expression(const JoinRel* msg);
  static const ::substrait::Expression& post_join_filter(const JoinRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const JoinRel* msg);
};

const ::substrait::RelCommon&
JoinRel::_Internal::common(const JoinRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
JoinRel::_Internal::left(const JoinRel* msg) {
  return *msg->left_;
}
const ::substrait::Rel&
JoinRel::_Internal::right(const JoinRel* msg) {
  return *msg->right_;
}
const ::substrait::Expression&
JoinRel::_Internal::expression(const JoinRel* msg) {
  return *msg->expression_;
}
const ::substrait::Expression&
JoinRel::_Internal::post_join_filter(const JoinRel* msg) {
  return *msg->post_join_filter_;
}
const ::substrait::extensions::AdvancedExtension&
JoinRel::_Internal::advanced_extension(const JoinRel* msg) {
  return *msg->advanced_extension_;
}
void JoinRel::clear_expression() {
  if (GetArenaForAllocation() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
void JoinRel::clear_post_join_filter() {
  if (GetArenaForAllocation() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
}
void JoinRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
JoinRel::JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.JoinRel)
}
JoinRel::JoinRel(const JoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::substrait::Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_post_join_filter()) {
    post_join_filter_ = new ::substrait::Expression(*from.post_join_filter_);
  } else {
    post_join_filter_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.JoinRel)
}

inline void JoinRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&common_)) + sizeof(type_));
}

JoinRel::~JoinRel() {
  // @@protoc_insertion_point(destructor:substrait.JoinRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete post_join_filter_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void JoinRel::ArenaDtor(void* object) {
  JoinRel* _this = reinterpret_cast< JoinRel* >(object);
  (void)_this;
}
void JoinRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.JoinRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArenaForAllocation() == nullptr && post_join_filter_ != nullptr) {
    delete post_join_filter_;
  }
  post_join_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel left = 2 [json_name = "left"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel right = 3 [json_name = "right"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression expression = 4 [json_name = "expression"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::JoinRel_JoinType>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.JoinRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel left = 2 [json_name = "left"];
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.Rel right = 3 [json_name = "right"];
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .substrait.Expression expression = 4 [json_name = "expression"];
  if (this->_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expression(this), target, stream);
  }

  // .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
  if (this->_internal_has_post_join_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::post_join_filter(this), target, stream);
  }

  // .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.JoinRel)
  return target;
}

size_t JoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.JoinRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel left = 2 [json_name = "left"];
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.Rel right = 3 [json_name = "right"];
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.Expression expression = 4 [json_name = "expression"];
  if (this->_internal_has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
  if (this->_internal_has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_join_filter_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRel::GetClassData() const { return &_class_data_; }

void JoinRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinRel *>(to)->MergeFrom(
      static_cast<const JoinRel &>(from));
}


void JoinRel::MergeFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.JoinRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_left()) {
    _internal_mutable_left()->::substrait::Rel::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::substrait::Rel::MergeFrom(from._internal_right());
  }
  if (from._internal_has_expression()) {
    _internal_mutable_expression()->::substrait::Expression::MergeFrom(from._internal_expression());
  }
  if (from._internal_has_post_join_filter()) {
    _internal_mutable_post_join_filter()->::substrait::Expression::MergeFrom(from._internal_post_join_filter());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRel::CopyFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRel::IsInitialized() const {
  return true;
}

void JoinRel::InternalSwap(JoinRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRel, type_)
      + sizeof(JoinRel::type_)
      - PROTOBUF_FIELD_OFFSET(JoinRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[13]);
}

// ===================================================================

class CrossRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const CrossRel* msg);
  static const ::substrait::Rel& left(const CrossRel* msg);
  static const ::substrait::Rel& right(const CrossRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const CrossRel* msg);
};

const ::substrait::RelCommon&
CrossRel::_Internal::common(const CrossRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
CrossRel::_Internal::left(const CrossRel* msg) {
  return *msg->left_;
}
const ::substrait::Rel&
CrossRel::_Internal::right(const CrossRel* msg) {
  return *msg->right_;
}
const ::substrait::extensions::AdvancedExtension&
CrossRel::_Internal::advanced_extension(const CrossRel* msg) {
  return *msg->advanced_extension_;
}
void CrossRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
CrossRel::CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.CrossRel)
}
CrossRel::CrossRel(const CrossRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::substrait::Rel(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::substrait::Rel(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.CrossRel)
}

inline void CrossRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

CrossRel::~CrossRel() {
  // @@protoc_insertion_point(destructor:substrait.CrossRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CrossRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void CrossRel::ArenaDtor(void* object) {
  CrossRel* _this = reinterpret_cast< CrossRel* >(object);
  (void)_this;
}
void CrossRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrossRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrossRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.CrossRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel left = 2 [json_name = "left"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel right = 3 [json_name = "right"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.CrossRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel left = 2 [json_name = "left"];
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .substrait.Rel right = 3 [json_name = "right"];
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.CrossRel)
  return target;
}

size_t CrossRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.CrossRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel left = 2 [json_name = "left"];
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .substrait.Rel right = 3 [json_name = "right"];
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrossRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossRel::GetClassData() const { return &_class_data_; }

void CrossRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrossRel *>(to)->MergeFrom(
      static_cast<const CrossRel &>(from));
}


void CrossRel::MergeFrom(const CrossRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.CrossRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_left()) {
    _internal_mutable_left()->::substrait::Rel::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::substrait::Rel::MergeFrom(from._internal_right());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossRel::CopyFrom(const CrossRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.CrossRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossRel::IsInitialized() const {
  return true;
}

void CrossRel::InternalSwap(CrossRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossRel, advanced_extension_)
      + sizeof(CrossRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(CrossRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[14]);
}

// ===================================================================

class FetchRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const FetchRel* msg);
  static const ::substrait::Rel& input(const FetchRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const FetchRel* msg);
};

const ::substrait::RelCommon&
FetchRel::_Internal::common(const FetchRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
FetchRel::_Internal::input(const FetchRel* msg) {
  return *msg->input_;
}
const ::substrait::extensions::AdvancedExtension&
FetchRel::_Internal::advanced_extension(const FetchRel* msg) {
  return *msg->advanced_extension_;
}
void FetchRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
FetchRel::FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.FetchRel)
}
FetchRel::FetchRel(const FetchRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:substrait.FetchRel)
}

inline void FetchRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&common_)) + sizeof(count_));
}

FetchRel::~FetchRel() {
  // @@protoc_insertion_point(destructor:substrait.FetchRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FetchRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void FetchRel::ArenaDtor(void* object) {
  FetchRel* _this = reinterpret_cast< FetchRel* >(object);
  (void)_this;
}
void FetchRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FetchRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3 [json_name = "offset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 count = 4 [json_name = "count"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FetchRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // int64 count = 4 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FetchRel)
  return target;
}

size_t FetchRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FetchRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 count = 4 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FetchRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchRel::GetClassData() const { return &_class_data_; }

void FetchRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FetchRel *>(to)->MergeFrom(
      static_cast<const FetchRel &>(from));
}


void FetchRel::MergeFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.FetchRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchRel::CopyFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRel::IsInitialized() const {
  return true;
}

void FetchRel::InternalSwap(FetchRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchRel, count_)
      + sizeof(FetchRel::count_)
      - PROTOBUF_FIELD_OFFSET(FetchRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[15]);
}

// ===================================================================

class AggregateRel_Grouping::_Internal {
 public:
};

void AggregateRel_Grouping::clear_grouping_expressions() {
  grouping_expressions_.Clear();
}
AggregateRel_Grouping::AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  grouping_expressions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel.Grouping)
}
AggregateRel_Grouping::AggregateRel_Grouping(const AggregateRel_Grouping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      grouping_expressions_(from.grouping_expressions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel.Grouping)
}

inline void AggregateRel_Grouping::SharedCtor() {
}

AggregateRel_Grouping::~AggregateRel_Grouping() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel.Grouping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggregateRel_Grouping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregateRel_Grouping::ArenaDtor(void* object) {
  AggregateRel_Grouping* _this = reinterpret_cast< AggregateRel_Grouping* >(object);
  (void)_this;
}
void AggregateRel_Grouping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Grouping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel_Grouping::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel.Grouping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grouping_expressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Grouping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grouping_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel_Grouping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel.Grouping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grouping_expressions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_grouping_expressions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel.Grouping)
  return target;
}

size_t AggregateRel_Grouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel.Grouping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
  total_size += 1UL * this->_internal_grouping_expressions_size();
  for (const auto& msg : this->grouping_expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel_Grouping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggregateRel_Grouping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel_Grouping::GetClassData() const { return &_class_data_; }

void AggregateRel_Grouping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggregateRel_Grouping *>(to)->MergeFrom(
      static_cast<const AggregateRel_Grouping &>(from));
}


void AggregateRel_Grouping::MergeFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  grouping_expressions_.MergeFrom(from.grouping_expressions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel_Grouping::CopyFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Grouping::IsInitialized() const {
  return true;
}

void AggregateRel_Grouping::InternalSwap(AggregateRel_Grouping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  grouping_expressions_.InternalSwap(&other->grouping_expressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Grouping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[16]);
}

// ===================================================================

class AggregateRel_Measure::_Internal {
 public:
  static const ::substrait::AggregateFunction& measure(const AggregateRel_Measure* msg);
  static const ::substrait::Expression& filter(const AggregateRel_Measure* msg);
};

const ::substrait::AggregateFunction&
AggregateRel_Measure::_Internal::measure(const AggregateRel_Measure* msg) {
  return *msg->measure_;
}
const ::substrait::Expression&
AggregateRel_Measure::_Internal::filter(const AggregateRel_Measure* msg) {
  return *msg->filter_;
}
void AggregateRel_Measure::clear_measure() {
  if (GetArenaForAllocation() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
}
void AggregateRel_Measure::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
AggregateRel_Measure::AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel.Measure)
}
AggregateRel_Measure::AggregateRel_Measure(const AggregateRel_Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measure()) {
    measure_ = new ::substrait::AggregateFunction(*from.measure_);
  } else {
    measure_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::substrait::Expression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel.Measure)
}

inline void AggregateRel_Measure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&measure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_) -
    reinterpret_cast<char*>(&measure_)) + sizeof(filter_));
}

AggregateRel_Measure::~AggregateRel_Measure() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel.Measure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggregateRel_Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete measure_;
  if (this != internal_default_instance()) delete filter_;
}

void AggregateRel_Measure::ArenaDtor(void* object) {
  AggregateRel_Measure* _this = reinterpret_cast< AggregateRel_Measure* >(object);
  (void)_this;
}
void AggregateRel_Measure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel_Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel_Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel.Measure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && measure_ != nullptr) {
    delete measure_;
  }
  measure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Measure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.AggregateFunction measure = 1 [json_name = "measure"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression filter = 2 [json_name = "filter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel_Measure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel.Measure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.AggregateFunction measure = 1 [json_name = "measure"];
  if (this->_internal_has_measure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::measure(this), target, stream);
  }

  // .substrait.Expression filter = 2 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel.Measure)
  return target;
}

size_t AggregateRel_Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel.Measure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.AggregateFunction measure = 1 [json_name = "measure"];
  if (this->_internal_has_measure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measure_);
  }

  // .substrait.Expression filter = 2 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel_Measure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggregateRel_Measure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel_Measure::GetClassData() const { return &_class_data_; }

void AggregateRel_Measure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggregateRel_Measure *>(to)->MergeFrom(
      static_cast<const AggregateRel_Measure &>(from));
}


void AggregateRel_Measure::MergeFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_measure()) {
    _internal_mutable_measure()->::substrait::AggregateFunction::MergeFrom(from._internal_measure());
  }
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::substrait::Expression::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel_Measure::CopyFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Measure::IsInitialized() const {
  return true;
}

void AggregateRel_Measure::InternalSwap(AggregateRel_Measure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, filter_)
      + sizeof(AggregateRel_Measure::filter_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, measure_)>(
          reinterpret_cast<char*>(&measure_),
          reinterpret_cast<char*>(&other->measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Measure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[17]);
}

// ===================================================================

class AggregateRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const AggregateRel* msg);
  static const ::substrait::Rel& input(const AggregateRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const AggregateRel* msg);
};

const ::substrait::RelCommon&
AggregateRel::_Internal::common(const AggregateRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
AggregateRel::_Internal::input(const AggregateRel* msg) {
  return *msg->input_;
}
const ::substrait::extensions::AdvancedExtension&
AggregateRel::_Internal::advanced_extension(const AggregateRel* msg) {
  return *msg->advanced_extension_;
}
void AggregateRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
AggregateRel::AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groupings_(arena),
  measures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel)
}
AggregateRel::AggregateRel(const AggregateRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groupings_(from.groupings_),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel)
}

inline void AggregateRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

AggregateRel::~AggregateRel() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AggregateRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void AggregateRel::ArenaDtor(void* object) {
  AggregateRel* _this = reinterpret_cast< AggregateRel* >(object);
  (void)_this;
}
void AggregateRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AggregateRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupings_.Clear();
  measures_.Clear();
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groupings(i), target, stream);
  }

  // repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_measures(i), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel)
  return target;
}

size_t AggregateRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
  total_size += 1UL * this->_internal_groupings_size();
  for (const auto& msg : this->groupings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
  total_size += 1UL * this->_internal_measures_size();
  for (const auto& msg : this->measures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AggregateRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel::GetClassData() const { return &_class_data_; }

void AggregateRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AggregateRel *>(to)->MergeFrom(
      static_cast<const AggregateRel &>(from));
}


void AggregateRel::MergeFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groupings_.MergeFrom(from.groupings_);
  measures_.MergeFrom(from.measures_);
  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel::CopyFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel::IsInitialized() const {
  return true;
}

void AggregateRel::InternalSwap(AggregateRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groupings_.InternalSwap(&other->groupings_);
  measures_.InternalSwap(&other->measures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel, advanced_extension_)
      + sizeof(AggregateRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[18]);
}

// ===================================================================

class SortRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const SortRel* msg);
  static const ::substrait::Rel& input(const SortRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const SortRel* msg);
};

const ::substrait::RelCommon&
SortRel::_Internal::common(const SortRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
SortRel::_Internal::input(const SortRel* msg) {
  return *msg->input_;
}
const ::substrait::extensions::AdvancedExtension&
SortRel::_Internal::advanced_extension(const SortRel* msg) {
  return *msg->advanced_extension_;
}
void SortRel::clear_sorts() {
  sorts_.Clear();
}
void SortRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
SortRel::SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sorts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.SortRel)
}
SortRel::SortRel(const SortRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sorts_(from.sorts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.SortRel)
}

inline void SortRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

SortRel::~SortRel() {
  // @@protoc_insertion_point(destructor:substrait.SortRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SortRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void SortRel::ArenaDtor(void* object) {
  SortRel* _this = reinterpret_cast< SortRel* >(object);
  (void)_this;
}
void SortRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SortRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SortRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.SortRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorts_.Clear();
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.SortRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sorts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sorts(i), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.SortRel)
  return target;
}

size_t SortRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.SortRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SortRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortRel::GetClassData() const { return &_class_data_; }

void SortRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SortRel *>(to)->MergeFrom(
      static_cast<const SortRel &>(from));
}


void SortRel::MergeFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.SortRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sorts_.MergeFrom(from.sorts_);
  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortRel::CopyFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRel::IsInitialized() const {
  return true;
}

void SortRel::InternalSwap(SortRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sorts_.InternalSwap(&other->sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortRel, advanced_extension_)
      + sizeof(SortRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(SortRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[19]);
}

// ===================================================================

class FilterRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const FilterRel* msg);
  static const ::substrait::Rel& input(const FilterRel* msg);
  static const ::substrait::Expression& condition(const FilterRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const FilterRel* msg);
};

const ::substrait::RelCommon&
FilterRel::_Internal::common(const FilterRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
FilterRel::_Internal::input(const FilterRel* msg) {
  return *msg->input_;
}
const ::substrait::Expression&
FilterRel::_Internal::condition(const FilterRel* msg) {
  return *msg->condition_;
}
const ::substrait::extensions::AdvancedExtension&
FilterRel::_Internal::advanced_extension(const FilterRel* msg) {
  return *msg->advanced_extension_;
}
void FilterRel::clear_condition() {
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
void FilterRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
FilterRel::FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.FilterRel)
}
FilterRel::FilterRel(const FilterRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::substrait::Expression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.FilterRel)
}

inline void FilterRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&advanced_extension_) -
    reinterpret_cast<char*>(&common_)) + sizeof(advanced_extension_));
}

FilterRel::~FilterRel() {
  // @@protoc_insertion_point(destructor:substrait.FilterRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilterRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void FilterRel::ArenaDtor(void* object) {
  FilterRel* _this = reinterpret_cast< FilterRel* >(object);
  (void)_this;
}
void FilterRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FilterRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression condition = 3 [json_name = "condition"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FilterRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .substrait.Expression condition = 3 [json_name = "condition"];
  if (this->_internal_has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition(this), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FilterRel)
  return target;
}

size_t FilterRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FilterRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .substrait.Expression condition = 3 [json_name = "condition"];
  if (this->_internal_has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilterRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterRel::GetClassData() const { return &_class_data_; }

void FilterRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilterRel *>(to)->MergeFrom(
      static_cast<const FilterRel &>(from));
}


void FilterRel::MergeFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.FilterRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_condition()) {
    _internal_mutable_condition()->::substrait::Expression::MergeFrom(from._internal_condition());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterRel::CopyFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRel::IsInitialized() const {
  return true;
}

void FilterRel::InternalSwap(FilterRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRel, advanced_extension_)
      + sizeof(FilterRel::advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(FilterRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[20]);
}

// ===================================================================

class SetRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const SetRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const SetRel* msg);
};

const ::substrait::RelCommon&
SetRel::_Internal::common(const SetRel* msg) {
  return *msg->common_;
}
const ::substrait::extensions::AdvancedExtension&
SetRel::_Internal::advanced_extension(const SetRel* msg) {
  return *msg->advanced_extension_;
}
void SetRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
}
SetRel::SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.SetRel)
}
SetRel::SetRel(const SetRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_advanced_extension()) {
    advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from.advanced_extension_);
  } else {
    advanced_extension_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:substrait.SetRel)
}

inline void SetRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&common_)) + sizeof(op_));
}

SetRel::~SetRel() {
  // @@protoc_insertion_point(destructor:substrait.SetRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete advanced_extension_;
}

void SetRel::ArenaDtor(void* object) {
  SetRel* _this = reinterpret_cast< SetRel* >(object);
  (void)_this;
}
void SetRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.SetRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && advanced_extension_ != nullptr) {
    delete advanced_extension_;
  }
  advanced_extension_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.SetRel.SetOp op = 3 [json_name = "op"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::SetRel_SetOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.SetRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // .substrait.SetRel.SetOp op = 3 [json_name = "op"];
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::advanced_extension(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.SetRel)
  return target;
}

size_t SetRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.SetRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advanced_extension_);
  }

  // .substrait.SetRel.SetOp op = 3 [json_name = "op"];
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRel::GetClassData() const { return &_class_data_; }

void SetRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetRel *>(to)->MergeFrom(
      static_cast<const SetRel &>(from));
}


void SetRel::MergeFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.SetRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_advanced_extension()) {
    _internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(from._internal_advanced_extension());
  }
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRel::CopyFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRel::IsInitialized() const {
  return true;
}

void SetRel::InternalSwap(SetRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRel, op_)
      + sizeof(SetRel::op_)
      - PROTOBUF_FIELD_OFFSET(SetRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[21]);
}

// ===================================================================

class ExtensionSingleRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionSingleRel* msg);
  static const ::substrait::Rel& input(const ExtensionSingleRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionSingleRel* msg);
};

const ::substrait::RelCommon&
ExtensionSingleRel::_Internal::common(const ExtensionSingleRel* msg) {
  return *msg->common_;
}
const ::substrait::Rel&
ExtensionSingleRel::_Internal::input(const ExtensionSingleRel* msg) {
  return *msg->input_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionSingleRel::_Internal::detail(const ExtensionSingleRel* msg) {
  return *msg->detail_;
}
void ExtensionSingleRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionSingleRel::ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionSingleRel)
}
ExtensionSingleRel::ExtensionSingleRel(const ExtensionSingleRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionSingleRel)
}

inline void ExtensionSingleRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detail_) -
    reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionSingleRel::~ExtensionSingleRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionSingleRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtensionSingleRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionSingleRel::ArenaDtor(void* object) {
  ExtensionSingleRel* _this = reinterpret_cast< ExtensionSingleRel* >(object);
  (void)_this;
}
void ExtensionSingleRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionSingleRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionSingleRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionSingleRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionSingleRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3 [json_name = "detail"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionSingleRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionSingleRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionSingleRel)
  return target;
}

size_t ExtensionSingleRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionSingleRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .substrait.Rel input = 2 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionSingleRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtensionSingleRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionSingleRel::GetClassData() const { return &_class_data_; }

void ExtensionSingleRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtensionSingleRel *>(to)->MergeFrom(
      static_cast<const ExtensionSingleRel &>(from));
}


void ExtensionSingleRel::MergeFrom(const ExtensionSingleRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionSingleRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionSingleRel::CopyFrom(const ExtensionSingleRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionSingleRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSingleRel::IsInitialized() const {
  return true;
}

void ExtensionSingleRel::InternalSwap(ExtensionSingleRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, detail_)
      + sizeof(ExtensionSingleRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionSingleRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[22]);
}

// ===================================================================

class ExtensionLeafRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionLeafRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionLeafRel* msg);
};

const ::substrait::RelCommon&
ExtensionLeafRel::_Internal::common(const ExtensionLeafRel* msg) {
  return *msg->common_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionLeafRel::_Internal::detail(const ExtensionLeafRel* msg) {
  return *msg->detail_;
}
void ExtensionLeafRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionLeafRel::ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionLeafRel)
}
ExtensionLeafRel::ExtensionLeafRel(const ExtensionLeafRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionLeafRel)
}

inline void ExtensionLeafRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detail_) -
    reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionLeafRel::~ExtensionLeafRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionLeafRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtensionLeafRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionLeafRel::ArenaDtor(void* object) {
  ExtensionLeafRel* _this = reinterpret_cast< ExtensionLeafRel* >(object);
  (void)_this;
}
void ExtensionLeafRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionLeafRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionLeafRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionLeafRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionLeafRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 2 [json_name = "detail"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionLeafRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionLeafRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .google.protobuf.Any detail = 2 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionLeafRel)
  return target;
}

size_t ExtensionLeafRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionLeafRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .google.protobuf.Any detail = 2 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionLeafRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtensionLeafRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionLeafRel::GetClassData() const { return &_class_data_; }

void ExtensionLeafRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtensionLeafRel *>(to)->MergeFrom(
      static_cast<const ExtensionLeafRel &>(from));
}


void ExtensionLeafRel::MergeFrom(const ExtensionLeafRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionLeafRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionLeafRel::CopyFrom(const ExtensionLeafRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionLeafRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionLeafRel::IsInitialized() const {
  return true;
}

void ExtensionLeafRel::InternalSwap(ExtensionLeafRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, detail_)
      + sizeof(ExtensionLeafRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionLeafRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[23]);
}

// ===================================================================

class ExtensionMultiRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionMultiRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionMultiRel* msg);
};

const ::substrait::RelCommon&
ExtensionMultiRel::_Internal::common(const ExtensionMultiRel* msg) {
  return *msg->common_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionMultiRel::_Internal::detail(const ExtensionMultiRel* msg) {
  return *msg->detail_;
}
void ExtensionMultiRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
ExtensionMultiRel::ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionMultiRel)
}
ExtensionMultiRel::ExtensionMultiRel(const ExtensionMultiRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::substrait::RelCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_detail()) {
    detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionMultiRel)
}

inline void ExtensionMultiRel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detail_) -
    reinterpret_cast<char*>(&common_)) + sizeof(detail_));
}

ExtensionMultiRel::~ExtensionMultiRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionMultiRel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtensionMultiRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete detail_;
}

void ExtensionMultiRel::ArenaDtor(void* object) {
  ExtensionMultiRel* _this = reinterpret_cast< ExtensionMultiRel* >(object);
  (void)_this;
}
void ExtensionMultiRel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionMultiRel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionMultiRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionMultiRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionMultiRel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1 [json_name = "common"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3 [json_name = "detail"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionMultiRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionMultiRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionMultiRel)
  return target;
}

size_t ExtensionMultiRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionMultiRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1 [json_name = "common"];
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionMultiRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtensionMultiRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionMultiRel::GetClassData() const { return &_class_data_; }

void ExtensionMultiRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtensionMultiRel *>(to)->MergeFrom(
      static_cast<const ExtensionMultiRel &>(from));
}


void ExtensionMultiRel::MergeFrom(const ExtensionMultiRel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionMultiRel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from._internal_has_common()) {
    _internal_mutable_common()->::substrait::RelCommon::MergeFrom(from._internal_common());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionMultiRel::CopyFrom(const ExtensionMultiRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionMultiRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionMultiRel::IsInitialized() const {
  return true;
}

void ExtensionMultiRel::InternalSwap(ExtensionMultiRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, detail_)
      + sizeof(ExtensionMultiRel::detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionMultiRel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[24]);
}

// ===================================================================

class RelRoot::_Internal {
 public:
  static const ::substrait::Rel& input(const RelRoot* msg);
};

const ::substrait::Rel&
RelRoot::_Internal::input(const RelRoot* msg) {
  return *msg->input_;
}
RelRoot::RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.RelRoot)
}
RelRoot::RelRoot(const RelRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::substrait::Rel(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelRoot)
}

inline void RelRoot::SharedCtor() {
input_ = nullptr;
}

RelRoot::~RelRoot() {
  // @@protoc_insertion_point(destructor:substrait.RelRoot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelRoot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
}

void RelRoot::ArenaDtor(void* object) {
  RelRoot* _this = reinterpret_cast< RelRoot* >(object);
  (void)_this;
}
void RelRoot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelRoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelRoot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelRoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Rel input = 1 [json_name = "input"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 2 [json_name = "names"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "substrait.RelRoot.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelRoot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelRoot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Rel input = 1 [json_name = "input"];
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // repeated string names = 2 [json_name = "names"];
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.RelRoot.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelRoot)
  return target;
}

size_t RelRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelRoot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2 [json_name = "names"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .substrait.Rel input = 1 [json_name = "input"];
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelRoot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelRoot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelRoot::GetClassData() const { return &_class_data_; }

void RelRoot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelRoot *>(to)->MergeFrom(
      static_cast<const RelRoot &>(from));
}


void RelRoot::MergeFrom(const RelRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelRoot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from._internal_has_input()) {
    _internal_mutable_input()->::substrait::Rel::MergeFrom(from._internal_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelRoot::CopyFrom(const RelRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelRoot::IsInitialized() const {
  return true;
}

void RelRoot::InternalSwap(RelRoot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(input_, other->input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelRoot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[25]);
}

// ===================================================================

class Rel::_Internal {
 public:
  static const ::substrait::ReadRel& read(const Rel* msg);
  static const ::substrait::FilterRel& filter(const Rel* msg);
  static const ::substrait::FetchRel& fetch(const Rel* msg);
  static const ::substrait::AggregateRel& aggregate(const Rel* msg);
  static const ::substrait::SortRel& sort(const Rel* msg);
  static const ::substrait::JoinRel& join(const Rel* msg);
  static const ::substrait::ProjectRel& project(const Rel* msg);
  static const ::substrait::SetRel& set(const Rel* msg);
  static const ::substrait::ExtensionSingleRel& extension_single(const Rel* msg);
  static const ::substrait::ExtensionMultiRel& extension_multi(const Rel* msg);
  static const ::substrait::ExtensionLeafRel& extension_leaf(const Rel* msg);
  static const ::substrait::CrossRel& cross(const Rel* msg);
};

const ::substrait::ReadRel&
Rel::_Internal::read(const Rel* msg) {
  return *msg->rel_type_.read_;
}
const ::substrait::FilterRel&
Rel::_Internal::filter(const Rel* msg) {
  return *msg->rel_type_.filter_;
}
const ::substrait::FetchRel&
Rel::_Internal::fetch(const Rel* msg) {
  return *msg->rel_type_.fetch_;
}
const ::substrait::AggregateRel&
Rel::_Internal::aggregate(const Rel* msg) {
  return *msg->rel_type_.aggregate_;
}
const ::substrait::SortRel&
Rel::_Internal::sort(const Rel* msg) {
  return *msg->rel_type_.sort_;
}
const ::substrait::JoinRel&
Rel::_Internal::join(const Rel* msg) {
  return *msg->rel_type_.join_;
}
const ::substrait::ProjectRel&
Rel::_Internal::project(const Rel* msg) {
  return *msg->rel_type_.project_;
}
const ::substrait::SetRel&
Rel::_Internal::set(const Rel* msg) {
  return *msg->rel_type_.set_;
}
const ::substrait::ExtensionSingleRel&
Rel::_Internal::extension_single(const Rel* msg) {
  return *msg->rel_type_.extension_single_;
}
const ::substrait::ExtensionMultiRel&
Rel::_Internal::extension_multi(const Rel* msg) {
  return *msg->rel_type_.extension_multi_;
}
const ::substrait::ExtensionLeafRel&
Rel::_Internal::extension_leaf(const Rel* msg) {
  return *msg->rel_type_.extension_leaf_;
}
const ::substrait::CrossRel&
Rel::_Internal::cross(const Rel* msg) {
  return *msg->rel_type_.cross_;
}
void Rel::set_allocated_read(::substrait::ReadRel* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ReadRel>::GetOwningArena(read);
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.read)
}
void Rel::set_allocated_filter(::substrait::FilterRel* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::FilterRel>::GetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.filter)
}
void Rel::set_allocated_fetch(::substrait::FetchRel* fetch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (fetch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::FetchRel>::GetOwningArena(fetch);
    if (message_arena != submessage_arena) {
      fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch, submessage_arena);
    }
    set_has_fetch();
    rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.fetch)
}
void Rel::set_allocated_aggregate(::substrait::AggregateRel* aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::AggregateRel>::GetOwningArena(aggregate);
    if (message_arena != submessage_arena) {
      aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.aggregate)
}
void Rel::set_allocated_sort(::substrait::SortRel* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::SortRel>::GetOwningArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.sort)
}
void Rel::set_allocated_join(::substrait::JoinRel* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::JoinRel>::GetOwningArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.join)
}
void Rel::set_allocated_project(::substrait::ProjectRel* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ProjectRel>::GetOwningArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.project)
}
void Rel::set_allocated_set(::substrait::SetRel* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::SetRel>::GetOwningArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.set)
}
void Rel::set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ExtensionSingleRel>::GetOwningArena(extension_single);
    if (message_arena != submessage_arena) {
      extension_single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_single, submessage_arena);
    }
    set_has_extension_single();
    rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_single)
}
void Rel::set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ExtensionMultiRel>::GetOwningArena(extension_multi);
    if (message_arena != submessage_arena) {
      extension_multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_multi, submessage_arena);
    }
    set_has_extension_multi();
    rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_multi)
}
void Rel::set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::ExtensionLeafRel>::GetOwningArena(extension_leaf);
    if (message_arena != submessage_arena) {
      extension_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_leaf, submessage_arena);
    }
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_leaf)
}
void Rel::set_allocated_cross(::substrait::CrossRel* cross) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (cross) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::CrossRel>::GetOwningArena(cross);
    if (message_arena != submessage_arena) {
      cross = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross, submessage_arena);
    }
    set_has_cross();
    rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.cross)
}
Rel::Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:substrait.Rel)
}
Rel::Rel(const Rel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRead: {
      _internal_mutable_read()->::substrait::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::substrait::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::substrait::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::substrait::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::substrait::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::substrait::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::substrait::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::substrait::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _internal_mutable_extension_single()->::substrait::ExtensionSingleRel::MergeFrom(from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _internal_mutable_extension_multi()->::substrait::ExtensionMultiRel::MergeFrom(from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _internal_mutable_extension_leaf()->::substrait::ExtensionLeafRel::MergeFrom(from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _internal_mutable_cross()->::substrait::CrossRel::MergeFrom(from._internal_cross());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Rel)
}

inline void Rel::SharedCtor() {
clear_has_rel_type();
}

Rel::~Rel() {
  // @@protoc_insertion_point(destructor:substrait.Rel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void Rel::ArenaDtor(void* object) {
  Rel* _this = reinterpret_cast< Rel* >(object);
  (void)_this;
}
void Rel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Rel)
  switch (rel_type_case()) {
    case kRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.read_;
      }
      break;
    }
    case kFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.filter_;
      }
      break;
    }
    case kFetch: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.fetch_;
      }
      break;
    }
    case kAggregate: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.aggregate_;
      }
      break;
    }
    case kSort: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.sort_;
      }
      break;
    }
    case kJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.join_;
      }
      break;
    }
    case kProject: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.project_;
      }
      break;
    }
    case kSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.set_;
      }
      break;
    }
    case kExtensionSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.extension_single_;
      }
      break;
    }
    case kExtensionMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.extension_multi_;
      }
      break;
    }
    case kExtensionLeaf: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.extension_leaf_;
      }
      break;
    }
    case kCross: {
      if (GetArenaForAllocation() == nullptr) {
        delete rel_type_.cross_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}


void Rel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Rel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.ReadRel read = 1 [json_name = "read"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.FilterRel filter = 2 [json_name = "filter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.FetchRel fetch = 3 [json_name = "fetch"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.SortRel sort = 5 [json_name = "sort"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.JoinRel join = 6 [json_name = "join"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ProjectRel project = 7 [json_name = "project"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.SetRel set = 8 [json_name = "set"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_single(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_multi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_leaf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.CrossRel cross = 12 [json_name = "cross"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Rel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.ReadRel read = 1 [json_name = "read"];
  if (_internal_has_read()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::read(this), target, stream);
  }

  // .substrait.FilterRel filter = 2 [json_name = "filter"];
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter(this), target, stream);
  }

  // .substrait.FetchRel fetch = 3 [json_name = "fetch"];
  if (_internal_has_fetch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fetch(this), target, stream);
  }

  // .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
  if (_internal_has_aggregate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aggregate(this), target, stream);
  }

  // .substrait.SortRel sort = 5 [json_name = "sort"];
  if (_internal_has_sort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sort(this), target, stream);
  }

  // .substrait.JoinRel join = 6 [json_name = "join"];
  if (_internal_has_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::join(this), target, stream);
  }

  // .substrait.ProjectRel project = 7 [json_name = "project"];
  if (_internal_has_project()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::project(this), target, stream);
  }

  // .substrait.SetRel set = 8 [json_name = "set"];
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::set(this), target, stream);
  }

  // .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
  if (_internal_has_extension_single()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::extension_single(this), target, stream);
  }

  // .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
  if (_internal_has_extension_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::extension_multi(this), target, stream);
  }

  // .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
  if (_internal_has_extension_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::extension_leaf(this), target, stream);
  }

  // .substrait.CrossRel cross = 12 [json_name = "cross"];
  if (_internal_has_cross()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cross(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Rel)
  return target;
}

size_t Rel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Rel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.ReadRel read = 1 [json_name = "read"];
    case kRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.read_);
      break;
    }
    // .substrait.FilterRel filter = 2 [json_name = "filter"];
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.filter_);
      break;
    }
    // .substrait.FetchRel fetch = 3 [json_name = "fetch"];
    case kFetch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.fetch_);
      break;
    }
    // .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
    case kAggregate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.aggregate_);
      break;
    }
    // .substrait.SortRel sort = 5 [json_name = "sort"];
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.sort_);
      break;
    }
    // .substrait.JoinRel join = 6 [json_name = "join"];
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.join_);
      break;
    }
    // .substrait.ProjectRel project = 7 [json_name = "project"];
    case kProject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.project_);
      break;
    }
    // .substrait.SetRel set = 8 [json_name = "set"];
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.set_);
      break;
    }
    // .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
    case kExtensionSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_single_);
      break;
    }
    // .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
    case kExtensionMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_multi_);
      break;
    }
    // .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
    case kExtensionLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.extension_leaf_);
      break;
    }
    // .substrait.CrossRel cross = 12 [json_name = "cross"];
    case kCross: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_type_.cross_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rel::GetClassData() const { return &_class_data_; }

void Rel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rel *>(to)->MergeFrom(
      static_cast<const Rel &>(from));
}


void Rel::MergeFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:substrait.Rel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRead: {
      _internal_mutable_read()->::substrait::ReadRel::MergeFrom(from._internal_read());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::substrait::FilterRel::MergeFrom(from._internal_filter());
      break;
    }
    case kFetch: {
      _internal_mutable_fetch()->::substrait::FetchRel::MergeFrom(from._internal_fetch());
      break;
    }
    case kAggregate: {
      _internal_mutable_aggregate()->::substrait::AggregateRel::MergeFrom(from._internal_aggregate());
      break;
    }
    case kSort: {
      _internal_mutable_sort()->::substrait::SortRel::MergeFrom(from._internal_sort());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::substrait::JoinRel::MergeFrom(from._internal_join());
      break;
    }
    case kProject: {
      _internal_mutable_project()->::substrait::ProjectRel::MergeFrom(from._internal_project());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::substrait::SetRel::MergeFrom(from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _internal_mutable_extension_single()->::substrait::ExtensionSingleRel::MergeFrom(from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _internal_mutable_extension_multi()->::substrait::ExtensionMultiRel::MergeFrom(from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _internal_mutable_extension_leaf()->::substrait::ExtensionLeafRel::MergeFrom(from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _internal_mutable_cross()->::substrait::CrossRel::MergeFrom(from._internal_cross());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rel::CopyFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rel::IsInitialized() const {
  return true;
}

void Rel::InternalSwap(Rel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rel_type_, other->rel_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_substrait_2frelations_2eproto_getter, &descriptor_table_substrait_2frelations_2eproto_once,
      file_level_metadata_substrait_2frelations_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Direct* Arena::CreateMaybeMessage< ::substrait::RelCommon_Direct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Direct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Emit* Arena::CreateMaybeMessage< ::substrait::RelCommon_Emit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Emit >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint_Stats* Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint_RuntimeConstraint* Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint_RuntimeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint_RuntimeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint* Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon* Arena::CreateMaybeMessage< ::substrait::RelCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_NamedTable* Arena::CreateMaybeMessage< ::substrait::ReadRel_NamedTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_NamedTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_VirtualTable* Arena::CreateMaybeMessage< ::substrait::ReadRel_VirtualTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_VirtualTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_ExtensionTable* Arena::CreateMaybeMessage< ::substrait::ReadRel_ExtensionTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_ExtensionTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles* Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel* Arena::CreateMaybeMessage< ::substrait::ReadRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ProjectRel* Arena::CreateMaybeMessage< ::substrait::ProjectRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ProjectRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::JoinRel* Arena::CreateMaybeMessage< ::substrait::JoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::JoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::CrossRel* Arena::CreateMaybeMessage< ::substrait::CrossRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::CrossRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FetchRel* Arena::CreateMaybeMessage< ::substrait::FetchRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FetchRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel_Grouping* Arena::CreateMaybeMessage< ::substrait::AggregateRel_Grouping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel_Grouping >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel_Measure* Arena::CreateMaybeMessage< ::substrait::AggregateRel_Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel_Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel* Arena::CreateMaybeMessage< ::substrait::AggregateRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::SortRel* Arena::CreateMaybeMessage< ::substrait::SortRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::SortRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FilterRel* Arena::CreateMaybeMessage< ::substrait::FilterRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FilterRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::SetRel* Arena::CreateMaybeMessage< ::substrait::SetRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::SetRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionSingleRel* Arena::CreateMaybeMessage< ::substrait::ExtensionSingleRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionSingleRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionLeafRel* Arena::CreateMaybeMessage< ::substrait::ExtensionLeafRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionLeafRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionMultiRel* Arena::CreateMaybeMessage< ::substrait::ExtensionMultiRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionMultiRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelRoot* Arena::CreateMaybeMessage< ::substrait::RelRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Rel* Arena::CreateMaybeMessage< ::substrait::Rel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Rel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

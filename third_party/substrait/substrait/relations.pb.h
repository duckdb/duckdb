// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/relations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2frelations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2frelations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "substrait/type.pb.h"
#include "substrait/expression.pb.h"
#include "substrait/extensions/extensions.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_2frelations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2frelations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2frelations_2eproto;
namespace substrait {
class AggregateRel;
struct AggregateRelDefaultTypeInternal;
extern AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
class AggregateRel_Grouping;
struct AggregateRel_GroupingDefaultTypeInternal;
extern AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
class AggregateRel_Measure;
struct AggregateRel_MeasureDefaultTypeInternal;
extern AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
class CrossRel;
struct CrossRelDefaultTypeInternal;
extern CrossRelDefaultTypeInternal _CrossRel_default_instance_;
class ExtensionLeafRel;
struct ExtensionLeafRelDefaultTypeInternal;
extern ExtensionLeafRelDefaultTypeInternal _ExtensionLeafRel_default_instance_;
class ExtensionMultiRel;
struct ExtensionMultiRelDefaultTypeInternal;
extern ExtensionMultiRelDefaultTypeInternal _ExtensionMultiRel_default_instance_;
class ExtensionSingleRel;
struct ExtensionSingleRelDefaultTypeInternal;
extern ExtensionSingleRelDefaultTypeInternal _ExtensionSingleRel_default_instance_;
class FetchRel;
struct FetchRelDefaultTypeInternal;
extern FetchRelDefaultTypeInternal _FetchRel_default_instance_;
class FilterRel;
struct FilterRelDefaultTypeInternal;
extern FilterRelDefaultTypeInternal _FilterRel_default_instance_;
class JoinRel;
struct JoinRelDefaultTypeInternal;
extern JoinRelDefaultTypeInternal _JoinRel_default_instance_;
class ProjectRel;
struct ProjectRelDefaultTypeInternal;
extern ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
class ReadRel;
struct ReadRelDefaultTypeInternal;
extern ReadRelDefaultTypeInternal _ReadRel_default_instance_;
class ReadRel_ExtensionTable;
struct ReadRel_ExtensionTableDefaultTypeInternal;
extern ReadRel_ExtensionTableDefaultTypeInternal _ReadRel_ExtensionTable_default_instance_;
class ReadRel_LocalFiles;
struct ReadRel_LocalFilesDefaultTypeInternal;
extern ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles;
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
class ReadRel_NamedTable;
struct ReadRel_NamedTableDefaultTypeInternal;
extern ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
class ReadRel_VirtualTable;
struct ReadRel_VirtualTableDefaultTypeInternal;
extern ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
class Rel;
struct RelDefaultTypeInternal;
extern RelDefaultTypeInternal _Rel_default_instance_;
class RelCommon;
struct RelCommonDefaultTypeInternal;
extern RelCommonDefaultTypeInternal _RelCommon_default_instance_;
class RelCommon_Direct;
struct RelCommon_DirectDefaultTypeInternal;
extern RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
class RelCommon_Emit;
struct RelCommon_EmitDefaultTypeInternal;
extern RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
class RelCommon_Hint;
struct RelCommon_HintDefaultTypeInternal;
extern RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
class RelCommon_Hint_RuntimeConstraint;
struct RelCommon_Hint_RuntimeConstraintDefaultTypeInternal;
extern RelCommon_Hint_RuntimeConstraintDefaultTypeInternal _RelCommon_Hint_RuntimeConstraint_default_instance_;
class RelCommon_Hint_Stats;
struct RelCommon_Hint_StatsDefaultTypeInternal;
extern RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
class RelRoot;
struct RelRootDefaultTypeInternal;
extern RelRootDefaultTypeInternal _RelRoot_default_instance_;
class SetRel;
struct SetRelDefaultTypeInternal;
extern SetRelDefaultTypeInternal _SetRel_default_instance_;
class SortRel;
struct SortRelDefaultTypeInternal;
extern SortRelDefaultTypeInternal _SortRel_default_instance_;
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait::AggregateRel* Arena::CreateMaybeMessage<::substrait::AggregateRel>(Arena*);
template<> ::substrait::AggregateRel_Grouping* Arena::CreateMaybeMessage<::substrait::AggregateRel_Grouping>(Arena*);
template<> ::substrait::AggregateRel_Measure* Arena::CreateMaybeMessage<::substrait::AggregateRel_Measure>(Arena*);
template<> ::substrait::CrossRel* Arena::CreateMaybeMessage<::substrait::CrossRel>(Arena*);
template<> ::substrait::ExtensionLeafRel* Arena::CreateMaybeMessage<::substrait::ExtensionLeafRel>(Arena*);
template<> ::substrait::ExtensionMultiRel* Arena::CreateMaybeMessage<::substrait::ExtensionMultiRel>(Arena*);
template<> ::substrait::ExtensionSingleRel* Arena::CreateMaybeMessage<::substrait::ExtensionSingleRel>(Arena*);
template<> ::substrait::FetchRel* Arena::CreateMaybeMessage<::substrait::FetchRel>(Arena*);
template<> ::substrait::FilterRel* Arena::CreateMaybeMessage<::substrait::FilterRel>(Arena*);
template<> ::substrait::JoinRel* Arena::CreateMaybeMessage<::substrait::JoinRel>(Arena*);
template<> ::substrait::ProjectRel* Arena::CreateMaybeMessage<::substrait::ProjectRel>(Arena*);
template<> ::substrait::ReadRel* Arena::CreateMaybeMessage<::substrait::ReadRel>(Arena*);
template<> ::substrait::ReadRel_ExtensionTable* Arena::CreateMaybeMessage<::substrait::ReadRel_ExtensionTable>(Arena*);
template<> ::substrait::ReadRel_LocalFiles* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles>(Arena*);
template<> ::substrait::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles>(Arena*);
template<> ::substrait::ReadRel_NamedTable* Arena::CreateMaybeMessage<::substrait::ReadRel_NamedTable>(Arena*);
template<> ::substrait::ReadRel_VirtualTable* Arena::CreateMaybeMessage<::substrait::ReadRel_VirtualTable>(Arena*);
template<> ::substrait::Rel* Arena::CreateMaybeMessage<::substrait::Rel>(Arena*);
template<> ::substrait::RelCommon* Arena::CreateMaybeMessage<::substrait::RelCommon>(Arena*);
template<> ::substrait::RelCommon_Direct* Arena::CreateMaybeMessage<::substrait::RelCommon_Direct>(Arena*);
template<> ::substrait::RelCommon_Emit* Arena::CreateMaybeMessage<::substrait::RelCommon_Emit>(Arena*);
template<> ::substrait::RelCommon_Hint* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint>(Arena*);
template<> ::substrait::RelCommon_Hint_RuntimeConstraint* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint_RuntimeConstraint>(Arena*);
template<> ::substrait::RelCommon_Hint_Stats* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint_Stats>(Arena*);
template<> ::substrait::RelRoot* Arena::CreateMaybeMessage<::substrait::RelRoot>(Arena*);
template<> ::substrait::SetRel* Arena::CreateMaybeMessage<::substrait::SetRel>(Arena*);
template<> ::substrait::SortRel* Arena::CreateMaybeMessage<::substrait::SortRel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait {

enum ReadRel_LocalFiles_FileOrFiles_FileFormat : int {
  ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_UNSPECIFIED = 0,
  ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_PARQUET = 1,
  ReadRel_LocalFiles_FileOrFiles_FileFormat_ReadRel_LocalFiles_FileOrFiles_FileFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReadRel_LocalFiles_FileOrFiles_FileFormat_ReadRel_LocalFiles_FileOrFiles_FileFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReadRel_LocalFiles_FileOrFiles_FileFormat_IsValid(int value);
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_MIN = ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_UNSPECIFIED;
constexpr ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_MAX = ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_PARQUET;
constexpr int ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_ARRAYSIZE = ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor();
template<typename T>
inline const std::string& ReadRel_LocalFiles_FileOrFiles_FileFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadRel_LocalFiles_FileOrFiles_FileFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadRel_LocalFiles_FileOrFiles_FileFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor(), enum_t_value);
}
inline bool ReadRel_LocalFiles_FileOrFiles_FileFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadRel_LocalFiles_FileOrFiles_FileFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadRel_LocalFiles_FileOrFiles_FileFormat>(
    ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor(), name, value);
}
enum JoinRel_JoinType : int {
  JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  JoinRel_JoinType_JOIN_TYPE_INNER = 1,
  JoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  JoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  JoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  JoinRel_JoinType_JOIN_TYPE_SEMI = 5,
  JoinRel_JoinType_JOIN_TYPE_ANTI = 6,
  JoinRel_JoinType_JOIN_TYPE_SINGLE = 7,
  JoinRel_JoinType_JoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JoinRel_JoinType_JoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JoinRel_JoinType_IsValid(int value);
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MIN = JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MAX = JoinRel_JoinType_JOIN_TYPE_SINGLE;
constexpr int JoinRel_JoinType_JoinType_ARRAYSIZE = JoinRel_JoinType_JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor();
template<typename T>
inline const std::string& JoinRel_JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinRel_JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinRel_JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinRel_JoinType_descriptor(), enum_t_value);
}
inline bool JoinRel_JoinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinRel_JoinType>(
    JoinRel_JoinType_descriptor(), name, value);
}
enum SetRel_SetOp : int {
  SetRel_SetOp_SET_OP_UNSPECIFIED = 0,
  SetRel_SetOp_SET_OP_MINUS_PRIMARY = 1,
  SetRel_SetOp_SET_OP_MINUS_MULTISET = 2,
  SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY = 3,
  SetRel_SetOp_SET_OP_INTERSECTION_MULTISET = 4,
  SetRel_SetOp_SET_OP_UNION_DISTINCT = 5,
  SetRel_SetOp_SET_OP_UNION_ALL = 6,
  SetRel_SetOp_SetRel_SetOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetRel_SetOp_SetRel_SetOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetRel_SetOp_IsValid(int value);
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MIN = SetRel_SetOp_SET_OP_UNSPECIFIED;
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MAX = SetRel_SetOp_SET_OP_UNION_ALL;
constexpr int SetRel_SetOp_SetOp_ARRAYSIZE = SetRel_SetOp_SetOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor();
template<typename T>
inline const std::string& SetRel_SetOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetRel_SetOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetRel_SetOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetRel_SetOp_descriptor(), enum_t_value);
}
inline bool SetRel_SetOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetRel_SetOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetRel_SetOp>(
    SetRel_SetOp_descriptor(), name, value);
}
// ===================================================================

class RelCommon_Direct final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Direct) */ {
 public:
  inline RelCommon_Direct() : RelCommon_Direct(nullptr) {}
  explicit constexpr RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Direct(const RelCommon_Direct& from);
  RelCommon_Direct(RelCommon_Direct&& from) noexcept
    : RelCommon_Direct() {
    *this = ::std::move(from);
  }

  inline RelCommon_Direct& operator=(const RelCommon_Direct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Direct& operator=(RelCommon_Direct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Direct& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Direct* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Direct*>(
               &_RelCommon_Direct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelCommon_Direct& a, RelCommon_Direct& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Direct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Direct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Direct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Direct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RelCommon_Direct& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RelCommon_Direct& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon.Direct";
  }
  protected:
  explicit RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Direct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Emit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Emit) */ {
 public:
  inline RelCommon_Emit() : RelCommon_Emit(nullptr) {}
  ~RelCommon_Emit() override;
  explicit constexpr RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Emit(const RelCommon_Emit& from);
  RelCommon_Emit(RelCommon_Emit&& from) noexcept
    : RelCommon_Emit() {
    *this = ::std::move(from);
  }

  inline RelCommon_Emit& operator=(const RelCommon_Emit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Emit& operator=(RelCommon_Emit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Emit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Emit* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Emit*>(
               &_RelCommon_Emit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelCommon_Emit& a, RelCommon_Emit& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Emit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Emit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Emit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Emit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Emit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelCommon_Emit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Emit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon.Emit";
  }
  protected:
  explicit RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMappingFieldNumber = 1,
  };
  // repeated int32 output_mapping = 1 [json_name = "outputMapping"];
  int output_mapping_size() const;
  private:
  int _internal_output_mapping_size() const;
  public:
  void clear_output_mapping();
  private:
  int32_t _internal_output_mapping(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_output_mapping() const;
  void _internal_add_output_mapping(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_output_mapping();
  public:
  int32_t output_mapping(int index) const;
  void set_output_mapping(int index, int32_t value);
  void add_output_mapping(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      output_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_output_mapping();

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Emit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > output_mapping_;
  mutable std::atomic<int> _output_mapping_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_Stats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint.Stats) */ {
 public:
  inline RelCommon_Hint_Stats() : RelCommon_Hint_Stats(nullptr) {}
  ~RelCommon_Hint_Stats() override;
  explicit constexpr RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from);
  RelCommon_Hint_Stats(RelCommon_Hint_Stats&& from) noexcept
    : RelCommon_Hint_Stats() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_Stats& operator=(const RelCommon_Hint_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_Stats& operator=(RelCommon_Hint_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_Stats* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_Stats*>(
               &_RelCommon_Hint_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelCommon_Hint_Stats& a, RelCommon_Hint_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint_Stats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelCommon_Hint_Stats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_Stats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon.Hint.Stats";
  }
  protected:
  explicit RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
    kRowCountFieldNumber = 1,
    kRecordSizeFieldNumber = 2,
  };
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // double row_count = 1 [json_name = "rowCount"];
  void clear_row_count();
  double row_count() const;
  void set_row_count(double value);
  private:
  double _internal_row_count() const;
  void _internal_set_row_count(double value);
  public:

  // double record_size = 2 [json_name = "recordSize"];
  void clear_record_size();
  double record_size() const;
  void set_record_size(double value);
  private:
  double _internal_record_size() const;
  void _internal_set_record_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  double row_count_;
  double record_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint_RuntimeConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint.RuntimeConstraint) */ {
 public:
  inline RelCommon_Hint_RuntimeConstraint() : RelCommon_Hint_RuntimeConstraint(nullptr) {}
  ~RelCommon_Hint_RuntimeConstraint() override;
  explicit constexpr RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from);
  RelCommon_Hint_RuntimeConstraint(RelCommon_Hint_RuntimeConstraint&& from) noexcept
    : RelCommon_Hint_RuntimeConstraint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_RuntimeConstraint& operator=(const RelCommon_Hint_RuntimeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_RuntimeConstraint& operator=(RelCommon_Hint_RuntimeConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_RuntimeConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_RuntimeConstraint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_RuntimeConstraint*>(
               &_RelCommon_Hint_RuntimeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelCommon_Hint_RuntimeConstraint& a, RelCommon_Hint_RuntimeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint_RuntimeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint_RuntimeConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint_RuntimeConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelCommon_Hint_RuntimeConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_RuntimeConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon.Hint.RuntimeConstraint";
  }
  protected:
  explicit RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint.RuntimeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon_Hint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint) */ {
 public:
  inline RelCommon_Hint() : RelCommon_Hint(nullptr) {}
  ~RelCommon_Hint() override;
  explicit constexpr RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint(const RelCommon_Hint& from);
  RelCommon_Hint(RelCommon_Hint&& from) noexcept
    : RelCommon_Hint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint& operator=(const RelCommon_Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint& operator=(RelCommon_Hint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint*>(
               &_RelCommon_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RelCommon_Hint& a, RelCommon_Hint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelCommon_Hint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon.Hint";
  }
  protected:
  explicit RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Hint_Stats Stats;
  typedef RelCommon_Hint_RuntimeConstraint RuntimeConstraint;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kConstraintFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::substrait::RelCommon_Hint_Stats& stats() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint_Stats* release_stats();
  ::substrait::RelCommon_Hint_Stats* mutable_stats();
  void set_allocated_stats(::substrait::RelCommon_Hint_Stats* stats);
  private:
  const ::substrait::RelCommon_Hint_Stats& _internal_stats() const;
  ::substrait::RelCommon_Hint_Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::substrait::RelCommon_Hint_Stats* stats);
  ::substrait::RelCommon_Hint_Stats* unsafe_arena_release_stats();

  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::substrait::RelCommon_Hint_RuntimeConstraint& constraint() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint_RuntimeConstraint* release_constraint();
  ::substrait::RelCommon_Hint_RuntimeConstraint* mutable_constraint();
  void set_allocated_constraint(::substrait::RelCommon_Hint_RuntimeConstraint* constraint);
  private:
  const ::substrait::RelCommon_Hint_RuntimeConstraint& _internal_constraint() const;
  ::substrait::RelCommon_Hint_RuntimeConstraint* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::substrait::RelCommon_Hint_RuntimeConstraint* constraint);
  ::substrait::RelCommon_Hint_RuntimeConstraint* unsafe_arena_release_constraint();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon_Hint_Stats* stats_;
  ::substrait::RelCommon_Hint_RuntimeConstraint* constraint_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon) */ {
 public:
  inline RelCommon() : RelCommon(nullptr) {}
  ~RelCommon() override;
  explicit constexpr RelCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon(const RelCommon& from);
  RelCommon(RelCommon&& from) noexcept
    : RelCommon() {
    *this = ::std::move(from);
  }

  inline RelCommon& operator=(const RelCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon& operator=(RelCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon& default_instance() {
    return *internal_default_instance();
  }
  enum EmitKindCase {
    kDirect = 1,
    kEmit = 2,
    EMIT_KIND_NOT_SET = 0,
  };

  static inline const RelCommon* internal_default_instance() {
    return reinterpret_cast<const RelCommon*>(
               &_RelCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RelCommon& a, RelCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelCommon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelCommon";
  }
  protected:
  explicit RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Direct Direct;
  typedef RelCommon_Emit Emit;
  typedef RelCommon_Hint Hint;

  // accessors -------------------------------------------------------

  enum : int {
    kHintFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 4,
    kDirectFieldNumber = 1,
    kEmitFieldNumber = 2,
  };
  // .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
  bool has_hint() const;
  private:
  bool _internal_has_hint() const;
  public:
  void clear_hint();
  const ::substrait::RelCommon_Hint& hint() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint* release_hint();
  ::substrait::RelCommon_Hint* mutable_hint();
  void set_allocated_hint(::substrait::RelCommon_Hint* hint);
  private:
  const ::substrait::RelCommon_Hint& _internal_hint() const;
  ::substrait::RelCommon_Hint* _internal_mutable_hint();
  public:
  void unsafe_arena_set_allocated_hint(
      ::substrait::RelCommon_Hint* hint);
  ::substrait::RelCommon_Hint* unsafe_arena_release_hint();

  // .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
  bool has_direct() const;
  private:
  bool _internal_has_direct() const;
  public:
  void clear_direct();
  const ::substrait::RelCommon_Direct& direct() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Direct* release_direct();
  ::substrait::RelCommon_Direct* mutable_direct();
  void set_allocated_direct(::substrait::RelCommon_Direct* direct);
  private:
  const ::substrait::RelCommon_Direct& _internal_direct() const;
  ::substrait::RelCommon_Direct* _internal_mutable_direct();
  public:
  void unsafe_arena_set_allocated_direct(
      ::substrait::RelCommon_Direct* direct);
  ::substrait::RelCommon_Direct* unsafe_arena_release_direct();

  // .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
  bool has_emit() const;
  private:
  bool _internal_has_emit() const;
  public:
  void clear_emit();
  const ::substrait::RelCommon_Emit& emit() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Emit* release_emit();
  ::substrait::RelCommon_Emit* mutable_emit();
  void set_allocated_emit(::substrait::RelCommon_Emit* emit);
  private:
  const ::substrait::RelCommon_Emit& _internal_emit() const;
  ::substrait::RelCommon_Emit* _internal_mutable_emit();
  public:
  void unsafe_arena_set_allocated_emit(
      ::substrait::RelCommon_Emit* emit);
  ::substrait::RelCommon_Emit* unsafe_arena_release_emit();

  void clear_emit_kind();
  EmitKindCase emit_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.RelCommon)
 private:
  class _Internal;
  void set_has_direct();
  void set_has_emit();

  inline bool has_emit_kind() const;
  inline void clear_has_emit_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon_Hint* hint_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  union EmitKindUnion {
    constexpr EmitKindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::substrait::RelCommon_Direct* direct_;
    ::substrait::RelCommon_Emit* emit_;
  } emit_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_NamedTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.NamedTable) */ {
 public:
  inline ReadRel_NamedTable() : ReadRel_NamedTable(nullptr) {}
  ~ReadRel_NamedTable() override;
  explicit constexpr ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_NamedTable(const ReadRel_NamedTable& from);
  ReadRel_NamedTable(ReadRel_NamedTable&& from) noexcept
    : ReadRel_NamedTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_NamedTable& operator=(const ReadRel_NamedTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_NamedTable& operator=(ReadRel_NamedTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_NamedTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_NamedTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_NamedTable*>(
               &_ReadRel_NamedTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRel_NamedTable& a, ReadRel_NamedTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_NamedTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_NamedTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_NamedTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_NamedTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel_NamedTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_NamedTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel.NamedTable";
  }
  protected:
  explicit ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated string names = 1 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.NamedTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_VirtualTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.VirtualTable) */ {
 public:
  inline ReadRel_VirtualTable() : ReadRel_VirtualTable(nullptr) {}
  ~ReadRel_VirtualTable() override;
  explicit constexpr ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_VirtualTable(const ReadRel_VirtualTable& from);
  ReadRel_VirtualTable(ReadRel_VirtualTable&& from) noexcept
    : ReadRel_VirtualTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_VirtualTable& operator=(const ReadRel_VirtualTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_VirtualTable& operator=(ReadRel_VirtualTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_VirtualTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_VirtualTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_VirtualTable*>(
               &_ReadRel_VirtualTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRel_VirtualTable& a, ReadRel_VirtualTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_VirtualTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_VirtualTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_VirtualTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel_VirtualTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_VirtualTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel.VirtualTable";
  }
  protected:
  explicit ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::substrait::Expression_Literal_Struct* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >*
      mutable_values();
  private:
  const ::substrait::Expression_Literal_Struct& _internal_values(int index) const;
  ::substrait::Expression_Literal_Struct* _internal_add_values();
  public:
  const ::substrait::Expression_Literal_Struct& values(int index) const;
  ::substrait::Expression_Literal_Struct* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >&
      values() const;

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.VirtualTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_ExtensionTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.ExtensionTable) */ {
 public:
  inline ReadRel_ExtensionTable() : ReadRel_ExtensionTable(nullptr) {}
  ~ReadRel_ExtensionTable() override;
  explicit constexpr ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from);
  ReadRel_ExtensionTable(ReadRel_ExtensionTable&& from) noexcept
    : ReadRel_ExtensionTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_ExtensionTable& operator=(const ReadRel_ExtensionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_ExtensionTable& operator=(ReadRel_ExtensionTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_ExtensionTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_ExtensionTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_ExtensionTable*>(
               &_ReadRel_ExtensionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRel_ExtensionTable& a, ReadRel_ExtensionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_ExtensionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_ExtensionTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_ExtensionTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel_ExtensionTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_ExtensionTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel.ExtensionTable";
  }
  protected:
  explicit ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // .google.protobuf.Any detail = 1 [json_name = "detail"];
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.ExtensionTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles() : ReadRel_LocalFiles_FileOrFiles(nullptr) {}
  ~ReadRel_LocalFiles_FileOrFiles() override;
  explicit constexpr ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from);
  ReadRel_LocalFiles_FileOrFiles(ReadRel_LocalFiles_FileOrFiles&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles& operator=(const ReadRel_LocalFiles_FileOrFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles& operator=(ReadRel_LocalFiles_FileOrFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles& default_instance() {
    return *internal_default_instance();
  }
  enum PathTypeCase {
    kUriPath = 1,
    kUriPathGlob = 2,
    kUriFile = 3,
    kUriFolder = 4,
    PATH_TYPE_NOT_SET = 0,
  };

  static inline const ReadRel_LocalFiles_FileOrFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles*>(
               &_ReadRel_LocalFiles_FileOrFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadRel_LocalFiles_FileOrFiles& a, ReadRel_LocalFiles_FileOrFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles_FileFormat FileFormat;
  static constexpr FileFormat FILE_FORMAT_UNSPECIFIED =
    ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_UNSPECIFIED;
  static constexpr FileFormat FILE_FORMAT_PARQUET =
    ReadRel_LocalFiles_FileOrFiles_FileFormat_FILE_FORMAT_PARQUET;
  static inline bool FileFormat_IsValid(int value) {
    return ReadRel_LocalFiles_FileOrFiles_FileFormat_IsValid(value);
  }
  static constexpr FileFormat FileFormat_MIN =
    ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_MIN;
  static constexpr FileFormat FileFormat_MAX =
    ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_MAX;
  static constexpr int FileFormat_ARRAYSIZE =
    ReadRel_LocalFiles_FileOrFiles_FileFormat_FileFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileFormat_descriptor() {
    return ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& FileFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileFormat_Name.");
    return ReadRel_LocalFiles_FileOrFiles_FileFormat_Name(enum_t_value);
  }
  static inline bool FileFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FileFormat* value) {
    return ReadRel_LocalFiles_FileOrFiles_FileFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 5,
    kPartitionIndexFieldNumber = 6,
    kStartFieldNumber = 7,
    kLengthFieldNumber = 8,
    kUriPathFieldNumber = 1,
    kUriPathGlobFieldNumber = 2,
    kUriFileFieldNumber = 3,
    kUriFolderFieldNumber = 4,
  };
  // .substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat format = 5 [json_name = "format"];
  void clear_format();
  ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat format() const;
  void set_format(::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat value);
  private:
  ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat _internal_format() const;
  void _internal_set_format(::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat value);
  public:

  // uint64 partition_index = 6 [json_name = "partitionIndex"];
  void clear_partition_index();
  uint64_t partition_index() const;
  void set_partition_index(uint64_t value);
  private:
  uint64_t _internal_partition_index() const;
  void _internal_set_partition_index(uint64_t value);
  public:

  // uint64 start = 7 [json_name = "start"];
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 length = 8 [json_name = "length"];
  void clear_length();
  uint64_t length() const;
  void set_length(uint64_t value);
  private:
  uint64_t _internal_length() const;
  void _internal_set_length(uint64_t value);
  public:

  // string uri_path = 1 [json_name = "uriPath"];
  bool has_uri_path() const;
  private:
  bool _internal_has_uri_path() const;
  public:
  void clear_uri_path();
  const std::string& uri_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_path();
  PROTOBUF_NODISCARD std::string* release_uri_path();
  void set_allocated_uri_path(std::string* uri_path);
  private:
  const std::string& _internal_uri_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_path(const std::string& value);
  std::string* _internal_mutable_uri_path();
  public:

  // string uri_path_glob = 2 [json_name = "uriPathGlob"];
  bool has_uri_path_glob() const;
  private:
  bool _internal_has_uri_path_glob() const;
  public:
  void clear_uri_path_glob();
  const std::string& uri_path_glob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_path_glob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_path_glob();
  PROTOBUF_NODISCARD std::string* release_uri_path_glob();
  void set_allocated_uri_path_glob(std::string* uri_path_glob);
  private:
  const std::string& _internal_uri_path_glob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_path_glob(const std::string& value);
  std::string* _internal_mutable_uri_path_glob();
  public:

  // string uri_file = 3 [json_name = "uriFile"];
  bool has_uri_file() const;
  private:
  bool _internal_has_uri_file() const;
  public:
  void clear_uri_file();
  const std::string& uri_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_file();
  PROTOBUF_NODISCARD std::string* release_uri_file();
  void set_allocated_uri_file(std::string* uri_file);
  private:
  const std::string& _internal_uri_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_file(const std::string& value);
  std::string* _internal_mutable_uri_file();
  public:

  // string uri_folder = 4 [json_name = "uriFolder"];
  bool has_uri_folder() const;
  private:
  bool _internal_has_uri_folder() const;
  public:
  void clear_uri_folder();
  const std::string& uri_folder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri_folder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri_folder();
  PROTOBUF_NODISCARD std::string* release_uri_folder();
  void set_allocated_uri_folder(std::string* uri_folder);
  private:
  const std::string& _internal_uri_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_folder(const std::string& value);
  std::string* _internal_mutable_uri_folder();
  public:

  void clear_path_type();
  PathTypeCase path_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles)
 private:
  class _Internal;
  void set_has_uri_path();
  void set_has_uri_path_glob();
  void set_has_uri_file();
  void set_has_uri_folder();

  inline bool has_path_type() const;
  inline void clear_has_path_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int format_;
  uint64_t partition_index_;
  uint64_t start_;
  uint64_t length_;
  union PathTypeUnion {
    constexpr PathTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_glob_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_folder_;
  } path_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel_LocalFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles) */ {
 public:
  inline ReadRel_LocalFiles() : ReadRel_LocalFiles(nullptr) {}
  ~ReadRel_LocalFiles() override;
  explicit constexpr ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles(const ReadRel_LocalFiles& from);
  ReadRel_LocalFiles(ReadRel_LocalFiles&& from) noexcept
    : ReadRel_LocalFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles& operator=(const ReadRel_LocalFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles& operator=(ReadRel_LocalFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles*>(
               &_ReadRel_LocalFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReadRel_LocalFiles& a, ReadRel_LocalFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_LocalFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel.LocalFiles";
  }
  protected:
  explicit ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles FileOrFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::substrait::ReadRel_LocalFiles_FileOrFiles* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >*
      mutable_items();
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles& _internal_items(int index) const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles* _internal_add_items();
  public:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles& items(int index) const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >&
      items() const;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles > items_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ReadRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel) */ {
 public:
  inline ReadRel() : ReadRel(nullptr) {}
  ~ReadRel() override;
  explicit constexpr ReadRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel(const ReadRel& from);
  ReadRel(ReadRel&& from) noexcept
    : ReadRel() {
    *this = ::std::move(from);
  }

  inline ReadRel& operator=(const ReadRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel& operator=(ReadRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel& default_instance() {
    return *internal_default_instance();
  }
  enum ReadTypeCase {
    kVirtualTable = 5,
    kLocalFiles = 6,
    kNamedTable = 7,
    kExtensionTable = 8,
    READ_TYPE_NOT_SET = 0,
  };

  static inline const ReadRel* internal_default_instance() {
    return reinterpret_cast<const ReadRel*>(
               &_ReadRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadRel& a, ReadRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ReadRel";
  }
  protected:
  explicit ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_NamedTable NamedTable;
  typedef ReadRel_VirtualTable VirtualTable;
  typedef ReadRel_ExtensionTable ExtensionTable;
  typedef ReadRel_LocalFiles LocalFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBaseSchemaFieldNumber = 2,
    kFilterFieldNumber = 3,
    kProjectionFieldNumber = 4,
    kAdvancedExtensionFieldNumber = 10,
    kVirtualTableFieldNumber = 5,
    kLocalFilesFieldNumber = 6,
    kNamedTableFieldNumber = 7,
    kExtensionTableFieldNumber = 8,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
  bool has_base_schema() const;
  private:
  bool _internal_has_base_schema() const;
  public:
  void clear_base_schema();
  const ::substrait::NamedStruct& base_schema() const;
  PROTOBUF_NODISCARD ::substrait::NamedStruct* release_base_schema();
  ::substrait::NamedStruct* mutable_base_schema();
  void set_allocated_base_schema(::substrait::NamedStruct* base_schema);
  private:
  const ::substrait::NamedStruct& _internal_base_schema() const;
  ::substrait::NamedStruct* _internal_mutable_base_schema();
  public:
  void unsafe_arena_set_allocated_base_schema(
      ::substrait::NamedStruct* base_schema);
  ::substrait::NamedStruct* unsafe_arena_release_base_schema();

  // .substrait.Expression filter = 3 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::Expression& filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_filter();
  ::substrait::Expression* mutable_filter();
  void set_allocated_filter(::substrait::Expression* filter);
  private:
  const ::substrait::Expression& _internal_filter() const;
  ::substrait::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::Expression* filter);
  ::substrait::Expression* unsafe_arena_release_filter();

  // .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::substrait::Expression_MaskExpression& projection() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression* release_projection();
  ::substrait::Expression_MaskExpression* mutable_projection();
  void set_allocated_projection(::substrait::Expression_MaskExpression* projection);
  private:
  const ::substrait::Expression_MaskExpression& _internal_projection() const;
  ::substrait::Expression_MaskExpression* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::substrait::Expression_MaskExpression* projection);
  ::substrait::Expression_MaskExpression* unsafe_arena_release_projection();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
  bool has_virtual_table() const;
  private:
  bool _internal_has_virtual_table() const;
  public:
  void clear_virtual_table();
  const ::substrait::ReadRel_VirtualTable& virtual_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_VirtualTable* release_virtual_table();
  ::substrait::ReadRel_VirtualTable* mutable_virtual_table();
  void set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table);
  private:
  const ::substrait::ReadRel_VirtualTable& _internal_virtual_table() const;
  ::substrait::ReadRel_VirtualTable* _internal_mutable_virtual_table();
  public:
  void unsafe_arena_set_allocated_virtual_table(
      ::substrait::ReadRel_VirtualTable* virtual_table);
  ::substrait::ReadRel_VirtualTable* unsafe_arena_release_virtual_table();

  // .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
  bool has_local_files() const;
  private:
  bool _internal_has_local_files() const;
  public:
  void clear_local_files();
  const ::substrait::ReadRel_LocalFiles& local_files() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles* release_local_files();
  ::substrait::ReadRel_LocalFiles* mutable_local_files();
  void set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files);
  private:
  const ::substrait::ReadRel_LocalFiles& _internal_local_files() const;
  ::substrait::ReadRel_LocalFiles* _internal_mutable_local_files();
  public:
  void unsafe_arena_set_allocated_local_files(
      ::substrait::ReadRel_LocalFiles* local_files);
  ::substrait::ReadRel_LocalFiles* unsafe_arena_release_local_files();

  // .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;
  public:
  void clear_named_table();
  const ::substrait::ReadRel_NamedTable& named_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_NamedTable* release_named_table();
  ::substrait::ReadRel_NamedTable* mutable_named_table();
  void set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table);
  private:
  const ::substrait::ReadRel_NamedTable& _internal_named_table() const;
  ::substrait::ReadRel_NamedTable* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::substrait::ReadRel_NamedTable* named_table);
  ::substrait::ReadRel_NamedTable* unsafe_arena_release_named_table();

  // .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
  bool has_extension_table() const;
  private:
  bool _internal_has_extension_table() const;
  public:
  void clear_extension_table();
  const ::substrait::ReadRel_ExtensionTable& extension_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_ExtensionTable* release_extension_table();
  ::substrait::ReadRel_ExtensionTable* mutable_extension_table();
  void set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table);
  private:
  const ::substrait::ReadRel_ExtensionTable& _internal_extension_table() const;
  ::substrait::ReadRel_ExtensionTable* _internal_mutable_extension_table();
  public:
  void unsafe_arena_set_allocated_extension_table(
      ::substrait::ReadRel_ExtensionTable* extension_table);
  ::substrait::ReadRel_ExtensionTable* unsafe_arena_release_extension_table();

  void clear_read_type();
  ReadTypeCase read_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ReadRel)
 private:
  class _Internal;
  void set_has_virtual_table();
  void set_has_local_files();
  void set_has_named_table();
  void set_has_extension_table();

  inline bool has_read_type() const;
  inline void clear_has_read_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::NamedStruct* base_schema_;
  ::substrait::Expression* filter_;
  ::substrait::Expression_MaskExpression* projection_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  union ReadTypeUnion {
    constexpr ReadTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::substrait::ReadRel_VirtualTable* virtual_table_;
    ::substrait::ReadRel_LocalFiles* local_files_;
    ::substrait::ReadRel_NamedTable* named_table_;
    ::substrait::ReadRel_ExtensionTable* extension_table_;
  } read_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ProjectRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ProjectRel) */ {
 public:
  inline ProjectRel() : ProjectRel(nullptr) {}
  ~ProjectRel() override;
  explicit constexpr ProjectRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRel(const ProjectRel& from);
  ProjectRel(ProjectRel&& from) noexcept
    : ProjectRel() {
    *this = ::std::move(from);
  }

  inline ProjectRel& operator=(const ProjectRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRel& operator=(ProjectRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRel* internal_default_instance() {
    return reinterpret_cast<const ProjectRel*>(
               &_ProjectRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProjectRel& a, ProjectRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProjectRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ProjectRel";
  }
  protected:
  explicit ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;
  public:
  void clear_expressions();
  ::substrait::Expression* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_expressions();
  private:
  const ::substrait::Expression& _internal_expressions(int index) const;
  ::substrait::Expression* _internal_add_expressions();
  public:
  const ::substrait::Expression& expressions(int index) const;
  ::substrait::Expression* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      expressions() const;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.ProjectRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > expressions_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class JoinRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.JoinRel) */ {
 public:
  inline JoinRel() : JoinRel(nullptr) {}
  ~JoinRel() override;
  explicit constexpr JoinRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRel(const JoinRel& from);
  JoinRel(JoinRel&& from) noexcept
    : JoinRel() {
    *this = ::std::move(from);
  }

  inline JoinRel& operator=(const JoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRel& operator=(JoinRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRel* internal_default_instance() {
    return reinterpret_cast<const JoinRel*>(
               &_JoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JoinRel& a, JoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.JoinRel";
  }
  protected:
  explicit JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JoinRel_JoinType JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED =
    JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER =
    JoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER =
    JoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT =
    JoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT =
    JoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_SEMI =
    JoinRel_JoinType_JOIN_TYPE_SEMI;
  static constexpr JoinType JOIN_TYPE_ANTI =
    JoinRel_JoinType_JOIN_TYPE_ANTI;
  static constexpr JoinType JOIN_TYPE_SINGLE =
    JoinRel_JoinType_JOIN_TYPE_SINGLE;
  static inline bool JoinType_IsValid(int value) {
    return JoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN =
    JoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX =
    JoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE =
    JoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JoinType_descriptor() {
    return JoinRel_JoinType_descriptor();
  }
  template<typename T>
  static inline const std::string& JoinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JoinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JoinType_Name.");
    return JoinRel_JoinType_Name(enum_t_value);
  }
  static inline bool JoinType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      JoinType* value) {
    return JoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kExpressionFieldNumber = 4,
    kPostJoinFilterFieldNumber = 5,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 6,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();

  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();

  // .substrait.Expression expression = 4 [json_name = "expression"];
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();

  // .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
  bool has_post_join_filter() const;
  private:
  bool _internal_has_post_join_filter() const;
  public:
  void clear_post_join_filter();
  const ::substrait::Expression& post_join_filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_post_join_filter();
  ::substrait::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::Expression* post_join_filter);
  private:
  const ::substrait::Expression& _internal_post_join_filter() const;
  ::substrait::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::Expression* post_join_filter);
  ::substrait::Expression* unsafe_arena_release_post_join_filter();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
  void clear_type();
  ::substrait::JoinRel_JoinType type() const;
  void set_type(::substrait::JoinRel_JoinType value);
  private:
  ::substrait::JoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::JoinRel_JoinType value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.JoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* left_;
  ::substrait::Rel* right_;
  ::substrait::Expression* expression_;
  ::substrait::Expression* post_join_filter_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class CrossRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.CrossRel) */ {
 public:
  inline CrossRel() : CrossRel(nullptr) {}
  ~CrossRel() override;
  explicit constexpr CrossRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossRel(const CrossRel& from);
  CrossRel(CrossRel&& from) noexcept
    : CrossRel() {
    *this = ::std::move(from);
  }

  inline CrossRel& operator=(const CrossRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossRel& operator=(CrossRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossRel* internal_default_instance() {
    return reinterpret_cast<const CrossRel*>(
               &_CrossRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CrossRel& a, CrossRel& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CrossRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.CrossRel";
  }
  protected:
  explicit CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();

  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.CrossRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* left_;
  ::substrait::Rel* right_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class FetchRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FetchRel) */ {
 public:
  inline FetchRel() : FetchRel(nullptr) {}
  ~FetchRel() override;
  explicit constexpr FetchRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRel(const FetchRel& from);
  FetchRel(FetchRel&& from) noexcept
    : FetchRel() {
    *this = ::std::move(from);
  }

  inline FetchRel& operator=(const FetchRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRel& operator=(FetchRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRel* internal_default_instance() {
    return reinterpret_cast<const FetchRel*>(
               &_FetchRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FetchRel& a, FetchRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FetchRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.FetchRel";
  }
  protected:
  explicit FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // int64 offset = 3 [json_name = "offset"];
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int64 count = 4 [json_name = "count"];
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.FetchRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  int64_t offset_;
  int64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Grouping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel.Grouping) */ {
 public:
  inline AggregateRel_Grouping() : AggregateRel_Grouping(nullptr) {}
  ~AggregateRel_Grouping() override;
  explicit constexpr AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Grouping(const AggregateRel_Grouping& from);
  AggregateRel_Grouping(AggregateRel_Grouping&& from) noexcept
    : AggregateRel_Grouping() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Grouping& operator=(const AggregateRel_Grouping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Grouping& operator=(AggregateRel_Grouping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Grouping& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Grouping* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Grouping*>(
               &_AggregateRel_Grouping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AggregateRel_Grouping& a, AggregateRel_Grouping& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Grouping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Grouping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel_Grouping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel_Grouping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggregateRel_Grouping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Grouping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.AggregateRel.Grouping";
  }
  protected:
  explicit AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingExpressionsFieldNumber = 1,
  };
  // repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
  int grouping_expressions_size() const;
  private:
  int _internal_grouping_expressions_size() const;
  public:
  void clear_grouping_expressions();
  ::substrait::Expression* mutable_grouping_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_grouping_expressions();
  private:
  const ::substrait::Expression& _internal_grouping_expressions(int index) const;
  ::substrait::Expression* _internal_add_grouping_expressions();
  public:
  const ::substrait::Expression& grouping_expressions(int index) const;
  ::substrait::Expression* add_grouping_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      grouping_expressions() const;

  // @@protoc_insertion_point(class_scope:substrait.AggregateRel.Grouping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > grouping_expressions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel_Measure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel.Measure) */ {
 public:
  inline AggregateRel_Measure() : AggregateRel_Measure(nullptr) {}
  ~AggregateRel_Measure() override;
  explicit constexpr AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Measure(const AggregateRel_Measure& from);
  AggregateRel_Measure(AggregateRel_Measure&& from) noexcept
    : AggregateRel_Measure() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Measure& operator=(const AggregateRel_Measure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Measure& operator=(AggregateRel_Measure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Measure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Measure* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Measure*>(
               &_AggregateRel_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AggregateRel_Measure& a, AggregateRel_Measure& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Measure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Measure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel_Measure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel_Measure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel_Measure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggregateRel_Measure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Measure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.AggregateRel.Measure";
  }
  protected:
  explicit AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // .substrait.AggregateFunction measure = 1 [json_name = "measure"];
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::substrait::AggregateFunction& measure() const;
  PROTOBUF_NODISCARD ::substrait::AggregateFunction* release_measure();
  ::substrait::AggregateFunction* mutable_measure();
  void set_allocated_measure(::substrait::AggregateFunction* measure);
  private:
  const ::substrait::AggregateFunction& _internal_measure() const;
  ::substrait::AggregateFunction* _internal_mutable_measure();
  public:
  void unsafe_arena_set_allocated_measure(
      ::substrait::AggregateFunction* measure);
  ::substrait::AggregateFunction* unsafe_arena_release_measure();

  // .substrait.Expression filter = 2 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::Expression& filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_filter();
  ::substrait::Expression* mutable_filter();
  void set_allocated_filter(::substrait::Expression* filter);
  private:
  const ::substrait::Expression& _internal_filter() const;
  ::substrait::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::Expression* filter);
  ::substrait::Expression* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:substrait.AggregateRel.Measure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::AggregateFunction* measure_;
  ::substrait::Expression* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class AggregateRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel) */ {
 public:
  inline AggregateRel() : AggregateRel(nullptr) {}
  ~AggregateRel() override;
  explicit constexpr AggregateRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel(const AggregateRel& from);
  AggregateRel(AggregateRel&& from) noexcept
    : AggregateRel() {
    *this = ::std::move(from);
  }

  inline AggregateRel& operator=(const AggregateRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel& operator=(AggregateRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel* internal_default_instance() {
    return reinterpret_cast<const AggregateRel*>(
               &_AggregateRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AggregateRel& a, AggregateRel& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AggregateRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.AggregateRel";
  }
  protected:
  explicit AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AggregateRel_Grouping Grouping;
  typedef AggregateRel_Measure Measure;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingsFieldNumber = 3,
    kMeasuresFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
  int groupings_size() const;
  private:
  int _internal_groupings_size() const;
  public:
  void clear_groupings();
  ::substrait::AggregateRel_Grouping* mutable_groupings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >*
      mutable_groupings();
  private:
  const ::substrait::AggregateRel_Grouping& _internal_groupings(int index) const;
  ::substrait::AggregateRel_Grouping* _internal_add_groupings();
  public:
  const ::substrait::AggregateRel_Grouping& groupings(int index) const;
  ::substrait::AggregateRel_Grouping* add_groupings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >&
      groupings() const;

  // repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
  int measures_size() const;
  private:
  int _internal_measures_size() const;
  public:
  void clear_measures();
  ::substrait::AggregateRel_Measure* mutable_measures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >*
      mutable_measures();
  private:
  const ::substrait::AggregateRel_Measure& _internal_measures(int index) const;
  ::substrait::AggregateRel_Measure* _internal_add_measures();
  public:
  const ::substrait::AggregateRel_Measure& measures(int index) const;
  ::substrait::AggregateRel_Measure* add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >&
      measures() const;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.AggregateRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping > groupings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure > measures_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class SortRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.SortRel) */ {
 public:
  inline SortRel() : SortRel(nullptr) {}
  ~SortRel() override;
  explicit constexpr SortRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortRel(const SortRel& from);
  SortRel(SortRel&& from) noexcept
    : SortRel() {
    *this = ::std::move(from);
  }

  inline SortRel& operator=(const SortRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortRel& operator=(SortRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortRel* internal_default_instance() {
    return reinterpret_cast<const SortRel*>(
               &_SortRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SortRel& a, SortRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SortRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SortRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SortRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SortRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SortRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.SortRel";
  }
  protected:
  explicit SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::substrait::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
      mutable_sorts();
  private:
  const ::substrait::SortField& _internal_sorts(int index) const;
  ::substrait::SortField* _internal_add_sorts();
  public:
  const ::substrait::SortField& sorts(int index) const;
  ::substrait::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
      sorts() const;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.SortRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField > sorts_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class FilterRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FilterRel) */ {
 public:
  inline FilterRel() : FilterRel(nullptr) {}
  ~FilterRel() override;
  explicit constexpr FilterRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterRel(const FilterRel& from);
  FilterRel(FilterRel&& from) noexcept
    : FilterRel() {
    *this = ::std::move(from);
  }

  inline FilterRel& operator=(const FilterRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterRel& operator=(FilterRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterRel* internal_default_instance() {
    return reinterpret_cast<const FilterRel*>(
               &_FilterRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FilterRel& a, FilterRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FilterRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.FilterRel";
  }
  protected:
  explicit FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kConditionFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .substrait.Expression condition = 3 [json_name = "condition"];
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::substrait::Expression& condition() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_condition();
  ::substrait::Expression* mutable_condition();
  void set_allocated_condition(::substrait::Expression* condition);
  private:
  const ::substrait::Expression& _internal_condition() const;
  ::substrait::Expression* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::substrait::Expression* condition);
  ::substrait::Expression* unsafe_arena_release_condition();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // @@protoc_insertion_point(class_scope:substrait.FilterRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::substrait::Expression* condition_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class SetRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.SetRel) */ {
 public:
  inline SetRel() : SetRel(nullptr) {}
  ~SetRel() override;
  explicit constexpr SetRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRel(const SetRel& from);
  SetRel(SetRel&& from) noexcept
    : SetRel() {
    *this = ::std::move(from);
  }

  inline SetRel& operator=(const SetRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRel& operator=(SetRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRel* internal_default_instance() {
    return reinterpret_cast<const SetRel*>(
               &_SetRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetRel& a, SetRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.SetRel";
  }
  protected:
  explicit SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetRel_SetOp SetOp;
  static constexpr SetOp SET_OP_UNSPECIFIED =
    SetRel_SetOp_SET_OP_UNSPECIFIED;
  static constexpr SetOp SET_OP_MINUS_PRIMARY =
    SetRel_SetOp_SET_OP_MINUS_PRIMARY;
  static constexpr SetOp SET_OP_MINUS_MULTISET =
    SetRel_SetOp_SET_OP_MINUS_MULTISET;
  static constexpr SetOp SET_OP_INTERSECTION_PRIMARY =
    SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY;
  static constexpr SetOp SET_OP_INTERSECTION_MULTISET =
    SetRel_SetOp_SET_OP_INTERSECTION_MULTISET;
  static constexpr SetOp SET_OP_UNION_DISTINCT =
    SetRel_SetOp_SET_OP_UNION_DISTINCT;
  static constexpr SetOp SET_OP_UNION_ALL =
    SetRel_SetOp_SET_OP_UNION_ALL;
  static inline bool SetOp_IsValid(int value) {
    return SetRel_SetOp_IsValid(value);
  }
  static constexpr SetOp SetOp_MIN =
    SetRel_SetOp_SetOp_MIN;
  static constexpr SetOp SetOp_MAX =
    SetRel_SetOp_SetOp_MAX;
  static constexpr int SetOp_ARRAYSIZE =
    SetRel_SetOp_SetOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SetOp_descriptor() {
    return SetRel_SetOp_descriptor();
  }
  template<typename T>
  static inline const std::string& SetOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SetOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SetOp_Name.");
    return SetRel_SetOp_Name(enum_t_value);
  }
  static inline bool SetOp_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SetOp* value) {
    return SetRel_SetOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
    kOpFieldNumber = 3,
  };
  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::substrait::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
      mutable_inputs();
  private:
  const ::substrait::Rel& _internal_inputs(int index) const;
  ::substrait::Rel* _internal_add_inputs();
  public:
  const ::substrait::Rel& inputs(int index) const;
  ::substrait::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
      inputs() const;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  private:
  bool _internal_has_advanced_extension() const;
  public:
  void clear_advanced_extension();
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();

  // .substrait.SetRel.SetOp op = 3 [json_name = "op"];
  void clear_op();
  ::substrait::SetRel_SetOp op() const;
  void set_op(::substrait::SetRel_SetOp value);
  private:
  ::substrait::SetRel_SetOp _internal_op() const;
  void _internal_set_op(::substrait::SetRel_SetOp value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.SetRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel > inputs_;
  ::substrait::RelCommon* common_;
  ::substrait::extensions::AdvancedExtension* advanced_extension_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ExtensionSingleRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionSingleRel) */ {
 public:
  inline ExtensionSingleRel() : ExtensionSingleRel(nullptr) {}
  ~ExtensionSingleRel() override;
  explicit constexpr ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionSingleRel(const ExtensionSingleRel& from);
  ExtensionSingleRel(ExtensionSingleRel&& from) noexcept
    : ExtensionSingleRel() {
    *this = ::std::move(from);
  }

  inline ExtensionSingleRel& operator=(const ExtensionSingleRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionSingleRel& operator=(ExtensionSingleRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionSingleRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionSingleRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionSingleRel*>(
               &_ExtensionSingleRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ExtensionSingleRel& a, ExtensionSingleRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionSingleRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionSingleRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionSingleRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionSingleRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionSingleRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtensionSingleRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionSingleRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ExtensionSingleRel";
  }
  protected:
  explicit ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kDetailFieldNumber = 3,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.ExtensionSingleRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::substrait::Rel* input_;
  ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ExtensionLeafRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionLeafRel) */ {
 public:
  inline ExtensionLeafRel() : ExtensionLeafRel(nullptr) {}
  ~ExtensionLeafRel() override;
  explicit constexpr ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionLeafRel(const ExtensionLeafRel& from);
  ExtensionLeafRel(ExtensionLeafRel&& from) noexcept
    : ExtensionLeafRel() {
    *this = ::std::move(from);
  }

  inline ExtensionLeafRel& operator=(const ExtensionLeafRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionLeafRel& operator=(ExtensionLeafRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionLeafRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionLeafRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionLeafRel*>(
               &_ExtensionLeafRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ExtensionLeafRel& a, ExtensionLeafRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionLeafRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionLeafRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionLeafRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionLeafRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionLeafRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtensionLeafRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionLeafRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ExtensionLeafRel";
  }
  protected:
  explicit ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 2,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .google.protobuf.Any detail = 2 [json_name = "detail"];
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.ExtensionLeafRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::substrait::RelCommon* common_;
  ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class ExtensionMultiRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionMultiRel) */ {
 public:
  inline ExtensionMultiRel() : ExtensionMultiRel(nullptr) {}
  ~ExtensionMultiRel() override;
  explicit constexpr ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionMultiRel(const ExtensionMultiRel& from);
  ExtensionMultiRel(ExtensionMultiRel&& from) noexcept
    : ExtensionMultiRel() {
    *this = ::std::move(from);
  }

  inline ExtensionMultiRel& operator=(const ExtensionMultiRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionMultiRel& operator=(ExtensionMultiRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionMultiRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionMultiRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionMultiRel*>(
               &_ExtensionMultiRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ExtensionMultiRel& a, ExtensionMultiRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionMultiRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionMultiRel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionMultiRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionMultiRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionMultiRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtensionMultiRel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionMultiRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ExtensionMultiRel";
  }
  protected:
  explicit ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 3,
  };
  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::substrait::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
      mutable_inputs();
  private:
  const ::substrait::Rel& _internal_inputs(int index) const;
  ::substrait::Rel* _internal_add_inputs();
  public:
  const ::substrait::Rel& inputs(int index) const;
  ::substrait::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
      inputs() const;

  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();

  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();

  // @@protoc_insertion_point(class_scope:substrait.ExtensionMultiRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel > inputs_;
  ::substrait::RelCommon* common_;
  ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class RelRoot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelRoot) */ {
 public:
  inline RelRoot() : RelRoot(nullptr) {}
  ~RelRoot() override;
  explicit constexpr RelRoot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelRoot(const RelRoot& from);
  RelRoot(RelRoot&& from) noexcept
    : RelRoot() {
    *this = ::std::move(from);
  }

  inline RelRoot& operator=(const RelRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelRoot& operator=(RelRoot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelRoot& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelRoot* internal_default_instance() {
    return reinterpret_cast<const RelRoot*>(
               &_RelRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RelRoot& a, RelRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(RelRoot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelRoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelRoot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelRoot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelRoot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelRoot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.RelRoot";
  }
  protected:
  explicit RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kInputFieldNumber = 1,
  };
  // repeated string names = 2 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .substrait.Rel input = 1 [json_name = "input"];
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:substrait.RelRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::substrait::Rel* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// -------------------------------------------------------------------

class Rel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Rel) */ {
 public:
  inline Rel() : Rel(nullptr) {}
  ~Rel() override;
  explicit constexpr Rel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rel(const Rel& from);
  Rel(Rel&& from) noexcept
    : Rel() {
    *this = ::std::move(from);
  }

  inline Rel& operator=(const Rel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rel& operator=(Rel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rel& default_instance() {
    return *internal_default_instance();
  }
  enum RelTypeCase {
    kRead = 1,
    kFilter = 2,
    kFetch = 3,
    kAggregate = 4,
    kSort = 5,
    kJoin = 6,
    kProject = 7,
    kSet = 8,
    kExtensionSingle = 9,
    kExtensionMulti = 10,
    kExtensionLeaf = 11,
    kCross = 12,
    REL_TYPE_NOT_SET = 0,
  };

  static inline const Rel* internal_default_instance() {
    return reinterpret_cast<const Rel*>(
               &_Rel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Rel& a, Rel& b) {
    a.Swap(&b);
  }
  inline void Swap(Rel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.Rel";
  }
  protected:
  explicit Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kFilterFieldNumber = 2,
    kFetchFieldNumber = 3,
    kAggregateFieldNumber = 4,
    kSortFieldNumber = 5,
    kJoinFieldNumber = 6,
    kProjectFieldNumber = 7,
    kSetFieldNumber = 8,
    kExtensionSingleFieldNumber = 9,
    kExtensionMultiFieldNumber = 10,
    kExtensionLeafFieldNumber = 11,
    kCrossFieldNumber = 12,
  };
  // .substrait.ReadRel read = 1 [json_name = "read"];
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  const ::substrait::ReadRel& read() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel* release_read();
  ::substrait::ReadRel* mutable_read();
  void set_allocated_read(::substrait::ReadRel* read);
  private:
  const ::substrait::ReadRel& _internal_read() const;
  ::substrait::ReadRel* _internal_mutable_read();
  public:
  void unsafe_arena_set_allocated_read(
      ::substrait::ReadRel* read);
  ::substrait::ReadRel* unsafe_arena_release_read();

  // .substrait.FilterRel filter = 2 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::substrait::FilterRel& filter() const;
  PROTOBUF_NODISCARD ::substrait::FilterRel* release_filter();
  ::substrait::FilterRel* mutable_filter();
  void set_allocated_filter(::substrait::FilterRel* filter);
  private:
  const ::substrait::FilterRel& _internal_filter() const;
  ::substrait::FilterRel* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::FilterRel* filter);
  ::substrait::FilterRel* unsafe_arena_release_filter();

  // .substrait.FetchRel fetch = 3 [json_name = "fetch"];
  bool has_fetch() const;
  private:
  bool _internal_has_fetch() const;
  public:
  void clear_fetch();
  const ::substrait::FetchRel& fetch() const;
  PROTOBUF_NODISCARD ::substrait::FetchRel* release_fetch();
  ::substrait::FetchRel* mutable_fetch();
  void set_allocated_fetch(::substrait::FetchRel* fetch);
  private:
  const ::substrait::FetchRel& _internal_fetch() const;
  ::substrait::FetchRel* _internal_mutable_fetch();
  public:
  void unsafe_arena_set_allocated_fetch(
      ::substrait::FetchRel* fetch);
  ::substrait::FetchRel* unsafe_arena_release_fetch();

  // .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
  bool has_aggregate() const;
  private:
  bool _internal_has_aggregate() const;
  public:
  void clear_aggregate();
  const ::substrait::AggregateRel& aggregate() const;
  PROTOBUF_NODISCARD ::substrait::AggregateRel* release_aggregate();
  ::substrait::AggregateRel* mutable_aggregate();
  void set_allocated_aggregate(::substrait::AggregateRel* aggregate);
  private:
  const ::substrait::AggregateRel& _internal_aggregate() const;
  ::substrait::AggregateRel* _internal_mutable_aggregate();
  public:
  void unsafe_arena_set_allocated_aggregate(
      ::substrait::AggregateRel* aggregate);
  ::substrait::AggregateRel* unsafe_arena_release_aggregate();

  // .substrait.SortRel sort = 5 [json_name = "sort"];
  bool has_sort() const;
  private:
  bool _internal_has_sort() const;
  public:
  void clear_sort();
  const ::substrait::SortRel& sort() const;
  PROTOBUF_NODISCARD ::substrait::SortRel* release_sort();
  ::substrait::SortRel* mutable_sort();
  void set_allocated_sort(::substrait::SortRel* sort);
  private:
  const ::substrait::SortRel& _internal_sort() const;
  ::substrait::SortRel* _internal_mutable_sort();
  public:
  void unsafe_arena_set_allocated_sort(
      ::substrait::SortRel* sort);
  ::substrait::SortRel* unsafe_arena_release_sort();

  // .substrait.JoinRel join = 6 [json_name = "join"];
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::substrait::JoinRel& join() const;
  PROTOBUF_NODISCARD ::substrait::JoinRel* release_join();
  ::substrait::JoinRel* mutable_join();
  void set_allocated_join(::substrait::JoinRel* join);
  private:
  const ::substrait::JoinRel& _internal_join() const;
  ::substrait::JoinRel* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::substrait::JoinRel* join);
  ::substrait::JoinRel* unsafe_arena_release_join();

  // .substrait.ProjectRel project = 7 [json_name = "project"];
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::substrait::ProjectRel& project() const;
  PROTOBUF_NODISCARD ::substrait::ProjectRel* release_project();
  ::substrait::ProjectRel* mutable_project();
  void set_allocated_project(::substrait::ProjectRel* project);
  private:
  const ::substrait::ProjectRel& _internal_project() const;
  ::substrait::ProjectRel* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::substrait::ProjectRel* project);
  ::substrait::ProjectRel* unsafe_arena_release_project();

  // .substrait.SetRel set = 8 [json_name = "set"];
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::substrait::SetRel& set() const;
  PROTOBUF_NODISCARD ::substrait::SetRel* release_set();
  ::substrait::SetRel* mutable_set();
  void set_allocated_set(::substrait::SetRel* set);
  private:
  const ::substrait::SetRel& _internal_set() const;
  ::substrait::SetRel* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::substrait::SetRel* set);
  ::substrait::SetRel* unsafe_arena_release_set();

  // .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
  bool has_extension_single() const;
  private:
  bool _internal_has_extension_single() const;
  public:
  void clear_extension_single();
  const ::substrait::ExtensionSingleRel& extension_single() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionSingleRel* release_extension_single();
  ::substrait::ExtensionSingleRel* mutable_extension_single();
  void set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single);
  private:
  const ::substrait::ExtensionSingleRel& _internal_extension_single() const;
  ::substrait::ExtensionSingleRel* _internal_mutable_extension_single();
  public:
  void unsafe_arena_set_allocated_extension_single(
      ::substrait::ExtensionSingleRel* extension_single);
  ::substrait::ExtensionSingleRel* unsafe_arena_release_extension_single();

  // .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
  bool has_extension_multi() const;
  private:
  bool _internal_has_extension_multi() const;
  public:
  void clear_extension_multi();
  const ::substrait::ExtensionMultiRel& extension_multi() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionMultiRel* release_extension_multi();
  ::substrait::ExtensionMultiRel* mutable_extension_multi();
  void set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi);
  private:
  const ::substrait::ExtensionMultiRel& _internal_extension_multi() const;
  ::substrait::ExtensionMultiRel* _internal_mutable_extension_multi();
  public:
  void unsafe_arena_set_allocated_extension_multi(
      ::substrait::ExtensionMultiRel* extension_multi);
  ::substrait::ExtensionMultiRel* unsafe_arena_release_extension_multi();

  // .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
  bool has_extension_leaf() const;
  private:
  bool _internal_has_extension_leaf() const;
  public:
  void clear_extension_leaf();
  const ::substrait::ExtensionLeafRel& extension_leaf() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionLeafRel* release_extension_leaf();
  ::substrait::ExtensionLeafRel* mutable_extension_leaf();
  void set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf);
  private:
  const ::substrait::ExtensionLeafRel& _internal_extension_leaf() const;
  ::substrait::ExtensionLeafRel* _internal_mutable_extension_leaf();
  public:
  void unsafe_arena_set_allocated_extension_leaf(
      ::substrait::ExtensionLeafRel* extension_leaf);
  ::substrait::ExtensionLeafRel* unsafe_arena_release_extension_leaf();

  // .substrait.CrossRel cross = 12 [json_name = "cross"];
  bool has_cross() const;
  private:
  bool _internal_has_cross() const;
  public:
  void clear_cross();
  const ::substrait::CrossRel& cross() const;
  PROTOBUF_NODISCARD ::substrait::CrossRel* release_cross();
  ::substrait::CrossRel* mutable_cross();
  void set_allocated_cross(::substrait::CrossRel* cross);
  private:
  const ::substrait::CrossRel& _internal_cross() const;
  ::substrait::CrossRel* _internal_mutable_cross();
  public:
  void unsafe_arena_set_allocated_cross(
      ::substrait::CrossRel* cross);
  ::substrait::CrossRel* unsafe_arena_release_cross();

  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Rel)
 private:
  class _Internal;
  void set_has_read();
  void set_has_filter();
  void set_has_fetch();
  void set_has_aggregate();
  void set_has_sort();
  void set_has_join();
  void set_has_project();
  void set_has_set();
  void set_has_extension_single();
  void set_has_extension_multi();
  void set_has_extension_leaf();
  void set_has_cross();

  inline bool has_rel_type() const;
  inline void clear_has_rel_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RelTypeUnion {
    constexpr RelTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::substrait::ReadRel* read_;
    ::substrait::FilterRel* filter_;
    ::substrait::FetchRel* fetch_;
    ::substrait::AggregateRel* aggregate_;
    ::substrait::SortRel* sort_;
    ::substrait::JoinRel* join_;
    ::substrait::ProjectRel* project_;
    ::substrait::SetRel* set_;
    ::substrait::ExtensionSingleRel* extension_single_;
    ::substrait::ExtensionMultiRel* extension_multi_;
    ::substrait::ExtensionLeafRel* extension_leaf_;
    ::substrait::CrossRel* cross_;
  } rel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_substrait_2frelations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelCommon_Direct

// -------------------------------------------------------------------

// RelCommon_Emit

// repeated int32 output_mapping = 1 [json_name = "outputMapping"];
inline int RelCommon_Emit::_internal_output_mapping_size() const {
  return output_mapping_.size();
}
inline int RelCommon_Emit::output_mapping_size() const {
  return _internal_output_mapping_size();
}
inline void RelCommon_Emit::clear_output_mapping() {
  output_mapping_.Clear();
}
inline int32_t RelCommon_Emit::_internal_output_mapping(int index) const {
  return output_mapping_.Get(index);
}
inline int32_t RelCommon_Emit::output_mapping(int index) const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping(index);
}
inline void RelCommon_Emit::set_output_mapping(int index, int32_t value) {
  output_mapping_.Set(index, value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Emit.output_mapping)
}
inline void RelCommon_Emit::_internal_add_output_mapping(int32_t value) {
  output_mapping_.Add(value);
}
inline void RelCommon_Emit::add_output_mapping(int32_t value) {
  _internal_add_output_mapping(value);
  // @@protoc_insertion_point(field_add:substrait.RelCommon.Emit.output_mapping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RelCommon_Emit::_internal_output_mapping() const {
  return output_mapping_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RelCommon_Emit::output_mapping() const {
  // @@protoc_insertion_point(field_list:substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RelCommon_Emit::_internal_mutable_output_mapping() {
  return &output_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RelCommon_Emit::mutable_output_mapping() {
  // @@protoc_insertion_point(field_mutable_list:substrait.RelCommon.Emit.output_mapping)
  return _internal_mutable_output_mapping();
}

// -------------------------------------------------------------------

// RelCommon_Hint_Stats

// double row_count = 1 [json_name = "rowCount"];
inline void RelCommon_Hint_Stats::clear_row_count() {
  row_count_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_row_count() const {
  return row_count_;
}
inline double RelCommon_Hint_Stats::row_count() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.row_count)
  return _internal_row_count();
}
inline void RelCommon_Hint_Stats::_internal_set_row_count(double value) {
  
  row_count_ = value;
}
inline void RelCommon_Hint_Stats::set_row_count(double value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Hint.Stats.row_count)
}

// double record_size = 2 [json_name = "recordSize"];
inline void RelCommon_Hint_Stats::clear_record_size() {
  record_size_ = 0;
}
inline double RelCommon_Hint_Stats::_internal_record_size() const {
  return record_size_;
}
inline double RelCommon_Hint_Stats::record_size() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.record_size)
  return _internal_record_size();
}
inline void RelCommon_Hint_Stats::_internal_set_record_size(double value) {
  
  record_size_ = value;
}
inline void RelCommon_Hint_Stats::set_record_size(double value) {
  _internal_set_record_size(value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Hint.Stats.record_size)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint_Stats::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint_Stats::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_Stats::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_Stats::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_Stats::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.Stats.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.Stats.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.Stats.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint_Stats::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.Stats.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint_RuntimeConstraint

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint_RuntimeConstraint::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint_RuntimeConstraint::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_RuntimeConstraint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint_RuntimeConstraint::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint

// .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
inline bool RelCommon_Hint::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool RelCommon_Hint::has_stats() const {
  return _internal_has_stats();
}
inline void RelCommon_Hint::clear_stats() {
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::substrait::RelCommon_Hint_Stats& RelCommon_Hint::_internal_stats() const {
  const ::substrait::RelCommon_Hint_Stats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint_Stats&>(
      ::substrait::_RelCommon_Hint_Stats_default_instance_);
}
inline const ::substrait::RelCommon_Hint_Stats& RelCommon_Hint::stats() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.stats)
  return _internal_stats();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_stats(
    ::substrait::RelCommon_Hint_Stats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.stats)
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::release_stats() {
  
  ::substrait::RelCommon_Hint_Stats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.stats)
  
  ::substrait::RelCommon_Hint_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint_Stats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::mutable_stats() {
  ::substrait::RelCommon_Hint_Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.stats)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_stats(::substrait::RelCommon_Hint_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon_Hint_Stats>::GetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.stats)
}

// .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
inline bool RelCommon_Hint::_internal_has_constraint() const {
  return this != internal_default_instance() && constraint_ != nullptr;
}
inline bool RelCommon_Hint::has_constraint() const {
  return _internal_has_constraint();
}
inline void RelCommon_Hint::clear_constraint() {
  if (GetArenaForAllocation() == nullptr && constraint_ != nullptr) {
    delete constraint_;
  }
  constraint_ = nullptr;
}
inline const ::substrait::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::_internal_constraint() const {
  const ::substrait::RelCommon_Hint_RuntimeConstraint* p = constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint_RuntimeConstraint&>(
      ::substrait::_RelCommon_Hint_RuntimeConstraint_default_instance_);
}
inline const ::substrait::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::constraint() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.constraint)
  return _internal_constraint();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_constraint(
    ::substrait::RelCommon_Hint_RuntimeConstraint* constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.constraint)
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::release_constraint() {
  
  ::substrait::RelCommon_Hint_RuntimeConstraint* temp = constraint_;
  constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.constraint)
  
  ::substrait::RelCommon_Hint_RuntimeConstraint* temp = constraint_;
  constraint_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::_internal_mutable_constraint() {
  
  if (constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint_RuntimeConstraint>(GetArenaForAllocation());
    constraint_ = p;
  }
  return constraint_;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::mutable_constraint() {
  ::substrait::RelCommon_Hint_RuntimeConstraint* _msg = _internal_mutable_constraint();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.constraint)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_constraint(::substrait::RelCommon_Hint_RuntimeConstraint* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete constraint_;
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon_Hint_RuntimeConstraint>::GetOwningArena(constraint);
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    
  } else {
    
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.constraint)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon_Hint::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon

// .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
inline bool RelCommon::_internal_has_direct() const {
  return emit_kind_case() == kDirect;
}
inline bool RelCommon::has_direct() const {
  return _internal_has_direct();
}
inline void RelCommon::set_has_direct() {
  _oneof_case_[0] = kDirect;
}
inline void RelCommon::clear_direct() {
  if (_internal_has_direct()) {
    if (GetArenaForAllocation() == nullptr) {
      delete emit_kind_.direct_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::RelCommon_Direct* RelCommon::release_direct() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_emit_kind();
      ::substrait::RelCommon_Direct* temp = emit_kind_.direct_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelCommon_Direct& RelCommon::_internal_direct() const {
  return _internal_has_direct()
      ? *emit_kind_.direct_
      : reinterpret_cast< ::substrait::RelCommon_Direct&>(::substrait::_RelCommon_Direct_default_instance_);
}
inline const ::substrait::RelCommon_Direct& RelCommon::direct() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.direct)
  return _internal_direct();
}
inline ::substrait::RelCommon_Direct* RelCommon::unsafe_arena_release_direct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.RelCommon.direct)
  if (_internal_has_direct()) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Direct* temp = emit_kind_.direct_;
    emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_direct(::substrait::RelCommon_Direct* direct) {
  clear_emit_kind();
  if (direct) {
    set_has_direct();
    emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.direct)
}
inline ::substrait::RelCommon_Direct* RelCommon::_internal_mutable_direct() {
  if (!_internal_has_direct()) {
    clear_emit_kind();
    set_has_direct();
    emit_kind_.direct_ = CreateMaybeMessage< ::substrait::RelCommon_Direct >(GetArenaForAllocation());
  }
  return emit_kind_.direct_;
}
inline ::substrait::RelCommon_Direct* RelCommon::mutable_direct() {
  ::substrait::RelCommon_Direct* _msg = _internal_mutable_direct();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.direct)
  return _msg;
}

// .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
inline bool RelCommon::_internal_has_emit() const {
  return emit_kind_case() == kEmit;
}
inline bool RelCommon::has_emit() const {
  return _internal_has_emit();
}
inline void RelCommon::set_has_emit() {
  _oneof_case_[0] = kEmit;
}
inline void RelCommon::clear_emit() {
  if (_internal_has_emit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete emit_kind_.emit_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::RelCommon_Emit* RelCommon::release_emit() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_emit_kind();
      ::substrait::RelCommon_Emit* temp = emit_kind_.emit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelCommon_Emit& RelCommon::_internal_emit() const {
  return _internal_has_emit()
      ? *emit_kind_.emit_
      : reinterpret_cast< ::substrait::RelCommon_Emit&>(::substrait::_RelCommon_Emit_default_instance_);
}
inline const ::substrait::RelCommon_Emit& RelCommon::emit() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.emit)
  return _internal_emit();
}
inline ::substrait::RelCommon_Emit* RelCommon::unsafe_arena_release_emit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.RelCommon.emit)
  if (_internal_has_emit()) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Emit* temp = emit_kind_.emit_;
    emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_emit(::substrait::RelCommon_Emit* emit) {
  clear_emit_kind();
  if (emit) {
    set_has_emit();
    emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.emit)
}
inline ::substrait::RelCommon_Emit* RelCommon::_internal_mutable_emit() {
  if (!_internal_has_emit()) {
    clear_emit_kind();
    set_has_emit();
    emit_kind_.emit_ = CreateMaybeMessage< ::substrait::RelCommon_Emit >(GetArenaForAllocation());
  }
  return emit_kind_.emit_;
}
inline ::substrait::RelCommon_Emit* RelCommon::mutable_emit() {
  ::substrait::RelCommon_Emit* _msg = _internal_mutable_emit();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.emit)
  return _msg;
}

// .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
inline bool RelCommon::_internal_has_hint() const {
  return this != internal_default_instance() && hint_ != nullptr;
}
inline bool RelCommon::has_hint() const {
  return _internal_has_hint();
}
inline void RelCommon::clear_hint() {
  if (GetArenaForAllocation() == nullptr && hint_ != nullptr) {
    delete hint_;
  }
  hint_ = nullptr;
}
inline const ::substrait::RelCommon_Hint& RelCommon::_internal_hint() const {
  const ::substrait::RelCommon_Hint* p = hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint&>(
      ::substrait::_RelCommon_Hint_default_instance_);
}
inline const ::substrait::RelCommon_Hint& RelCommon::hint() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.hint)
  return _internal_hint();
}
inline void RelCommon::unsafe_arena_set_allocated_hint(
    ::substrait::RelCommon_Hint* hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hint_);
  }
  hint_ = hint;
  if (hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.hint)
}
inline ::substrait::RelCommon_Hint* RelCommon::release_hint() {
  
  ::substrait::RelCommon_Hint* temp = hint_;
  hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint* RelCommon::unsafe_arena_release_hint() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.hint)
  
  ::substrait::RelCommon_Hint* temp = hint_;
  hint_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint* RelCommon::_internal_mutable_hint() {
  
  if (hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint>(GetArenaForAllocation());
    hint_ = p;
  }
  return hint_;
}
inline ::substrait::RelCommon_Hint* RelCommon::mutable_hint() {
  ::substrait::RelCommon_Hint* _msg = _internal_mutable_hint();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.hint)
  return _msg;
}
inline void RelCommon::set_allocated_hint(::substrait::RelCommon_Hint* hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hint_;
  }
  if (hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon_Hint>::GetOwningArena(hint);
    if (message_arena != submessage_arena) {
      hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    
  } else {
    
  }
  hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.hint)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
inline bool RelCommon::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool RelCommon::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.advanced_extension)
  return _msg;
}
inline void RelCommon::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.advanced_extension)
}

inline bool RelCommon::has_emit_kind() const {
  return emit_kind_case() != EMIT_KIND_NOT_SET;
}
inline void RelCommon::clear_has_emit_kind() {
  _oneof_case_[0] = EMIT_KIND_NOT_SET;
}
inline RelCommon::EmitKindCase RelCommon::emit_kind_case() const {
  return RelCommon::EmitKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_NamedTable

// repeated string names = 1 [json_name = "names"];
inline int ReadRel_NamedTable::_internal_names_size() const {
  return names_.size();
}
inline int ReadRel_NamedTable::names_size() const {
  return _internal_names_size();
}
inline void ReadRel_NamedTable::clear_names() {
  names_.Clear();
}
inline std::string* ReadRel_NamedTable::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.ReadRel.NamedTable.names)
  return _s;
}
inline const std::string& ReadRel_NamedTable::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ReadRel_NamedTable::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.NamedTable.names)
  return _internal_names(index);
}
inline std::string* ReadRel_NamedTable::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.NamedTable.names)
  return names_.Mutable(index);
}
inline void ReadRel_NamedTable::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.ReadRel.NamedTable.names)
}
inline std::string* ReadRel_NamedTable::_internal_add_names() {
  return names_.Add();
}
inline void ReadRel_NamedTable::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.ReadRel.NamedTable.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRel_NamedTable::names() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.NamedTable.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRel_NamedTable::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.NamedTable.names)
  return &names_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel_NamedTable::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel_NamedTable::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_NamedTable::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_NamedTable::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.NamedTable.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_NamedTable::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.NamedTable.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.NamedTable.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.NamedTable.advanced_extension)
  return _msg;
}
inline void ReadRel_NamedTable::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.NamedTable.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel_VirtualTable

// repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
inline int ReadRel_VirtualTable::_internal_values_size() const {
  return values_.size();
}
inline int ReadRel_VirtualTable::values_size() const {
  return _internal_values_size();
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.VirtualTable.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >*
ReadRel_VirtualTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.VirtualTable.values)
  return &values_;
}
inline const ::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.VirtualTable.values)
  return _internal_values(index);
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::_internal_add_values() {
  return values_.Add();
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::add_values() {
  ::substrait::Expression_Literal_Struct* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:substrait.ReadRel.VirtualTable.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >&
ReadRel_VirtualTable::values() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.VirtualTable.values)
  return values_;
}

// -------------------------------------------------------------------

// ReadRel_ExtensionTable

// .google.protobuf.Any detail = 1 [json_name = "detail"];
inline bool ReadRel_ExtensionTable::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ReadRel_ExtensionTable::has_detail() const {
  return _internal_has_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.ExtensionTable.detail)
  return _internal_detail();
}
inline void ReadRel_ExtensionTable::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.ExtensionTable.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::release_detail() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.ExtensionTable.detail)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.ExtensionTable.detail)
  return _msg;
}
inline void ReadRel_ExtensionTable::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.ExtensionTable.detail)
}

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles

// string uri_path = 1 [json_name = "uriPath"];
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path() const {
  return path_type_case() == kUriPath;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path() const {
  return _internal_has_uri_path();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path() {
  _oneof_case_[0] = kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path() {
  if (_internal_has_uri_path()) {
    path_type_.uri_path_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_uri_path();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path() {
  std::string* _s = _internal_mutable_uri_path();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path() const {
  if (_internal_has_uri_path()) {
    return path_type_.uri_path_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path(const std::string& value) {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path() {
  if (!_internal_has_uri_path()) {
    clear_path_type();
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  if (_internal_has_uri_path()) {
    clear_has_path_type();
    return path_type_.uri_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path(std::string* uri_path) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path != nullptr) {
    set_has_uri_path();
    path_type_.uri_path_.UnsafeSetDefault(uri_path);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(uri_path);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}

// string uri_path_glob = 2 [json_name = "uriPathGlob"];
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_path_glob() const {
  return path_type_case() == kUriPathGlob;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path_glob() const {
  return _internal_has_uri_path_glob();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path_glob() {
  _oneof_case_[0] = kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path_glob() {
  if (_internal_has_uri_path_glob()) {
    path_type_.uri_path_glob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path_glob() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_uri_path_glob();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path_glob() {
  std::string* _s = _internal_mutable_uri_path_glob();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path_glob() const {
  if (_internal_has_uri_path_glob()) {
    return path_type_.uri_path_glob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path_glob(const std::string& value) {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_path_glob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path_glob() {
  if (!_internal_has_uri_path_glob()) {
    clear_path_type();
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_path_glob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path_glob() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  if (_internal_has_uri_path_glob()) {
    clear_has_path_type();
    return path_type_.uri_path_glob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path_glob(std::string* uri_path_glob) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_path_glob != nullptr) {
    set_has_uri_path_glob();
    path_type_.uri_path_glob_.UnsafeSetDefault(uri_path_glob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(uri_path_glob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}

// string uri_file = 3 [json_name = "uriFile"];
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_file() const {
  return path_type_case() == kUriFile;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_file() const {
  return _internal_has_uri_file();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_file() {
  _oneof_case_[0] = kUriFile;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_file() {
  if (_internal_has_uri_file()) {
    path_type_.uri_file_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_file() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _internal_uri_file();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_file(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_file() {
  std::string* _s = _internal_mutable_uri_file();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_file() const {
  if (_internal_has_uri_file()) {
    return path_type_.uri_file_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_file(const std::string& value) {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_file() {
  if (!_internal_has_uri_file()) {
    clear_path_type();
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_file_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_file() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  if (_internal_has_uri_file()) {
    clear_has_path_type();
    return path_type_.uri_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_file(std::string* uri_file) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_file != nullptr) {
    set_has_uri_file();
    path_type_.uri_file_.UnsafeSetDefault(uri_file);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(uri_file);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
}

// string uri_folder = 4 [json_name = "uriFolder"];
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_uri_folder() const {
  return path_type_case() == kUriFolder;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_folder() const {
  return _internal_has_uri_folder();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_folder() {
  _oneof_case_[0] = kUriFolder;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_folder() {
  if (_internal_has_uri_folder()) {
    path_type_.uri_folder_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_folder() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _internal_uri_folder();
}
template <typename ArgT0, typename... ArgT>
inline void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_folder() {
  std::string* _s = _internal_mutable_uri_folder();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_folder() const {
  if (_internal_has_uri_folder()) {
    return path_type_.uri_folder_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_folder(const std::string& value) {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_type_.uri_folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_folder() {
  if (!_internal_has_uri_folder()) {
    clear_path_type();
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_type_.uri_folder_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_folder() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  if (_internal_has_uri_folder()) {
    clear_has_path_type();
    return path_type_.uri_folder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_folder(std::string* uri_folder) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (uri_folder != nullptr) {
    set_has_uri_folder();
    path_type_.uri_folder_.UnsafeSetDefault(uri_folder);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(uri_folder);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}

// .substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat format = 5 [json_name = "format"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_format() {
  format_ = 0;
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::_internal_format() const {
  return static_cast< ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat >(format_);
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat ReadRel_LocalFiles_FileOrFiles::format() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.format)
  return _internal_format();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_format(::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat value) {
  
  format_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_format(::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.format)
}

// uint64 partition_index = 6 [json_name = "partitionIndex"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_partition_index() {
  partition_index_ = uint64_t{0u};
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_partition_index() const {
  return partition_index_;
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::partition_index() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.partition_index)
  return _internal_partition_index();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_partition_index(uint64_t value) {
  
  partition_index_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_partition_index(uint64_t value) {
  _internal_set_partition_index(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.partition_index)
}

// uint64 start = 7 [json_name = "start"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_start() {
  start_ = uint64_t{0u};
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_start() const {
  return start_;
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::start() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.start)
  return _internal_start();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_start(uint64_t value) {
  
  start_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.start)
}

// uint64 length = 8 [json_name = "length"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_length() {
  length_ = uint64_t{0u};
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_length() const {
  return length_;
}
inline uint64_t ReadRel_LocalFiles_FileOrFiles::length() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.length)
  return _internal_length();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_length(uint64_t value) {
  
  length_ = value;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_length(uint64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.length)
}

inline bool ReadRel_LocalFiles_FileOrFiles::has_path_type() const {
  return path_type_case() != PATH_TYPE_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_path_type() {
  _oneof_case_[0] = PATH_TYPE_NOT_SET;
}
inline ReadRel_LocalFiles_FileOrFiles::PathTypeCase ReadRel_LocalFiles_FileOrFiles::path_type_case() const {
  return ReadRel_LocalFiles_FileOrFiles::PathTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_LocalFiles

// repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
inline int ReadRel_LocalFiles::_internal_items_size() const {
  return items_.size();
}
inline int ReadRel_LocalFiles::items_size() const {
  return _internal_items_size();
}
inline void ReadRel_LocalFiles::clear_items() {
  items_.Clear();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >*
ReadRel_LocalFiles::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.LocalFiles.items)
  return &items_;
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::items(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.items)
  return _internal_items(index);
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::_internal_add_items() {
  return items_.Add();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::add_items() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:substrait.ReadRel.LocalFiles.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >&
ReadRel_LocalFiles::items() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.LocalFiles.items)
  return items_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel_LocalFiles::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel_LocalFiles::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_LocalFiles::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_LocalFiles::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_LocalFiles::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.advanced_extension)
  return _msg;
}
inline void ReadRel_LocalFiles::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ReadRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ReadRel::has_common() const {
  return _internal_has_common();
}
inline void ReadRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& ReadRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ReadRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.common)
  return _internal_common();
}
inline void ReadRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.common)
}
inline ::substrait::RelCommon* ReadRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ReadRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ReadRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* ReadRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.common)
  return _msg;
}
inline void ReadRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.common)
}

// .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
inline bool ReadRel::_internal_has_base_schema() const {
  return this != internal_default_instance() && base_schema_ != nullptr;
}
inline bool ReadRel::has_base_schema() const {
  return _internal_has_base_schema();
}
inline const ::substrait::NamedStruct& ReadRel::_internal_base_schema() const {
  const ::substrait::NamedStruct* p = base_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::NamedStruct&>(
      ::substrait::_NamedStruct_default_instance_);
}
inline const ::substrait::NamedStruct& ReadRel::base_schema() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.base_schema)
  return _internal_base_schema();
}
inline void ReadRel::unsafe_arena_set_allocated_base_schema(
    ::substrait::NamedStruct* base_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  base_schema_ = base_schema;
  if (base_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.base_schema)
}
inline ::substrait::NamedStruct* ReadRel::release_base_schema() {
  
  ::substrait::NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::NamedStruct* ReadRel::unsafe_arena_release_base_schema() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.base_schema)
  
  ::substrait::NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
  return temp;
}
inline ::substrait::NamedStruct* ReadRel::_internal_mutable_base_schema() {
  
  if (base_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::NamedStruct>(GetArenaForAllocation());
    base_schema_ = p;
  }
  return base_schema_;
}
inline ::substrait::NamedStruct* ReadRel::mutable_base_schema() {
  ::substrait::NamedStruct* _msg = _internal_mutable_base_schema();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.base_schema)
  return _msg;
}
inline void ReadRel::set_allocated_base_schema(::substrait::NamedStruct* base_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  if (base_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema));
    if (message_arena != submessage_arena) {
      base_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_schema, submessage_arena);
    }
    
  } else {
    
  }
  base_schema_ = base_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.base_schema)
}

// .substrait.Expression filter = 3 [json_name = "filter"];
inline bool ReadRel::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ReadRel::has_filter() const {
  return _internal_has_filter();
}
inline const ::substrait::Expression& ReadRel::_internal_filter() const {
  const ::substrait::Expression* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ReadRel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.filter)
  return _internal_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_filter(
    ::substrait::Expression* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.filter)
}
inline ::substrait::Expression* ReadRel::release_filter() {
  
  ::substrait::Expression* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* ReadRel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.filter)
  
  ::substrait::Expression* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* ReadRel::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::substrait::Expression* ReadRel::mutable_filter() {
  ::substrait::Expression* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.filter)
  return _msg;
}
inline void ReadRel::set_allocated_filter(::substrait::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter));
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.filter)
}

// .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
inline bool ReadRel::_internal_has_projection() const {
  return this != internal_default_instance() && projection_ != nullptr;
}
inline bool ReadRel::has_projection() const {
  return _internal_has_projection();
}
inline const ::substrait::Expression_MaskExpression& ReadRel::_internal_projection() const {
  const ::substrait::Expression_MaskExpression* p = projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression&>(
      ::substrait::_Expression_MaskExpression_default_instance_);
}
inline const ::substrait::Expression_MaskExpression& ReadRel::projection() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.projection)
  return _internal_projection();
}
inline void ReadRel::unsafe_arena_set_allocated_projection(
    ::substrait::Expression_MaskExpression* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.projection)
}
inline ::substrait::Expression_MaskExpression* ReadRel::release_projection() {
  
  ::substrait::Expression_MaskExpression* temp = projection_;
  projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression* ReadRel::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.projection)
  
  ::substrait::Expression_MaskExpression* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression* ReadRel::_internal_mutable_projection() {
  
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression>(GetArenaForAllocation());
    projection_ = p;
  }
  return projection_;
}
inline ::substrait::Expression_MaskExpression* ReadRel::mutable_projection() {
  ::substrait::Expression_MaskExpression* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.projection)
  return _msg;
}
inline void ReadRel::set_allocated_projection(::substrait::Expression_MaskExpression* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    
  } else {
    
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.projection)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ReadRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.advanced_extension)
  return _msg;
}
inline void ReadRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.advanced_extension)
}

// .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
inline bool ReadRel::_internal_has_virtual_table() const {
  return read_type_case() == kVirtualTable;
}
inline bool ReadRel::has_virtual_table() const {
  return _internal_has_virtual_table();
}
inline void ReadRel::set_has_virtual_table() {
  _oneof_case_[0] = kVirtualTable;
}
inline void ReadRel::clear_virtual_table() {
  if (_internal_has_virtual_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete read_type_.virtual_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::release_virtual_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
      ::substrait::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_VirtualTable& ReadRel::_internal_virtual_table() const {
  return _internal_has_virtual_table()
      ? *read_type_.virtual_table_
      : reinterpret_cast< ::substrait::ReadRel_VirtualTable&>(::substrait::_ReadRel_VirtualTable_default_instance_);
}
inline const ::substrait::ReadRel_VirtualTable& ReadRel::virtual_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.virtual_table)
  return _internal_virtual_table();
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::unsafe_arena_release_virtual_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.virtual_table)
  if (_internal_has_virtual_table()) {
    clear_has_read_type();
    ::substrait::ReadRel_VirtualTable* temp = read_type_.virtual_table_;
    read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table) {
  clear_read_type();
  if (virtual_table) {
    set_has_virtual_table();
    read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.virtual_table)
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::_internal_mutable_virtual_table() {
  if (!_internal_has_virtual_table()) {
    clear_read_type();
    set_has_virtual_table();
    read_type_.virtual_table_ = CreateMaybeMessage< ::substrait::ReadRel_VirtualTable >(GetArenaForAllocation());
  }
  return read_type_.virtual_table_;
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::mutable_virtual_table() {
  ::substrait::ReadRel_VirtualTable* _msg = _internal_mutable_virtual_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.virtual_table)
  return _msg;
}

// .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
inline bool ReadRel::_internal_has_local_files() const {
  return read_type_case() == kLocalFiles;
}
inline bool ReadRel::has_local_files() const {
  return _internal_has_local_files();
}
inline void ReadRel::set_has_local_files() {
  _oneof_case_[0] = kLocalFiles;
}
inline void ReadRel::clear_local_files() {
  if (_internal_has_local_files()) {
    if (GetArenaForAllocation() == nullptr) {
      delete read_type_.local_files_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::release_local_files() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
      ::substrait::ReadRel_LocalFiles* temp = read_type_.local_files_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles& ReadRel::_internal_local_files() const {
  return _internal_has_local_files()
      ? *read_type_.local_files_
      : reinterpret_cast< ::substrait::ReadRel_LocalFiles&>(::substrait::_ReadRel_LocalFiles_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles& ReadRel::local_files() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.local_files)
  return _internal_local_files();
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::unsafe_arena_release_local_files() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.local_files)
  if (_internal_has_local_files()) {
    clear_has_read_type();
    ::substrait::ReadRel_LocalFiles* temp = read_type_.local_files_;
    read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files) {
  clear_read_type();
  if (local_files) {
    set_has_local_files();
    read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.local_files)
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::_internal_mutable_local_files() {
  if (!_internal_has_local_files()) {
    clear_read_type();
    set_has_local_files();
    read_type_.local_files_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles >(GetArenaForAllocation());
  }
  return read_type_.local_files_;
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::mutable_local_files() {
  ::substrait::ReadRel_LocalFiles* _msg = _internal_mutable_local_files();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.local_files)
  return _msg;
}

// .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
inline bool ReadRel::_internal_has_named_table() const {
  return read_type_case() == kNamedTable;
}
inline bool ReadRel::has_named_table() const {
  return _internal_has_named_table();
}
inline void ReadRel::set_has_named_table() {
  _oneof_case_[0] = kNamedTable;
}
inline void ReadRel::clear_named_table() {
  if (_internal_has_named_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete read_type_.named_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_NamedTable* ReadRel::release_named_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
      ::substrait::ReadRel_NamedTable* temp = read_type_.named_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_NamedTable& ReadRel::_internal_named_table() const {
  return _internal_has_named_table()
      ? *read_type_.named_table_
      : reinterpret_cast< ::substrait::ReadRel_NamedTable&>(::substrait::_ReadRel_NamedTable_default_instance_);
}
inline const ::substrait::ReadRel_NamedTable& ReadRel::named_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.named_table)
  return _internal_named_table();
}
inline ::substrait::ReadRel_NamedTable* ReadRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.named_table)
  if (_internal_has_named_table()) {
    clear_has_read_type();
    ::substrait::ReadRel_NamedTable* temp = read_type_.named_table_;
    read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table) {
  clear_read_type();
  if (named_table) {
    set_has_named_table();
    read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.named_table)
}
inline ::substrait::ReadRel_NamedTable* ReadRel::_internal_mutable_named_table() {
  if (!_internal_has_named_table()) {
    clear_read_type();
    set_has_named_table();
    read_type_.named_table_ = CreateMaybeMessage< ::substrait::ReadRel_NamedTable >(GetArenaForAllocation());
  }
  return read_type_.named_table_;
}
inline ::substrait::ReadRel_NamedTable* ReadRel::mutable_named_table() {
  ::substrait::ReadRel_NamedTable* _msg = _internal_mutable_named_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.named_table)
  return _msg;
}

// .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
inline bool ReadRel::_internal_has_extension_table() const {
  return read_type_case() == kExtensionTable;
}
inline bool ReadRel::has_extension_table() const {
  return _internal_has_extension_table();
}
inline void ReadRel::set_has_extension_table() {
  _oneof_case_[0] = kExtensionTable;
}
inline void ReadRel::clear_extension_table() {
  if (_internal_has_extension_table()) {
    if (GetArenaForAllocation() == nullptr) {
      delete read_type_.extension_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::release_extension_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_read_type();
      ::substrait::ReadRel_ExtensionTable* temp = read_type_.extension_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_ExtensionTable& ReadRel::_internal_extension_table() const {
  return _internal_has_extension_table()
      ? *read_type_.extension_table_
      : reinterpret_cast< ::substrait::ReadRel_ExtensionTable&>(::substrait::_ReadRel_ExtensionTable_default_instance_);
}
inline const ::substrait::ReadRel_ExtensionTable& ReadRel::extension_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.extension_table)
  return _internal_extension_table();
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::unsafe_arena_release_extension_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.extension_table)
  if (_internal_has_extension_table()) {
    clear_has_read_type();
    ::substrait::ReadRel_ExtensionTable* temp = read_type_.extension_table_;
    read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table) {
  clear_read_type();
  if (extension_table) {
    set_has_extension_table();
    read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.extension_table)
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::_internal_mutable_extension_table() {
  if (!_internal_has_extension_table()) {
    clear_read_type();
    set_has_extension_table();
    read_type_.extension_table_ = CreateMaybeMessage< ::substrait::ReadRel_ExtensionTable >(GetArenaForAllocation());
  }
  return read_type_.extension_table_;
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::mutable_extension_table() {
  ::substrait::ReadRel_ExtensionTable* _msg = _internal_mutable_extension_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.extension_table)
  return _msg;
}

inline bool ReadRel::has_read_type() const {
  return read_type_case() != READ_TYPE_NOT_SET;
}
inline void ReadRel::clear_has_read_type() {
  _oneof_case_[0] = READ_TYPE_NOT_SET;
}
inline ReadRel::ReadTypeCase ReadRel::read_type_case() const {
  return ReadRel::ReadTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ProjectRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ProjectRel::has_common() const {
  return _internal_has_common();
}
inline void ProjectRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& ProjectRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ProjectRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.common)
  return _internal_common();
}
inline void ProjectRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.common)
}
inline ::substrait::RelCommon* ProjectRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ProjectRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ProjectRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* ProjectRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.common)
  return _msg;
}
inline void ProjectRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool ProjectRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ProjectRel::has_input() const {
  return _internal_has_input();
}
inline void ProjectRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& ProjectRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& ProjectRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.input)
  return _internal_input();
}
inline void ProjectRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.input)
}
inline ::substrait::Rel* ProjectRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* ProjectRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* ProjectRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* ProjectRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.input)
  return _msg;
}
inline void ProjectRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.input)
}

// repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
inline int ProjectRel::_internal_expressions_size() const {
  return expressions_.size();
}
inline int ProjectRel::expressions_size() const {
  return _internal_expressions_size();
}
inline ::substrait::Expression* ProjectRel::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.expressions)
  return expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
ProjectRel::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ProjectRel.expressions)
  return &expressions_;
}
inline const ::substrait::Expression& ProjectRel::_internal_expressions(int index) const {
  return expressions_.Get(index);
}
inline const ::substrait::Expression& ProjectRel::expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.expressions)
  return _internal_expressions(index);
}
inline ::substrait::Expression* ProjectRel::_internal_add_expressions() {
  return expressions_.Add();
}
inline ::substrait::Expression* ProjectRel::add_expressions() {
  ::substrait::Expression* _add = _internal_add_expressions();
  // @@protoc_insertion_point(field_add:substrait.ProjectRel.expressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
ProjectRel::expressions() const {
  // @@protoc_insertion_point(field_list:substrait.ProjectRel.expressions)
  return expressions_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ProjectRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool ProjectRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& ProjectRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ProjectRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ProjectRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.advanced_extension)
  return _msg;
}
inline void ProjectRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.advanced_extension)
}

// -------------------------------------------------------------------

// JoinRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool JoinRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool JoinRel::has_common() const {
  return _internal_has_common();
}
inline void JoinRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& JoinRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& JoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.common)
  return _internal_common();
}
inline void JoinRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.common)
}
inline ::substrait::RelCommon* JoinRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* JoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* JoinRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* JoinRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.common)
  return _msg;
}
inline void JoinRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool JoinRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool JoinRel::has_left() const {
  return _internal_has_left();
}
inline void JoinRel::clear_left() {
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::Rel& JoinRel::_internal_left() const {
  const ::substrait::Rel* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& JoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.left)
  return _internal_left();
}
inline void JoinRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.left)
}
inline ::substrait::Rel* JoinRel::release_left() {
  
  ::substrait::Rel* temp = left_;
  left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* JoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.left)
  
  ::substrait::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* JoinRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    left_ = p;
  }
  return left_;
}
inline ::substrait::Rel* JoinRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.left)
  return _msg;
}
inline void JoinRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool JoinRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool JoinRel::has_right() const {
  return _internal_has_right();
}
inline void JoinRel::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::Rel& JoinRel::_internal_right() const {
  const ::substrait::Rel* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& JoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.right)
  return _internal_right();
}
inline void JoinRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.right)
}
inline ::substrait::Rel* JoinRel::release_right() {
  
  ::substrait::Rel* temp = right_;
  right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* JoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.right)
  
  ::substrait::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* JoinRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    right_ = p;
  }
  return right_;
}
inline ::substrait::Rel* JoinRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.right)
  return _msg;
}
inline void JoinRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.right)
}

// .substrait.Expression expression = 4 [json_name = "expression"];
inline bool JoinRel::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool JoinRel::has_expression() const {
  return _internal_has_expression();
}
inline const ::substrait::Expression& JoinRel::_internal_expression() const {
  const ::substrait::Expression* p = expression_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& JoinRel::expression() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.expression)
  return _internal_expression();
}
inline void JoinRel::unsafe_arena_set_allocated_expression(
    ::substrait::Expression* expression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  expression_ = expression;
  if (expression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.expression)
}
inline ::substrait::Expression* JoinRel::release_expression() {
  
  ::substrait::Expression* temp = expression_;
  expression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* JoinRel::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.expression)
  
  ::substrait::Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::substrait::Expression* JoinRel::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    expression_ = p;
  }
  return expression_;
}
inline ::substrait::Expression* JoinRel::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.expression)
  return _msg;
}
inline void JoinRel::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression_);
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression));
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.expression)
}

// .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
inline bool JoinRel::_internal_has_post_join_filter() const {
  return this != internal_default_instance() && post_join_filter_ != nullptr;
}
inline bool JoinRel::has_post_join_filter() const {
  return _internal_has_post_join_filter();
}
inline const ::substrait::Expression& JoinRel::_internal_post_join_filter() const {
  const ::substrait::Expression* p = post_join_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& JoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void JoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::Expression* post_join_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.post_join_filter)
}
inline ::substrait::Expression* JoinRel::release_post_join_filter() {
  
  ::substrait::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* JoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.post_join_filter)
  
  ::substrait::Expression* temp = post_join_filter_;
  post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* JoinRel::_internal_mutable_post_join_filter() {
  
  if (post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    post_join_filter_ = p;
  }
  return post_join_filter_;
}
inline ::substrait::Expression* JoinRel::mutable_post_join_filter() {
  ::substrait::Expression* _msg = _internal_mutable_post_join_filter();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.post_join_filter)
  return _msg;
}
inline void JoinRel::set_allocated_post_join_filter(::substrait::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter_);
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(post_join_filter));
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    
  } else {
    
  }
  post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.post_join_filter)
}

// .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
inline void JoinRel::clear_type() {
  type_ = 0;
}
inline ::substrait::JoinRel_JoinType JoinRel::_internal_type() const {
  return static_cast< ::substrait::JoinRel_JoinType >(type_);
}
inline ::substrait::JoinRel_JoinType JoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.type)
  return _internal_type();
}
inline void JoinRel::_internal_set_type(::substrait::JoinRel_JoinType value) {
  
  type_ = value;
}
inline void JoinRel::set_type(::substrait::JoinRel_JoinType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.JoinRel.type)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool JoinRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool JoinRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& JoinRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& JoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void JoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.advanced_extension)
  return _msg;
}
inline void JoinRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// CrossRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool CrossRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool CrossRel::has_common() const {
  return _internal_has_common();
}
inline void CrossRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& CrossRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& CrossRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.common)
  return _internal_common();
}
inline void CrossRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.common)
}
inline ::substrait::RelCommon* CrossRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* CrossRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* CrossRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* CrossRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.common)
  return _msg;
}
inline void CrossRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool CrossRel::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool CrossRel::has_left() const {
  return _internal_has_left();
}
inline void CrossRel::clear_left() {
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::substrait::Rel& CrossRel::_internal_left() const {
  const ::substrait::Rel* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& CrossRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.left)
  return _internal_left();
}
inline void CrossRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.left)
}
inline ::substrait::Rel* CrossRel::release_left() {
  
  ::substrait::Rel* temp = left_;
  left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* CrossRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.left)
  
  ::substrait::Rel* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* CrossRel::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    left_ = p;
  }
  return left_;
}
inline ::substrait::Rel* CrossRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.left)
  return _msg;
}
inline void CrossRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool CrossRel::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool CrossRel::has_right() const {
  return _internal_has_right();
}
inline void CrossRel::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::substrait::Rel& CrossRel::_internal_right() const {
  const ::substrait::Rel* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& CrossRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.right)
  return _internal_right();
}
inline void CrossRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.right)
}
inline ::substrait::Rel* CrossRel::release_right() {
  
  ::substrait::Rel* temp = right_;
  right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* CrossRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.right)
  
  ::substrait::Rel* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* CrossRel::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    right_ = p;
  }
  return right_;
}
inline ::substrait::Rel* CrossRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.right)
  return _msg;
}
inline void CrossRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.right)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool CrossRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool CrossRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& CrossRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& CrossRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void CrossRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.advanced_extension)
  return _msg;
}
inline void CrossRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.advanced_extension)
}

// -------------------------------------------------------------------

// FetchRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool FetchRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FetchRel::has_common() const {
  return _internal_has_common();
}
inline void FetchRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& FetchRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& FetchRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.common)
  return _internal_common();
}
inline void FetchRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.common)
}
inline ::substrait::RelCommon* FetchRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* FetchRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* FetchRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* FetchRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.common)
  return _msg;
}
inline void FetchRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool FetchRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FetchRel::has_input() const {
  return _internal_has_input();
}
inline void FetchRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& FetchRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& FetchRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.input)
  return _internal_input();
}
inline void FetchRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.input)
}
inline ::substrait::Rel* FetchRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* FetchRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* FetchRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* FetchRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.input)
  return _msg;
}
inline void FetchRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.input)
}

// int64 offset = 3 [json_name = "offset"];
inline void FetchRel::clear_offset() {
  offset_ = int64_t{0};
}
inline int64_t FetchRel::_internal_offset() const {
  return offset_;
}
inline int64_t FetchRel::offset() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.offset)
  return _internal_offset();
}
inline void FetchRel::_internal_set_offset(int64_t value) {
  
  offset_ = value;
}
inline void FetchRel::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.FetchRel.offset)
}

// int64 count = 4 [json_name = "count"];
inline void FetchRel::clear_count() {
  count_ = int64_t{0};
}
inline int64_t FetchRel::_internal_count() const {
  return count_;
}
inline int64_t FetchRel::count() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.count)
  return _internal_count();
}
inline void FetchRel::_internal_set_count(int64_t value) {
  
  count_ = value;
}
inline void FetchRel::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:substrait.FetchRel.count)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool FetchRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool FetchRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& FetchRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& FetchRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FetchRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.advanced_extension)
  return _msg;
}
inline void FetchRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.advanced_extension)
}

// -------------------------------------------------------------------

// AggregateRel_Grouping

// repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
inline int AggregateRel_Grouping::_internal_grouping_expressions_size() const {
  return grouping_expressions_.size();
}
inline int AggregateRel_Grouping::grouping_expressions_size() const {
  return _internal_grouping_expressions_size();
}
inline ::substrait::Expression* AggregateRel_Grouping::mutable_grouping_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Grouping.grouping_expressions)
  return grouping_expressions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
AggregateRel_Grouping::mutable_grouping_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.Grouping.grouping_expressions)
  return &grouping_expressions_;
}
inline const ::substrait::Expression& AggregateRel_Grouping::_internal_grouping_expressions(int index) const {
  return grouping_expressions_.Get(index);
}
inline const ::substrait::Expression& AggregateRel_Grouping::grouping_expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Grouping.grouping_expressions)
  return _internal_grouping_expressions(index);
}
inline ::substrait::Expression* AggregateRel_Grouping::_internal_add_grouping_expressions() {
  return grouping_expressions_.Add();
}
inline ::substrait::Expression* AggregateRel_Grouping::add_grouping_expressions() {
  ::substrait::Expression* _add = _internal_add_grouping_expressions();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.Grouping.grouping_expressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
AggregateRel_Grouping::grouping_expressions() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.Grouping.grouping_expressions)
  return grouping_expressions_;
}

// -------------------------------------------------------------------

// AggregateRel_Measure

// .substrait.AggregateFunction measure = 1 [json_name = "measure"];
inline bool AggregateRel_Measure::_internal_has_measure() const {
  return this != internal_default_instance() && measure_ != nullptr;
}
inline bool AggregateRel_Measure::has_measure() const {
  return _internal_has_measure();
}
inline const ::substrait::AggregateFunction& AggregateRel_Measure::_internal_measure() const {
  const ::substrait::AggregateFunction* p = measure_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::AggregateFunction&>(
      ::substrait::_AggregateFunction_default_instance_);
}
inline const ::substrait::AggregateFunction& AggregateRel_Measure::measure() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Measure.measure)
  return _internal_measure();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_measure(
    ::substrait::AggregateFunction* measure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  measure_ = measure;
  if (measure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.Measure.measure)
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::release_measure() {
  
  ::substrait::AggregateFunction* temp = measure_;
  measure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::unsafe_arena_release_measure() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.Measure.measure)
  
  ::substrait::AggregateFunction* temp = measure_;
  measure_ = nullptr;
  return temp;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::_internal_mutable_measure() {
  
  if (measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::AggregateFunction>(GetArenaForAllocation());
    measure_ = p;
  }
  return measure_;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::mutable_measure() {
  ::substrait::AggregateFunction* _msg = _internal_mutable_measure();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Measure.measure)
  return _msg;
}
inline void AggregateRel_Measure::set_allocated_measure(::substrait::AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_);
  }
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure));
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.Measure.measure)
}

// .substrait.Expression filter = 2 [json_name = "filter"];
inline bool AggregateRel_Measure::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool AggregateRel_Measure::has_filter() const {
  return _internal_has_filter();
}
inline const ::substrait::Expression& AggregateRel_Measure::_internal_filter() const {
  const ::substrait::Expression* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& AggregateRel_Measure::filter() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Measure.filter)
  return _internal_filter();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_filter(
    ::substrait::Expression* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.Measure.filter)
}
inline ::substrait::Expression* AggregateRel_Measure::release_filter() {
  
  ::substrait::Expression* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* AggregateRel_Measure::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.Measure.filter)
  
  ::substrait::Expression* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* AggregateRel_Measure::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::substrait::Expression* AggregateRel_Measure::mutable_filter() {
  ::substrait::Expression* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Measure.filter)
  return _msg;
}
inline void AggregateRel_Measure::set_allocated_filter(::substrait::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter));
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.Measure.filter)
}

// -------------------------------------------------------------------

// AggregateRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool AggregateRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool AggregateRel::has_common() const {
  return _internal_has_common();
}
inline void AggregateRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& AggregateRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& AggregateRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.common)
  return _internal_common();
}
inline void AggregateRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.common)
}
inline ::substrait::RelCommon* AggregateRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* AggregateRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* AggregateRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* AggregateRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.common)
  return _msg;
}
inline void AggregateRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool AggregateRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool AggregateRel::has_input() const {
  return _internal_has_input();
}
inline void AggregateRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& AggregateRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& AggregateRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.input)
  return _internal_input();
}
inline void AggregateRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.input)
}
inline ::substrait::Rel* AggregateRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* AggregateRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* AggregateRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* AggregateRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.input)
  return _msg;
}
inline void AggregateRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.input)
}

// repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
inline int AggregateRel::_internal_groupings_size() const {
  return groupings_.size();
}
inline int AggregateRel::groupings_size() const {
  return _internal_groupings_size();
}
inline void AggregateRel::clear_groupings() {
  groupings_.Clear();
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::mutable_groupings(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.groupings)
  return groupings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >*
AggregateRel::mutable_groupings() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.groupings)
  return &groupings_;
}
inline const ::substrait::AggregateRel_Grouping& AggregateRel::_internal_groupings(int index) const {
  return groupings_.Get(index);
}
inline const ::substrait::AggregateRel_Grouping& AggregateRel::groupings(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.groupings)
  return _internal_groupings(index);
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::_internal_add_groupings() {
  return groupings_.Add();
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::add_groupings() {
  ::substrait::AggregateRel_Grouping* _add = _internal_add_groupings();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.groupings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >&
AggregateRel::groupings() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.groupings)
  return groupings_;
}

// repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
inline int AggregateRel::_internal_measures_size() const {
  return measures_.size();
}
inline int AggregateRel::measures_size() const {
  return _internal_measures_size();
}
inline void AggregateRel::clear_measures() {
  measures_.Clear();
}
inline ::substrait::AggregateRel_Measure* AggregateRel::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.measures)
  return measures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >*
AggregateRel::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.measures)
  return &measures_;
}
inline const ::substrait::AggregateRel_Measure& AggregateRel::_internal_measures(int index) const {
  return measures_.Get(index);
}
inline const ::substrait::AggregateRel_Measure& AggregateRel::measures(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.measures)
  return _internal_measures(index);
}
inline ::substrait::AggregateRel_Measure* AggregateRel::_internal_add_measures() {
  return measures_.Add();
}
inline ::substrait::AggregateRel_Measure* AggregateRel::add_measures() {
  ::substrait::AggregateRel_Measure* _add = _internal_add_measures();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.measures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >&
AggregateRel::measures() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.measures)
  return measures_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool AggregateRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool AggregateRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& AggregateRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& AggregateRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void AggregateRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.advanced_extension)
  return _msg;
}
inline void AggregateRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.advanced_extension)
}

// -------------------------------------------------------------------

// SortRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool SortRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SortRel::has_common() const {
  return _internal_has_common();
}
inline void SortRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& SortRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& SortRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.common)
  return _internal_common();
}
inline void SortRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.common)
}
inline ::substrait::RelCommon* SortRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* SortRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* SortRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* SortRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.common)
  return _msg;
}
inline void SortRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool SortRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool SortRel::has_input() const {
  return _internal_has_input();
}
inline void SortRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& SortRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& SortRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.input)
  return _internal_input();
}
inline void SortRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.input)
}
inline ::substrait::Rel* SortRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* SortRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* SortRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* SortRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.input)
  return _msg;
}
inline void SortRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.input)
}

// repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
inline int SortRel::_internal_sorts_size() const {
  return sorts_.size();
}
inline int SortRel::sorts_size() const {
  return _internal_sorts_size();
}
inline ::substrait::SortField* SortRel::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
SortRel::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.SortRel.sorts)
  return &sorts_;
}
inline const ::substrait::SortField& SortRel::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::substrait::SortField& SortRel::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.sorts)
  return _internal_sorts(index);
}
inline ::substrait::SortField* SortRel::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::substrait::SortField* SortRel::add_sorts() {
  ::substrait::SortField* _add = _internal_add_sorts();
  // @@protoc_insertion_point(field_add:substrait.SortRel.sorts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
SortRel::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.SortRel.sorts)
  return sorts_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool SortRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool SortRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& SortRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& SortRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SortRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* SortRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.advanced_extension)
  return _msg;
}
inline void SortRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.advanced_extension)
}

// -------------------------------------------------------------------

// FilterRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool FilterRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool FilterRel::has_common() const {
  return _internal_has_common();
}
inline void FilterRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& FilterRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& FilterRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.common)
  return _internal_common();
}
inline void FilterRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.common)
}
inline ::substrait::RelCommon* FilterRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* FilterRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* FilterRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* FilterRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.common)
  return _msg;
}
inline void FilterRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool FilterRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool FilterRel::has_input() const {
  return _internal_has_input();
}
inline void FilterRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& FilterRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& FilterRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.input)
  return _internal_input();
}
inline void FilterRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.input)
}
inline ::substrait::Rel* FilterRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* FilterRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* FilterRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* FilterRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.input)
  return _msg;
}
inline void FilterRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.input)
}

// .substrait.Expression condition = 3 [json_name = "condition"];
inline bool FilterRel::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool FilterRel::has_condition() const {
  return _internal_has_condition();
}
inline const ::substrait::Expression& FilterRel::_internal_condition() const {
  const ::substrait::Expression* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& FilterRel::condition() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.condition)
  return _internal_condition();
}
inline void FilterRel::unsafe_arena_set_allocated_condition(
    ::substrait::Expression* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.condition)
}
inline ::substrait::Expression* FilterRel::release_condition() {
  
  ::substrait::Expression* temp = condition_;
  condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* FilterRel::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.condition)
  
  ::substrait::Expression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::substrait::Expression* FilterRel::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::substrait::Expression* FilterRel::mutable_condition() {
  ::substrait::Expression* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.condition)
  return _msg;
}
inline void FilterRel::set_allocated_condition(::substrait::Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.condition)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool FilterRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool FilterRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& FilterRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& FilterRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FilterRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.advanced_extension)
  return _msg;
}
inline void FilterRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.advanced_extension)
}

// -------------------------------------------------------------------

// SetRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool SetRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool SetRel::has_common() const {
  return _internal_has_common();
}
inline void SetRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& SetRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& SetRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.common)
  return _internal_common();
}
inline void SetRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SetRel.common)
}
inline ::substrait::RelCommon* SetRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* SetRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.SetRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* SetRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* SetRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.common)
  return _msg;
}
inline void SetRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.SetRel.common)
}

// repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
inline int SetRel::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SetRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void SetRel::clear_inputs() {
  inputs_.Clear();
}
inline ::substrait::Rel* SetRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
SetRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.SetRel.inputs)
  return &inputs_;
}
inline const ::substrait::Rel& SetRel::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::substrait::Rel& SetRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::Rel* SetRel::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::substrait::Rel* SetRel::add_inputs() {
  ::substrait::Rel* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:substrait.SetRel.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
SetRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.SetRel.inputs)
  return inputs_;
}

// .substrait.SetRel.SetOp op = 3 [json_name = "op"];
inline void SetRel::clear_op() {
  op_ = 0;
}
inline ::substrait::SetRel_SetOp SetRel::_internal_op() const {
  return static_cast< ::substrait::SetRel_SetOp >(op_);
}
inline ::substrait::SetRel_SetOp SetRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.op)
  return _internal_op();
}
inline void SetRel::_internal_set_op(::substrait::SetRel_SetOp value) {
  
  op_ = value;
}
inline void SetRel::set_op(::substrait::SetRel_SetOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.SetRel.op)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool SetRel::_internal_has_advanced_extension() const {
  return this != internal_default_instance() && advanced_extension_ != nullptr;
}
inline bool SetRel::has_advanced_extension() const {
  return _internal_has_advanced_extension();
}
inline const ::substrait::extensions::AdvancedExtension& SetRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& SetRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SetRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SetRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* SetRel::release_advanced_extension() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.SetRel.advanced_extension)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extension_;
  advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::_internal_mutable_advanced_extension() {
  
  if (advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extension_ = p;
  }
  return advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.advanced_extension)
  return _msg;
}
inline void SetRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.SetRel.advanced_extension)
}

// -------------------------------------------------------------------

// ExtensionSingleRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionSingleRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionSingleRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionSingleRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& ExtensionSingleRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionSingleRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.common)
  return _internal_common();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.common)
}
inline ::substrait::RelCommon* ExtensionSingleRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionSingleRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionSingleRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* ExtensionSingleRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.common)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool ExtensionSingleRel::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ExtensionSingleRel::has_input() const {
  return _internal_has_input();
}
inline void ExtensionSingleRel::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& ExtensionSingleRel::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& ExtensionSingleRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.input)
  return _internal_input();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.input)
}
inline ::substrait::Rel* ExtensionSingleRel::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* ExtensionSingleRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* ExtensionSingleRel::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* ExtensionSingleRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.input)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.input)
}

// .google.protobuf.Any detail = 3 [json_name = "detail"];
inline bool ExtensionSingleRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionSingleRel::has_detail() const {
  return _internal_has_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.detail)
  return _internal_detail();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::release_detail() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.detail)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.detail)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.detail)
}

// -------------------------------------------------------------------

// ExtensionLeafRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionLeafRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionLeafRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionLeafRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& ExtensionLeafRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionLeafRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionLeafRel.common)
  return _internal_common();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionLeafRel.common)
}
inline ::substrait::RelCommon* ExtensionLeafRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionLeafRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionLeafRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionLeafRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* ExtensionLeafRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionLeafRel.common)
  return _msg;
}
inline void ExtensionLeafRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionLeafRel.common)
}

// .google.protobuf.Any detail = 2 [json_name = "detail"];
inline bool ExtensionLeafRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionLeafRel::has_detail() const {
  return _internal_has_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionLeafRel.detail)
  return _internal_detail();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionLeafRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::release_detail() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionLeafRel.detail)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionLeafRel.detail)
  return _msg;
}
inline void ExtensionLeafRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionLeafRel.detail)
}

// -------------------------------------------------------------------

// ExtensionMultiRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionMultiRel::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool ExtensionMultiRel::has_common() const {
  return _internal_has_common();
}
inline void ExtensionMultiRel::clear_common() {
  if (GetArenaForAllocation() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::substrait::RelCommon& ExtensionMultiRel::_internal_common() const {
  const ::substrait::RelCommon* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionMultiRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.common)
  return _internal_common();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionMultiRel.common)
}
inline ::substrait::RelCommon* ExtensionMultiRel::release_common() {
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionMultiRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionMultiRel.common)
  
  ::substrait::RelCommon* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionMultiRel::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    common_ = p;
  }
  return common_;
}
inline ::substrait::RelCommon* ExtensionMultiRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.common)
  return _msg;
}
inline void ExtensionMultiRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::RelCommon>::GetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionMultiRel.common)
}

// repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
inline int ExtensionMultiRel::_internal_inputs_size() const {
  return inputs_.size();
}
inline int ExtensionMultiRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void ExtensionMultiRel::clear_inputs() {
  inputs_.Clear();
}
inline ::substrait::Rel* ExtensionMultiRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
ExtensionMultiRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtensionMultiRel.inputs)
  return &inputs_;
}
inline const ::substrait::Rel& ExtensionMultiRel::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::substrait::Rel& ExtensionMultiRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::Rel* ExtensionMultiRel::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::substrait::Rel* ExtensionMultiRel::add_inputs() {
  ::substrait::Rel* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:substrait.ExtensionMultiRel.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
ExtensionMultiRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.ExtensionMultiRel.inputs)
  return inputs_;
}

// .google.protobuf.Any detail = 3 [json_name = "detail"];
inline bool ExtensionMultiRel::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool ExtensionMultiRel::has_detail() const {
  return _internal_has_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.detail)
  return _internal_detail();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionMultiRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::release_detail() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionMultiRel.detail)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.detail)
  return _msg;
}
inline void ExtensionMultiRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionMultiRel.detail)
}

// -------------------------------------------------------------------

// RelRoot

// .substrait.Rel input = 1 [json_name = "input"];
inline bool RelRoot::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool RelRoot::has_input() const {
  return _internal_has_input();
}
inline void RelRoot::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::substrait::Rel& RelRoot::_internal_input() const {
  const ::substrait::Rel* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& RelRoot::input() const {
  // @@protoc_insertion_point(field_get:substrait.RelRoot.input)
  return _internal_input();
}
inline void RelRoot::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelRoot.input)
}
inline ::substrait::Rel* RelRoot::release_input() {
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* RelRoot::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.RelRoot.input)
  
  ::substrait::Rel* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* RelRoot::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::substrait::Rel* RelRoot::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.RelRoot.input)
  return _msg;
}
inline void RelRoot::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::substrait::Rel>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelRoot.input)
}

// repeated string names = 2 [json_name = "names"];
inline int RelRoot::_internal_names_size() const {
  return names_.size();
}
inline int RelRoot::names_size() const {
  return _internal_names_size();
}
inline void RelRoot::clear_names() {
  names_.Clear();
}
inline std::string* RelRoot::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.RelRoot.names)
  return _s;
}
inline const std::string& RelRoot::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& RelRoot::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.RelRoot.names)
  return _internal_names(index);
}
inline std::string* RelRoot::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.RelRoot.names)
  return names_.Mutable(index);
}
inline void RelRoot::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.RelRoot.names)
}
inline std::string* RelRoot::_internal_add_names() {
  return names_.Add();
}
inline void RelRoot::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.RelRoot.names)
}
inline void RelRoot::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.RelRoot.names)
}
inline void RelRoot::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.RelRoot.names)
}
inline void RelRoot::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.RelRoot.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelRoot::names() const {
  // @@protoc_insertion_point(field_list:substrait.RelRoot.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelRoot::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.RelRoot.names)
  return &names_;
}

// -------------------------------------------------------------------

// Rel

// .substrait.ReadRel read = 1 [json_name = "read"];
inline bool Rel::_internal_has_read() const {
  return rel_type_case() == kRead;
}
inline bool Rel::has_read() const {
  return _internal_has_read();
}
inline void Rel::set_has_read() {
  _oneof_case_[0] = kRead;
}
inline void Rel::clear_read() {
  if (_internal_has_read()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.read_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ReadRel* Rel::release_read() {
  // @@protoc_insertion_point(field_release:substrait.Rel.read)
  if (_internal_has_read()) {
    clear_has_rel_type();
      ::substrait::ReadRel* temp = rel_type_.read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel& Rel::_internal_read() const {
  return _internal_has_read()
      ? *rel_type_.read_
      : reinterpret_cast< ::substrait::ReadRel&>(::substrait::_ReadRel_default_instance_);
}
inline const ::substrait::ReadRel& Rel::read() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.read)
  return _internal_read();
}
inline ::substrait::ReadRel* Rel::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.read)
  if (_internal_has_read()) {
    clear_has_rel_type();
    ::substrait::ReadRel* temp = rel_type_.read_;
    rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_read(::substrait::ReadRel* read) {
  clear_rel_type();
  if (read) {
    set_has_read();
    rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.read)
}
inline ::substrait::ReadRel* Rel::_internal_mutable_read() {
  if (!_internal_has_read()) {
    clear_rel_type();
    set_has_read();
    rel_type_.read_ = CreateMaybeMessage< ::substrait::ReadRel >(GetArenaForAllocation());
  }
  return rel_type_.read_;
}
inline ::substrait::ReadRel* Rel::mutable_read() {
  ::substrait::ReadRel* _msg = _internal_mutable_read();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.read)
  return _msg;
}

// .substrait.FilterRel filter = 2 [json_name = "filter"];
inline bool Rel::_internal_has_filter() const {
  return rel_type_case() == kFilter;
}
inline bool Rel::has_filter() const {
  return _internal_has_filter();
}
inline void Rel::set_has_filter() {
  _oneof_case_[0] = kFilter;
}
inline void Rel::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.filter_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::FilterRel* Rel::release_filter() {
  // @@protoc_insertion_point(field_release:substrait.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_rel_type();
      ::substrait::FilterRel* temp = rel_type_.filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::FilterRel& Rel::_internal_filter() const {
  return _internal_has_filter()
      ? *rel_type_.filter_
      : reinterpret_cast< ::substrait::FilterRel&>(::substrait::_FilterRel_default_instance_);
}
inline const ::substrait::FilterRel& Rel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.filter)
  return _internal_filter();
}
inline ::substrait::FilterRel* Rel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.filter)
  if (_internal_has_filter()) {
    clear_has_rel_type();
    ::substrait::FilterRel* temp = rel_type_.filter_;
    rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_filter(::substrait::FilterRel* filter) {
  clear_rel_type();
  if (filter) {
    set_has_filter();
    rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.filter)
}
inline ::substrait::FilterRel* Rel::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_rel_type();
    set_has_filter();
    rel_type_.filter_ = CreateMaybeMessage< ::substrait::FilterRel >(GetArenaForAllocation());
  }
  return rel_type_.filter_;
}
inline ::substrait::FilterRel* Rel::mutable_filter() {
  ::substrait::FilterRel* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.filter)
  return _msg;
}

// .substrait.FetchRel fetch = 3 [json_name = "fetch"];
inline bool Rel::_internal_has_fetch() const {
  return rel_type_case() == kFetch;
}
inline bool Rel::has_fetch() const {
  return _internal_has_fetch();
}
inline void Rel::set_has_fetch() {
  _oneof_case_[0] = kFetch;
}
inline void Rel::clear_fetch() {
  if (_internal_has_fetch()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.fetch_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::FetchRel* Rel::release_fetch() {
  // @@protoc_insertion_point(field_release:substrait.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_rel_type();
      ::substrait::FetchRel* temp = rel_type_.fetch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::FetchRel& Rel::_internal_fetch() const {
  return _internal_has_fetch()
      ? *rel_type_.fetch_
      : reinterpret_cast< ::substrait::FetchRel&>(::substrait::_FetchRel_default_instance_);
}
inline const ::substrait::FetchRel& Rel::fetch() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.fetch)
  return _internal_fetch();
}
inline ::substrait::FetchRel* Rel::unsafe_arena_release_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.fetch)
  if (_internal_has_fetch()) {
    clear_has_rel_type();
    ::substrait::FetchRel* temp = rel_type_.fetch_;
    rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_fetch(::substrait::FetchRel* fetch) {
  clear_rel_type();
  if (fetch) {
    set_has_fetch();
    rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.fetch)
}
inline ::substrait::FetchRel* Rel::_internal_mutable_fetch() {
  if (!_internal_has_fetch()) {
    clear_rel_type();
    set_has_fetch();
    rel_type_.fetch_ = CreateMaybeMessage< ::substrait::FetchRel >(GetArenaForAllocation());
  }
  return rel_type_.fetch_;
}
inline ::substrait::FetchRel* Rel::mutable_fetch() {
  ::substrait::FetchRel* _msg = _internal_mutable_fetch();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.fetch)
  return _msg;
}

// .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
inline bool Rel::_internal_has_aggregate() const {
  return rel_type_case() == kAggregate;
}
inline bool Rel::has_aggregate() const {
  return _internal_has_aggregate();
}
inline void Rel::set_has_aggregate() {
  _oneof_case_[0] = kAggregate;
}
inline void Rel::clear_aggregate() {
  if (_internal_has_aggregate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.aggregate_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::AggregateRel* Rel::release_aggregate() {
  // @@protoc_insertion_point(field_release:substrait.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_rel_type();
      ::substrait::AggregateRel* temp = rel_type_.aggregate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::AggregateRel& Rel::_internal_aggregate() const {
  return _internal_has_aggregate()
      ? *rel_type_.aggregate_
      : reinterpret_cast< ::substrait::AggregateRel&>(::substrait::_AggregateRel_default_instance_);
}
inline const ::substrait::AggregateRel& Rel::aggregate() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.aggregate)
  return _internal_aggregate();
}
inline ::substrait::AggregateRel* Rel::unsafe_arena_release_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.aggregate)
  if (_internal_has_aggregate()) {
    clear_has_rel_type();
    ::substrait::AggregateRel* temp = rel_type_.aggregate_;
    rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_aggregate(::substrait::AggregateRel* aggregate) {
  clear_rel_type();
  if (aggregate) {
    set_has_aggregate();
    rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.aggregate)
}
inline ::substrait::AggregateRel* Rel::_internal_mutable_aggregate() {
  if (!_internal_has_aggregate()) {
    clear_rel_type();
    set_has_aggregate();
    rel_type_.aggregate_ = CreateMaybeMessage< ::substrait::AggregateRel >(GetArenaForAllocation());
  }
  return rel_type_.aggregate_;
}
inline ::substrait::AggregateRel* Rel::mutable_aggregate() {
  ::substrait::AggregateRel* _msg = _internal_mutable_aggregate();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.aggregate)
  return _msg;
}

// .substrait.SortRel sort = 5 [json_name = "sort"];
inline bool Rel::_internal_has_sort() const {
  return rel_type_case() == kSort;
}
inline bool Rel::has_sort() const {
  return _internal_has_sort();
}
inline void Rel::set_has_sort() {
  _oneof_case_[0] = kSort;
}
inline void Rel::clear_sort() {
  if (_internal_has_sort()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.sort_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::SortRel* Rel::release_sort() {
  // @@protoc_insertion_point(field_release:substrait.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_rel_type();
      ::substrait::SortRel* temp = rel_type_.sort_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::SortRel& Rel::_internal_sort() const {
  return _internal_has_sort()
      ? *rel_type_.sort_
      : reinterpret_cast< ::substrait::SortRel&>(::substrait::_SortRel_default_instance_);
}
inline const ::substrait::SortRel& Rel::sort() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.sort)
  return _internal_sort();
}
inline ::substrait::SortRel* Rel::unsafe_arena_release_sort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.sort)
  if (_internal_has_sort()) {
    clear_has_rel_type();
    ::substrait::SortRel* temp = rel_type_.sort_;
    rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_sort(::substrait::SortRel* sort) {
  clear_rel_type();
  if (sort) {
    set_has_sort();
    rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.sort)
}
inline ::substrait::SortRel* Rel::_internal_mutable_sort() {
  if (!_internal_has_sort()) {
    clear_rel_type();
    set_has_sort();
    rel_type_.sort_ = CreateMaybeMessage< ::substrait::SortRel >(GetArenaForAllocation());
  }
  return rel_type_.sort_;
}
inline ::substrait::SortRel* Rel::mutable_sort() {
  ::substrait::SortRel* _msg = _internal_mutable_sort();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.sort)
  return _msg;
}

// .substrait.JoinRel join = 6 [json_name = "join"];
inline bool Rel::_internal_has_join() const {
  return rel_type_case() == kJoin;
}
inline bool Rel::has_join() const {
  return _internal_has_join();
}
inline void Rel::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void Rel::clear_join() {
  if (_internal_has_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::JoinRel* Rel::release_join() {
  // @@protoc_insertion_point(field_release:substrait.Rel.join)
  if (_internal_has_join()) {
    clear_has_rel_type();
      ::substrait::JoinRel* temp = rel_type_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::JoinRel& Rel::_internal_join() const {
  return _internal_has_join()
      ? *rel_type_.join_
      : reinterpret_cast< ::substrait::JoinRel&>(::substrait::_JoinRel_default_instance_);
}
inline const ::substrait::JoinRel& Rel::join() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.join)
  return _internal_join();
}
inline ::substrait::JoinRel* Rel::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.join)
  if (_internal_has_join()) {
    clear_has_rel_type();
    ::substrait::JoinRel* temp = rel_type_.join_;
    rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_join(::substrait::JoinRel* join) {
  clear_rel_type();
  if (join) {
    set_has_join();
    rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.join)
}
inline ::substrait::JoinRel* Rel::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_rel_type();
    set_has_join();
    rel_type_.join_ = CreateMaybeMessage< ::substrait::JoinRel >(GetArenaForAllocation());
  }
  return rel_type_.join_;
}
inline ::substrait::JoinRel* Rel::mutable_join() {
  ::substrait::JoinRel* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.join)
  return _msg;
}

// .substrait.ProjectRel project = 7 [json_name = "project"];
inline bool Rel::_internal_has_project() const {
  return rel_type_case() == kProject;
}
inline bool Rel::has_project() const {
  return _internal_has_project();
}
inline void Rel::set_has_project() {
  _oneof_case_[0] = kProject;
}
inline void Rel::clear_project() {
  if (_internal_has_project()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.project_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ProjectRel* Rel::release_project() {
  // @@protoc_insertion_point(field_release:substrait.Rel.project)
  if (_internal_has_project()) {
    clear_has_rel_type();
      ::substrait::ProjectRel* temp = rel_type_.project_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ProjectRel& Rel::_internal_project() const {
  return _internal_has_project()
      ? *rel_type_.project_
      : reinterpret_cast< ::substrait::ProjectRel&>(::substrait::_ProjectRel_default_instance_);
}
inline const ::substrait::ProjectRel& Rel::project() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.project)
  return _internal_project();
}
inline ::substrait::ProjectRel* Rel::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.project)
  if (_internal_has_project()) {
    clear_has_rel_type();
    ::substrait::ProjectRel* temp = rel_type_.project_;
    rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_project(::substrait::ProjectRel* project) {
  clear_rel_type();
  if (project) {
    set_has_project();
    rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.project)
}
inline ::substrait::ProjectRel* Rel::_internal_mutable_project() {
  if (!_internal_has_project()) {
    clear_rel_type();
    set_has_project();
    rel_type_.project_ = CreateMaybeMessage< ::substrait::ProjectRel >(GetArenaForAllocation());
  }
  return rel_type_.project_;
}
inline ::substrait::ProjectRel* Rel::mutable_project() {
  ::substrait::ProjectRel* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.project)
  return _msg;
}

// .substrait.SetRel set = 8 [json_name = "set"];
inline bool Rel::_internal_has_set() const {
  return rel_type_case() == kSet;
}
inline bool Rel::has_set() const {
  return _internal_has_set();
}
inline void Rel::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void Rel::clear_set() {
  if (_internal_has_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.set_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::SetRel* Rel::release_set() {
  // @@protoc_insertion_point(field_release:substrait.Rel.set)
  if (_internal_has_set()) {
    clear_has_rel_type();
      ::substrait::SetRel* temp = rel_type_.set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::SetRel& Rel::_internal_set() const {
  return _internal_has_set()
      ? *rel_type_.set_
      : reinterpret_cast< ::substrait::SetRel&>(::substrait::_SetRel_default_instance_);
}
inline const ::substrait::SetRel& Rel::set() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.set)
  return _internal_set();
}
inline ::substrait::SetRel* Rel::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.set)
  if (_internal_has_set()) {
    clear_has_rel_type();
    ::substrait::SetRel* temp = rel_type_.set_;
    rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_set(::substrait::SetRel* set) {
  clear_rel_type();
  if (set) {
    set_has_set();
    rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.set)
}
inline ::substrait::SetRel* Rel::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_rel_type();
    set_has_set();
    rel_type_.set_ = CreateMaybeMessage< ::substrait::SetRel >(GetArenaForAllocation());
  }
  return rel_type_.set_;
}
inline ::substrait::SetRel* Rel::mutable_set() {
  ::substrait::SetRel* _msg = _internal_mutable_set();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.set)
  return _msg;
}

// .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
inline bool Rel::_internal_has_extension_single() const {
  return rel_type_case() == kExtensionSingle;
}
inline bool Rel::has_extension_single() const {
  return _internal_has_extension_single();
}
inline void Rel::set_has_extension_single() {
  _oneof_case_[0] = kExtensionSingle;
}
inline void Rel::clear_extension_single() {
  if (_internal_has_extension_single()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.extension_single_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionSingleRel* Rel::release_extension_single() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_single)
  if (_internal_has_extension_single()) {
    clear_has_rel_type();
      ::substrait::ExtensionSingleRel* temp = rel_type_.extension_single_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionSingleRel& Rel::_internal_extension_single() const {
  return _internal_has_extension_single()
      ? *rel_type_.extension_single_
      : reinterpret_cast< ::substrait::ExtensionSingleRel&>(::substrait::_ExtensionSingleRel_default_instance_);
}
inline const ::substrait::ExtensionSingleRel& Rel::extension_single() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_single)
  return _internal_extension_single();
}
inline ::substrait::ExtensionSingleRel* Rel::unsafe_arena_release_extension_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_single)
  if (_internal_has_extension_single()) {
    clear_has_rel_type();
    ::substrait::ExtensionSingleRel* temp = rel_type_.extension_single_;
    rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single) {
  clear_rel_type();
  if (extension_single) {
    set_has_extension_single();
    rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_single)
}
inline ::substrait::ExtensionSingleRel* Rel::_internal_mutable_extension_single() {
  if (!_internal_has_extension_single()) {
    clear_rel_type();
    set_has_extension_single();
    rel_type_.extension_single_ = CreateMaybeMessage< ::substrait::ExtensionSingleRel >(GetArenaForAllocation());
  }
  return rel_type_.extension_single_;
}
inline ::substrait::ExtensionSingleRel* Rel::mutable_extension_single() {
  ::substrait::ExtensionSingleRel* _msg = _internal_mutable_extension_single();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_single)
  return _msg;
}

// .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
inline bool Rel::_internal_has_extension_multi() const {
  return rel_type_case() == kExtensionMulti;
}
inline bool Rel::has_extension_multi() const {
  return _internal_has_extension_multi();
}
inline void Rel::set_has_extension_multi() {
  _oneof_case_[0] = kExtensionMulti;
}
inline void Rel::clear_extension_multi() {
  if (_internal_has_extension_multi()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.extension_multi_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionMultiRel* Rel::release_extension_multi() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_multi)
  if (_internal_has_extension_multi()) {
    clear_has_rel_type();
      ::substrait::ExtensionMultiRel* temp = rel_type_.extension_multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionMultiRel& Rel::_internal_extension_multi() const {
  return _internal_has_extension_multi()
      ? *rel_type_.extension_multi_
      : reinterpret_cast< ::substrait::ExtensionMultiRel&>(::substrait::_ExtensionMultiRel_default_instance_);
}
inline const ::substrait::ExtensionMultiRel& Rel::extension_multi() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_multi)
  return _internal_extension_multi();
}
inline ::substrait::ExtensionMultiRel* Rel::unsafe_arena_release_extension_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_multi)
  if (_internal_has_extension_multi()) {
    clear_has_rel_type();
    ::substrait::ExtensionMultiRel* temp = rel_type_.extension_multi_;
    rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi) {
  clear_rel_type();
  if (extension_multi) {
    set_has_extension_multi();
    rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_multi)
}
inline ::substrait::ExtensionMultiRel* Rel::_internal_mutable_extension_multi() {
  if (!_internal_has_extension_multi()) {
    clear_rel_type();
    set_has_extension_multi();
    rel_type_.extension_multi_ = CreateMaybeMessage< ::substrait::ExtensionMultiRel >(GetArenaForAllocation());
  }
  return rel_type_.extension_multi_;
}
inline ::substrait::ExtensionMultiRel* Rel::mutable_extension_multi() {
  ::substrait::ExtensionMultiRel* _msg = _internal_mutable_extension_multi();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_multi)
  return _msg;
}

// .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
inline bool Rel::_internal_has_extension_leaf() const {
  return rel_type_case() == kExtensionLeaf;
}
inline bool Rel::has_extension_leaf() const {
  return _internal_has_extension_leaf();
}
inline void Rel::set_has_extension_leaf() {
  _oneof_case_[0] = kExtensionLeaf;
}
inline void Rel::clear_extension_leaf() {
  if (_internal_has_extension_leaf()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.extension_leaf_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionLeafRel* Rel::release_extension_leaf() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_leaf)
  if (_internal_has_extension_leaf()) {
    clear_has_rel_type();
      ::substrait::ExtensionLeafRel* temp = rel_type_.extension_leaf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionLeafRel& Rel::_internal_extension_leaf() const {
  return _internal_has_extension_leaf()
      ? *rel_type_.extension_leaf_
      : reinterpret_cast< ::substrait::ExtensionLeafRel&>(::substrait::_ExtensionLeafRel_default_instance_);
}
inline const ::substrait::ExtensionLeafRel& Rel::extension_leaf() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_leaf)
  return _internal_extension_leaf();
}
inline ::substrait::ExtensionLeafRel* Rel::unsafe_arena_release_extension_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_leaf)
  if (_internal_has_extension_leaf()) {
    clear_has_rel_type();
    ::substrait::ExtensionLeafRel* temp = rel_type_.extension_leaf_;
    rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf) {
  clear_rel_type();
  if (extension_leaf) {
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_leaf)
}
inline ::substrait::ExtensionLeafRel* Rel::_internal_mutable_extension_leaf() {
  if (!_internal_has_extension_leaf()) {
    clear_rel_type();
    set_has_extension_leaf();
    rel_type_.extension_leaf_ = CreateMaybeMessage< ::substrait::ExtensionLeafRel >(GetArenaForAllocation());
  }
  return rel_type_.extension_leaf_;
}
inline ::substrait::ExtensionLeafRel* Rel::mutable_extension_leaf() {
  ::substrait::ExtensionLeafRel* _msg = _internal_mutable_extension_leaf();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_leaf)
  return _msg;
}

// .substrait.CrossRel cross = 12 [json_name = "cross"];
inline bool Rel::_internal_has_cross() const {
  return rel_type_case() == kCross;
}
inline bool Rel::has_cross() const {
  return _internal_has_cross();
}
inline void Rel::set_has_cross() {
  _oneof_case_[0] = kCross;
}
inline void Rel::clear_cross() {
  if (_internal_has_cross()) {
    if (GetArenaForAllocation() == nullptr) {
      delete rel_type_.cross_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::CrossRel* Rel::release_cross() {
  // @@protoc_insertion_point(field_release:substrait.Rel.cross)
  if (_internal_has_cross()) {
    clear_has_rel_type();
      ::substrait::CrossRel* temp = rel_type_.cross_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::CrossRel& Rel::_internal_cross() const {
  return _internal_has_cross()
      ? *rel_type_.cross_
      : reinterpret_cast< ::substrait::CrossRel&>(::substrait::_CrossRel_default_instance_);
}
inline const ::substrait::CrossRel& Rel::cross() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.cross)
  return _internal_cross();
}
inline ::substrait::CrossRel* Rel::unsafe_arena_release_cross() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.cross)
  if (_internal_has_cross()) {
    clear_has_rel_type();
    ::substrait::CrossRel* temp = rel_type_.cross_;
    rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_cross(::substrait::CrossRel* cross) {
  clear_rel_type();
  if (cross) {
    set_has_cross();
    rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.cross)
}
inline ::substrait::CrossRel* Rel::_internal_mutable_cross() {
  if (!_internal_has_cross()) {
    clear_rel_type();
    set_has_cross();
    rel_type_.cross_ = CreateMaybeMessage< ::substrait::CrossRel >(GetArenaForAllocation());
  }
  return rel_type_.cross_;
}
inline ::substrait::CrossRel* Rel::mutable_cross() {
  ::substrait::CrossRel* _msg = _internal_mutable_cross();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.cross)
  return _msg;
}

inline bool Rel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void Rel::clear_has_rel_type() {
  _oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline Rel::RelTypeCase Rel::rel_type_case() const {
  return Rel::RelTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat>() {
  return ::substrait::ReadRel_LocalFiles_FileOrFiles_FileFormat_descriptor();
}
template <> struct is_proto_enum< ::substrait::JoinRel_JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::JoinRel_JoinType>() {
  return ::substrait::JoinRel_JoinType_descriptor();
}
template <> struct is_proto_enum< ::substrait::SetRel_SetOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::substrait::SetRel_SetOp>() {
  return ::substrait::SetRel_SetOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_2frelations_2eproto

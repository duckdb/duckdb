[
    {
        "name": "^@",
        "parameters": "string,search_string",
        "description": "Returns `true` if `string` begins with `search_string`.",
        "example": "starts_with('abc', 'a')",
        "categories": ["string"],
        "type": "scalar_function",
        "struct": "StartsWithOperatorFun",
        "aliases": ["starts_with"]
    },
    {
        "name": "ascii",
        "parameters": "string",
        "description": "Returns an integer that represents the Unicode code point of the first character of the `string`.",
        "example": "ascii('Ω')",
        "categories": ["string"],
        "type": "scalar_function",
        "struct": "ASCIIFun"
    },
    {
        "name": "bar",
        "parameters": "x,min,max,width",
        "description": "Draws a band whose width is proportional to (`x - min`) and equal to `width` characters when `x` = `max`. `width` defaults to 80.",
        "example": "bar(5, 0, 20, 10)",
        "categories": ["string"],
        "type": "scalar_function_set"
    },
    {
        "name": "bin",
        "variants": [
            {
                "parameters": [{"name": "string", "type": "VARCHAR"}],
                "description": "Converts the `string` to binary representation.",
                "example": "bin('Aa')",
                "categories": ["string"]
            },
            {
                "parameters": [{"name": "value", "type": "ANY"}],
                "description": "Converts the `value` to binary representation.",
                "example": "bin(42)",
                "categories": ["numeric"]
            }
        ],
        "type": "scalar_function_set",
        "aliases": ["to_binary"]
    },
    {
        "name": "chr",
        "parameters": "code_point",
        "description": "Returns a character which is corresponding the ASCII code value or Unicode code point.",
        "example": "chr(65)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "damerau_levenshtein",
        "parameters": "s1,s2",
        "description": "Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Characters of different cases (e.g., `a` and `A`) are considered different.",
        "example": "damerau_levenshtein('duckdb', 'udckbd')",
        "categories": ["text_similarity"],
        "type": "scalar_function"
    },
    {
        "name": "format",
        "parameters": "format,parameters...",
        "description": "Formats a string using the fmt syntax.",
        "example": "format('Benchmark \"{}\" took {} seconds', 'CSV', 42)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "format_bytes",
        "parameters": "integer",
        "description": "Converts `integer` to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.).",
        "example": "format_bytes(16_000)",
        "categories": ["string", "numeric"],
        "type": "scalar_function",
        "aliases": ["formatReadableSize"]
    },
    {
        "name": "formatReadableDecimalSize",
        "parameters": "integer",
        "description": "Converts `integer` to a human-readable representation using units based on powers of 10 (KB, MB, GB, etc.).",
        "example": "formatReadableDecimalSize(16_000)",
        "categories": ["string", "numeric"],
        "type": "scalar_function"
    },
    {
        "name": "hamming",
        "parameters": "s1,s2",
        "description": "The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., `a` and `A`) are considered different.",
        "example": "hamming('duck', 'luck')",
        "categories": ["text_similarity"],
        "type": "scalar_function",
        "aliases": ["mismatches"]
    },
    {
        "name": "hex",
        "variants": [
            {
                "parameters": [
                    {"name": "string", "type": "VARCHAR"}
                ],
                "description": "Converts the `string` to hexadecimal representation.",
                "example": "hex('Hello')",
                "categories": ["string"]
            },
            {
                "parameters": [
                    {"name": "blob", "type": "BLOB"}
                ],
                "description": "Converts `blob` to `VARCHAR` using hexadecimal encoding.",
                "example": "hex('\\xAA\\xBB'::BLOB)",
                "categories": ["blob"]
            },
            {
                "parameters": [
                    {"name": "value", "type": "ANY"}
                ],
                "description": "Converts the `value` to `VARCHAR` using hexadecimal representation.",
                "example": "hex(42)",
                "categories": ["numeric"]
            }
        ],
        "type": "scalar_function_set",
        "aliases": ["to_hex"]
    },
    {
        "name": "instr",
        "parameters": "string,search_string",
        "description": "Returns location of first occurrence of `search_string` in `string`, counting from 1. Returns 0 if no match found.",
        "examples": ["instr('test test', 'es')", "position('b' IN 'abc')"],
        "categories": ["string"],
        "type": "scalar_function",
        "aliases": ["strpos", "position"]
    },
    {
        "name": "jaccard",
        "parameters": "s1,s2",
        "description": "The Jaccard similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1.",
        "example": "jaccard('duck', 'luck')",
        "categories": ["text_similarity"],
        "type": "scalar_function"
    },
    {
        "name": "jaro_similarity",
        "parameters": "s1,s2,score_cutoff",
        "description": "The Jaro similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.",
        "example": "jaro_similarity('duck', 'duckdb')",
        "categories": ["text_similarity"],
        "type": "scalar_function_set"
    },
    {
        "name": "jaro_winkler_similarity",
        "parameters": "s1,s2,score_cutoff",
        "description": "The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., `a` and `A`) are considered different. Returns a number between 0 and 1. For similarity < `score_cutoff`, 0 is returned instead. `score_cutoff` defaults to 0.",
        "example": "jaro_winkler_similarity('duck', 'duckdb')",
        "categories": ["text_similarity"],
        "type": "scalar_function_set"
    },
    {
        "name": "left",
        "parameters": "string,count",
        "description": "Extracts the left-most count characters.",
        "example": "left('Hello\uD83E\uDD86', 2)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "left_grapheme",
        "parameters": "string,count",
        "description": "Extracts the left-most count grapheme clusters.",
        "example": "left_grapheme('\uD83E\uDD26\uD83C\uDFFC\u200D♂️\uD83E\uDD26\uD83C\uDFFD\u200D♀️', 1)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "levenshtein",
        "parameters": "s1,s2",
        "description": "The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., `a` and `A`) are considered different.",
        "example": "levenshtein('duck', 'db')",
        "categories": ["text_similarity"],
        "type": "scalar_function",
        "aliases": ["editdist3"]
    },
    {
        "name": "lpad",
        "parameters": "string,count,character",
        "description": "Pads the `string` with the `character` on the left until it has `count` characters. Truncates the `string` on the right if it has more than `count` characters.",
        "example": "lpad('hello', 8, '>')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "ltrim",
        "parameters": "string,characters",
        "description": "Removes any occurrences of any of the `characters` from the left side of the `string`. `characters` defaults to `space`.",
        "examples": [
            "ltrim('    test  ')",
            "ltrim('>>>>test<<', '><')"
        ],
        "categories": ["string"],
        "type": "scalar_function_set"
    },
    {
        "name": "parse_dirname",
        "parameters": "path,separator",
        "description": "Returns the top-level directory name from the given `path`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
        "example": "parse_dirname('path/to/file.csv', 'system')",
        "categories": ["string"],
        "type": "scalar_function_set",
        "struct": "ParseDirnameFun"
    },
    {
        "name": "parse_dirpath",
        "parameters": "path,separator",
        "description": "Returns the head of the `path` (the pathname until the last slash) similarly to Python's `os.path.dirname`. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
        "example": "parse_dirpath('path/to/file.csv', 'forward_slash')",
        "categories": ["string"],
        "type": "scalar_function_set",
        "struct": "ParseDirpathFun"
    },
    {
        "name": "parse_filename",
        "parameters": "string,trim_extension,separator",
        "description": "Returns the last component of the `path` similarly to Python's `os.path.basename` function. If `trim_extension` is `true`, the file extension will be removed (defaults to `false`). `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
        "example": "parse_filename('path/to/file.csv', true, 'forward_slash')",
        "categories": ["string"],
        "type": "scalar_function_set",
        "struct": "ParseFilenameFun"
    },
    {
        "name": "parse_path",
        "parameters": "path,separator",
        "description": "Returns a list of the components (directories and filename) in the `path` similarly to Python's `pathlib.parts` function. `separator` options: `system`, `both_slash` (default), `forward_slash`, `backslash`.",
        "example": "parse_path('path/to/file.csv', 'system')",
        "categories": ["string"],
        "type": "scalar_function_set",
        "struct": "ParsePathFun"
    },
    {
        "name": "printf",
        "parameters": "format,parameters...",
        "description": "Formats a `string` using printf syntax.",
        "example": "printf('Benchmark \"%s\" took %d seconds', 'CSV', 42)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "repeat",
        "variants": [
            {
                "parameters": [
                    {"name": "string", "type": "VARCHAR"},
                    {"name": "count", "type": "BIGINT"}
                ],
                "description": "Repeats the `string` `count` number of times.",
                "example": "repeat('A', 5)",
                "categories": ["string"]
            },
            {
                "parameters": [
                    {"name": "list", "type": "ANY[]"},
                    {"name": "count", "type": "BIGINT"}
                ],
                "description": "Repeats the `list` `count` number of times.",
                "example": "repeat([1, 2, 3], 5)",
                "categories": ["list"]
            },
            {
                "parameters": [
                    {"name": "blob", "type": "BLOB"},
                    {"name": "count", "type": "BIGINT"}
                ],
                "description": "Repeats the `blob` `count` number of times.",
                "example": "repeat('\\xAA\\xBB'::BLOB, 5)",
                "categories": ["blob"]
            }
        ],
        "type": "scalar_function_set"
    },
    {
        "name": "replace",
        "parameters": "string,source,target",
        "description": "Replaces any occurrences of the `source` with `target` in `string`.",
        "example": "replace('hello', 'l', '-')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "reverse",
        "parameters": "string",
        "description": "Reverses the `string`.",
        "example": "reverse('hello')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "right",
        "parameters": "string,count",
        "description": "Extract the right-most `count` characters.",
        "example": "right('Hello\uD83E\uDD86', 3)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "right_grapheme",
        "parameters": "string,count",
        "description": "Extracts the right-most `count` grapheme clusters.",
        "example": "right_grapheme('\uD83E\uDD26\uD83C\uDFFC\u200D♂️\uD83E\uDD26\uD83C\uDFFD\u200D♀️', 1)",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "rpad",
        "parameters": "string,count,character",
        "description": "Pads the `string` with the `character` on the right until it has `count` characters. Truncates the `string` on the right if it has more than `count` characters.",
        "example": "rpad('hello', 10, '<')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "rtrim",
        "parameters": "string,characters",
        "description": "Removes any occurrences of any of the `characters` from the right side of the `string`. `characters` defaults to `space`.",
        "examples": [
            "rtrim('    test  ')",
            "rtrim('>>>>test<<', '><')"
        ],
        "categories": ["string"],
        "type": "scalar_function_set"
    },
    {
        "name": "translate",
        "parameters": "string,from,to",
        "description": "Replaces each character in `string` that matches a character in the `from` set with the corresponding character in the `to` set. If `from` is longer than `to`, occurrences of the extra characters in `from` are deleted.",
        "example": "translate('12345', '143', 'ax')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "trim",
        "parameters": "string,characters",
        "description": "Removes any occurrences of any of the `characters` from either side of the `string`. `characters` defaults to `space`.",
        "examples": [
            "trim('    test  ')",
            "trim('>>>>test<<', '><')"
        ],
        "categories": ["string"],
        "type": "scalar_function_set"
    },
    {
        "name": "unbin",
        "parameters": "value",
        "description": "Converts a `value` from binary representation to a blob.",
        "example": "unbin('0110')",
        "categories": ["string", "blob"],
        "type": "scalar_function",
        "aliases": ["from_binary"]
    },
    {
        "name": "unhex",
        "parameters": "value",
        "description": "Converts a `value` from hexadecimal representation to a blob.",
        "example": "unhex('2A')",
        "categories": ["string", "blob"],
        "type": "scalar_function",
        "aliases": ["from_hex"]
    },
    {
        "name": "unicode",
        "parameters": "string",
        "description": "Returns an `INTEGER` representing the `unicode` codepoint of the first character in the `string`.",
        "example": "[unicode('âbcd'), unicode('â'), unicode(''), unicode(NULL)]",
        "categories": ["string"],
        "type": "scalar_function",
        "aliases": ["ord"]
    },
    {
        "name": "to_base",
        "parameters": "number,radix,min_length",
        "description": "Converts `number` to a string in the given base `radix`, optionally padding with leading zeros to `min_length`.",
        "example": "to_base(42, 16, 5)",
        "categories": ["string", "numeric"],
        "type": "scalar_function_set"
    },
    {
        "name": "url_encode",
        "parameters": "string",
        "description": "Encodes a URL to a representation using Percent-Encoding.",
        "example": "url_encode('this string has/ special+ characters>')",
        "categories": ["string"],
        "type": "scalar_function"
    },
    {
        "name": "url_decode",
        "parameters": "string",
        "description": "Decodes a URL from a representation using Percent-Encoding.",
        "example": "url_decode('https%3A%2F%2Fduckdb.org%2Fwhy_duckdb%23portable')",
        "categories": ["string"],
        "type": "scalar_function"
    }
]
